{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3576e23b-f519-4287-9f46-21936321cf09",
        "name": "Clear Cache",
        "item": [
          {
            "id": "78485bc4-37ce-4ac6-9114-e319afc14f8a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "28a48392-707e-4bbe-a260-734acfefc0e1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7b8eecda-bdda-4f5c-be5f-5ae2ffa152a2"
                }
              }
            ]
          },
          {
            "id": "8c3af0cc-0001-4fd9-94ff-47be21d95d93",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e0ec172-00df-4782-be09-73be12d9c78d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6f0dbdb2-52a3-485f-9f00-9dd0b763f2d2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e769d346-7457-4b96-9e27-37169b448c93",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d3bc691c-6606-479c-a89e-0c6ec15e1ca4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5624f17f-f348-4db6-8eb2-b1f70017440a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4194553a-04d8-4386-b15c-6da07a417cc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "507f6e1c-0fb3-4f2b-b86b-8cb220607e4f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac2a5f02-d4cc-466a-83c3-6363a9eccedc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "104db467-7909-40d4-aae8-ac12efdda681"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3fe0bc3-c3d8-4592-a163-41b51b49ac95",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71751b75-3d31-42ed-b78c-d2083d249df4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa328134-ca8a-4d72-ae2c-d52f63b4b036",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "303b96b2-613f-4242-ada3-93262a320059"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5262a24a-1770-4b1f-ba11-a1d2fbf8e220",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95f4ffef-8000-43b2-b082-e89f31d6c91b"
            }
          }
        ]
      },
      {
        "id": "3ccfcb4f-de6f-4dc2-8f90-3c48be0fbaa3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e1a613f3-d5a2-4c45-8783-ef462ad428e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27459a2f-1a21-4780-87e9-ffa1cd8337ad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b02b63b9-705f-4dd4-855c-b88b95302ad6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3f1cdd-123d-4b68-9764-be5b836dd767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d65bf6e-0dd2-4130-814f-b43d2fde4033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fa382f-bce6-4993-887a-3ea460b3892f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59774885-43a0-494a-af8e-8f7fd3b6dede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19f2b59c-640b-4260-bb89-9f867ab879f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e27c071-6967-40f2-914c-08a3fad34f5c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eeb2eb1-1cda-4778-a810-aca32247693a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bebc73ee-43e2-4988-bff5-e66c21f4e516"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7bae8799-084c-40af-8110-98bec6f9bf9d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc788c01-4121-4363-8312-4fd121ce00f6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c189da-5581-4078-bb51-7836f7102189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "079b0d3b-0d64-43c6-b483-6192c8826450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc99257-6487-4847-ad03-183ffb3ce386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16cbdbb4-413e-43a4-be04-8feffe41d6c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6c5e0633-5cba-4ba9-b7ea-decab53efb9b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8e8b9ad9-8f16-4c11-b8b5-b255478e7ffe",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "657bb8c9-ab8a-441f-a0fe-8e7fd4f082c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5ce31170-4109-4a26-bc2c-2df476053185"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6954f9d-78f1-482f-8533-d4fb360b9e4b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "060454a2-5259-4f60-bad3-fba3d970d6b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54f1ab33-bc0d-4c8a-9f93-87f2dd2ac647",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52501d02-b4eb-43af-949c-3f98f261f6e9"
            }
          }
        ]
      },
      {
        "id": "337ca3ba-e65b-4c79-886b-5db277ac0d4a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "97d0f8de-2dad-42a0-846b-668afbcaa24d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3b45d41e-31fc-44e5-878c-342782fa77c3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2375c312-a0ee-4026-8652-a361dbce3f25",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcd824b-0e26-4d05-8585-02b874ca61ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36796529-cd07-4c40-b3d7-4f346a319eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e10f8c-ddb9-4a95-b6d0-25175d678b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8d6cc31-72b4-463e-99be-08fb5678c7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bfdf38-aba8-4076-94d3-fedd4cfc892d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6812560d-74b3-4cc1-ab17-4cfaec47f0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a852531-4250-4d70-aca7-a0f98ad6c429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af875c1-d49f-4d91-96ae-5f078c944c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adf3b008-f082-455b-bf6a-d848b60fc312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2083b65f-0dfe-47c7-86f7-5686894dd1cc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08403d9-83a5-4f04-a365-8014ab8c46d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22819e10-154c-4186-9b1f-ec074c2ec99a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5864bd-cc13-49c9-97d6-09a146084a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "039542e3-cf22-4e0a-a29c-5c969a3f37a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2386bd50-0b13-4619-b270-91e5623228cf",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf62b07-4b4e-413a-b5cb-31531032ddc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b4f0f1-1703-480e-88b1-1397ffc7a405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ff7ef7-3e40-426a-a81a-1df3f827e6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61b46c4d-00da-4c40-932a-ff012e51a56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb519d4b-f477-492f-a26b-e0d5cc4386b9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360acb62-9504-4532-9e47-400f97ad7e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c4181dd-99da-44ad-84d5-8cd8e62160e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0a5696-7a2c-422e-825d-f176a25035a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc488f3e-72b6-4fb7-b915-19ab48370011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074ab676-7cd2-43d0-a5c6-de35d24b3477",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c257c9db-42db-4a3f-bb7c-228bcd509487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25bd0231-b202-48e2-92a7-b55adcd8ad2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c19c3b-086a-44bc-b05d-5cee69b4903f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c5a77cf-0531-47fb-ad93-dded668d9b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a73ca83-3178-473b-b69b-ebb41af9bfc2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05406afe-c3a0-4c3e-82da-6bc0e7688b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ebe599-d469-44d9-9f92-3afdc6e21f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad615dde-760f-4440-939a-48a439371aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "943ce037-815e-4e25-aa43-6ce6ded719ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7c7bf6-65e4-4a27-a7e4-3fc28bf4cc33",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e50cda-6b25-480b-be79-c6b791138cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ceeff99-dca2-4cd9-9c7e-b158bc3233db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b56946-71e3-490a-a59d-5e23b2b8437a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bfd724e-5978-4da6-a768-59ca4823163f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3329af7-5fa1-4411-bb56-ec19253ce4e4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a614d72a-fef6-4a3c-8a56-f324b8cedece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e1ca42-4969-49ee-a31b-3254815e7b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8f805d-5918-42e7-a014-a24fd6d39804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16057223-eb0e-4dc9-9cb8-43cadada0045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babe2bf2-dd2b-4d46-a69d-bb2c79106b4a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e47a56e-fbde-495e-9b71-019ba1834c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ef1001-f7a9-453f-914b-591342d7c227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63edd0c-68b3-416f-bcc9-f1c432778ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7818344-45de-4e21-8b19-0675031fe0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3126d91e-ed79-4599-92fe-aca9151158e5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83f1f6a-5f6d-42d9-b4a2-fa1dc57c1923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "999c412b-370e-4d47-8354-172d28fd8cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c64559-ae39-46e7-8748-d3784f996078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbe32992-0f4e-4e28-9989-680f0f72c731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce923553-f51c-4654-a819-9c1d8fac19a6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0afeaf1-6c3a-4ae1-abc8-e66916696d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da459704-8bc8-41f1-9d5b-3522ef1afeee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebd0ff4-75c4-4de9-b042-1f21d265d685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a92131f-2c86-4764-a920-e740ac464ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb0e702-d791-4ea9-a5d0-4763a8db1b2f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9e1a25-e61f-4f78-93df-fd9e6280fb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a14fbe-0631-41f8-b961-8eb59e419e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f713f6-854c-412b-bd9f-ef3fac388579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bd3d33a-8315-4295-9ecf-b84e6660d9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0f4f32-3cb1-4db7-968c-fc70f1a20417",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00356a3e-25a1-4794-bd31-845c9c740759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaba2d5c-623e-42b2-96f3-17204bc4633b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929829b7-269a-471a-b79f-bdbbc1e8b815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c646cb93-4298-4a08-8126-01c4db9097f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ed4c8e-c796-45f6-8068-d2fc36ce499c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ce890a-1be7-4bbd-bb4f-2b015d4bdef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84fbe50-0659-4e59-b2e5-c686e9f15229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8275f793-a56c-43d8-9918-32f52aa81633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1724a2ea-c1d4-486a-b64a-57c1eaa9c4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde21870-d8c4-4687-ba14-c43a52ea252b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad5b60a-32d9-4db8-b784-259967ac5452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddca997d-9a6f-494d-be9f-e4f8fc8f03b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a839e58c-2b08-47a3-a56a-d48582b423a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bef00d2-085f-4365-9d3a-5a34141953c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d747caaa-5902-450a-8835-90148f82c7c4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58050d4a-0962-4554-b634-d09ecf510f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da97142f-bd5d-4e3d-b29f-3e4c110a6e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca69adef-a4ad-4b58-86e2-4eec776e472a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c08f70d3-db52-401b-a6a9-d2b6765a2fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92151cc4-9dfd-4a9c-90a2-ea921eb1112b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5d37bc-4bb4-4158-b76e-b0f0a1ac0345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52f5ebe-530f-4bd0-93c4-c8fa257fb060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfe470a-b92c-4fd5-8ad4-29547676e292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0da00d95-6645-4193-8186-edb4b7856790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b59bfb7-f5f8-45a8-9809-f6186a55c5e0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7204756e-6760-4ba3-8a10-d9adfea8c4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c63eedc-4151-4232-b941-69272f28e263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076f2b2d-d5b4-4632-bf9d-962e8d4676c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f627cacb-db8e-423e-ab34-4ab421500b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6328d39d-d92e-4c1d-a1da-12a25eb535e5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f97ce0-0722-4634-802d-bad16424faba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30caefcf-acc4-4043-9655-9aea93f945e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2b9051-7b1e-4d0e-8a09-1a039e477b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5808d30b-0889-48de-bcb0-64adc9c2ba41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580ee564-5d15-4d43-99b1-0ebacbde16ec",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab93be1-0c16-4ed1-aec9-e1ac5bd5a0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f19439-98ff-40b5-84e1-fb53ba322a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7bdc59-8395-4962-8f1e-97253f62238c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6df0a99d-2586-4719-ac19-99314db330ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8bd35c-8f95-4ce3-a191-a8d00cd808a5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641f4e1a-be2e-442d-bc80-c814bc70a2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17be8f4-fb9d-4282-949b-f8ce56845f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fe4dab-f5e0-435d-a0ec-3a620e7d6e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "185abfad-b007-4ad8-a0ba-5caa24bd162d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da162bc-4f6f-491c-9e30-8d89025e1514",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2aaa0d0-bb67-4b2d-b77a-7f18a5cf7f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332a600e-9e3c-480a-8336-e1bbb3cf13b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ee1a01-652c-4a0a-a855-7a9ceb7724bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a98664e-3e65-4b6f-bf7a-fce6af9a6633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed97010f-828c-4f40-8cb4-bce4295d745e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31133af-59b7-4bde-ae21-f5bee0774013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae49212-298d-4c01-9661-a07ecc27c1ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba385054-711b-4e9d-a7d6-52e295c539fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b38dad-795c-484f-96f4-2f747db1e6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f212a3d3-5153-4fd1-8d2f-3e7a035362de",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1993df4a-485b-4a9a-a3b9-d2b2736089e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ab430b-0850-4086-9481-61fec3ed26b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2dbe9c-892e-4621-89ee-8dae1aeb2bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d561609-1681-44c0-b214-e0bc443bc04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842f5ffb-ff2f-4917-9514-4603789c5d7e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb18b70a-04dc-426d-a91d-ea1eb00d81fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1242cfba-b44e-46fe-9b23-70a76ae43f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3332ad6a-9772-45ed-bfaf-223aff2bb1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "397e0335-f6e8-44c3-98d9-ab04232709c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25aa2d15-f179-47f8-a758-08be388f743a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2070f6-cbb9-4837-8fb6-e4b8cb366a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2b4ad1-b4a1-4858-8c61-0d3727da8894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff13bdf-74d6-4d6a-8c00-102fba749f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c748dd3-7a00-4764-abf9-231be48b3b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15e0c85-36ee-46e0-914d-d749644323d8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc16929-2d5b-4b43-a798-f0d60289200a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99e0e41-b948-4573-ad68-5b4e42d1efa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86ff269-0e27-4ee1-8ceb-07ede6cfda01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "59d5dab3-42eb-4623-aeb9-86283779ea3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e1e34a-3dcc-4db7-ad1c-8a462743375a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccce59a-a69f-4df0-9255-79e9b65f5c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2834c60a-b1d4-4567-9766-ebe4fbddd2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3c9eed-bb86-496f-9621-d43147d16e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ffb8cb5-00fd-4999-b5aa-c0b09a66b2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adc4ea0-214d-4afe-b7d9-b5311d4e0234",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7913a151-9bf2-4a92-bdee-8d6acb0d6be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6012456-d5a6-4610-a90e-5fccc546d867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad21a49d-68fb-438b-9e4c-363fb43371e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1aefab8-b54f-4383-9406-dd7bb2cac501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154e67f1-b1f8-4714-8e05-283befb6d5f3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49932f6-2455-4d33-9551-82e9bd4d6b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c41c888-5d67-4e53-b68b-0342695de931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da0f1b0-4a6c-4222-a482-fa5cc92dd9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e26359-0396-423c-a658-cc89f17e5dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4589a599-0219-4f6b-a6f8-f6ee173b37af",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca04e1e-dc7d-4f1b-afd8-c49b925045c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d2cc3a-cc5e-40af-9abe-dd7e40df61c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b71735-3955-48b8-b979-53f9a9df5056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef78ee2-a70f-48d3-9ae5-229156e16118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035021ac-737f-42c2-99d5-58c8350a29b6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573f7f13-1d2c-4e3f-ae5b-50610989aed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184f41db-9e5d-4344-914e-9655fefde863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93881afa-c766-46bb-be7d-d355f2be9ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5dcc97e-80f0-4752-90d5-7b2fabd6e231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a1a68f-fb3d-4bce-a2e4-8ba8011c9380",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33ca6df-5b11-4de2-ba20-da9e18a43bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad78650a-85b7-4a6b-b0f6-98f2241c203a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9879519e-4817-49b8-924f-6490cb94da59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee6d933-3f32-4698-8a2a-1d54909eaa48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02ece6d-d9dd-4709-a299-c65455f9fb58",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fb06b7-97cd-4cc3-bb51-b74f591dfa4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13267f8d-02ac-48f1-b72c-9978fd7919e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9210c1f2-f18f-49a1-a20b-8da947c746fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7116a106-c160-409b-80d2-4c01ea8aaa29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a20836e-487a-4ca0-b395-272c089ea19c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d47868c-7adf-4366-814c-1717fbf75043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f09ced06-4066-4fe0-82fb-f91a01dcfc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58590660-daa5-4efa-b00f-06f2ae6d17e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6522d1-4c28-4d72-9448-d8015fdbd2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a8df30-6e77-4556-b9c6-7c550593de79",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0691dcc1-a203-49c4-b62d-2224bd6765f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a42ec2-baa8-4c2c-8b34-db3012194743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4231ad0f-a655-43cd-b347-79a687fe14a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1d1885-3829-4e52-9419-11554d827207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d758598-5a47-44a0-9bb0-bdcab56ba495",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1548fa7-deeb-4e8b-b38d-842d4e02d4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d332c2f5-ed74-472a-b659-5906bb579112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ccd55ae-62dd-4b97-b26a-ff42f1a61a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ca4409-353c-4669-87e0-c9273560d7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce31272b-3ed4-44a7-92a9-b674c9e6a7fa",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21adf881-14b0-4c52-b62a-3f582016ca62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d16c708-2ca9-4694-a7d1-e2a793df9885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239b2e0f-b133-4950-a6c5-94645889ac7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c2de1d-b013-467c-bf29-1fe1049e4470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6233d2-2e90-4eb5-9cd9-9cba645e8f2a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ea3110-3e69-4a24-87f6-433d659b1d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f38139-c745-467b-9862-2696d55cab07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e37627-4768-487a-9d7f-fa8e6b7ca117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "55cfcf0f-9a0d-4543-b3c8-63efb5ae74e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7109fd-e868-4356-ab4c-dec2537d5c05",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d5a731-b3d2-4969-94ad-9621f9254161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d55252-3234-49f3-ba03-0ddaa9529848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d594ffc-befc-47f1-b022-26f9a6255e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fbd16b3-65d6-4c21-bca4-f544e7aa174b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039ded05-611c-42a1-99a3-e59bc865fdab",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b524bf-4df4-47e6-9a10-7fa8220718da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bb2620-d0d5-4412-be4e-6da7374f0e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95ae8ff-b7c9-42ac-bdf0-f290150ba796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1f71883a-aef5-422e-91c3-26bed38f1d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727627a0-bae4-4d80-be0a-7a50817d56d6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd83b08-4ed4-4ee7-a0c1-8eabe785965b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c376b9a-9eaa-468d-94a1-8bc046086eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b8a061-01ec-49df-8a5e-b6a587ba5c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd8f10a-b6e1-4e4c-b9cc-0160e2f60f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2bdedc-0e87-418d-b544-258861dbf660",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671b55c2-b4d2-42e6-950c-f3814cd51f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d711bd-91cb-4dab-bf96-effe5ade1895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f9361f-93b9-44c1-8c65-919fa4b81ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b998ae88-64d4-4ba8-9a6a-8ade695fb4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a00482c-553a-45c8-866a-3c9e429e3183",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e8abd3-2cfb-4c05-8522-52a38b7bb529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8834eac1-ac5c-456e-822e-6fecf632b995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d877ba3-d84b-46cf-9338-b799a4ad3643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1e63da-225c-482a-8067-691612441a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50316a3-309b-43fd-9c7b-e6c0bb314db0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d6365f-0274-4dff-b5a6-794de5e94463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b06d14-bd0a-4274-aa7e-c491cd68a729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a81765-454e-4126-9079-573b3c207499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a40f3963-4197-4bf9-8538-314a203b4e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afce973-aaea-4818-afe9-50e728c69706",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad760855-f093-4725-a8db-f6284b44fff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3971b336-c624-4eee-b848-8d09fbfa8a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb1bc40-4f8b-48d6-9e3d-d8581f203b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "006b296d-739d-4b32-9d0a-cf2a27e6bd3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32df4f6a-658c-4efb-9ccc-84a28afc21a5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6bd892-140e-4008-8dd7-24f491a19163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe4bb72-0c4c-48d3-934e-34546f8a146f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b75693c-421a-45b0-acc6-7b6e2df6474c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "366ba26b-d3fb-4612-be9a-9a9cab93560a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d6da43-ba02-48f4-be2e-bacb97653bb7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c10eb69-c036-47ee-a8ae-843f7c7f93a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d5fa63-fcb6-4043-ba75-28c4c4139412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e950c55a-2b47-46bb-a20d-9f317295a3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57327210-357b-4ba9-9101-b2954aec850e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f51717a-4deb-4cec-b6e6-61d27373c487",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2ee7f1-cfab-44ab-ba78-a12401099a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8401e2c6-f521-4112-9d06-ca2917c1a452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875435ee-682a-43a9-b6db-45dfc2f37f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a54d7511-1d37-4118-85e3-d2112b96f8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a45f51-47a2-44d2-82b5-fc5d492bacf1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f71b251-3ffd-4dd3-9adb-5a5ffb0caa73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ecc0cb4-283e-4e9d-8821-926bd08bafd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72eb1fe8-7e8f-45a2-b795-42f2d743a6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "18032aca-f767-495a-8359-7e4fefdc6a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d350518-c413-4780-87aa-bad88707565d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a7006e-3de2-42c3-a3f9-b9d0dc782cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1f2ed3-13d1-4139-a6c8-7b248437824d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d10453-3073-4700-9b56-e681d7e242e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6463925-de60-447a-b390-3e383bd72e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17ccd3a-ecd1-48a5-a1a0-84481383711b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272c3f5a-92ab-4305-9b8f-882eb8bc20fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84335e90-b461-411f-b710-48d4df46c6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1576f0f2-92dd-4ae1-be7e-cd6c0435ede8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa135db-0b5e-4f85-a1e7-6822fcf5fc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22b5ce5-b966-47e2-be6b-ed0780472e55",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bc8f54-a9ad-42d2-aa35-1100087d1b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be51938-d3ee-49f0-81ae-765503bd45c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa184b5-c163-47ba-95e3-11b6bdc4137a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b22bed-93a8-4312-82e2-21a79322d549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435ba53e-67d1-477e-b71d-40fdbf1e59df",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0611854-1150-48be-a08b-90a4865dfbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57446b53-0168-4471-ac1b-be8a80acad4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4a5d13-24c4-4743-922e-0a60701159b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4db46003-d3dd-436b-9652-6e0efde4689b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24690abf-86c5-427c-9c70-67350245eb83",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0aa9eb7-2699-4083-a350-48f99e7c66a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978aff42-17e2-4512-84ae-d36de08e8f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03d6ac2-7ae0-44c7-b928-d2122066f2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "667d6ce6-e32d-45d9-ab1b-75050de42d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8509ecda-77fb-45a7-aa47-67ceb3dee60e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58684c55-9c75-422d-88a8-9a3c13d1d56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad827b5-985b-4641-9954-84a776ec6ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6443217b-d30d-4621-9d4b-2717c1daddea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d485a479-0af6-4996-a2e2-5d469c7a7dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b512287-6549-40cb-8df7-43609c77dc3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a080ae2-427e-42a4-ac4c-9a6b0fc472b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96997c5e-4abb-43ff-9a79-5af221756d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b12c3f9-2c4c-4ec9-9aea-b393810feea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "27974e82-633a-4494-86b5-cb7bdde15b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec3e399-c2dc-4646-ab8b-76827dae9e42",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b722d03-391f-4905-830b-9abd35049a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ca5e01-1cc6-4b44-a19a-c8164e371995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28368cb2-5a8f-4105-8004-eb17713e78d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4263b867-0f16-4257-8775-db832f4e1560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3107a5-da27-42a2-9de0-76164307b3de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890eed15-e8ae-4cef-ac3a-690138b1d6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26915258-9e9f-42c5-bffe-3a1a1e7205c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2736488-5465-4c5b-bdd9-abae06d5dbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "30bb2799-ba06-4ded-a042-9d6df0c9d651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f893261c-21c7-484d-9691-58d4600ae43e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c6b9b0-be0d-4997-b906-91c6fb256591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "353c2f44-b50d-4b4d-a578-469463525bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c4b784-3a02-4978-9843-6018791374f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "894bbec5-8695-4408-958e-2651789543ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a460171a-3687-428d-b827-d21050802027",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a8121d-99c4-4d36-b43f-6c50f9ccf865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857ff04a-1aa6-40b2-ac83-8652b5f143df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4097a3-06a0-4e35-b6a6-b66bad455085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddd2ebb0-ae58-4b1b-a7af-72cc2ad7d27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8e0cdb-265b-4a42-81d9-59c66ca1f75d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c3891e-2491-4e55-b2b4-e8ba9907743d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d9a1d22-b3b1-460a-a3f7-f6efb50e88c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07942a57-7e43-48df-b05e-3f6cbd8e5728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1a3ac9-6d87-44aa-b1da-1b25a385daf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3d6420-be6a-4d5e-8547-f1ca8ac5c773",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aae249c-9491-4155-b81e-5079df1bf9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de9ee03-1d6b-429b-9058-82922dbe3076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a20102-b649-4e2e-bf5e-8b217dbee84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0836a89-015d-4fbc-a564-2471ef076080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49285263-a95d-4d4a-9eab-cd6181e073f6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce503931-1d7d-4ade-95bc-c9a8ab6a2ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4f6bf6-724e-4d9b-b981-e54603e15f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a25ac4d-80e0-41c3-b7a4-077ffab735f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "872dbfa5-1f5d-462f-8061-7fe07d9d6aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144fc506-ab9f-4892-8090-c62748bb6084",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a2a6b7-78c1-4e5a-bcb1-0c069f2a64e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65564dcc-d1d6-419c-9e2e-7352024f968e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fce2a2-ee72-4d38-a09a-fabe46a85847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "760cfa92-bfed-427c-ba1b-734bc1113f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb74f4e-c0b8-4dab-90c7-b9da5a6ae58a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e55d452-eb7a-4115-ab70-9ccb49060055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c6af60-6f1f-46fc-8ac7-344d883b3b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070c9a30-6036-4be1-b6e1-7e366e741fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "956f16b1-d592-4986-9d44-4ea787775fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23369b28-8b2e-4799-a582-f5fdf4c2354b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fc0a1b-6c19-464d-9cfb-7ce81b2444de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1874ac-8e9c-4109-bead-de5022a36cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544ae7a0-3c08-46b9-8661-6012a25406d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5046c405-e86b-44b1-b183-2dfe1044d093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e34eac-14d9-4556-8d38-6f35b6230ee4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9133222-7bf6-4bb5-9826-34e0c43312ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5ca378-b7d5-4b79-bc39-98364ec9381a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c702b68-fb7b-4419-94cd-5f279f68d8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "89fe768d-b4b7-45e9-bd68-4693879568e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb451bb-4920-4b06-a871-7e347df1702f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d320e7f-2c0b-49e9-bd9e-b78c6b359c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf282096-4d72-4bf6-9aad-c7e9399aa4fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f272f9c-023b-49a7-9469-48832242caaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92a7649e-d67f-4bbf-94c7-7de64676ecfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4c18d3-ec8f-4d27-8fa2-ec134f75e1ee",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b6a0fd-b2d8-4d62-aea1-bd9c7cec5ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfb8255-990e-4d7f-b2ef-89f660a3ae37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5411f151-7e5a-4982-a2e2-4f108e7b5262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc65db15-30f8-4da0-bc36-224e2a19be1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040998ff-eb20-4c6e-9f92-d79d7720e4da",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ba4a08-ba28-4bcc-b27c-c9b300056400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a58599-0957-4972-bbff-64ce20bf2586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c682822c-2255-4bc9-9b0b-66cb83e4dd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0011f61-733d-4e6b-91f6-4dd1025567b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916518d3-915f-4cfe-b1e0-741b1dfaa4d1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250967e7-dda1-40bc-81b4-eff6343099e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9555ddf-c30e-477c-94fb-723c5e4ba4ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588bd5b0-e719-423d-b29b-9771c7f17b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d59f5661-326f-4d9e-a780-480dfac21ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58dd0616-246e-4a8b-b2b9-0cbb706de1aa",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c4be79-08ce-4e19-badc-7a99cc3e8803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed109598-24df-43ae-8333-dea634a77c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646caadc-13c8-4207-83a0-ceb46dcce787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "616d83d1-27a1-4aba-a38a-8cd1cc7ae0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3590d6-9fea-4556-8a14-e015d673f3f3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cad46f9-f561-4b26-b636-297bf25cb237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2acaaa-7d01-44b8-bb69-e15da072fe44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e61f485-8211-4188-9457-a25fbb6be0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "93491d01-733e-4539-8f01-64e56996621b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8d4854-76ec-43e6-b7e9-c6607c6becb2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7bdd8b-95ea-431e-b93f-ad0cc3b21487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8641f35-84a6-4a29-b0ba-51b4410ad8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3a0b94-f342-4dee-969b-4289bd22bb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06408242-04a2-4fbb-a0ec-cad4cfec32b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a40d13-5780-4d29-a559-94affc5c4d1d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3646db8f-96e4-44e7-b411-e796f1b9cbf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f26803-3780-44db-b069-77c0cddd6b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cebfe6-9c50-413f-ad89-6f5a8a2f4ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a541c94c-be02-481a-87e8-059da21de2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba6b227-a3d0-485c-94fa-de6ee04f5444",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3361b0b9-3a30-4d9d-b17f-58fad5218330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f708d3-283b-4a3f-b21d-ac5f5b5894bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b92d84-d660-4a38-8ff4-ea0d8e593ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a7369f9-dd9a-4351-a3db-7cf82e54de46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736a6000-487f-4472-887d-b7b4e4317dd9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18834f1-d918-4345-959c-b413ee135ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2dd754-e865-43ce-a597-c5425769974f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced478db-3b3c-403a-81e3-f54a929c8cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd28770-bc06-4cce-90ac-c75f1841336b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a41b86-3e0b-4e02-b6cb-6af4745f8c63",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ec0c76-cd5c-44e4-9694-371fcb6ee507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61ec89d6-79f2-421d-aafc-fc22f52ec2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90e17df-7955-4b6c-9605-de50b739fb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0212f34-308a-4482-a080-4a07a69ae154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bafba0b-a78d-4c7c-b325-c703bd89abcc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b1d69f-ee5d-4f2a-bd7a-f686d314bd66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81007d5-410b-400c-ae88-b9ffd4e5d9e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e04e21-551a-4930-a035-1d511a5fa51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d57216fd-69f1-4314-92d4-6ddff9c44d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fdaf1b-adb7-4af1-8491-323521ce059f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11736bb7-e0e1-48cc-90c4-8dd710e72b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e86a13-8dcf-4124-a7f5-53e7effbdf1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d601152-c636-41e7-9944-da2f93a766ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a39ee3df-9d04-4f0c-bd63-c4061d65647c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0757e50f-5c43-4e46-a497-8c4188d5c604",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69022938-2fa0-408b-8123-a38ff5fb87d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f98baf-2620-47bc-be20-6c04aaaacf11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad6be92-548c-4d64-825e-b19502a565cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82fbd4fc-5299-4196-bb7d-9ac21384b961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1a3ee4-3158-4fed-890e-f0601cc60a0c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c98796c-b37c-464f-8396-a6d4475bbfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70a6b07-a339-4f09-9643-0bb48073b5c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea448391-2a84-4c32-9734-de9f5f6107f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f52236c-4473-4530-8039-bd42929ef813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756dc6a4-9102-4ef2-938f-c26822d150fa",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bf6e85-3d90-486a-bc6d-7f8953c965ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707d1252-fe8a-4588-a977-e13b5193f084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49185cff-aae9-4c6b-b172-1329fba898a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "225a0b09-0bc1-4dbc-94de-6e4bdcbdf3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a683f20-c146-4778-948e-9603630b4fe7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "403f4909-40da-4a75-a867-7e873140225f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb346553-4c78-411d-9eda-91d21608f231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe5ece6-e234-4f22-aedf-d65edb505b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7734cd1-950f-430f-b13e-82de7821a8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169912e3-1fd0-40e7-b1b4-f3c71fe9fdd6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16478bd-d7f0-4400-8381-a5fb23dcba7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "882a6068-9cfa-41c7-ab77-d1795b233bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b69f56-b62c-46b7-9d36-d7e868262e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d89f4fcd-c714-4617-ac44-bad4dd34d01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc26c40-9994-48af-acc4-2c81c4c638cd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924cbfe4-20c6-4540-b22a-ff40eb386337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bfa3e0-c745-42f7-a0fa-846b30180d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2802470-d45c-4ce1-ad58-058dcc63f9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca83747a-aa53-40e3-afb8-716c2608e384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec17b23d-5b59-47df-80a9-e6c06132b8e4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178f9a4f-7c29-4df6-bd94-8f4cc7013ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526d5eac-caa9-45b3-96e9-af324db6dd9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235af125-9141-4a8a-8d7f-60de3043f8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f60bf89-5109-4093-a244-6d150cfdf926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd838c6-6928-4c43-93c4-6ba069ef8659",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b678b3b5-9100-42c7-b7dc-3d6f9160f1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c73b32a-22a9-4f88-b246-4724566c856b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9bbde0-7f54-4673-a7e5-3d07231e85bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8fa820a-9192-492b-b772-a0cdb463f1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1e1423-a513-4baa-87d4-4cb0aa88cfa2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb831dd-b1e7-4608-adc8-0e365030a041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d42982-e00b-4e89-9c8c-c99288ba43eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6653cc99-2fa7-4c23-b585-147cb47642f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a814cb-c83e-48aa-ae10-77d77bab889d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1531aca-748d-4b3d-9b21-ffc2dfe53cf6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e8c21d-8806-4300-978f-02ff89aa7f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d53cf7f1-3b9b-4333-a76c-5db244a53df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32286920-19f2-4ac7-83e8-f950506d6655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d3f5d7-0357-4dbb-9ef1-3863a7c4f92e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d04e9101-0be0-4628-b509-db01ddd422a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "961f954b-edac-4a86-8544-79363a86e3a9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd689dd0-6022-4d27-8190-136f194e351b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f40c890-ec03-4183-9788-f78797e1b2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b800cd57-779e-4d11-8a33-1ff868fe5762",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66e28f1e-aff3-4251-a2f0-f91c9da1bfb8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cfd8289-5155-48e5-b2eb-03adaac6e53a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "469a1722-1608-483c-9faa-07ab37785781"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9acec932-e9a6-4646-b92e-e62e937b0190",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c47c7a6-5be0-4d1e-ac7f-b1d44cdf1329"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "63218ea1-4e38-4584-a3da-5bf3f61ceaf1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "100d7d92-3a63-4b7e-bb20-0210bfee8bfa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02280d5e-2a9c-4b44-b85f-e06bb4ee4bde",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d7b80b3-7604-4dab-9d10-430419ff6146"
                }
              }
            ]
          },
          {
            "id": "71b92772-02e1-4d25-8c20-3a4ec7f6bf0c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bae90e3c-6abb-4767-bcb7-8c779145714f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6bdcb68d-dacc-4d7e-af08-132aaeb57cf2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff1b6ff-edce-4e32-b851-10d28bdb1422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1325e5a1-ea17-46f9-85bc-cce1eba1e47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f36757-df01-4af3-a167-88f956506b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d2d3f8-98d1-4c96-be9c-3f16977a6e60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d4924fb3-7238-45cd-a2ac-e80e6f6cdde4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "597aacb8-598b-4b59-b3f3-e3246b1c6bb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f270c79-0ac8-4082-9252-e522f4d05c20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff2d8c18-83f7-45cb-a69c-2d8aab938902",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d1ae2dab-7fcf-44c4-9ffd-58b359a23874"
                    }
                  }
                ]
              },
              {
                "id": "18ad4bf2-c473-437f-8fc7-2b85c39963d6",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc99d810-b226-49e8-b860-4eec286e3a09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c2fdb27-ec9d-46ae-ab65-14f0044dd11c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b94514aa-a1a2-4458-8fb9-9f1abe4431ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a91254dd-b294-401f-a9e8-033ec9a95683"
                    }
                  }
                ]
              },
              {
                "id": "7240cc0e-63d0-4ba5-b2ea-aaaf725922d0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51460117-88bc-46c1-9845-c6f59fc0f761",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca4ed105-b994-4735-84ec-849a691feeca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b99b2f6-6983-44fc-b3c1-f83c2ba37786",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c32570ab-fd99-4fad-9257-72be2566723f"
                    }
                  }
                ]
              },
              {
                "id": "f2d610a3-7e8f-436f-bb5a-14f5c3747e0a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42a86740-2eba-4f45-8eb9-41c2b4d416e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36137f51-1458-4d7d-8ef2-1a600c3241d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b519b8f-6638-4118-aec4-992ae7e15d4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1ea3f831-408a-4752-be4f-561363b8bc98"
                    }
                  }
                ]
              },
              {
                "id": "81c387ed-d7eb-4c95-b571-cb3b0e51e9ac",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52b5017d-7e88-4189-99b8-e938200bf19e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b91d1d2-d864-4a14-95a4-e9577eb7b069"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2fd39ce-f190-41f7-8334-f62eb436329a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "471c4c67-0b4e-491e-913c-4bb788549678"
                    }
                  }
                ]
              },
              {
                "id": "9111e40a-ac0f-41bd-832f-61ccbaf31fb7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8430318e-2073-4b1e-9bff-15ae269d39d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc6e4329-5a98-419e-9aa4-5c6041267f48"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50ebe7ff-9e30-45fa-80cf-06273c7ecd52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e27a0af1-f4b0-4364-8e08-bc98b1756a1c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e4998745-bf77-4fb5-a8cc-c7f250e322c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "854ef22a-370d-4fc0-b33e-716577ff2155"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "77ef6115-9f06-4415-b44e-2cbc39fdc15b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca3ccacb-5ee5-4aac-904b-8d294e8cb493"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c08349e-443a-47cd-85bc-805942ae31ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e133b756-be11-491f-a3a4-1b8b4ec68e1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4975296-7c7c-4c86-99f1-d902c932c60b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51a07bd2-16cf-4446-894f-5e4d6ccf4022"
            }
          }
        ]
      },
      {
        "id": "5afce649-48ab-427b-b014-517e715e291b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b1ecb04e-d906-4795-bd38-ba63423da212",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4feecb21-ce90-466b-8522-98ba3b57d973",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ae45d84f-fab1-4fc8-ae1c-ab78371ad54f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abab703d-2bfa-4916-a630-cf99f3927c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f58a572-df3b-49f3-b785-cb8030fb1e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5d3474-9e34-45a0-8ed9-67ceb524bceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "453de74a-44cf-41e4-8fb8-6c638c7afa67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa0199f-a8f2-4b8b-881a-827e6c75ca09",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49dee7c8-f3b7-4073-b0da-79f58528ca4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d804e7-4557-482e-99e6-2b648c090b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fe8324-83cc-4711-b430-c38c3ce8a953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74afd916-e91c-49fb-b47f-02e62c164c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3459908-424f-4ad3-bd43-4455bcf3843e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d95c26-f42a-4648-9a09-ccd0e45b088a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43efe89-9417-45e2-bec3-3409a1722435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02040c5-dacb-48ba-88cc-19f74d200bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c920f8-483d-459a-8a91-fcda76066fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13db6d0-b2c2-43d7-bc22-9fe298e2157d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1fabcc-9c26-4acf-9f81-910546fcf04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a1f35b-f2aa-40a1-bb5a-23ac952c1202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdda1faa-dec6-483a-867f-996f17dbc1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f11b4dd-3efe-4e8a-bb74-206faec26d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b473e64b-ef26-4000-8fd1-69255ae6788e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ecf12f-5c67-49c9-8549-bc3383154188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d9a7664-84c5-4fb1-b3a9-d55604432164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965c847a-787e-49f7-ba46-27f9e2c3a1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "119cbc5c-c2e8-4633-a1f7-2fda28354585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4eeb70-7b6b-49ce-9c63-19803b7e7350",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be447f81-c2c8-4ffb-b13a-d192397b3dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664e875c-7b6c-4a21-8038-9d730097eaaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91205abb-64f2-4490-a30a-75ee67883fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35877b8c-e8c2-41cc-9c52-adad5b361c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5e19b8-5f04-4035-ba11-90aa925da73f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7d09ac-5a7e-4f1e-bc81-9c80b4d48ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10da16fc-5f15-45b4-a92b-ea41b411a007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f238cd-632d-42d3-891e-504dffaa05ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "29ee7306-3506-460c-bba8-d2a7353d54af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4309121-1fe2-4d88-b04b-ba7a2cfc6db7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058b0326-4f47-4264-9fe2-a7c3492ac2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222afaa6-a0d6-454f-a6d2-3d583aee038d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5f841d-f08f-435e-8148-22e1587af0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21c0505d-909a-4fd9-a3b9-b990a20058d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c1526e-32bb-4b0a-bf0e-8efa6e7c048d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4eae3f5-dfa0-43c8-8cfc-2dcdcb15ede7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49dcb782-326e-4960-838c-cc3f6978e42a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5259791f-81ea-4d4f-b60e-9fb770ad005f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce9d582-a297-4353-9b78-166417250f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d21747e3-c21c-4662-a05a-f6ef2740ad1d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accae317-68e1-47b8-8d4b-e8a17328396c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96973e69-820b-4c74-b5f3-cf0d10f695c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2463a3-10b3-4f44-9b63-6652072513d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "331fb99c-bbb8-4f5f-9b06-5241a65684dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6388d7-0aef-4ef3-aa39-183184b63443",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04974cc-c663-494e-836d-1a31fe4482c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286719b2-6174-4f68-a336-927b8404a10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af23845-dfc7-4508-b5a5-4befc32f6503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "936f66f4-ab23-4d35-b672-0bd39f78bda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd743c2b-ae45-4759-a970-4f1ab1cbacab",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ab9581-9594-468e-be78-7eac406fc1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab5a7dc5-6ee4-4703-9482-ed4ee4fb56e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec71c2e9-00f7-4948-8c32-71b1fdc3011c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84534dbf-8480-4ac9-a461-35eac649896d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc44169-7da9-4ef8-9918-a7e3c92cf9b1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fc027d-c14c-4838-8c33-99e9420538a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd8d8f3-912a-4100-acc6-76050485b435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0719fb15-00e3-4b2c-9e94-e3b3e2c0c899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "683eb248-a66a-4716-8ddd-7df83bc9958d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8710984-bab2-45e4-844e-4fa07e9502e0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e2f2c2-e215-44e7-b171-29c5ec8631a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d4579a8-2280-4e2e-b3d6-dc8093a52dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2145069d-489f-4433-b7d7-cf1705f8ff06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "68f81889-0043-45b8-91f4-5f0e5d9dc496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08569928-d687-4d6c-8b45-72f091553ac7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf2da4f-c917-4ec6-beac-466342121cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6d0b0f-a87d-4216-9324-72e15c6db28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5470404d-8e5a-4ff4-b636-766821a6712e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "36704e3a-d08a-49c6-bf70-ee87dc1d9404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2d98c9-8985-4223-83f0-9d9880d75814",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e6c525-8c06-497b-adb5-8851576eedc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2f9865-afa5-4a31-b18d-39b9f1bb2d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6de120e-3848-4832-bba3-6f335f2ea7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1bce82-7251-47ff-82c2-f003ce9a61a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510979f3-6670-4110-b892-1eeb56149374",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f098b3-ddf8-4baa-a6bc-e8f3b5c7c974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8467ce99-fcc9-4f39-80c2-cce4c7d0f802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41842d1b-54da-4e39-a861-727d0b38716f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "17c41713-436d-4de0-ace5-7ce60b453600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917c7cc3-69fc-4791-b42f-adc0a2639bc3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef4af0e-b69d-4a8c-9633-629b372e51d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d1e788-0dd4-404e-8417-4b8bc49d3b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd8ced5-aee7-4194-922f-fac3e8f3a7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3cc74df-2a64-494e-a4bd-c61b08fa3065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef74f47-8e25-4023-be77-594a7333bcfb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e07957-8295-41a7-bcb2-3bacf25f2e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2221b844-5dff-4b3d-ad10-da91e1630b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06a3cea-1184-47bf-9d7f-2a652796ce68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd80b7e-ed8e-4cda-9938-12677065e8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d5b119-9404-4cd0-ae66-511c9d15afce",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8ccf43-bbef-459f-8561-ed2ea7fcdc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5194bf57-1a83-46ff-9ea0-f9b0a5c66698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d603efb-7037-48c3-be79-b0a2aaf85d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b58644-97c4-435d-ab12-0a21d8cc3e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7226cc8-502c-4ba2-9899-2b851b12feb6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680fc659-9d8e-45c0-9e98-fc85d7abc85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fffcf14-bc38-4ef4-9d08-ebb1631bc1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8ffdbb-a266-43dd-bf92-9049d26d9c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7525be-faa4-4cc3-b62a-9b9700240e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d73efbc-e552-4422-9410-6ec8fa4b4aa3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29809848-91c4-47ae-bb52-161db3aa18fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c950843-47c1-4f41-9b87-333dfbe312f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a346d29-2e37-426f-88ba-791dc6f71186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5ddf48-3872-4b65-b547-d28a7b8c3a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bf57d8-52a4-43a9-8827-a693022ebe4b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c12f7ca-0db3-46df-ad7d-06ad8fc829a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd93c65-46b4-4a2a-b509-d7ae997453b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1814614-13d5-4dda-b357-fe9d909cf7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68cef6ca-7255-4b79-aa4b-1ccdc2a85888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fa6a21-f73f-462f-a4ef-3a0c0dcfa320",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f598c02-19eb-4250-93bd-614e25e094e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23dceb45-8a82-42cc-ad1f-72702b86e1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032bee1c-5c8d-4c32-8b12-1136e668ca09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40c402ac-6a54-479e-a576-b8a15636aabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9691a77-43b9-4284-8de2-29bcfd8cdf78",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bfa622-6e42-428a-af12-4c78ba30bda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31c918b-1e6d-40a0-abf0-9207fb8f1d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04a28ca-f21d-4f0f-a429-6fc438fb7c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5bdfc2a-bc46-491b-90b3-e0d6ca9e0ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec1970e-7769-4096-b869-e41f87384832",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c52c1a-1e0a-45a6-926c-94190d3cf86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51cde21-a119-4670-a34c-1087b0c4d917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60c2cce-ed4d-4f2e-8c52-3e2e8ef3fcf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf669fa3-f0a7-4312-892d-235d3d21ad7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106abd13-9852-4a43-89f0-520669578b04",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38ef9bb-8094-48d5-84f5-88e43244ca2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571d8282-8416-449d-802b-70a0590e7efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62fa6c7-526e-45b5-bc20-c680dd20ed66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee4c616c-50b3-45fe-936c-81ed3fa238fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18c06c0-5821-42d3-ac1c-87e7031732f2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148b54ed-1e40-4913-8fa8-ad5a3a204936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78212a05-bd80-4779-b4ff-68c30628798c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1163313-2f78-4c0f-afb7-9e085d286fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f50a79e4-85a8-45d8-8061-8fb370270296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedd576d-12cb-4ec7-9011-6bf8ecff1292",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2384b6-a83f-4ca4-9526-b928c17ef496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20cc05a5-7335-4947-90c8-74419b88d25a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fd9afa-b06d-48eb-b5d3-cb8d64555012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aeb12fc-aba2-4448-a94e-0d25570435ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162d1dd5-2f96-448f-a753-8a573d0642b4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691f48c6-004e-4bf1-8acd-78e9d6af5e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162d6928-f82f-4bdd-b5a9-e6b6d52507ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ebad56-60bc-44b4-a534-90ede850fd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adb7199f-c8c9-4c2b-8f95-af21bd566248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fb4b9e-4d18-4545-b048-193a3d60d64d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bc9c62-5e5b-41aa-8b0a-075d4dc73666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a845b3-a6a3-4b17-81a6-0a0a903ff8de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23834541-f9ea-42ac-ad8e-175c54963f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbcdfc0a-e2e5-466e-b8a7-1b86d0f84395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e616c519-8e2a-4956-abd2-4cbf1935cc8d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ee7d3e-698f-429b-8d15-e5d369ba9bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7a8c77-a336-487d-9812-2baba9f11bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b57ae1-456b-4bd2-9f96-b21d30a19612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b20d4cf-6e70-47d8-babb-7c5ae4316c72"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ddc09a72-388e-4764-97e4-c655b0e12d53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6d22b7d-75a6-413a-a245-bdb9d2140aec",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08206a36-5442-4ab3-b672-f7b1ba2c8c87",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "427ccf27-daa2-47ed-82e7-93b535721717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a901b85-819f-4f93-ab6a-74f786d3825a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5accbcf-5fbb-45e5-a327-b17ca4535c6b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be6cd9b3-0cf3-4973-93c8-0fda3b8721b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a473e924-02b4-4cdf-a772-1c5cefd899ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbaae6fb-eb6e-466c-b935-c66c9251edf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec847270-80ff-4af6-865a-263d507f13bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "935de6f3-9757-4228-8cb5-5f7d278f5dc5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7aa717ac-e494-41d1-84da-2349dc2196ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c24f203d-8f4e-40b3-ab6e-5d79890485b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1652db1-54dd-407d-bdd4-c9698e9e011e"
            }
          }
        ]
      },
      {
        "id": "5b186f53-86ff-49aa-b22e-0286d7659189",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "2fbb2149-386f-4c1c-a9c9-c5412bafef40",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b83eac15-fa57-4b8f-a7f1-613b943ee7ea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "83b4400a-a2e0-40f6-9304-e6f5eca2850c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e0ed80-f4e5-435c-82b5-371ff99826e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8b7dfa-c457-448a-8cfe-1d4925006753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cc14ac-9a74-4dc4-b47f-a15b4f368f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca2bf617-3d8b-44dd-b87d-aa71ece34371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93cc6b5-ce5e-44b7-b604-e4cf5cbbc6a6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90b1842-692c-43a9-b9e9-a73d04ec412a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "447482a9-af5a-4f50-abf3-26e297c53bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13881b1f-ea79-4c10-8c4d-908540acf634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "23248658-c256-49bb-9a98-16c4ee41d646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0cf08c-b3aa-47c8-9c33-96da34c4eac2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13b0eba-8425-45c5-a707-b2f55331ae31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c214f6d-df25-487b-9289-0932ae45778b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47ed42d-94ce-47a7-8a7b-c5aaa18d5351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f61525-9314-44fc-a48e-27f8f9497231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158a1b5b-ce08-4f1f-ade8-fc4b1b3f9d62",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f426eb9f-fa79-4bc4-9a77-77053e287232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b785a524-0f73-4b0a-b6c5-be45c3e6176f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185ba956-daca-4358-aa9c-d702ad8373a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46365ee0-6a71-40ce-b2ec-ebcb2cd8b93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534718b5-1e25-468b-a55b-55dbfc09a334",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7542021-56ed-40f0-8f6d-0aab73278852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67aea59-e574-4f17-bed2-d87c00ab4400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fbd903-7d85-4171-b667-8579c6d59dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c85db8af-dd6d-4762-982a-50af65bed77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3862fb6-ac5e-4af6-b27d-f3b5b38d4e95",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f8fd07-a4f7-488e-bcb4-cc28b8abc0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e4a783-48b8-4aad-93b9-a1c70e9d8086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52279715-8e95-489d-ba3b-96d1aee17b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c4cbf05-c9a5-4c26-b531-7a3cde601766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe44e7e-a0ad-47c4-b025-2e08e966347a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533823c1-36d8-4c1d-9788-4ac3adb9c626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66233a7-a2cd-404c-bdde-743ac289a260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1ec24d-7aac-4fb4-a5c0-eb2d11e74c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "de8ed33a-3f0b-41aa-b179-834e13e9be6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b6511f-2f35-4ac9-9946-4eaf11d98b6f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b91952f-7f49-49a6-81bd-6627d0201b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799e31da-20f9-41c1-af8f-0cf8968ac44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346d1c84-08b4-42c2-8026-1b61758f3481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3973b78b-3af5-4130-8665-0a22c785452a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfd4786-d986-429d-8191-c234b3a6b568",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d868bf-0950-4661-8aff-0440d02387f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed833c0f-dc1e-4aa3-a1d1-4acd2d983ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34408c30-f600-4eb0-a8b5-e62625cb73eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6007076-547f-49c9-ae83-90e78fa92b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45d08eb-d555-4ee6-aeba-d8ae2adbabff",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57aa611-cd64-4cc0-8c07-b0e4efadf209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c503ee-4a07-4584-afac-82d518527261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c26afe-bb7c-4fb1-80f9-e5ae32f24a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6af327e5-94c0-4b55-986c-b16138f66f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a28e23f-44b2-46af-b7fb-ab320ffcd444",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a811e3a-75aa-484b-aee4-395f49aaca6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a7ba98-b667-4fb0-89b5-e48338a8c7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07b3263-160c-4ed1-ba39-1a0f7f7d12cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "933753b3-4019-49d3-8363-da4bc015667f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa9b479-5675-4bbe-9bfe-978af646d04a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8927a384-1781-41d8-9ac7-800a9f4e8f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4cf8171-9732-4dea-b7cb-6ccd2ff7c765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb49b20-95ef-48fa-a513-95ba6db96b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "326c1608-0cd7-4251-9bf9-cbdcfc0dcca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54f5e63-84a7-4f97-bde5-86d0c3651ff3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d79a31d-24bc-4c20-80cf-71a188651481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de40b49-bf89-4df1-8ab7-fbaca2242c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de294c90-2051-4914-9dc6-d0dabd2dff40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7adaf3a-cc72-4fb2-81bf-6db675e4a0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93654a98-1cc4-441f-bb43-fd4280fa867d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ea6355-3f4f-40f5-be7b-719d2071a215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3dfaa1-5012-4e81-b608-6265d8b4d294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe5230e-bf0e-4ce6-980a-060a1eafa6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab498a27-bb08-4672-91ae-348e00a8559f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364b0064-f0d5-4fda-b218-519418672efb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b170334-d590-4da4-9794-5de08f36016c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb6a91b-61ce-44bb-a8a2-62fa9e5b3f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1f35c4-4817-463b-bf55-e53ed36a45c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a1d8f6d-9f72-45ac-ac9b-d7823e75f86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52fe890-1bbd-4b7b-87e0-12bed571598d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e82a16-0fc5-4d4d-a9ad-69dfd08265eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15912ce1-151e-4966-9c25-ab81ec970202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d0fd07-fe64-4c2d-94c5-d01103bf5544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e9652ec-581f-4b17-a331-b3fb9b5aab26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768e141c-2be2-4a88-b7e7-58b78fc927e4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4668c9-ac54-4d35-8ca9-37acaa4ef8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b9bb23-17a2-4a94-a614-ff87c7a9e695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68385bf7-d380-44c3-b19a-b52cde546d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7285c413-b281-41d0-95fe-e63d5f07d401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5178758c-75b5-42e4-a7a9-ee38e2ebbe08",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d21d85b-80e7-4781-add6-0e9a3b3cf51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea9deee-de54-495b-9c4e-2c476bef621c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bcc16f-bbae-4000-a3e3-fbd7dcc2de71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "05842a2d-399a-431e-8d54-13ddba920302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb351dd5-d011-4bae-983b-a2630043bdac",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5e580d-3498-459a-850f-614e0ee92fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36966925-f1ce-4295-9d6c-15515f23e528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277dd292-7cc1-4e84-8a13-76caaaed9fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e30a246c-a424-4ff9-a797-dabcf94fb1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6861086-dc8d-4ebf-9f0a-4fdde482163d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5770087f-5683-4f14-afe4-7522638420e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4429a046-f65d-45b0-8eba-ca978297e0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77dbafc-2d58-4277-bca7-ba0791f0d5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18ac769c-453b-4b94-a05a-d96be6dc7950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6feed314-875c-493a-ac17-55418d1f4426",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef82a7e-45b7-48be-b75e-acead50c0fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70bc42c3-0411-432c-989b-844f35c1e86f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b51efdf-51df-4e8e-8e9e-222439ed3559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b9bdfc1-8482-4b94-9d16-f103947ea31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a4b896-46ae-45ed-a591-6e0482dee73e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41695939-008b-4ea9-a9a3-c64d93caa6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eaac98e-e902-49a8-95fb-ccf4bb24ec38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8e31a9-2148-46a9-b067-febc648d4372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "baa21d25-f130-4668-84b0-efcfd386ccd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387fab7f-28c0-46ba-9351-8095629b26f8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c76c7c-41fb-4c22-ab11-2387250bfa9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a6ac80-230f-4f6f-8e8b-245446b2049a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092afb09-f736-40e1-9626-180d96ae82cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0e323a-3a36-4c04-a940-8f0dbdafc390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c64fa48-8968-4a56-85fe-9b83c7eb19e5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6f2551-0cc0-4a45-9168-88de26e8a7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20bc029-ed8c-4eed-8466-1d5cda75155e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655ce063-5eef-407f-9020-eeac4e22538f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a60b88d-e3c0-439b-ba86-d23826edfa94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb848665-ab70-4620-9d0b-f3950c2b0000",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc9a481-f685-4b0e-9dcf-d6e7049d14fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c36648f-84f5-447d-b482-75d3ef4981ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e75c1e-5d29-4b72-9c2c-167561193dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f658d1a-b369-4888-a953-ea3fced912e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7a66d3-51e3-461c-bfaa-8cf04b869721",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff31ac02-1466-41e2-a68b-70cdefbb37c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436ca670-075f-433e-8cb1-226a480f46ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4873c2d-0469-49b8-945d-7ce2702886a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5f12ba-8106-4ddf-9c1f-740372a918d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c19a78-bdfd-4429-b495-392958c92451",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7b1c5f-90cd-4c89-9683-eae7d5def47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1a77c9-dca1-41fd-921e-7dd074f49bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42614a5b-fa71-49f7-ade4-2321c45b4de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63c545cb-bab9-4394-8629-5d8c7cbc285b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188be35d-7442-40b0-843f-922d60b59090",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9688573c-e383-4696-9861-84c720831f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad47f57-8421-431a-85ed-0ac2e268a094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af192c83-94e9-4967-88a3-5f0b8882629c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3068754d-a1ee-4524-9bef-b1e72f6c4b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6930cd-25bd-454b-b93a-97bae1cc63a3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b3b35a-a3cd-4b23-b4eb-896a0aee0a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e2913a-9ea7-4cdc-97ab-42d908b03c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4827a10-1432-469f-a354-a920e8f03c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c13fa98-39ad-46ad-884c-c14235495862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17001126-f0e2-40b3-b9f4-5a2a31537cf5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f39de6-6fe5-4fcf-bc3f-f25e7aae5c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b99de84-bf70-4e45-b60d-cccaa24068e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c889b29f-ce6e-4a65-8d03-3b374bc2ff7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10b3286b-0917-4a8d-abee-bea9f222b1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5379ece1-704e-4691-bed3-101267703c4d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692e53fa-b526-4bb7-9960-0ad55879f3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1b6654-ed42-4269-b640-5c0daff41cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5892cd7-ab11-4bd8-b0b2-249f3b6321db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd0c44e-55e9-4eeb-b501-06ad0551328c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d179e9-9c4b-4e0f-b9a0-f71e8482b4b6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f2a9c0-7db9-4694-a3e0-765328bc1767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d63253e-7b63-450a-98b9-894541787205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f403e56-a0fe-4572-945e-879faeb2568e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21b44517-cdf2-4c2a-943f-1a8517c77b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0066c585-eee4-4871-91d1-a7907b9b17d1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a20921-0a75-4a2d-86fd-2d795fb53a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4b6916-598f-429a-a96d-949165028419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804cd54e-2d75-4f3e-8181-adece46f7437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf055394-dd7d-4951-8ab8-64f57a073216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b59ecc0-5769-4095-8a27-72b49a23e9f0",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78093fd-ac83-45d1-9098-eb17b6ed42cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a90592d6-3094-409c-b7ac-0cc62a905651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a7fef2-bef0-45fc-bbe8-792ff7ede45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d45d9d-51b2-4a4e-b2b4-f575fe97ff20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02bda949-17ae-4264-b630-d9c389241a3e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd032a01-3f62-4f06-977f-63901a2e0f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2dfc94a-318a-4011-9832-77455d220504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55604cd7-6cbd-4ebd-97cf-57e17971a065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a92495-e7f8-4e20-a011-d6e21db24c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd865ae-9587-407b-82b6-2596e08110fd",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a2382e-515a-4fb3-8fcb-a4af94514ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c6eb2a-fe24-4481-bf69-4eb56787e38b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834bc13d-3564-40d2-8e2d-cab93785cc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a992859-46fe-4ee8-867b-5ebbdc55166c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40feb1cb-602f-414c-ab60-a54c08d08a54",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d284a9-b5d5-47fd-b0ff-e84849773763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f47405d-b360-41c8-9ada-70c3831865c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db00f7c-d53a-4a0e-b809-69b487c63f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6a6ff9-2d88-4e86-b319-c8a83484265a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d82c6b90-be5f-4ab5-85fa-27d5ed757f40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39249294-4cd7-474e-947f-80fa28e25c49",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea032f2c-6ad9-48db-b5ce-f1283d66b22e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fc3b9086-7504-44d4-8a5b-4b67f336c664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cab28c-e0ed-496c-a9d0-e1d718446fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0eb6ea56-e279-4113-ba87-da6de4457708"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06fa7e83-c094-4c80-8ce2-d1c5da4b3b15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9eca7fe-82a1-46d3-b79d-dc0d9d8526b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be30e326-72ec-4872-a524-f6d7bb48d097",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf629cdb-5f5e-4b2c-aac6-901329be94a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "622579aa-8d78-4571-9706-bd1dfe281e78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f3069cf1-1575-4a04-bd42-771c3163ee4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c73eb79-2b89-40dc-800d-e29b2aed6be2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a37dfbfe-53a7-4943-aa75-08bd9e1a7a35"
            }
          }
        ]
      },
      {
        "id": "fdb09edc-3772-4518-8666-e1dea800c7f0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7da5a6d8-b892-44d1-b69a-c82567b1d0dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2b587b97-ef3b-4834-a529-63909f607e8c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ce7e4334-981c-4e1c-9fac-c791bef84378",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8174df12-a95c-4db7-b3e3-f36a2cdb412b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58028860-b66b-4017-bf76-a471f5a976c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1012f6-1699-45f1-8d0c-61409506a06e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ba3adb-77cf-4563-b938-5800165f6652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201fc121-27e2-4cdb-9e5e-605d63a453de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefd86ec-07d7-4675-b65d-8b68c630221d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dea614a-182a-4fe0-b0e6-b2760ef8d09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79383722-2ff7-4869-ac3e-62109a2be326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16f3dc5-d3dc-4a29-8777-f85256d49472",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5dd9d1-c043-4309-bab8-a9089372df87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52de5d20-6387-42ba-ae15-41220fbbdc74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0af37e2-fda0-46b6-915e-e4abfc1e9611",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e040ac-cc70-4b6d-9564-94b5ace6f6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434d5ce4-ab11-4e16-baa0-77898a64dc23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5c94e4-16dc-4f54-bbad-69f12039097e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f001b9e2-ef09-42a8-87ed-93417072250d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b96d6c12-5b53-4ce9-a976-4f2324785700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41b7ef8-7a89-484d-b5bd-02c003f0f610",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7104c27-78a8-4727-a757-922f4aff286d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add4184a-7c99-4f80-ae86-ca84090babf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da694ead-7b08-44fa-9b3e-a245bef3c7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750fc3bf-d557-468e-aada-5f514eaa4849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cbabf1-cbe9-4681-82c4-e7a600eb30f4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e7bd44-7db3-4b82-a65e-0a94e89b8a1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed40791c-6730-4a76-b762-06024a828cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f125cdf8-e8ee-42f5-a167-52f4173d3bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7bdb0cc-cc26-461f-8255-d86856960e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73bae08-3f2c-4776-9b13-6402a6d82dbd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74d513c-1ffe-42f8-bd9f-2eab44ca38a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47fac43c-b207-4017-80b5-ce4ccfd79ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df9f00e-a9de-4aa8-8eb5-4316c8956c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d20d47-b079-4d6f-a63d-5c1b3202f9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa56a51-29df-465d-b316-e82a838947d5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78455677-1168-48eb-8d93-ea69fa06e937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e190b7da-8f34-400e-8fbc-2bee22d397d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48877f5-137c-44f3-9953-a3ba4dbbdee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b54e9d9-142b-4638-b58f-e3b48bacac4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03a94fd-c925-45e3-bdd9-adcb5ef99027",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378d820d-4c07-4b27-850d-5013fbf51567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9051ced0-dab6-42a7-be93-0998acec2c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d630c263-15a2-4a21-9353-3c36f6f03e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe83d89a-5250-4c02-95fd-d963ad904fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85afb9ae-45aa-413f-8071-1a9b06830596",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74077f49-2ebe-4161-aa0e-fbe989887177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3260ea-81ef-4d50-bb04-f03c7786618b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e39f8b-2cb5-4ed2-9b85-9250f737046a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ff246e-51be-4c77-9b4d-d1a68e00cde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a4e9a6-9222-4a47-bd3c-757200ec49e4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c203e3-901e-4a1c-b14f-5c52740d9b02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a93de47c-5722-4a81-9031-c0b4d567cfe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7271bf-afe9-429d-a2c3-5656f8b01059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e33269-9ed5-4308-8f54-4258c4da6e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a05725-217e-49db-89a4-a746a37d446a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4dc717-958a-408f-8779-3d5924eb0260",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee63f992-7d52-49ca-937b-6cdeab139600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31673f93-21ef-4160-ab44-15beb83c134b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b1b61a-5d28-4ee8-8ad1-3012b2f10789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd621e5f-3fa0-4802-85fb-27f637dd8606",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d044482-20bb-4d4b-99dd-bbc3c47f6de7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90f7bd6a-8fc2-4c54-a576-139c0df86f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cbb33c-705b-4815-ad17-580c1c37f0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1333d3b-5828-4a8c-acd7-6dd314fc8271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace0bccd-2b30-41b4-9410-bb52014b6be2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62dde8e4-ab6d-491e-974f-e9dd73c8581b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3be3343f-6ee7-43dc-abec-5ea3c72e0c86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5350157-b9f2-4e88-a8b2-f3e2f6ab77e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5f2344-7a3a-4aad-a13a-139ffebf4d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add9cd4c-f63e-442b-a703-06d7aa5d2837",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543e7bfa-c78a-44c2-b889-b1b35e65b081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3e29fd-9ce4-4f11-ace8-a786968cefe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92eeeb8-5068-459c-96c3-9c5275e9b856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b70b99c-e3b4-42a0-8ce6-b0fcc3f329e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25a5e4a-5d46-4819-a946-742033d3db4c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa501767-7225-4d16-98aa-d21971c804f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e5e48b2-f8da-4844-96bf-6dcd70a37f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6efc86-d495-433f-b52d-5d71f99e5864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5246e6-a135-418b-aa95-5097af0ed026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6750815c-1af4-4a2d-9b84-0f25a131ce0e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a438c849-d245-4dd7-8de0-cba365eed744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3adb551e-0ad3-4e9c-9d5f-c67325dc51e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98052a3e-055c-485c-b6dc-ea6707d7d9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198c2792-9af3-400b-afe2-89f8bf3dc56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35e700e-f9d4-44d7-88bb-991a52cc7fd9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771f009d-7650-4ce9-a7ca-660777e12278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06aed428-8271-4620-ab66-47febf36e687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ff9559-859c-463a-876f-9aab15a47084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d34752-efcc-41e1-982e-313ac9aa48f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0cb569-79f4-49bf-b5d5-89d5fa9f81d5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33683318-32f7-4ea1-beb7-9c5ca06f634d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66684c27-b0fc-4920-96b6-db00500ff2c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b040ff6f-6437-4a3d-a303-a8bd520c98cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72fb32fc-8dec-4707-a6e2-25636b99ea52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d98881e-fe6c-43d2-bbfc-8cf4797fff50",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e55624-6a2e-4ba7-80df-51b8c1907f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0b5029-acd3-4a0a-8ca0-53b7784a977c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c606a4-a18c-477e-9d66-b212332ab447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3816eac-6747-4c08-8e4e-614a5bcf4b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bbc7db-ecb1-4bde-814f-2b4bd617d20c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7db632e-25e9-4d6e-ab82-0df3d412b8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d4edff-715d-4cae-a82d-131a8e5d69ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b345a5d-35a3-4fcd-a9ab-022ac2002295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03bfe4e7-d63f-4299-a9b3-1218f9804834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c525d9-670a-4b6f-ae8b-e196e2988dac",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c00aed-c763-46d8-ade5-58f5464be980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96eff5b1-df67-44a2-af1b-72f399dd1496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae5fa78-4cbc-4c60-bb24-f4fe7259c0fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44fc9c55-d2b9-4486-acd6-abf715a0f5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567d3bb9-7ec7-424a-8c81-0a47d833963a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a9b753-387b-41ff-bb44-a7ea1a282946",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b356a7a-fdab-4a83-8d44-3e28e2954481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e432437-7ce5-429c-9823-7db04235e747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994652ad-c9c3-4879-aee9-f31b98888f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876502e7-d816-42ad-a1b4-98fc2d85422a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce6d490-65f0-451d-b9d4-081183890ed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "038fefc3-48b3-460f-93a2-779be37fb470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d511898-181d-4c61-9163-d760e07ed737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db3f798-c77d-4a69-b93e-ee25eb5715e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162adc8d-0ed5-4fad-9f01-f43c949795d2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aeb5c6b-5c86-4034-a076-7b9c4cebf270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a046d96c-5ca6-423e-a5b5-a7c625658ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a1a790-4f52-47a8-945d-a11a4d684fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67271dc8-67aa-4a33-b0fe-10cd10324be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c2a28d-edea-4ab1-b5b7-8e7f0e42740d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4246fc3-469a-49c8-88fb-28ea0d30234d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ab33c2-9398-41ca-b3dd-a454de400443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6eaff8-da27-4960-a4db-19a2ffedb44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da44e20c-429e-45bd-a222-7ab86d0efb7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19022371-a4aa-48bd-968f-7e0313a77388",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc0f364-5430-4d20-bdd9-55f435c85670",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d1e0905-de92-417f-8b69-b9bbf141d3b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "633239ab-d25b-4ba9-9a6c-b37540ac1bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50a001f-4048-4b32-9e29-b96f32d678c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4f1203-e67b-408b-bcbc-c711b69d4b71",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2894674a-7693-4a06-9f36-02a33b6b80f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c29cf102-2b51-4653-9f1e-de4a24e02277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb712d6-9090-4eaa-936f-2bf0cbf68ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897eddaa-dfd4-4fc8-824a-f4f4b2fcfe07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f13f83b-1a0c-4e54-af5f-595c22347e50",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c131d43d-8ffa-4ee3-a178-914ed977a2ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2037affb-3b02-405f-a6d3-1699be996715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4ab1f0-c022-4632-a1d4-95064f8314dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b389e6-afb1-4507-9160-2422b74a9824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72897f3-a9bc-4068-8aa3-d258c99fc7b1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2c28a7-5069-495e-8916-2f48e22429b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01c055bc-f9ea-46f0-b8cf-dd2b6fe2d81d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c563a81-dcca-433d-b9cd-dd338cef91e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6182abb3-7ed3-4804-9143-675b3459090e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5aca003-3383-4106-bc35-93a1232305b5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "998c2541-5cdd-4980-8713-ed439a9153f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e02753f-3e94-4e4d-b0c8-8e3db203e8c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b36e66-f77d-4e07-8207-db40de1e78fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac18c4f-440c-425c-b023-bf9947ce5d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd5567a-3bc1-49cf-a545-eeede7ebc443",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d031971-062e-4209-8c81-94e826f77601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d00a7db0-b955-475e-8c49-6074cb753206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec20b27-043b-42e6-aad5-a2394d656367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a16d63a-bcd7-45ca-b38b-58abfd3f1fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3f9df9-9f77-42d5-af7d-a27e29774c01",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93321f26-b628-4aef-9880-e0b1ddda07d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9daa5d-78e3-4a4d-989e-b90c45f96bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb42368-87c7-4d58-a955-f33fc6275a9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3966611-d044-4125-9d99-6f3c4b9db821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989d05dc-447c-40aa-b897-f159b26bf1e2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a717bd67-aa46-4693-aeb9-55e12b1ff557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afbe286f-9b0e-49ef-a7fd-b319d3b1278d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa419e4c-a437-434f-832a-8ebed9623c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac75fb4-389f-4cca-8582-eb27de12fa1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192c47f5-cf71-45f7-ab1c-a89aec4837b1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8137715d-3f28-4179-b770-d926697fb66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1188091-b860-4b0c-af3d-a1e203dac2f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6905d597-fae8-4f3e-88e3-ae63ad48efaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8788cc-1419-4fd6-a613-246ea26ecf01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861f1524-9ad8-43c1-839f-9a9d3432ff13",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0a434c-24eb-4304-972d-d798f6824c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8111574c-c70a-4ed1-9fa6-49519605891a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8911c1-3e5b-4676-93c3-1560b44b8549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9eca51c-579c-4040-b495-d6e3221e71ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8997558-0211-4b75-946e-b764f38cb0c2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed315572-4f4a-4e54-81d1-b7451a959896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9280b005-8f48-44ad-a847-eda775eb7675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "601543d3-5b6a-42d4-8c3b-68c40556ee4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f8ce37-cf2c-415b-bffb-9d83a6d3594f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62a4648-0616-4b3c-99cf-c1de838337ae",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b89fbf1-6b71-40ec-86f7-08f7edd053d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b758e4-0931-49be-95b1-c29f1c0589c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8be107-445a-4e71-a1c4-046435d4f209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86bf56db-b567-474e-80c5-f4a1b95baf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49dc023-66ed-45d1-9ea6-d03e71891113",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a8d1e2-38da-4486-bdd0-9394e0d89026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f9d477-9ed4-4373-bde9-a423835f70be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842bd6d7-6054-4c36-83a6-38fd4f88a4e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8943b681-830d-4dbf-8816-ebc94816ef2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614f65b7-ab9c-43fb-bc78-ed598957d49c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3acf2c-4b67-4e2b-8cec-930b270a5339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "473b1874-5cc2-4100-a997-17d8258dfd7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ca439f-8975-4055-baab-3459e53b1442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83fe98d8-4e60-42fe-a7e5-1fc796331d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cbac27-44ca-468e-acd6-20dfad8a5ece",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994a0073-b896-4946-9c30-3796f5408d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae89958a-6e16-4f6e-afb0-ca5405694313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586ecc7c-978e-42fb-9d8b-89375b91ab39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48f882a-2641-4416-8c00-36670143018f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d908603f-9ed1-470f-b2d8-d3a50b56fba5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0e305d-e73f-4173-89b6-b8c8487b129b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c10562-de24-44a4-b898-636ee7ce4e13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f253a8-efcf-465f-babd-b11bdc96c8bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3edc9ac2-8af6-4ee8-85ec-5702e21ab30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e7da90-aad6-4a09-bde2-d43e1cb7db99",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd58b1b0-737b-4c6e-9bcd-4e94f0ea5877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9d832f-268b-44bc-ab6d-d3d118b30d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d839aad-fb1d-42e0-b436-8d4e6328859d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce8298a-3f25-4a83-a771-d75c197fd896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bf5159-a92e-4446-bdbf-9813f63a821f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e610d9f-0a13-40f0-8dbd-c62bdbe34331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7db271c-199f-4c91-9e5b-fd34300ec17b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "254f3a9c-2417-4e34-9054-7ce612ef30ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9466734e-2c5f-4256-be66-438086a506ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d922065-3a88-4eb2-a308-006213071881",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77a7deb-6324-4f65-8218-431d3693c44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b2ba8b-0f06-48d7-b957-91eda53b3cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a6723c-239b-4a97-8ffa-3e13d0b11d17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4dc93f-9021-45b3-b450-59eb3381e001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5699c6e-0699-4e94-b1b2-5e4c18239fff",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4e7cf5-d87a-4e14-9024-6fd4c2c20a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff3f2a6-26da-4c2c-9dee-a44805a04bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "232f9e57-c56d-4216-804c-c06588f1669e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f6398e2-4d53-4ef6-b4f2-efa8cfbccfe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a8c02c-60cf-4e73-a3f4-3ade3bee786a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463b5cd8-bf18-463e-86d9-c68193e307f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765b865e-f586-47ff-ac63-ea36fcff6ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b89df22-3d91-4636-831c-5c81fb04755d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7520b3f4-3f34-47cc-80c0-fe3fa3933399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83771de7-6bb4-4eb5-b006-a5a2f912d4a9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657ad1d7-86a0-4ec1-bcce-d45e18ecec0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea14f4a-21d5-481a-acb3-14710b522814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb7efb8-ea06-42a6-9690-6ea6a1ab0066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed93763e-cc4b-4566-9076-20225d0b81cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b1287e-3cf4-4e1e-ad7b-65409916adf3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73347d32-e9b8-4796-9566-d6a85e49eef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "683c0798-d178-4f11-aa92-453528aa3ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f74bdbd-4e99-4524-9133-8d3e90370184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85664b4-8dcb-4cc2-a9cf-df36240ee912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89a72bb-2294-4f64-bd41-27343dd6b560",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6cd6b4-54bf-47e8-96a0-20864a531dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4738861-a599-4130-b92d-4ea4796d031b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da01f789-8a4b-4b68-8169-b639623173e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c665fee-f79b-4789-9415-ad41ed9818c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e73b43-cb86-4e30-837e-87f9904ec466",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e758cdb-8018-4e7d-82e9-f39b00bb17f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5831df0f-188d-43cb-831e-26e3c3183344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9ad98b-cbfa-46d2-9ed3-c498f6cc726b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b03fdd9-e7ed-415b-bfa1-111ddff2e870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be12324-6a32-4a35-90fc-b63f3970d38c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94445de-5117-42f3-b288-cc0be48aef8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60865415-076c-415d-b928-5d03780696df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0183b6-a13e-47b6-9935-315e34c0dd4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7ee767-adb1-4324-b5bd-338d94c34d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36083867-3780-43a2-8b4d-1ff96d93e45f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58ed5d8-17cd-46d2-9c61-d97afe151ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d984f87-939f-4739-8a18-e4df017d1308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275189aa-ab76-4710-aea2-f67905af0b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174c451a-5cc9-469d-9519-3fcab5d985d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8829e639-2136-4e88-b62c-15e1255a8468",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a26e51-4f45-42a6-bafd-ad86b0e00c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1cb65ac-cadb-46a4-9ee6-8e3aaeefa55b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39115222-0c93-44f0-a294-484db1ddec5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e89b094-fd43-4714-b6f4-e6fce6841b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea331b9-bb7d-469c-88ff-d836ed5eb18f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7b0065-687c-44a9-86f8-633529b1f952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9159333e-8eac-49e1-917f-7d0db4fdd927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58efdf2-125d-44ed-8b76-f475f2795307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708dbb4c-9104-488e-9486-3783610be8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c0ece5-30f8-4a60-a2ad-670d74751f78",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1786b752-ac97-41a2-bca5-225c3b34f2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb9022c-c271-4a25-a3f2-649ebb605f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b63ec65-ced7-494e-be42-3aa91c266802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "337237c6-6a53-48e7-8e0b-eda111de63f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ffc7b0-7ab9-4cf5-b971-4cbb988fe325",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c793cdd0-174c-4b78-aad2-4e8e30e7423d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe42176-1d53-4083-a839-16fce104e495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65237faa-6302-42ae-909e-7abcded59f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ee282a-62c2-4155-8ae4-63a7a70e8f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb108499-e328-41c1-a27e-16a25e095697",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0544ea29-f58e-4ece-b10c-922ff722ae4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c742e6-8ad5-4ccd-8cda-4ef6149ff21f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a44e8d-07f8-4d2a-8fff-04adeecae1a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19faf457-9a8a-4002-a72a-7c45c6ad279a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6916fba2-ad2e-4a57-b50a-4af912851da0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41513c6-cdd8-41b9-8691-c5855fed8245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d9acdec-bab8-4150-a2dc-61dff85ac426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1549eb7b-6deb-4e58-92bc-a8cb041ab0cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c0a2ea-c497-442f-9376-32b29ecc47f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9540283-0922-4421-ba6a-02d6156032a5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990babac-e482-4a2a-963a-d6e9ccf607c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445fd871-fdca-4ab6-abfa-1a7c3f7f6c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "427cdf21-3bd9-46e3-bb24-6b1e6981bcec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad0a72b-eabc-42ba-b622-d8f914d58302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e5716c-7f68-495d-bed7-1dd4544c5f0b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ef4aae-4183-4c4d-a560-279bb9e551bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de99c37a-2abd-4492-acbd-c3a8487a2458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e58f1a-c9fa-4712-a315-b8e2c794d60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27b8a95-7a18-44c0-bfe0-f814685c2ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9782e75f-ccc3-4d8f-a73d-a7aca5196175",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedfb3b1-6e28-480d-a133-528d53f49315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed552eea-5088-4102-b598-ff27173c5af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a363f5-5c3c-4ba3-ae41-f41f242182d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee7accd6-5bdc-4ff6-b854-ddef61642864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6150e079-9c02-460f-bca5-9163fe37e1d0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb62eefa-ef25-4335-a5de-80e8d218ef43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aecda64d-0cee-4f66-8781-81d57e0bedd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "507fdff6-25a2-4a6c-ab63-f2aad4462a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc7fe98-d3fe-43ee-b137-d1cdbca4b9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d297cf-0a0a-4c39-952a-59d7471a9092",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358efb06-455c-4103-bdf3-78f8fd147b7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bf60d5b-8a5b-44ec-9c0f-c1baf6366069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692c4ee4-db77-4601-8de3-5de02d582886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a4f001-7171-4add-9d38-249059d4128e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecfbcaa-4075-4fe5-b4a5-c39689e41895",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f51f5d-ad50-484d-8516-ab3c2d4e1834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2541bd07-bd8a-401e-96d8-761ce0ecc5fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50bf0d8-152d-4a94-b3b7-8ee42cbf4753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cdf45b8-d8dd-4177-a958-7c2334af7774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be0ecd4-fc07-47a4-8229-ddaeebebd66a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3689e683-42ab-461e-bfc7-7e5c74cba33d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60763f71-70a1-4418-9a50-78d2343fc986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a38739c-9a50-4d03-a461-907cb80f498d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e98218-5672-42bf-a3fe-e5cc01e474c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17b7053-e252-4555-ba47-dff077a39bc6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678ccf18-154a-467d-98a5-6ffb74688eea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1de9409e-91cd-4528-81fc-34ccde7f357c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a895ca2-150f-4cb1-8f3b-f67e90b7c69a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c183cad-b685-45e4-9e6f-44adc7f1ea30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f4d64b-ed59-4e83-adac-8e568c631ad3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3b0c33-e8e3-4ee7-b84c-f1297888dfe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "536e53ea-b9a3-49d6-b125-875c9b60a78e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112cae0d-5ae4-4dc5-b105-1cd5d6cd3526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211f777b-84c6-4e37-8cbc-e27c13277ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64676f6-815b-4d82-96ad-ab523fbfb1c7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7a772c-4c61-4424-95a2-3cac02436dfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12898e7f-aa08-4931-b9da-c9fe53fce0dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1cc39e-2ff7-40a3-b044-475d6455a140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebcd99dd-8f85-4157-b3e4-32bae0b3763d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfab7d76-de65-4a61-889b-4105f8b914a1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69378f60-1b93-4c87-aaf3-a154bf49b161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f5b4aa9-a1f7-4444-9203-36f404d2c287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a0a797-e8bd-4b90-9112-a04c85024556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21521a46-0642-4496-8baf-6d9a4abf449b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512bd475-8df9-4b69-a4a2-9659e307ab04",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1abb53e-6b41-413d-9ac2-25258848b8ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5094ca9f-4328-498e-a63d-1267b91b59ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdcf23c-f6d4-436c-9ac1-e0315bdb15d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674a442d-2ecd-4399-bba7-5508b0a06f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd171710-462f-4b4a-b174-e1ef61b3d975",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef14036c-b29e-4d1e-ac9e-8e983286d7a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1420bd29-c048-4be3-90b8-dfb279250602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a00153-ac62-4f99-8974-463740832763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4babe335-2e22-4e94-88c0-65b2c93f99ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9a859c-5c1f-4abc-80f3-054767996782",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1411317c-4035-4a73-9b73-2433cf566057",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2e3136d-a707-4ebf-bcb6-2ab16ff47629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6880590c-9787-42e0-af6e-e723e60604a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf94d03-ee5c-4466-b925-94d69e616649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b35fca-eb89-45b5-b1a4-43e547866c7f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6999166-2be2-4d78-93a9-f4088b3acec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c78cfecf-8736-4fd2-92dc-cb02002e0b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38346656-371d-42a4-acb8-8ddcb50fe80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a7ec84e-05a1-4033-ab9c-38660dc13574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7012d53e-da5e-4f8a-ab17-4a56bf1c8332",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba50c38-9b34-4f94-ab30-59df8adbdc93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e915ca0-ec0c-466a-aa1a-77cffebc66d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c558e2-61b7-4b53-8752-c7db682c80fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f508fa-c19a-426b-b0d6-d3b700fa1604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52fa872-bd76-4925-a8ed-1cd61f167ba3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47eb7f0-b70a-482b-b06a-83ce9c778b57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07ba7ef7-f0e4-4570-aa82-d1e72a795b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21959ff-0665-4594-b27e-b5445976e138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc77ef4c-ff50-44a0-9f58-6899bc9f397f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c370d7-7f41-4588-8d7a-1d72ea0acc2a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1100c940-1042-4b98-88d8-7d9609fef16c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcd89f65-0cd4-492a-a03f-d23d2a4532ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194fac75-a520-496b-b56b-a948e98d9cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf197dfc-736a-4d51-b907-6a03bdacf16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62df3753-7dfd-48dd-8f96-f7b5e46b29c7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0932a830-2108-4f9e-a058-1791cc2b61e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa826a2a-824f-41a3-905e-8187addc751c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32231b62-aa15-443c-b733-0322d0f754ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be4abac-4b8c-47d9-a6fd-16616d282d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5ec606-c556-4795-9fb3-d044224f26a0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eee4eb1-4022-4a2e-b323-01ef2820083d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fb90878-f6a8-4eb2-bc5e-d2656bb5f34a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "762e72e7-2ea2-4adc-ab09-f2b896289f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efeed049-2aee-4fb7-bb69-8135a39283fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bce49a4-4511-4562-992a-42195088bd45",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b761521c-e3ac-43b2-9f8a-9e81e465b3ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2be8fd0-b456-4905-b801-1606765a2e2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c9ab69-8787-43b9-b72b-d7ca97d54d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb6585a-e1ef-42c5-8785-635fb5602a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe2f93a-b21c-4608-ae67-6e374ccb1d72",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70172c9-0da2-4c16-b639-30b8edd36261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebb89219-8ffa-45c4-ba58-6cb911f3fa30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053415d2-d276-41aa-94ac-c5c4047ec686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6eedc3-dc6f-4dd6-b325-61795aa800ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbe4b4e-57a8-4411-9e56-9715b8d94df0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b545f65-1967-4356-b536-6c388b8c03bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "209494ee-067d-43a4-b32e-22f064c1690b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01e6527-aedd-4d17-8fe8-f0a8b01dc701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f4b63d-2109-4911-84ff-dd8779a12f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf903348-55a3-4712-8ef5-b6c2b8053829",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1e7260-2324-4286-8437-afaf4fca48a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a2d0c76-0955-4367-8dbf-058c3c78ef56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff0d23b-f9a5-4c7c-a69f-f2676a653c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87532c82-cf64-4e74-83ff-a266be371b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01364c52-65aa-4fd4-a446-de62611498cc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0377f6-6acc-4a7d-8a2d-4a6001464738",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19069171-3da6-4e73-8798-30d4a0d3c30a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225a5115-6a10-4576-950b-5905f4fb668e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7739a752-e4b5-4498-a3d2-56697f636934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6f6e2c-8a9d-4fa9-9541-2b38428bb7e3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acc3e48-e529-4085-a402-680c5da4e4a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "829f5df9-d946-4d70-b88c-037981b96d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5311593d-f7b8-4c46-a293-02827bd99753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da100f1-bfa8-481f-bbc7-cf2f8ed8ddc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ea5f18-c939-4c98-8f63-2fc0478d7938",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf69a19-3fe4-423a-9aa5-260e563f2e43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c14bc958-e3f5-413f-beae-2dcc8d7151cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc80afde-7296-4a68-86b5-24922338d15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "439e0149-751c-42d6-a085-ceef4f7c3806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df486cf-3dd8-4524-bf8b-a0e32a9eb626",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e4616b-8004-47c4-8153-75324dde932b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa760456-58b3-4358-8485-d7ac57e95397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8882cd-43f8-4fc1-a952-766cc4163b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc54194-cc69-4ed3-be87-f93fd311d5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772f1c47-4c4c-420f-8b9c-f9ea9212056e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c26090a-2dd1-49a3-8912-03505f129e4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef1a852c-2885-4c2d-b1ed-9c1318041aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b2d6a6-61e8-4afa-8a1e-53e2d58f428f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0be86a4-fffe-4d81-97c3-0dae03b8c919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fabf94-1cef-4b5a-a5f0-31032f1bfaed",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90eab163-889d-4529-8c8c-b64c841d148a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc3f32cb-a481-4e31-ac34-f9925d458692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a802dd8-590f-4e17-a881-c1036980e5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be13a032-3ebd-4f89-bab9-0e2bcb008ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba0e8c9-4340-448f-a905-825aa81703b6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60172de0-020c-43fc-847d-95cec3c0fc19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a7fb64b-662a-4882-b610-3f0d1b44e0d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d953a6-4805-4b2b-8017-2f89751ba657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eed7fd4-715f-4e5b-8cd7-3c664275c18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e47f1f4-d6b7-455a-99ae-622453b26feb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6c6eee-5a2e-4404-9cdf-397bb354c047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de718217-3f74-4240-900b-83ea7e0a69b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcf4c2f-f20a-40a7-8a87-3b1efb6cb4a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9d04c72-02e7-4e98-999d-439bc8bae866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d469f1-0cf0-4e99-b003-07c204c46c6d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c746ed2a-ee75-4c97-be17-d286b911a91b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e85b31-d4b5-40c7-834d-0e8c64627d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aadc997-8cce-48cc-8c01-8c2fc26b592d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d0f849-ba1f-4cb6-9901-cf47742709f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ab71b0-7927-4549-a94d-293ce57ab560",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14eda1af-2c11-4e25-a5a0-2e4d4ea458f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0130416-30a0-46eb-bc67-044382ecbc70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4d4726-af21-4b47-becf-14687ffe8e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8530852e-09c3-40f1-844c-af957f7d695e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7fc35f-993b-439a-b436-e7f72bceb662",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa92960-6ec3-4073-988a-dd6f4796e57c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "288696a6-a233-443b-b581-d566f7f1ad04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ed3eba-1d84-4670-a5cd-2c176dfc8852",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108e7185-2229-4704-bf13-612f5da45a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f504937-a384-4511-b075-d48ae7755e43",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2748084-f8bc-4419-a670-7686bf583b64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "176d6e28-2678-44f7-9e33-a18985f966a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd0ba26-0b5d-460a-b73f-688de5ef79b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1199639c-e27f-490f-9b8d-73975f41825d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6300310d-533e-45c2-961d-3862ae25397d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5f30c6c-86d3-453c-a479-b8d9b9e562e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a334b570-dda0-4d9d-8b3c-a064eef15463",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61bd694f-3bab-4195-a26a-36c7fedfb630"
                    }
                  }
                ]
              },
              {
                "id": "6eb0a571-1a07-4661-ba2e-a5112b7742d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52dcc3f7-584c-46eb-962b-9dbcf098927b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befdb11b-7a6b-4d86-96f4-9f703e5c30e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "74414350-a11a-428c-beac-0bbd968b44e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46017775-65d1-4793-9a8e-935518e80e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "791ec589-9a85-4d10-b113-32e24ea5e2ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbe0928f-d5f6-4a77-8ca1-0155503251f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c4d8f06-f767-40b7-a07a-1f6ed4889b84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e697b6ab-952b-42f1-bd30-dd2a4054eff0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da39543f-ee9e-4927-b793-a09c604559b9"
                    }
                  }
                ]
              },
              {
                "id": "20cd8fd7-f6f5-4ffb-a156-7eff4d9464ca",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "51a20039-1911-4c36-b2c4-08714cb7be6d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e13ef83-cd54-42a2-9066-50c9f0bd22fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "def17930-2978-4f81-a553-edeebc54af0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6be201-ed17-481b-97b2-6a5e9fd3e5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dbf128d-54a4-42a5-85d1-a18f9657a436"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b3463fdd-72a2-4947-9fe0-bea0f2512cd4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9178ad86-1001-4261-8ba3-9dcca06ce1f1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5b16227-6eae-4815-80e2-db4666defb02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ad0fcc67-ef9f-4070-a549-8182d1144dc4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f73ab88a-3e31-4dd6-8e04-f2e7b14d05b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21b00a22-7400-4338-8002-6f7b435e65f7"
                    }
                  }
                ]
              },
              {
                "id": "38ed3f7c-b003-4809-a86c-ea271f89a408",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27e8851f-1cdd-428a-8724-b767cadd05bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1dd0e181-bb35-4c58-a578-c5c59d31f9a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a94820a-c7cc-4187-adfc-9a78aef308da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3669100a-c6d9-47b4-a117-00fd0d8b1bcb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "797f33b0-17b8-48a2-8184-bc9815702ceb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "22512416-c480-40a1-9ccd-44e835e81adb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf476ba0-a3c1-446a-8ef4-1a4acbceeae3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29403776-ab0f-4758-8519-47cee5671603"
            }
          }
        ]
      },
      {
        "id": "88072a66-806f-4de4-8728-e34915351ac4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9b56786b-0dd7-43f7-b046-6878cae3b826",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a0d7034-e959-475e-a3bb-d2e81c87ddbe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d41ef254-0b23-4114-a825-8e2ff28b5af2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c20b806-f865-433c-884f-3126c88de56b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "93abb329-e43e-4571-b2c9-85eb786604e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b31ba7-39e3-4d77-bea4-816d61c04e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e82fe540-d266-4959-a792-154f322ca9ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a633f41-3f52-4484-9cc0-ee97f9d21dd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c3db2c9-2512-4bdf-8585-651f0d1f6a87"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67d7988a-8f01-4070-ac71-dc8dc872d40d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "101ba0f7-5d0d-4d82-9432-55e10aa75bf6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0441ad98-e812-4e5a-945f-b164b9eceeeb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "44234855-7d64-450b-8cca-313c0bb09959"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b76ba9d-4f21-4d61-88d7-3735ed21c161",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "944b1795-d797-436e-b708-27d94d4e6ba2"
            }
          }
        ]
      },
      {
        "id": "1dff692f-0492-4018-b0bd-17d01f86e04f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "18067fc4-aca9-4d62-ab3d-762fb6a62502",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47e0558b-c4a5-4156-ad57-1e4591490ddf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fcfb706-2be0-4e4a-8d5a-b87121ad23c6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe11540a-3b10-4851-8f85-57e98a85c027",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "247098b9-93df-4be2-8f75-3482528a7835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6906050-76a3-4daf-91f8-ca9f7d5fe252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "395e06e4-083f-4b4e-840c-ff9588807e6a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "346424f3-23b1-4633-a3ae-af42105376e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "395b3337-8876-427c-b997-e70826cb2638"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0d7bcc2-4594-416f-9927-1b4748541b26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29e2b93d-a684-462b-99e4-f040e925ccbe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55b12e32-5785-41ea-a5b2-adab11cf75da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb5753dc-1faa-4b8f-a7e0-bf10e5a05057"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea44a2e3-b9a4-48d1-8062-6df344f61ec3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dcfdb488-9410-4841-babe-4434eb055bd3"
            }
          }
        ]
      },
      {
        "id": "d0703065-2411-40e6-8184-7b64539ed62c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3b2b4283-ac3d-4053-8c2d-39dd12b47da9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8264a92e-dfaa-4179-a7b1-a47634237ba1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b773c0e-9b60-4e17-94fb-64a3272d6ed3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063b91fd-7930-40d7-bfbd-7719f1a9efdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4d42870-00c2-4c79-bf71-4289be06378a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e6a129-50fb-445a-b746-36c290659046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "324061cc-a319-4e65-b4cb-471f5844c15f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccefd476-7041-4bc7-bb17-a98765c4b30d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b45194e7-56cd-4574-a491-02296e5cb2fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b68ae51-918a-4af2-94e7-ebcbbb2a66d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fca2781-a9b9-4ebd-a02c-636298846bcc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "304a9b3f-b038-4571-a83d-4e260672ae62",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b72b627a-f990-4d17-9ecb-91d489f030ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d14027cc-eb16-48be-80cc-21b9583f648f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f42eed61-6885-4225-a2ab-d6cf9237b12d"
            }
          }
        ]
      },
      {
        "id": "2ed4a719-50d9-4211-8469-c05e7c65df9c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a8d292e-fb52-4c41-8c37-a87fdab760fb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bec046ca-1984-450f-8a52-bf253c4e16d8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4c87fc17-0202-4fc5-a999-e872883490ed",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28dfd76e-3b26-4a62-aea1-160cd1c2e86f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "139afe8e-79b0-45d7-b1dc-f91f8294d0f5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.29122807017538,
      "responseMin": 6,
      "responseMax": 531,
      "responseSd": 63.17802271860198,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706402201151,
      "completed": 1706402228740
    },
    "executions": [
      {
        "id": "78485bc4-37ce-4ac6-9114-e319afc14f8a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "69172e47-93d1-4204-94dd-6bb68f2590b7",
          "httpRequestId": "9e8184d3-5261-4abd-a8d2-fcaf4273161f"
        },
        "item": {
          "id": "78485bc4-37ce-4ac6-9114-e319afc14f8a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a86f1c67-6d00-448f-bf86-c40f3fa26ef9",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "8c3af0cc-0001-4fd9-94ff-47be21d95d93",
        "cursor": {
          "ref": "fc712c38-40de-4700-a9f2-fcef71e30b9a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6550592f-43bf-4c19-b115-2e0dbfa6d52a"
        },
        "item": {
          "id": "8c3af0cc-0001-4fd9-94ff-47be21d95d93",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "75a9fa1c-6461-456e-83fe-a74f6a3ee6d2",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "5624f17f-f348-4db6-8eb2-b1f70017440a",
        "cursor": {
          "ref": "c8c14e7f-1301-4a27-a456-7765f05e4e0e",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "625d8916-303e-467a-a6a7-5fed15b828cf"
        },
        "item": {
          "id": "5624f17f-f348-4db6-8eb2-b1f70017440a",
          "name": "did_json"
        },
        "response": {
          "id": "84e59d04-16c6-4c0d-9c39-5fa3e55bf95f",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02b63b9-705f-4dd4-855c-b88b95302ad6",
        "cursor": {
          "ref": "e348dfde-240b-44e3-a934-b470b76a8a44",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8bfb961a-3ba2-4e57-9f74-57c0394e102c"
        },
        "item": {
          "id": "b02b63b9-705f-4dd4-855c-b88b95302ad6",
          "name": "did:invalid"
        },
        "response": {
          "id": "90149ac6-86e2-4b9d-9b9e-520994e98c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02b63b9-705f-4dd4-855c-b88b95302ad6",
        "cursor": {
          "ref": "e348dfde-240b-44e3-a934-b470b76a8a44",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8bfb961a-3ba2-4e57-9f74-57c0394e102c"
        },
        "item": {
          "id": "b02b63b9-705f-4dd4-855c-b88b95302ad6",
          "name": "did:invalid"
        },
        "response": {
          "id": "90149ac6-86e2-4b9d-9b9e-520994e98c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fa382f-bce6-4993-887a-3ea460b3892f",
        "cursor": {
          "ref": "13059c19-7d5c-43d6-b898-6034b131a102",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5cefe424-ff07-4f6f-bcb5-e1e8d369a3b0"
        },
        "item": {
          "id": "68fa382f-bce6-4993-887a-3ea460b3892f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4674318f-3b39-47b6-91db-7b3790d80152",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e27c071-6967-40f2-914c-08a3fad34f5c",
        "cursor": {
          "ref": "36063049-3685-452b-b0c4-fee77fe440c0",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e44b3c93-94b3-401c-9e11-0e4928bb7bd5"
        },
        "item": {
          "id": "8e27c071-6967-40f2-914c-08a3fad34f5c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "28453bdf-6910-498a-a5c6-87c1cdf4a602",
          "status": "Not Found",
          "code": 404,
          "responseTime": 54,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc788c01-4121-4363-8312-4fd121ce00f6",
        "cursor": {
          "ref": "a53bd5bf-e022-462c-a43f-65d644bcb099",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "036ae961-569b-4fb1-8cd7-ad60e16dc349"
        },
        "item": {
          "id": "bc788c01-4121-4363-8312-4fd121ce00f6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f0854e05-8248-406d-8ad7-2e7d530563a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8b9ad9-8f16-4c11-b8b5-b255478e7ffe",
        "cursor": {
          "ref": "cba5d47c-deda-4a23-8f9a-ad923ab52d9d",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bedba424-6052-4d37-9a2c-b497ab012257"
        },
        "item": {
          "id": "8e8b9ad9-8f16-4c11-b8b5-b255478e7ffe",
          "name": "identifiers"
        },
        "response": {
          "id": "a264ad46-e792-4605-838a-0e9332571b62",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2375c312-a0ee-4026-8652-a361dbce3f25",
        "cursor": {
          "ref": "f37e30df-6228-4457-9921-be7df8c1e837",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bcbf739d-fa71-4540-bb06-ff41da99bd8f"
        },
        "item": {
          "id": "2375c312-a0ee-4026-8652-a361dbce3f25",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d97040c3-c663-4dfc-a026-90adad371936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bfdf38-aba8-4076-94d3-fedd4cfc892d",
        "cursor": {
          "ref": "51b1602a-3227-4db2-9b38-acf272ec54fd",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "44d68f43-9079-4a32-8250-fd54b4589af0"
        },
        "item": {
          "id": "52bfdf38-aba8-4076-94d3-fedd4cfc892d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4def8bc6-3dd7-432f-bcad-3f8539922f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2083b65f-0dfe-47c7-86f7-5686894dd1cc",
        "cursor": {
          "ref": "f6098871-ab81-45fa-8948-7ce5611e0995",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "18bd4d7b-0b6f-4a07-a96f-717720461304"
        },
        "item": {
          "id": "2083b65f-0dfe-47c7-86f7-5686894dd1cc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ae9af2d2-c301-4233-ac95-ee3599e57801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2386bd50-0b13-4619-b270-91e5623228cf",
        "cursor": {
          "ref": "c79e2e9e-fcfc-45c5-a68f-e737accc731c",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "913a4edd-34bd-4b56-bb5a-70e613294ae1"
        },
        "item": {
          "id": "2386bd50-0b13-4619-b270-91e5623228cf",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a634afc4-c758-4860-a44d-31b81b129f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb519d4b-f477-492f-a26b-e0d5cc4386b9",
        "cursor": {
          "ref": "22d15d75-30c9-4017-8d7e-4ddf9f9dfa36",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "42e0a802-c47d-4fd0-93f2-cc3aed40d4a8"
        },
        "item": {
          "id": "eb519d4b-f477-492f-a26b-e0d5cc4386b9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "89a7a7bf-9e19-4dd2-8543-8b0fb8e68aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074ab676-7cd2-43d0-a5c6-de35d24b3477",
        "cursor": {
          "ref": "938b4bef-912e-49a9-9294-c11896db8791",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cb459f14-269b-40f7-a4d7-1f8daf299a8b"
        },
        "item": {
          "id": "074ab676-7cd2-43d0-a5c6-de35d24b3477",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b86101ca-b9f6-48bf-8c93-b5efeed5f5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a73ca83-3178-473b-b69b-ebb41af9bfc2",
        "cursor": {
          "ref": "73c78502-3072-4399-aa34-ecc962bba8f5",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9ce83c79-b9ae-4527-9039-5fae38e01f9a"
        },
        "item": {
          "id": "0a73ca83-3178-473b-b69b-ebb41af9bfc2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6c4b3441-9dd2-40b4-bf66-63494626c79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7c7bf6-65e4-4a27-a7e4-3fc28bf4cc33",
        "cursor": {
          "ref": "13f5e63e-a70f-4187-8325-ef5c492b66f9",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3d8471d1-2f9f-4067-92cd-738e70f850e5"
        },
        "item": {
          "id": "ad7c7bf6-65e4-4a27-a7e4-3fc28bf4cc33",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "00355e90-8697-4491-b21e-621edf14f322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3329af7-5fa1-4411-bb56-ec19253ce4e4",
        "cursor": {
          "ref": "af5b4270-cd2d-4fe4-bb36-c043ddf1efd2",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "723aad6a-87ae-45bc-8200-fdc195b4e56f"
        },
        "item": {
          "id": "f3329af7-5fa1-4411-bb56-ec19253ce4e4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "32e46906-e8f1-4426-9819-3f23e78b3eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babe2bf2-dd2b-4d46-a69d-bb2c79106b4a",
        "cursor": {
          "ref": "6e7b5af6-c456-4549-8038-4d0f89c87e5f",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d02f1ff3-712c-4d9d-a0d8-e2f185e39cdd"
        },
        "item": {
          "id": "babe2bf2-dd2b-4d46-a69d-bb2c79106b4a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "62ee7e7e-d46f-4d85-adb5-81b381bcf690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3126d91e-ed79-4599-92fe-aca9151158e5",
        "cursor": {
          "ref": "13797d50-fb0b-4e62-b607-60fd4d18a5d2",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6e8df1f8-c8c1-47e0-a42f-64e45eb8bf10"
        },
        "item": {
          "id": "3126d91e-ed79-4599-92fe-aca9151158e5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4bfc85f2-a5e3-46c1-9685-7b8b42e989ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce923553-f51c-4654-a819-9c1d8fac19a6",
        "cursor": {
          "ref": "9a68b31c-470f-431c-844a-188f36d8040f",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f579039e-0d4e-4cb7-804b-6e2ec6afc6ff"
        },
        "item": {
          "id": "ce923553-f51c-4654-a819-9c1d8fac19a6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "17b84ab0-95d3-4af1-8512-42730598b342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb0e702-d791-4ea9-a5d0-4763a8db1b2f",
        "cursor": {
          "ref": "0d9c97d7-572c-4f59-8711-4d32586aaca4",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "88a96c69-adc6-4c6a-bf74-c01dc4e93ba3"
        },
        "item": {
          "id": "bbb0e702-d791-4ea9-a5d0-4763a8db1b2f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "128cfd4c-5aef-4f57-b56c-1b20872e1948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0f4f32-3cb1-4db7-968c-fc70f1a20417",
        "cursor": {
          "ref": "42b09f73-d140-453f-ad72-be0e22f2601d",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fabc0cfa-d114-4675-b17d-d7993209ed54"
        },
        "item": {
          "id": "5e0f4f32-3cb1-4db7-968c-fc70f1a20417",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9c52177d-40d3-412a-a960-266a800a5f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ed4c8e-c796-45f6-8068-d2fc36ce499c",
        "cursor": {
          "ref": "0d73be48-b4db-41ae-b900-ff3d4a6b52b2",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ff6b11c-36cf-4caa-b6cf-76634e49690e"
        },
        "item": {
          "id": "e2ed4c8e-c796-45f6-8068-d2fc36ce499c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cc3a3853-acf4-4327-9014-fc874d06728b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde21870-d8c4-4687-ba14-c43a52ea252b",
        "cursor": {
          "ref": "41ace3e3-a0d0-486f-a0be-d60baca3bf03",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7b34411b-add2-4185-a2ed-972c1ad73f6a"
        },
        "item": {
          "id": "dde21870-d8c4-4687-ba14-c43a52ea252b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "747c1507-8c90-472f-87ed-6d27669930e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d747caaa-5902-450a-8835-90148f82c7c4",
        "cursor": {
          "ref": "bcfade05-d006-4059-ade5-a244c3c31f2b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "65906b61-f31c-4a95-9bc4-972e7e262a58"
        },
        "item": {
          "id": "d747caaa-5902-450a-8835-90148f82c7c4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e14c3a74-9632-423a-bd5f-6ed1111daa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92151cc4-9dfd-4a9c-90a2-ea921eb1112b",
        "cursor": {
          "ref": "269b26f7-1df4-4d6e-b475-0ba5a595ba92",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "dcd88bf1-3d9c-440a-ba7c-a5e1449f2ffc"
        },
        "item": {
          "id": "92151cc4-9dfd-4a9c-90a2-ea921eb1112b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b7c1901e-ae2d-4132-ad9a-daea0582bc41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b59bfb7-f5f8-45a8-9809-f6186a55c5e0",
        "cursor": {
          "ref": "596a8f2b-e608-44d0-a17c-3122f637b918",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ae805b55-e58b-4edc-807f-3c0c2da0aaf5"
        },
        "item": {
          "id": "4b59bfb7-f5f8-45a8-9809-f6186a55c5e0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e59ce0dd-3b64-4bc7-b03f-96002108a509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6328d39d-d92e-4c1d-a1da-12a25eb535e5",
        "cursor": {
          "ref": "ca4479f5-6a3f-4d1a-9fff-93114e973e3c",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6f16b746-abb3-4d47-8eb9-5df40ea8d42d"
        },
        "item": {
          "id": "6328d39d-d92e-4c1d-a1da-12a25eb535e5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "118e6e26-c9a2-44cf-a110-173e5938a9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580ee564-5d15-4d43-99b1-0ebacbde16ec",
        "cursor": {
          "ref": "7bf2ecb1-fded-4bf4-a75a-e7c8d914c2d2",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ed696724-fcab-4edb-915f-3402050ff045"
        },
        "item": {
          "id": "580ee564-5d15-4d43-99b1-0ebacbde16ec",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c2a5127e-7f93-4da6-8986-ce15950f5ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8bd35c-8f95-4ce3-a191-a8d00cd808a5",
        "cursor": {
          "ref": "318c1cfe-aa39-4146-98c3-34091a47e4c1",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dff8b176-ba65-4a7d-ab1c-facf30ad4569"
        },
        "item": {
          "id": "ed8bd35c-8f95-4ce3-a191-a8d00cd808a5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e55e1178-6d6f-4c94-8fe1-c2d1ba8666b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da162bc-4f6f-491c-9e30-8d89025e1514",
        "cursor": {
          "ref": "a6bcf21d-4ea5-4ee0-85cb-e2828e278fb0",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6bf29f11-8fdb-401f-a303-b282df92be94"
        },
        "item": {
          "id": "7da162bc-4f6f-491c-9e30-8d89025e1514",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dc82c30a-3484-4357-86dd-2568e8caae7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed97010f-828c-4f40-8cb4-bce4295d745e",
        "cursor": {
          "ref": "6475f7f6-7938-403f-9869-59f47cee18f8",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c8645e7d-5315-4df2-841b-00d62424f58f"
        },
        "item": {
          "id": "ed97010f-828c-4f40-8cb4-bce4295d745e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5e1fb07e-866e-4099-8728-0d859e280b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f212a3d3-5153-4fd1-8d2f-3e7a035362de",
        "cursor": {
          "ref": "38db70d6-784f-454a-9b6a-a5c172b1b93b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "feb88f5b-1282-49f9-9beb-ba9b3c791b24"
        },
        "item": {
          "id": "f212a3d3-5153-4fd1-8d2f-3e7a035362de",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d0a6c679-1d62-423c-886d-d1fd484abf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842f5ffb-ff2f-4917-9514-4603789c5d7e",
        "cursor": {
          "ref": "9fce91d3-8003-4682-a1f8-09658c03e660",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8b26811c-6831-4bb5-a2cd-31cf3681f8a8"
        },
        "item": {
          "id": "842f5ffb-ff2f-4917-9514-4603789c5d7e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c6c6ca0a-f2da-4679-a1aa-29fcab89abff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25aa2d15-f179-47f8-a758-08be388f743a",
        "cursor": {
          "ref": "7c94437d-1b3d-421e-b1ef-c9e2e91a9c5a",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b868e602-d853-4fdc-a9da-c5d2edfacc10"
        },
        "item": {
          "id": "25aa2d15-f179-47f8-a758-08be388f743a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bb19c114-e69c-4119-b582-9680e7d556fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15e0c85-36ee-46e0-914d-d749644323d8",
        "cursor": {
          "ref": "ad1c65a2-e99d-401c-984a-ca36723cecaf",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9a3c27dd-ab95-4385-90c5-272b8b9a230c"
        },
        "item": {
          "id": "c15e0c85-36ee-46e0-914d-d749644323d8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "272903a2-7011-4dc4-9e9a-70eee5f00f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e1e34a-3dcc-4db7-ad1c-8a462743375a",
        "cursor": {
          "ref": "96b085ff-d0bf-4a7b-8bda-940e717f0fee",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f1b3b95e-7a34-47b7-94fa-1f20e65b04b9"
        },
        "item": {
          "id": "f4e1e34a-3dcc-4db7-ad1c-8a462743375a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a8dd0129-387d-4683-9310-9edea5ba9e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adc4ea0-214d-4afe-b7d9-b5311d4e0234",
        "cursor": {
          "ref": "9273b9f3-9409-4829-b9c9-dde18811af84",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0d253d0a-4133-49c8-8fd3-a962b7b869f1"
        },
        "item": {
          "id": "3adc4ea0-214d-4afe-b7d9-b5311d4e0234",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f430e8b1-b8c0-421b-a49a-44e33fda686a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154e67f1-b1f8-4714-8e05-283befb6d5f3",
        "cursor": {
          "ref": "1e90399e-ef89-4447-8722-26f449189d17",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3d4cb36c-5f26-4d97-8e1f-3b47e7180c1f"
        },
        "item": {
          "id": "154e67f1-b1f8-4714-8e05-283befb6d5f3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "74017e94-9f00-4122-80ba-a05430590fa9",
          "status": "Created",
          "code": 201,
          "responseTime": 531,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4589a599-0219-4f6b-a6f8-f6ee173b37af",
        "cursor": {
          "ref": "de18817f-7ac0-46bd-b04d-9a63120f064b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1d3e51cb-9a60-42a8-b958-3ca28dc8192c"
        },
        "item": {
          "id": "4589a599-0219-4f6b-a6f8-f6ee173b37af",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f4a91af7-8ed6-4989-bbdb-0dc87a206357",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "035021ac-737f-42c2-99d5-58c8350a29b6",
        "cursor": {
          "ref": "c834eb2e-c7fc-4784-b087-73d7532ae7ca",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c59cb863-428f-4aa2-8afe-beb4260b3cfa"
        },
        "item": {
          "id": "035021ac-737f-42c2-99d5-58c8350a29b6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "75beb9f6-3ea5-427c-81e6-5c0fcfd4d9e6",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "71a1a68f-fb3d-4bce-a2e4-8ba8011c9380",
        "cursor": {
          "ref": "4b495ca9-d603-469b-a3f0-2b5e42333d55",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "79d9baf4-1faa-4225-86cc-7117acf296aa"
        },
        "item": {
          "id": "71a1a68f-fb3d-4bce-a2e4-8ba8011c9380",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "50e5f422-70c8-4afd-80b0-c4b70f2f907e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02ece6d-d9dd-4709-a299-c65455f9fb58",
        "cursor": {
          "ref": "a8ee9127-77ed-4746-9b54-b751ebe02716",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cf042eca-b375-4c3b-b40d-e262ee11490e"
        },
        "item": {
          "id": "a02ece6d-d9dd-4709-a299-c65455f9fb58",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "935ffc29-3500-4495-8a72-7a0a06073506",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9a20836e-487a-4ca0-b395-272c089ea19c",
        "cursor": {
          "ref": "e3f931c9-eca9-4dc1-9c13-b00b34d7f425",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fa2b0717-095d-4bca-b7a4-cd305e517527"
        },
        "item": {
          "id": "9a20836e-487a-4ca0-b395-272c089ea19c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ae2b05a8-800f-46ea-bf67-b78b1f34b8f0",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f8a8df30-6e77-4556-b9c6-7c550593de79",
        "cursor": {
          "ref": "303de97b-d465-4eda-a938-50d3bc5ae0df",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c5404077-d173-4bd2-af58-3542dc2519a7"
        },
        "item": {
          "id": "f8a8df30-6e77-4556-b9c6-7c550593de79",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "318d309c-b411-4328-99ed-91e68c08585b",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0d758598-5a47-44a0-9bb0-bdcab56ba495",
        "cursor": {
          "ref": "b1487dde-d20b-428a-a129-24f99fbbef5b",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f00a0d82-2c4e-4b29-af1b-ff97658f1701"
        },
        "item": {
          "id": "0d758598-5a47-44a0-9bb0-bdcab56ba495",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "843dc995-b196-4f62-9230-6e50378e6ea6",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ce31272b-3ed4-44a7-92a9-b674c9e6a7fa",
        "cursor": {
          "ref": "05c6b085-61bc-4e6b-b6b0-d91e6a1e72b7",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4fc58173-1555-46c1-847d-e7d9dff4c313"
        },
        "item": {
          "id": "ce31272b-3ed4-44a7-92a9-b674c9e6a7fa",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7568b3b9-c2db-4a44-8638-5575bdbc0a2d",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1e6233d2-2e90-4eb5-9cd9-9cba645e8f2a",
        "cursor": {
          "ref": "dca22994-2af9-4ee2-8ace-cc16caf1abf1",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b908df96-3de0-4f41-a907-22ba8a7caf0c"
        },
        "item": {
          "id": "1e6233d2-2e90-4eb5-9cd9-9cba645e8f2a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "61e23cc5-83c5-4ff0-b63c-7fa287ef57c8",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4a7109fd-e868-4356-ab4c-dec2537d5c05",
        "cursor": {
          "ref": "bbf35b1a-3303-4807-b2bc-de1ee5a879c8",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "35aafa2a-00d5-438c-b12d-12e8f8d7c4d7"
        },
        "item": {
          "id": "4a7109fd-e868-4356-ab4c-dec2537d5c05",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c6c095ae-4dd3-4c1e-bbdb-2e26d9abc643",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "039ded05-611c-42a1-99a3-e59bc865fdab",
        "cursor": {
          "ref": "c6a9baf2-a6a6-4de1-afe9-83c9174272c7",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "15937fe9-d26c-4af8-aa04-e2bbc505eea0"
        },
        "item": {
          "id": "039ded05-611c-42a1-99a3-e59bc865fdab",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a2c97bcc-4b3f-41c2-ad48-475a0f1575cf",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "727627a0-bae4-4d80-be0a-7a50817d56d6",
        "cursor": {
          "ref": "47a175dd-11bf-4702-9d90-487fbba1f679",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cb584c8f-b889-4d9b-aba7-3ad288e0d9a1"
        },
        "item": {
          "id": "727627a0-bae4-4d80-be0a-7a50817d56d6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6cfa1c9b-3f36-4674-a8ca-05c6c255017b",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cf2bdedc-0e87-418d-b544-258861dbf660",
        "cursor": {
          "ref": "84d0cf93-1e18-43df-adc6-56a95e1920e7",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f09e848c-435b-4450-b051-0d457057bd8c"
        },
        "item": {
          "id": "cf2bdedc-0e87-418d-b544-258861dbf660",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1978d776-f8e5-43ac-b20c-8886c5c13cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a00482c-553a-45c8-866a-3c9e429e3183",
        "cursor": {
          "ref": "ba032cfd-90e3-458f-8fc0-d6a47cc126c5",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3f3224df-c941-46ad-aba2-faad7374f042"
        },
        "item": {
          "id": "2a00482c-553a-45c8-866a-3c9e429e3183",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "44656557-0761-4c86-a0ea-2cea8b305f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50316a3-309b-43fd-9c7b-e6c0bb314db0",
        "cursor": {
          "ref": "d14e4334-d868-4006-9538-e95471d081f3",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6067dc0a-22d9-4fd5-8196-e4fea7965c9e"
        },
        "item": {
          "id": "e50316a3-309b-43fd-9c7b-e6c0bb314db0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a3388b6b-7eae-484d-bc4b-cf06907c05b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afce973-aaea-4818-afe9-50e728c69706",
        "cursor": {
          "ref": "6e1870b4-3c9a-4509-ad5b-976df3c12982",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8059df1e-420d-4cb6-a124-3f9969f41382"
        },
        "item": {
          "id": "9afce973-aaea-4818-afe9-50e728c69706",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "00edcdec-3783-4dc8-80a1-a630a3b5a63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32df4f6a-658c-4efb-9ccc-84a28afc21a5",
        "cursor": {
          "ref": "f923151d-8df2-4287-8b4e-e8509bf6b1ee",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "13a45e90-4be7-4fd4-9288-1db922673717"
        },
        "item": {
          "id": "32df4f6a-658c-4efb-9ccc-84a28afc21a5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5ee4bf02-83eb-4061-8188-de20f39ba268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d6da43-ba02-48f4-be2e-bacb97653bb7",
        "cursor": {
          "ref": "c2745f73-8317-4acb-ab75-885bbf9b20ad",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f713dc01-2d4b-4a88-a13b-85f6a707ebf2"
        },
        "item": {
          "id": "36d6da43-ba02-48f4-be2e-bacb97653bb7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bc8b345a-7faa-4fbb-8744-2e68f8164d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f51717a-4deb-4cec-b6e6-61d27373c487",
        "cursor": {
          "ref": "4f46c4ae-4b55-48c7-b076-432cc05ad7b0",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "de2f90b3-3516-4278-8067-6b2ea2af8cc2"
        },
        "item": {
          "id": "0f51717a-4deb-4cec-b6e6-61d27373c487",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "89d0ca09-d89a-4816-991e-36f10740fff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a45f51-47a2-44d2-82b5-fc5d492bacf1",
        "cursor": {
          "ref": "4423e820-a9e6-427e-88ed-05e44c0a8605",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "193f78c5-8145-452b-adae-51c0a58d3e2b"
        },
        "item": {
          "id": "50a45f51-47a2-44d2-82b5-fc5d492bacf1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8e45cba7-631a-4c05-b04d-7c76549ee3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d350518-c413-4780-87aa-bad88707565d",
        "cursor": {
          "ref": "5791285f-fbfc-4679-be1c-1a616134f763",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "75930f55-ad6b-429f-9e4f-6681797357d5"
        },
        "item": {
          "id": "9d350518-c413-4780-87aa-bad88707565d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2b6893d3-0b45-43c9-ade5-b85e9e155a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17ccd3a-ecd1-48a5-a1a0-84481383711b",
        "cursor": {
          "ref": "99e2516a-b7ac-443c-bd55-12e48ef83874",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "711b3829-b2aa-423a-aab0-bb9b691688b8"
        },
        "item": {
          "id": "d17ccd3a-ecd1-48a5-a1a0-84481383711b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f293da9d-c22e-44a4-ad69-9992db17d2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22b5ce5-b966-47e2-be6b-ed0780472e55",
        "cursor": {
          "ref": "984da16e-7002-4207-927b-0e85e221e2d2",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "66895b8f-6bff-420d-be1d-84f0a5c15399"
        },
        "item": {
          "id": "a22b5ce5-b966-47e2-be6b-ed0780472e55",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "54846897-16c0-4dcd-a57d-381142590051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435ba53e-67d1-477e-b71d-40fdbf1e59df",
        "cursor": {
          "ref": "49998438-faff-4097-b06f-7292cabcad1e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f12623e1-fdcf-4ccd-9a39-77d88c9c60fd"
        },
        "item": {
          "id": "435ba53e-67d1-477e-b71d-40fdbf1e59df",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e89d3efc-2d7f-4ff8-bcdd-9097f56a7301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24690abf-86c5-427c-9c70-67350245eb83",
        "cursor": {
          "ref": "baa6597c-6483-4a30-9973-189183668723",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "928bc7ee-f4bc-47ef-8f83-2c88749cbd3e"
        },
        "item": {
          "id": "24690abf-86c5-427c-9c70-67350245eb83",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0230d337-924d-4549-8f4e-ef0478ac3040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8509ecda-77fb-45a7-aa47-67ceb3dee60e",
        "cursor": {
          "ref": "882652be-4ddd-46da-88d3-ec50de6fad7a",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8a5cca4f-022c-4e1d-86b3-7201d8f23356"
        },
        "item": {
          "id": "8509ecda-77fb-45a7-aa47-67ceb3dee60e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2396e8e8-d731-473f-823f-0a788d53f229",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7b512287-6549-40cb-8df7-43609c77dc3c",
        "cursor": {
          "ref": "8cbe170c-48d1-448d-9e7d-13f34e73e41d",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "84e05bdb-c0d3-4991-9985-62a399146fdf"
        },
        "item": {
          "id": "7b512287-6549-40cb-8df7-43609c77dc3c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6f5cb74e-dcdb-466e-a9f4-77ce317f99ec",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "9ec3e399-c2dc-4646-ab8b-76827dae9e42",
        "cursor": {
          "ref": "52162ec7-2876-4f7a-b1f8-c3cd69ff6f0b",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "44dbac99-1697-4d07-9dbc-b2229cf97c1d"
        },
        "item": {
          "id": "9ec3e399-c2dc-4646-ab8b-76827dae9e42",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "109dbb59-b31a-4810-8db3-197ea0f0e016",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8c3107a5-da27-42a2-9de0-76164307b3de",
        "cursor": {
          "ref": "0777fb8f-3a57-4f3d-875d-c294219c09ad",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c79d697e-0b67-48d4-abb6-f43d1e234485"
        },
        "item": {
          "id": "8c3107a5-da27-42a2-9de0-76164307b3de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e556ec41-8655-4375-b0f2-647a67834f40",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f893261c-21c7-484d-9691-58d4600ae43e",
        "cursor": {
          "ref": "d08a16b1-852a-4066-9794-9f1e3a3d783b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f2561f36-9d41-4745-a4ef-e35daf06c732"
        },
        "item": {
          "id": "f893261c-21c7-484d-9691-58d4600ae43e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a8de6f9f-56a3-4473-9a87-355a43d67150",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a460171a-3687-428d-b827-d21050802027",
        "cursor": {
          "ref": "af98f98e-a505-46a7-8d2a-9b6e83932ae8",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7233389c-d192-462c-ae68-c21cc7955476"
        },
        "item": {
          "id": "a460171a-3687-428d-b827-d21050802027",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f7c144a6-e37e-47f6-b519-f9850192984e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8e0cdb-265b-4a42-81d9-59c66ca1f75d",
        "cursor": {
          "ref": "35c8fc90-a0c3-483c-b426-6bdc2f93b4d1",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8c8a2394-1836-431e-8482-375970d3b862"
        },
        "item": {
          "id": "ba8e0cdb-265b-4a42-81d9-59c66ca1f75d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d16027f2-95aa-4399-b714-a8b459a3e72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3d6420-be6a-4d5e-8547-f1ca8ac5c773",
        "cursor": {
          "ref": "ec91d41d-8473-4f96-af98-4984f23383d5",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8e725df3-ff42-470f-8c5a-535c3f42a6e8"
        },
        "item": {
          "id": "5a3d6420-be6a-4d5e-8547-f1ca8ac5c773",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3c71aded-cb1e-41a0-b5bc-e71186107196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49285263-a95d-4d4a-9eab-cd6181e073f6",
        "cursor": {
          "ref": "ce0d7933-a90b-44cc-88ab-ab5215548c6b",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5e425a94-b962-4c43-bfcd-ed89c8b29c62"
        },
        "item": {
          "id": "49285263-a95d-4d4a-9eab-cd6181e073f6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "45fe147a-5115-460c-8b22-1f9507ee0090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144fc506-ab9f-4892-8090-c62748bb6084",
        "cursor": {
          "ref": "c218de3b-ee42-4e52-a2f1-c4e4692e49a2",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "50f06aa5-0571-4279-ae5b-1630bb2129e5"
        },
        "item": {
          "id": "144fc506-ab9f-4892-8090-c62748bb6084",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4c03b686-6896-4308-96c1-59c848296df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb74f4e-c0b8-4dab-90c7-b9da5a6ae58a",
        "cursor": {
          "ref": "4d6d25d3-e7cd-45d3-9ffc-f1eaabdcb66b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "217aa921-082e-4407-9b98-210b54255bae"
        },
        "item": {
          "id": "cdb74f4e-c0b8-4dab-90c7-b9da5a6ae58a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7716b78b-1da9-4a73-a682-b4e386e20fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23369b28-8b2e-4799-a582-f5fdf4c2354b",
        "cursor": {
          "ref": "0e6902a1-27af-49f0-9709-b46222dca261",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "96408987-29fa-4318-87e3-a40b9465d709"
        },
        "item": {
          "id": "23369b28-8b2e-4799-a582-f5fdf4c2354b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a5abc3cf-ca65-4101-acdd-50e884d6d4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e34eac-14d9-4556-8d38-6f35b6230ee4",
        "cursor": {
          "ref": "90a77a0d-d31b-4948-9397-9262cd68d93c",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d903f76a-1811-4d63-bd21-b3b228be87b3"
        },
        "item": {
          "id": "14e34eac-14d9-4556-8d38-6f35b6230ee4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5dbc390b-dee8-44c8-9a7a-8c900c9a5609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb451bb-4920-4b06-a871-7e347df1702f",
        "cursor": {
          "ref": "73afda5c-4964-4f5b-88d0-39e1daf41a83",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d6e6316c-bb69-477b-9818-4cdfe745fa2f"
        },
        "item": {
          "id": "5bb451bb-4920-4b06-a871-7e347df1702f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f15f8141-66b4-4c54-bb10-cbe3ebd9e640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4c18d3-ec8f-4d27-8fa2-ec134f75e1ee",
        "cursor": {
          "ref": "b79c6009-d597-4fc1-8d77-f54fbec91a03",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c4159585-52ab-4bdb-aed8-4833d98b6764"
        },
        "item": {
          "id": "0e4c18d3-ec8f-4d27-8fa2-ec134f75e1ee",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b43208dc-e5eb-41ac-a11c-fccacc13e96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040998ff-eb20-4c6e-9f92-d79d7720e4da",
        "cursor": {
          "ref": "915a3f1d-e640-4cd1-ab7f-15a1aff11040",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "27aeeb30-8b34-4cea-a406-44760ac795f0"
        },
        "item": {
          "id": "040998ff-eb20-4c6e-9f92-d79d7720e4da",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6787e5cf-0420-4708-acf4-d82abc50b5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916518d3-915f-4cfe-b1e0-741b1dfaa4d1",
        "cursor": {
          "ref": "3b126d3c-0534-4632-a20c-7ab7849fe30a",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "81ead571-a555-411d-ba5f-70965c150a90"
        },
        "item": {
          "id": "916518d3-915f-4cfe-b1e0-741b1dfaa4d1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "acbf5555-ac29-4c62-ba6f-997a935c73ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58dd0616-246e-4a8b-b2b9-0cbb706de1aa",
        "cursor": {
          "ref": "8146d6c6-ac0a-4450-93e4-080b1740de51",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7d907978-f203-470c-b488-1c39f07fdc30"
        },
        "item": {
          "id": "58dd0616-246e-4a8b-b2b9-0cbb706de1aa",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8c1a4cd7-9151-4d37-b737-2efbfc62173f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3590d6-9fea-4556-8a14-e015d673f3f3",
        "cursor": {
          "ref": "71c155f3-ce60-472e-a9a4-da5e0e61ca19",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "93380f54-0bb1-4ca9-b5b8-b566df0f0987"
        },
        "item": {
          "id": "8a3590d6-9fea-4556-8a14-e015d673f3f3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "96be7ca2-8b2a-4043-8b0e-9d591ddd0190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8d4854-76ec-43e6-b7e9-c6607c6becb2",
        "cursor": {
          "ref": "dbc64b5f-d8ce-4f52-aa6b-cc5ec6c80837",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "de557920-b21c-4976-9803-d190e8ffe4d8"
        },
        "item": {
          "id": "4f8d4854-76ec-43e6-b7e9-c6607c6becb2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b6b08ad5-d7dc-4d5c-b845-f9d9c5dc0c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a40d13-5780-4d29-a559-94affc5c4d1d",
        "cursor": {
          "ref": "584b09c3-a2d8-484e-95e9-63c2b6932edd",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "291e7654-a490-4770-812b-179e1ff037f9"
        },
        "item": {
          "id": "73a40d13-5780-4d29-a559-94affc5c4d1d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c67d7410-79cb-4af7-88f2-ff3c01c0d761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba6b227-a3d0-485c-94fa-de6ee04f5444",
        "cursor": {
          "ref": "87937145-c86e-40f6-907c-2f3ea9297400",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2a953929-b5bf-4026-bcb0-34ff97882264"
        },
        "item": {
          "id": "fba6b227-a3d0-485c-94fa-de6ee04f5444",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "59a865b8-27c1-434d-a860-965e81df3399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736a6000-487f-4472-887d-b7b4e4317dd9",
        "cursor": {
          "ref": "2107f577-3cd4-462b-9d75-e1aad94b19be",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c579d502-9568-44d3-9a88-ce9d9f97a96d"
        },
        "item": {
          "id": "736a6000-487f-4472-887d-b7b4e4317dd9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b0c56efd-1e7b-4295-bd24-60a641b738b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a41b86-3e0b-4e02-b6cb-6af4745f8c63",
        "cursor": {
          "ref": "cccfa2ad-119f-42e8-84e7-c52a3d560046",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "137bd45b-232b-4220-bef1-0074e259e06e"
        },
        "item": {
          "id": "98a41b86-3e0b-4e02-b6cb-6af4745f8c63",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8095ba28-4d28-44b0-a5fc-09624254e349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bafba0b-a78d-4c7c-b325-c703bd89abcc",
        "cursor": {
          "ref": "705a6247-b804-4e57-921b-94350ca382a5",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "dc28e48a-c8e8-4218-b05c-b36427b45114"
        },
        "item": {
          "id": "4bafba0b-a78d-4c7c-b325-c703bd89abcc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f376cdf6-44b2-403a-831e-c03dd90962a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fdaf1b-adb7-4af1-8491-323521ce059f",
        "cursor": {
          "ref": "cfd1ccd9-df9d-4a67-b8aa-2480aa700a2b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d53bf394-e1ba-4a4f-94db-b6eccf13f061"
        },
        "item": {
          "id": "a1fdaf1b-adb7-4af1-8491-323521ce059f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ad7c4510-d2f9-4cd7-aecd-a9eeaba60e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0757e50f-5c43-4e46-a497-8c4188d5c604",
        "cursor": {
          "ref": "1a2f6cda-7cad-4fad-b664-7fd39cbd6f08",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e082ec10-c132-4855-b4de-ccefa86d313a"
        },
        "item": {
          "id": "0757e50f-5c43-4e46-a497-8c4188d5c604",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d8d040c8-d721-4109-a0e3-051a80949640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1a3ee4-3158-4fed-890e-f0601cc60a0c",
        "cursor": {
          "ref": "afa8f763-60a8-4dca-8bbd-757e5ecd0812",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "89039cf6-e80a-485b-97b2-5438a70842b5"
        },
        "item": {
          "id": "ec1a3ee4-3158-4fed-890e-f0601cc60a0c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "55bc2ec2-2cca-45fa-9ec4-2c77c4345188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756dc6a4-9102-4ef2-938f-c26822d150fa",
        "cursor": {
          "ref": "98f0ee5b-7f63-4771-aaae-4eccdef3f7e9",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6dc34049-eac1-449f-acd5-aa4435fa2ea2"
        },
        "item": {
          "id": "756dc6a4-9102-4ef2-938f-c26822d150fa",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "23674de1-f326-4c3d-aedf-7588546c6794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a683f20-c146-4778-948e-9603630b4fe7",
        "cursor": {
          "ref": "3efbb311-84eb-4035-98de-53f1264e8b51",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "781bbd2f-de69-4bf0-8b55-c7a1b6eff71a"
        },
        "item": {
          "id": "2a683f20-c146-4778-948e-9603630b4fe7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9c8ec123-9579-4d02-ace7-8814a423571f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169912e3-1fd0-40e7-b1b4-f3c71fe9fdd6",
        "cursor": {
          "ref": "c33a8ebe-1da7-406c-adb0-76083e75e1a3",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c1d16c28-8222-4ee1-9575-60aa73c23714"
        },
        "item": {
          "id": "169912e3-1fd0-40e7-b1b4-f3c71fe9fdd6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c73c8c21-c691-47b8-9170-9d56cb37f60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc26c40-9994-48af-acc4-2c81c4c638cd",
        "cursor": {
          "ref": "79c5b18e-546f-470c-be09-a42819439bfe",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2e2d939b-0d24-4a2c-ae38-b40c85f83762"
        },
        "item": {
          "id": "2cc26c40-9994-48af-acc4-2c81c4c638cd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3aada4a3-5c04-4f0c-b762-8b2fde9a38d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec17b23d-5b59-47df-80a9-e6c06132b8e4",
        "cursor": {
          "ref": "c33479ab-0964-4a5b-b711-00fedd76edbe",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ff35c5ef-8b9c-4b2c-87ea-b166e1ba4077"
        },
        "item": {
          "id": "ec17b23d-5b59-47df-80a9-e6c06132b8e4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d74fdf72-c539-4ed1-afbc-c0ce3f72b4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd838c6-6928-4c43-93c4-6ba069ef8659",
        "cursor": {
          "ref": "9d81f7d7-9053-4fb8-945e-0863619c0d30",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c297400b-691a-4e4e-ae22-5073b3d86039"
        },
        "item": {
          "id": "4dd838c6-6928-4c43-93c4-6ba069ef8659",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5a2c6719-c115-4bb0-af12-b6b6521a94eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1e1423-a513-4baa-87d4-4cb0aa88cfa2",
        "cursor": {
          "ref": "80788b22-21e5-420d-8c77-a72f202c18e7",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2eb1e9ff-c297-4203-ad81-c90385c9ad2e"
        },
        "item": {
          "id": "4c1e1423-a513-4baa-87d4-4cb0aa88cfa2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4de2fab8-a2ea-4b44-b465-d05694b89f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1531aca-748d-4b3d-9b21-ffc2dfe53cf6",
        "cursor": {
          "ref": "c1077c70-3f08-4ad6-9852-fe52b8f2da32",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "50e56528-0421-4bca-a2fc-143f7124cbd4"
        },
        "item": {
          "id": "f1531aca-748d-4b3d-9b21-ffc2dfe53cf6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "00bd16b8-c2dd-44df-ae04-d3bc55de51d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961f954b-edac-4a86-8544-79363a86e3a9",
        "cursor": {
          "ref": "9b72de1a-b37a-4295-b9cd-27e822c485fc",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bef0fa07-c8f4-47a4-ac77-dbc509bcb9d2"
        },
        "item": {
          "id": "961f954b-edac-4a86-8544-79363a86e3a9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "436bfe27-44d0-4584-8b3f-5d76cd54e302",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdcb68d-dacc-4d7e-af08-132aaeb57cf2",
        "cursor": {
          "ref": "eebee3b8-19ef-4d15-8f0b-fc81b67e98a8",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3166ec1d-db2a-40ff-9602-b9f0d05796b2"
        },
        "item": {
          "id": "6bdcb68d-dacc-4d7e-af08-132aaeb57cf2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "13a86c14-fe73-4712-a9d8-897da0097e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d4924fb3-7238-45cd-a2ac-e80e6f6cdde4",
        "cursor": {
          "ref": "e53a68c3-9b7f-4ebd-a4f8-6cb28d6e0253",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9fb2969e-1f2b-4ed4-8d7a-821971134031"
        },
        "item": {
          "id": "d4924fb3-7238-45cd-a2ac-e80e6f6cdde4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ba4b75e9-beb5-4bfd-a533-dc4821fcd7dc",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ad4bf2-c473-437f-8fc7-2b85c39963d6",
        "cursor": {
          "ref": "a0bc4d48-d569-4a6f-8470-d705f27307d1",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "18e2da12-6b89-472b-990c-aec54f9bd492"
        },
        "item": {
          "id": "18ad4bf2-c473-437f-8fc7-2b85c39963d6",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4b5318f3-2569-4339-b7a9-bfde426eda24",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7240cc0e-63d0-4ba5-b2ea-aaaf725922d0",
        "cursor": {
          "ref": "ad2c01f6-2e60-4e3f-8293-1bbf314052a0",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b6aa0b91-ed88-42e4-83a6-63dca7abe09d"
        },
        "item": {
          "id": "7240cc0e-63d0-4ba5-b2ea-aaaf725922d0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ac836ac4-a010-42d1-bbec-c602d62a30b5",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d610a3-7e8f-436f-bb5a-14f5c3747e0a",
        "cursor": {
          "ref": "64556dba-2602-4fd8-867a-15ad95516786",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9cc15b2f-9d1e-4f20-90e4-81e4cb70cbe9"
        },
        "item": {
          "id": "f2d610a3-7e8f-436f-bb5a-14f5c3747e0a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "82c48ef6-9653-4eb6-a1b9-c661d949ce14",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c387ed-d7eb-4c95-b571-cb3b0e51e9ac",
        "cursor": {
          "ref": "470e3d06-b740-4dd4-9193-a5d79d9051e3",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3ed1f06e-b261-4d68-bf1a-560799aceae2"
        },
        "item": {
          "id": "81c387ed-d7eb-4c95-b571-cb3b0e51e9ac",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a83cf5e0-0d7b-4a45-aab2-fcc1b1efa5bf",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-28T00:36:54.623Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-28T00:36:54.623Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9111e40a-ac0f-41bd-832f-61ccbaf31fb7",
        "cursor": {
          "ref": "ea08410c-78ad-4a3d-8281-a38474e6d97c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9fb090e9-be7a-4271-aac6-2d38e84bdb63"
        },
        "item": {
          "id": "9111e40a-ac0f-41bd-832f-61ccbaf31fb7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c5a73b6f-e592-475f-8ee4-ba2482203d64",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae45d84f-fab1-4fc8-ae1c-ab78371ad54f",
        "cursor": {
          "ref": "884b47bb-088a-43d7-9b00-ac84cb7863e3",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "67383a93-1925-415d-b598-ee4b50c22017"
        },
        "item": {
          "id": "ae45d84f-fab1-4fc8-ae1c-ab78371ad54f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "483fdfd6-261f-4dec-b439-ff7709e6a5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa0199f-a8f2-4b8b-881a-827e6c75ca09",
        "cursor": {
          "ref": "da53283a-1609-4e65-977a-cc3a32b35bb7",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e20204b9-c3b4-4455-a5ef-b8dfd47de9ad"
        },
        "item": {
          "id": "caa0199f-a8f2-4b8b-881a-827e6c75ca09",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1b8ef8c6-97d6-4a04-9700-79463cfdf5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3459908-424f-4ad3-bd43-4455bcf3843e",
        "cursor": {
          "ref": "009d61a4-06fd-4be8-b0db-6676f08702b4",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9cb4ad21-6d98-4c76-aee4-c34394135d5c"
        },
        "item": {
          "id": "c3459908-424f-4ad3-bd43-4455bcf3843e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6bf5cfba-3a3f-4fe1-87f7-6cd8e33feaf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13db6d0-b2c2-43d7-bc22-9fe298e2157d",
        "cursor": {
          "ref": "9db3d10d-4436-4ee6-9acb-ae4cf835e681",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ab90bc8b-d1e1-4d18-a9be-0b6ccf55a59e"
        },
        "item": {
          "id": "a13db6d0-b2c2-43d7-bc22-9fe298e2157d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c56f94fd-97d7-4d44-b6d4-395f838a00b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b473e64b-ef26-4000-8fd1-69255ae6788e",
        "cursor": {
          "ref": "1a22903b-3d1e-4168-b098-5f369ad37925",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "aaa9b57f-fdff-436f-b4fc-93bc26352c5b"
        },
        "item": {
          "id": "b473e64b-ef26-4000-8fd1-69255ae6788e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "42385ef2-faff-4271-afb9-f156995d7bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4eeb70-7b6b-49ce-9c63-19803b7e7350",
        "cursor": {
          "ref": "1c25557b-da08-4e37-81a1-43a176d63e34",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "03d75b87-99b6-4b7d-a6aa-750bbc991f3e"
        },
        "item": {
          "id": "1f4eeb70-7b6b-49ce-9c63-19803b7e7350",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f2ec5e2d-f999-4fdf-b7bf-f7ce604ea1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5e19b8-5f04-4035-ba11-90aa925da73f",
        "cursor": {
          "ref": "97f19af9-e1bc-41f5-bcdf-8dcbd6334566",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a9dd1037-646a-4f83-b30d-773f7d721aa0"
        },
        "item": {
          "id": "ce5e19b8-5f04-4035-ba11-90aa925da73f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "325bb530-8c4b-485f-b2aa-d2747928c59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4309121-1fe2-4d88-b04b-ba7a2cfc6db7",
        "cursor": {
          "ref": "be436dd3-8773-44ed-bdff-20b1c7d67e32",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "02af65bd-7520-49f3-b993-8ac7ecdd8bbf"
        },
        "item": {
          "id": "e4309121-1fe2-4d88-b04b-ba7a2cfc6db7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2d534258-8fce-4a9a-a8f8-6d2dcafec622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c1526e-32bb-4b0a-bf0e-8efa6e7c048d",
        "cursor": {
          "ref": "e7be4ccf-a20c-414c-a992-3dcec3d2e607",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "eb4c9e7a-9c2b-453c-8b56-e257262ceb00"
        },
        "item": {
          "id": "e6c1526e-32bb-4b0a-bf0e-8efa6e7c048d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cb203b0c-5443-4912-95a3-76a5b233b53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d21747e3-c21c-4662-a05a-f6ef2740ad1d",
        "cursor": {
          "ref": "3954646c-3cca-4e82-82d4-ffbbf151da14",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "949f05a9-01d9-434b-84d4-6b1bfc412057"
        },
        "item": {
          "id": "d21747e3-c21c-4662-a05a-f6ef2740ad1d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ca06c370-7b50-4a6a-996e-584bafd2d347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6388d7-0aef-4ef3-aa39-183184b63443",
        "cursor": {
          "ref": "a2590ae5-a56c-4e84-81ec-e62b9d3d71cc",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9822affa-1b64-4d0b-8fc1-7473e54b0c94"
        },
        "item": {
          "id": "7b6388d7-0aef-4ef3-aa39-183184b63443",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b922d95b-8a7b-4e86-809e-e8be9f784e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd743c2b-ae45-4759-a970-4f1ab1cbacab",
        "cursor": {
          "ref": "fba2c05e-0754-441e-a7ed-8e0a85575b21",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "95d39d18-8988-4f2c-b8a1-8778a7376ae5"
        },
        "item": {
          "id": "bd743c2b-ae45-4759-a970-4f1ab1cbacab",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b9518d37-5cf5-4ff5-9460-6b3e4e704d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc44169-7da9-4ef8-9918-a7e3c92cf9b1",
        "cursor": {
          "ref": "b6107d21-7aaa-406e-a9dd-d1e033a2a2f2",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2b94223d-a128-425d-ad72-e628b9139e1c"
        },
        "item": {
          "id": "acc44169-7da9-4ef8-9918-a7e3c92cf9b1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2117677a-352c-41b3-bba6-42018a6b338e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f8710984-bab2-45e4-844e-4fa07e9502e0",
        "cursor": {
          "ref": "9fc01969-c545-490d-ad64-725c4500f011",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8c24244c-301b-4028-bd84-a67878be8581"
        },
        "item": {
          "id": "f8710984-bab2-45e4-844e-4fa07e9502e0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "783610ef-d6ba-4ceb-aaca-12b819076d65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "08569928-d687-4d6c-8b45-72f091553ac7",
        "cursor": {
          "ref": "5a4c7066-10e5-4e77-95a2-e6310891407c",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e78a4308-2cdd-4ddd-9baa-955b68edf26c"
        },
        "item": {
          "id": "08569928-d687-4d6c-8b45-72f091553ac7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7b419aeb-5491-4455-87f0-f9eef21f9a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2d98c9-8985-4223-83f0-9d9880d75814",
        "cursor": {
          "ref": "46c62602-bad4-447e-a9e4-02d3b8e87448",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0d7597a2-135c-4de2-b424-2cb7ea890052"
        },
        "item": {
          "id": "8b2d98c9-8985-4223-83f0-9d9880d75814",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3b08ffe2-5b7e-4311-bb82-3d21435f28db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510979f3-6670-4110-b892-1eeb56149374",
        "cursor": {
          "ref": "74ede1d7-c36c-4c22-99e9-11ff584a7b76",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4ec0eca8-302c-4c11-88ea-19d32fb1f031"
        },
        "item": {
          "id": "510979f3-6670-4110-b892-1eeb56149374",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "433307d5-1005-45b5-826a-41bee13fa82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917c7cc3-69fc-4791-b42f-adc0a2639bc3",
        "cursor": {
          "ref": "73049187-6b09-4c81-b1c1-d56404d060e6",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d9773c5c-220a-495c-8c90-6ae7df26dd5f"
        },
        "item": {
          "id": "917c7cc3-69fc-4791-b42f-adc0a2639bc3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3118cfc0-ff71-4070-a1d0-91aac9431ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef74f47-8e25-4023-be77-594a7333bcfb",
        "cursor": {
          "ref": "f6125f60-470c-489c-889d-88e05e8984fe",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "030a7398-e424-40c8-a080-f79c1565ba45"
        },
        "item": {
          "id": "2ef74f47-8e25-4023-be77-594a7333bcfb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "20ede50e-69a2-4ceb-b6be-5cd68f21bf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d5b119-9404-4cd0-ae66-511c9d15afce",
        "cursor": {
          "ref": "a8b4dc8d-877b-4cfc-b007-e36a5fa0edb0",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "88fd9d68-22f0-4f2f-97e9-dfd86313237d"
        },
        "item": {
          "id": "15d5b119-9404-4cd0-ae66-511c9d15afce",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5522fc98-2f91-4cbe-ab3d-889f7ae571f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7226cc8-502c-4ba2-9899-2b851b12feb6",
        "cursor": {
          "ref": "5bf86c35-2ab5-4c80-b344-2b056f59efde",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f6f25d17-584c-48a1-8a6b-2ddbedff90a9"
        },
        "item": {
          "id": "a7226cc8-502c-4ba2-9899-2b851b12feb6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9ac8637b-e0ad-44f7-97df-6b9d767abff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d73efbc-e552-4422-9410-6ec8fa4b4aa3",
        "cursor": {
          "ref": "e98d64bc-af90-4ccd-8d13-272a61cf294c",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f33ae669-38c1-4278-8643-035a310a2795"
        },
        "item": {
          "id": "1d73efbc-e552-4422-9410-6ec8fa4b4aa3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "05165160-704c-4fa5-8176-3973a88767ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bf57d8-52a4-43a9-8827-a693022ebe4b",
        "cursor": {
          "ref": "cc032c16-eb51-4a45-a121-2720daccce5f",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c5ca2ccd-4fde-4685-8515-a9285b246942"
        },
        "item": {
          "id": "39bf57d8-52a4-43a9-8827-a693022ebe4b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fcc244cb-4704-45db-a300-7446a9a0224a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fa6a21-f73f-462f-a4ef-3a0c0dcfa320",
        "cursor": {
          "ref": "13860b83-07f5-4065-8495-0f8570bd3710",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "689df188-ece2-4872-946f-c9a2d76ba54e"
        },
        "item": {
          "id": "78fa6a21-f73f-462f-a4ef-3a0c0dcfa320",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b6190e4a-ecd1-4ede-97f0-f5038ac6130f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9691a77-43b9-4284-8de2-29bcfd8cdf78",
        "cursor": {
          "ref": "16712de0-f974-4422-b018-14afd57785f7",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ad02d35d-3a0b-404d-b6d8-c69e83628801"
        },
        "item": {
          "id": "e9691a77-43b9-4284-8de2-29bcfd8cdf78",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2b944290-c003-4921-aa61-2f91471e8b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec1970e-7769-4096-b869-e41f87384832",
        "cursor": {
          "ref": "af6636c4-c931-4975-921c-fb0a9693c211",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8c52c97e-757e-416d-92ef-f273096245be"
        },
        "item": {
          "id": "dec1970e-7769-4096-b869-e41f87384832",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dd516735-8f7f-4ee4-afd5-984d2ee42afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106abd13-9852-4a43-89f0-520669578b04",
        "cursor": {
          "ref": "0b486304-9d67-4261-b8d2-fc0c1feb9e79",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f614b718-bf30-480b-9911-ca9dfcbd85be"
        },
        "item": {
          "id": "106abd13-9852-4a43-89f0-520669578b04",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ecded2cd-d7a8-4ccf-9ede-944e82beafab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18c06c0-5821-42d3-ac1c-87e7031732f2",
        "cursor": {
          "ref": "71bf0ac5-68c4-4801-a462-618fa7fb3b3d",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1d109cbb-fa0f-4bcf-8a3e-8d1ddb82a88c"
        },
        "item": {
          "id": "f18c06c0-5821-42d3-ac1c-87e7031732f2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ab76e1d0-3117-4a16-a400-d7d53a61ff71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedd576d-12cb-4ec7-9011-6bf8ecff1292",
        "cursor": {
          "ref": "6a61d590-0fe7-44fc-b95c-a023e8c59bf4",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "27bbd280-cb45-40d1-a564-304561aca391"
        },
        "item": {
          "id": "cedd576d-12cb-4ec7-9011-6bf8ecff1292",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "01228017-117a-4e75-9601-d0f7f0a18b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162d1dd5-2f96-448f-a753-8a573d0642b4",
        "cursor": {
          "ref": "e7b386be-16b4-48e0-9199-9e26c5fd18fa",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d80629f0-9741-433a-bc8b-30002fa7f011"
        },
        "item": {
          "id": "162d1dd5-2f96-448f-a753-8a573d0642b4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "97c8ac1c-c5df-463f-9a4d-221210dc7e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fb4b9e-4d18-4545-b048-193a3d60d64d",
        "cursor": {
          "ref": "ce6df43e-4683-4490-b343-4162536ffd53",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d778dd5c-5ff0-47ad-9741-a49db271fad5"
        },
        "item": {
          "id": "b1fb4b9e-4d18-4545-b048-193a3d60d64d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "be6c899f-ba6c-4ecc-8307-2a62c6df1dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e616c519-8e2a-4956-abd2-4cbf1935cc8d",
        "cursor": {
          "ref": "e3049020-0703-41c1-aadf-8322858f6915",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4ed74631-c21b-42dd-99aa-aaf6b4324bfc"
        },
        "item": {
          "id": "e616c519-8e2a-4956-abd2-4cbf1935cc8d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "99f25732-a6db-4541-9f74-77e840c2ccc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e6d22b7d-75a6-413a-a245-bdb9d2140aec",
        "cursor": {
          "ref": "3f03da61-9d5f-4ca7-acba-2bc958ae5a32",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "94f96ae4-3bb7-4421-8c65-892d43a34842"
        },
        "item": {
          "id": "e6d22b7d-75a6-413a-a245-bdb9d2140aec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f6e0a672-6c46-4086-8bf8-ba56fd949ef6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b4400a-a2e0-40f6-9304-e6f5eca2850c",
        "cursor": {
          "ref": "a4289d43-0a3c-475d-b9b9-4d31d83ae346",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f4834b77-d70c-47cd-8d95-b199dc62ca54"
        },
        "item": {
          "id": "83b4400a-a2e0-40f6-9304-e6f5eca2850c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1c09a2a6-cafb-4ec0-9d12-4e815c42e30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93cc6b5-ce5e-44b7-b604-e4cf5cbbc6a6",
        "cursor": {
          "ref": "91615058-e36e-47d5-966f-15157cbbc383",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "88bb972e-ee1a-4fa3-952a-5b1215b2368b"
        },
        "item": {
          "id": "d93cc6b5-ce5e-44b7-b604-e4cf5cbbc6a6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5e045db8-e469-4b9a-b9aa-63b23fe886e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0cf08c-b3aa-47c8-9c33-96da34c4eac2",
        "cursor": {
          "ref": "08ebead6-a56d-44db-bc2e-79ab76fff53a",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "09aa5193-afc6-4528-bc45-5a1d56a58a04"
        },
        "item": {
          "id": "ab0cf08c-b3aa-47c8-9c33-96da34c4eac2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f3238455-2d40-4f93-ba82-f211fc1b8a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158a1b5b-ce08-4f1f-ade8-fc4b1b3f9d62",
        "cursor": {
          "ref": "99718089-6639-4750-9fad-b3569baf2e71",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "84b045a5-7e1b-4ed8-9f75-3f5ddb7e42f8"
        },
        "item": {
          "id": "158a1b5b-ce08-4f1f-ade8-fc4b1b3f9d62",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f37f5533-a001-41d7-9eed-90fcac27fcb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534718b5-1e25-468b-a55b-55dbfc09a334",
        "cursor": {
          "ref": "75e3fb22-6e66-48d3-b623-106e94668c9e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "32370527-8ce7-4d5f-b0c6-a8fe682af374"
        },
        "item": {
          "id": "534718b5-1e25-468b-a55b-55dbfc09a334",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "761696d8-4a1e-49eb-b97b-db42a6c0a854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3862fb6-ac5e-4af6-b27d-f3b5b38d4e95",
        "cursor": {
          "ref": "65c5a3ea-e379-40a6-963b-4ce8af12bd22",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "09badd45-07ad-454d-9b6c-3b04d2c05833"
        },
        "item": {
          "id": "f3862fb6-ac5e-4af6-b27d-f3b5b38d4e95",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "75138f4c-99e1-46cc-b2e6-0992722aaf3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe44e7e-a0ad-47c4-b025-2e08e966347a",
        "cursor": {
          "ref": "144bfc52-1504-4606-8a51-bd8ae39b09d8",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2e3e7054-6c53-4771-b22d-6b177da33782"
        },
        "item": {
          "id": "4fe44e7e-a0ad-47c4-b025-2e08e966347a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "75c83c43-f3e6-4e3b-8217-c05a13481768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b6511f-2f35-4ac9-9946-4eaf11d98b6f",
        "cursor": {
          "ref": "f6fccb63-991d-4681-9eab-468dd32026cc",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "aa0ee242-44bf-4b64-95ca-205a8ee70b85"
        },
        "item": {
          "id": "06b6511f-2f35-4ac9-9946-4eaf11d98b6f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4c6a5c32-91f6-4812-96a8-b459b5624105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfd4786-d986-429d-8191-c234b3a6b568",
        "cursor": {
          "ref": "35362790-3f21-4505-95bb-cadc9b33f4f4",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "356ef9e8-8a3d-474f-834a-122b3c9d4aee"
        },
        "item": {
          "id": "9cfd4786-d986-429d-8191-c234b3a6b568",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "700abbda-4c84-41b9-ac64-3ad9380adceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45d08eb-d555-4ee6-aeba-d8ae2adbabff",
        "cursor": {
          "ref": "f59362e5-c407-40e1-a2f7-b53b68466c35",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a7ba5ae6-90cd-4944-bbec-ddaba472150c"
        },
        "item": {
          "id": "d45d08eb-d555-4ee6-aeba-d8ae2adbabff",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3b5975a2-a440-44c4-b5b7-67c6bb5cd37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a28e23f-44b2-46af-b7fb-ab320ffcd444",
        "cursor": {
          "ref": "b4cd9a5a-dda6-4643-ac64-deb49262e5e8",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ac96b4e9-3045-4b1d-80cf-70bb1bc340a4"
        },
        "item": {
          "id": "1a28e23f-44b2-46af-b7fb-ab320ffcd444",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "430511bb-78d7-41c1-a931-834d010edfad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa9b479-5675-4bbe-9bfe-978af646d04a",
        "cursor": {
          "ref": "62d88045-72d7-4ab5-9374-c8303c0c2d9c",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a06982a0-9652-48bb-bc22-fa7b61dda7e9"
        },
        "item": {
          "id": "cfa9b479-5675-4bbe-9bfe-978af646d04a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0ddabb95-af0b-4267-a7f5-c40db72ada70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54f5e63-84a7-4f97-bde5-86d0c3651ff3",
        "cursor": {
          "ref": "133a2e75-5385-40c4-89b3-a75de5c89595",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2a12fc0f-b8bc-47ac-b35c-4ddc35bd3e7d"
        },
        "item": {
          "id": "d54f5e63-84a7-4f97-bde5-86d0c3651ff3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bebfdb35-3670-411e-8c7b-0efd2e043dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93654a98-1cc4-441f-bb43-fd4280fa867d",
        "cursor": {
          "ref": "6420af66-bfbf-4f35-a285-00a821e23e7a",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1e264e25-33c0-4610-9bc9-3f89b6f1292d"
        },
        "item": {
          "id": "93654a98-1cc4-441f-bb43-fd4280fa867d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9e852fcc-e8a6-4c30-9be0-e1207ae6e91c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "364b0064-f0d5-4fda-b218-519418672efb",
        "cursor": {
          "ref": "ddd1fd64-1cef-416c-b268-54c8f2c1780e",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "801c4e57-0572-4403-bde2-73ec83ae9630"
        },
        "item": {
          "id": "364b0064-f0d5-4fda-b218-519418672efb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e53ce7ec-44b6-4a63-a6e1-7be438964e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52fe890-1bbd-4b7b-87e0-12bed571598d",
        "cursor": {
          "ref": "b9991359-7bbe-4e43-90b1-db572bc12cdd",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5fef1fff-c54d-440e-a3d5-e62d8e1c46c1"
        },
        "item": {
          "id": "e52fe890-1bbd-4b7b-87e0-12bed571598d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7692b8a7-ad15-47d1-a54c-2276ae764cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768e141c-2be2-4a88-b7e7-58b78fc927e4",
        "cursor": {
          "ref": "e445356f-d294-49cf-8568-ea6bf8a4475c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2bc9ccd7-bd57-4eae-890d-8cba124d0ddf"
        },
        "item": {
          "id": "768e141c-2be2-4a88-b7e7-58b78fc927e4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "236246c7-1394-44f2-8dd2-d06b6ef07d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5178758c-75b5-42e4-a7a9-ee38e2ebbe08",
        "cursor": {
          "ref": "56118662-0ae7-41b2-937b-1f13c4a42867",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c3dc7b89-725d-41af-8436-9745ee51c51d"
        },
        "item": {
          "id": "5178758c-75b5-42e4-a7a9-ee38e2ebbe08",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a321bb35-bf4e-4323-bc76-0bb0e42e9480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb351dd5-d011-4bae-983b-a2630043bdac",
        "cursor": {
          "ref": "3b1a4114-4d09-4490-bb52-cec9bd929af2",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6e4eb984-ae78-43fb-872d-a2826fe9ccd1"
        },
        "item": {
          "id": "eb351dd5-d011-4bae-983b-a2630043bdac",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cdd8bf48-f188-454b-b846-85e1f911f1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6861086-dc8d-4ebf-9f0a-4fdde482163d",
        "cursor": {
          "ref": "5c76e74b-474a-4594-ba33-ee57a1b17a02",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "af1bd484-6b99-4b85-be2c-c2e0da48526e"
        },
        "item": {
          "id": "b6861086-dc8d-4ebf-9f0a-4fdde482163d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "54d0f794-1454-422f-863a-5652c5d07407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6feed314-875c-493a-ac17-55418d1f4426",
        "cursor": {
          "ref": "1dc21bf2-3781-4dac-b89f-3b7bf3deb4d1",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4b533f20-79d3-446d-b7b4-ca684d3d424a"
        },
        "item": {
          "id": "6feed314-875c-493a-ac17-55418d1f4426",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "48791a19-54e2-4151-bbb6-0d5f8f575b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a4b896-46ae-45ed-a591-6e0482dee73e",
        "cursor": {
          "ref": "38b1857e-a235-4d93-b7bd-47fb8fb20d38",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "82db2bc9-60d6-48dc-8970-fba216b0ce8f"
        },
        "item": {
          "id": "b6a4b896-46ae-45ed-a591-6e0482dee73e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1ff682a8-b869-4363-b44f-442e04010c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387fab7f-28c0-46ba-9351-8095629b26f8",
        "cursor": {
          "ref": "6a123699-985c-40fc-8096-bf9aa0bad07c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "653cac2d-3a4f-4e5f-bc78-94750a161eb3"
        },
        "item": {
          "id": "387fab7f-28c0-46ba-9351-8095629b26f8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e63a7704-5de6-4e76-a788-e74e9299e25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c64fa48-8968-4a56-85fe-9b83c7eb19e5",
        "cursor": {
          "ref": "841f968f-7994-4abe-a387-2eb24f5eccd1",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b3624eb3-ed23-45b5-8cd6-2840fd182868"
        },
        "item": {
          "id": "3c64fa48-8968-4a56-85fe-9b83c7eb19e5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b7e74a01-5d0f-47ca-8d21-fe7c49d28970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb848665-ab70-4620-9d0b-f3950c2b0000",
        "cursor": {
          "ref": "f5b171d7-c578-489a-8edf-c12602cb9713",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d38d2526-38af-4478-9ed7-e268fff6b883"
        },
        "item": {
          "id": "bb848665-ab70-4620-9d0b-f3950c2b0000",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8be18ea6-883c-4d0a-9cb4-4cec3a87de0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7a66d3-51e3-461c-bfaa-8cf04b869721",
        "cursor": {
          "ref": "d3513fed-078b-4208-b8c9-448734917a06",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ff49dd72-5c66-4fa1-a1f8-f5a732109139"
        },
        "item": {
          "id": "5f7a66d3-51e3-461c-bfaa-8cf04b869721",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "888567aa-179b-40c5-a6e5-ed82ddfd1b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c19a78-bdfd-4429-b495-392958c92451",
        "cursor": {
          "ref": "19215e67-bab1-4aff-a8d5-00b9aac7798b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "39a57547-5577-4688-8727-c6bc445217c1"
        },
        "item": {
          "id": "d6c19a78-bdfd-4429-b495-392958c92451",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a2bd65c7-6bee-4823-8f87-2f3a32ef9829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188be35d-7442-40b0-843f-922d60b59090",
        "cursor": {
          "ref": "9a2ef360-06d6-4f6d-b5c8-6388886a3177",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a735e40d-d393-46ff-8274-27b86dfa60eb"
        },
        "item": {
          "id": "188be35d-7442-40b0-843f-922d60b59090",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3ba51e80-b912-4d02-9c06-d1a3d3448256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6930cd-25bd-454b-b93a-97bae1cc63a3",
        "cursor": {
          "ref": "305c435b-0909-4a42-aa6c-94ec4634b2c1",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e4645913-2146-43e5-9842-e31ecf52db0b"
        },
        "item": {
          "id": "8d6930cd-25bd-454b-b93a-97bae1cc63a3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bb5139e0-4a2f-412d-b397-5975a914a37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17001126-f0e2-40b3-b9f4-5a2a31537cf5",
        "cursor": {
          "ref": "0cab5dda-372c-498f-a69b-81a27b86eb20",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1eaac216-c089-4a78-beaf-927803caa181"
        },
        "item": {
          "id": "17001126-f0e2-40b3-b9f4-5a2a31537cf5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0cacb8e8-c523-48c5-9fcc-bb8c8e1560ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5379ece1-704e-4691-bed3-101267703c4d",
        "cursor": {
          "ref": "f8a49172-c574-4ab2-9f9c-185218864ab5",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4068b6c8-e081-465b-95a4-9b0791695053"
        },
        "item": {
          "id": "5379ece1-704e-4691-bed3-101267703c4d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "731d265c-8f37-407e-a67e-0dd0acc05973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d179e9-9c4b-4e0f-b9a0-f71e8482b4b6",
        "cursor": {
          "ref": "1329d311-8b34-4a95-8b20-f19610b54360",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7fc21d00-2b71-4f4b-8663-e48e963a8a9f"
        },
        "item": {
          "id": "f2d179e9-9c4b-4e0f-b9a0-f71e8482b4b6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "76f42a4f-1c3f-4b21-8074-9a88ab56ccf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0066c585-eee4-4871-91d1-a7907b9b17d1",
        "cursor": {
          "ref": "43e818a1-8154-423e-be42-eed6c5acb000",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "59217c53-01ea-484b-9be9-c812259df127"
        },
        "item": {
          "id": "0066c585-eee4-4871-91d1-a7907b9b17d1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6a13057f-978d-48cf-8f26-34f5c1f812fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b59ecc0-5769-4095-8a27-72b49a23e9f0",
        "cursor": {
          "ref": "1ea3d0e1-ac1a-4335-8d8a-739ce5673b2a",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a8b9a533-03c1-4670-b771-91e4f93483c8"
        },
        "item": {
          "id": "9b59ecc0-5769-4095-8a27-72b49a23e9f0",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "13a2aa94-542b-4709-8812-7bb5f8a8819c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02bda949-17ae-4264-b630-d9c389241a3e",
        "cursor": {
          "ref": "bf658fe1-59c1-41a9-9e10-9ede46ec0764",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8c4ac09c-fbe5-48d3-a18c-48bbf5405a59"
        },
        "item": {
          "id": "02bda949-17ae-4264-b630-d9c389241a3e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "184cb300-2c71-435f-a5c8-cf25d083f5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd865ae-9587-407b-82b6-2596e08110fd",
        "cursor": {
          "ref": "0476e420-43d8-4769-9245-a95e87b062cb",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a56ac031-a4a2-4714-b4e8-bf540d0bf194"
        },
        "item": {
          "id": "fcd865ae-9587-407b-82b6-2596e08110fd",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "95394572-281e-4700-902e-6a2aa12f2a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40feb1cb-602f-414c-ab60-a54c08d08a54",
        "cursor": {
          "ref": "754a13fa-5d36-4d87-a60e-7399c1b2981b",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d1ab9b89-ae87-4b63-92c5-949c00fd758f"
        },
        "item": {
          "id": "40feb1cb-602f-414c-ab60-a54c08d08a54",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1c244ea2-8e81-456d-8527-cf6e1d760789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39249294-4cd7-474e-947f-80fa28e25c49",
        "cursor": {
          "ref": "7cc02a51-c633-46fa-b404-71df06feceb9",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ffaae0f7-f85a-4f46-a87e-0ed3f1071ebf"
        },
        "item": {
          "id": "39249294-4cd7-474e-947f-80fa28e25c49",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3994a30d-b3b4-452d-b801-827ac7f3ca9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7e4334-981c-4e1c-9fac-c791bef84378",
        "cursor": {
          "ref": "f8a14b1d-9deb-432a-85c9-49ce1f6fa62b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ba49b89f-a999-46c5-a6dc-e7cd792100e5"
        },
        "item": {
          "id": "ce7e4334-981c-4e1c-9fac-c791bef84378",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2339ecd0-6432-4a1c-989b-af84d32d5dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1012f6-1699-45f1-8d0c-61409506a06e",
        "cursor": {
          "ref": "7aee8eb5-3456-4c49-b6f1-d3e50cca3ce7",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3bf7ec3b-67ce-41d1-83f6-5c5a7a372bd0"
        },
        "item": {
          "id": "9e1012f6-1699-45f1-8d0c-61409506a06e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "eb475bc1-2602-413f-8a13-f724231a26b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eefd86ec-07d7-4675-b65d-8b68c630221d",
        "cursor": {
          "ref": "984a36f9-ebb9-4dda-919a-174b81e89411",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "54b3147e-7c69-4b96-a52b-59b6af622d10"
        },
        "item": {
          "id": "eefd86ec-07d7-4675-b65d-8b68c630221d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "64126822-d402-4f9c-9908-ec923aaa80da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16f3dc5-d3dc-4a29-8777-f85256d49472",
        "cursor": {
          "ref": "cf28139b-4731-4874-afdd-b7fc8a07da27",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c3f6cfbe-0fe4-47c1-91a6-8a132e087426"
        },
        "item": {
          "id": "d16f3dc5-d3dc-4a29-8777-f85256d49472",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d9d3ae61-96aa-4c50-b967-b5cb066d4d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0af37e2-fda0-46b6-915e-e4abfc1e9611",
        "cursor": {
          "ref": "f0feba2b-b306-4b3f-ac1f-7501e08d43c2",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2a8b3874-9fdb-4ed0-adef-ba6e8df57d21"
        },
        "item": {
          "id": "d0af37e2-fda0-46b6-915e-e4abfc1e9611",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8009362e-2970-41ef-82b3-dcbd1309dd3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5c94e4-16dc-4f54-bbad-69f12039097e",
        "cursor": {
          "ref": "71381c64-b9a1-4932-9e77-596cc9602abb",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7af4d9d9-5dfb-4887-b3af-f5558df159a5"
        },
        "item": {
          "id": "ac5c94e4-16dc-4f54-bbad-69f12039097e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c41ca5c1-a23f-4b03-a7b6-1c40caa0cbbb",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "e41b7ef8-7a89-484d-b5bd-02c003f0f610",
        "cursor": {
          "ref": "6e9969ff-d505-4695-acf0-13b30085fc2d",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "32ca5954-fb72-4cfe-aac6-0609315558d4"
        },
        "item": {
          "id": "e41b7ef8-7a89-484d-b5bd-02c003f0f610",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b1301a49-4686-4cfa-8717-cf5b6c19f213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1cbabf1-cbe9-4681-82c4-e7a600eb30f4",
        "cursor": {
          "ref": "1a2bc471-8a54-4d26-be05-3bddb0722abb",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "418e0d16-d708-453d-b7c8-c71a45ea2abc"
        },
        "item": {
          "id": "c1cbabf1-cbe9-4681-82c4-e7a600eb30f4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "270765e2-9fc1-4197-848c-9c22a21c2aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73bae08-3f2c-4776-9b13-6402a6d82dbd",
        "cursor": {
          "ref": "93714ece-16d2-495b-8610-20ff82fa1965",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a016e605-62e2-411a-9bdd-63910ed05c8e"
        },
        "item": {
          "id": "e73bae08-3f2c-4776-9b13-6402a6d82dbd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6135957b-84ea-4b6a-9a55-dfc2b6a1ac9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa56a51-29df-465d-b316-e82a838947d5",
        "cursor": {
          "ref": "3a9c8d3b-0573-4bfb-bc9f-1f3b5a880273",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bf11b3eb-863f-4af8-b053-f9007cc873ee"
        },
        "item": {
          "id": "4fa56a51-29df-465d-b316-e82a838947d5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e48efb41-787a-431a-b802-d33b599e80ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03a94fd-c925-45e3-bdd9-adcb5ef99027",
        "cursor": {
          "ref": "d7427417-61e1-41fa-99a5-a9b2f187e3ff",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f5ae044d-9e0a-4693-a9e9-e4065de10557"
        },
        "item": {
          "id": "f03a94fd-c925-45e3-bdd9-adcb5ef99027",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e9cc43cc-4613-4664-8eda-faf2d2351350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85afb9ae-45aa-413f-8071-1a9b06830596",
        "cursor": {
          "ref": "3c4e2b62-26bf-4950-b117-8d5ab5f716a5",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b942284f-5262-48dc-872f-4b8a9c02e0aa"
        },
        "item": {
          "id": "85afb9ae-45aa-413f-8071-1a9b06830596",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "82ba0dbc-15d0-4898-a378-b151cd2e93e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a4e9a6-9222-4a47-bd3c-757200ec49e4",
        "cursor": {
          "ref": "5719e3b9-58cd-4721-accb-56577cb11c97",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f897db40-9f90-4c34-b036-b0696fbd751a"
        },
        "item": {
          "id": "25a4e9a6-9222-4a47-bd3c-757200ec49e4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e71b8406-6fe6-42f6-8731-84bdb5481d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a05725-217e-49db-89a4-a746a37d446a",
        "cursor": {
          "ref": "6be39d1f-2358-4684-a7ca-2212782258aa",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6d689b6d-d892-4a42-96ab-dfdbf95e5874"
        },
        "item": {
          "id": "05a05725-217e-49db-89a4-a746a37d446a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fead1149-91f6-453e-b716-000c562d0961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd621e5f-3fa0-4802-85fb-27f637dd8606",
        "cursor": {
          "ref": "29904bd2-96c6-4369-8420-164acfe247b9",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0b579813-6338-4824-82e6-7ef16c830934"
        },
        "item": {
          "id": "cd621e5f-3fa0-4802-85fb-27f637dd8606",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4e7dafa6-1707-4523-883b-19c0c8dbc0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace0bccd-2b30-41b4-9410-bb52014b6be2",
        "cursor": {
          "ref": "989a8898-9e4e-423c-bbf4-3e46d53ad8aa",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "36d47593-1244-46c1-9637-4c7ed4bc8d7f"
        },
        "item": {
          "id": "ace0bccd-2b30-41b4-9410-bb52014b6be2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7d122346-6a96-4409-b1cb-46715d064033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add9cd4c-f63e-442b-a703-06d7aa5d2837",
        "cursor": {
          "ref": "2aa53328-61cd-4ea5-bde9-40c7968cc135",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3cd7fd43-6136-4739-854c-97a88bb66926"
        },
        "item": {
          "id": "add9cd4c-f63e-442b-a703-06d7aa5d2837",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "17d9ab80-1a54-4049-826a-8bfeb6221e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25a5e4a-5d46-4819-a946-742033d3db4c",
        "cursor": {
          "ref": "38341da0-eb69-4bc4-a07c-807179cc095d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fd54ab77-65f6-4468-8899-085801b8aaa2"
        },
        "item": {
          "id": "f25a5e4a-5d46-4819-a946-742033d3db4c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "35a188c0-80ad-4733-b2cf-33f69974c675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6750815c-1af4-4a2d-9b84-0f25a131ce0e",
        "cursor": {
          "ref": "2d95df47-9993-4101-a04d-c6fd43039bbd",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4f783f33-25d4-4388-952a-097cdeed7333"
        },
        "item": {
          "id": "6750815c-1af4-4a2d-9b84-0f25a131ce0e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1c1ba6cf-e163-4b02-8e46-97996d0f656a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35e700e-f9d4-44d7-88bb-991a52cc7fd9",
        "cursor": {
          "ref": "d7ae7698-9c33-46b0-8eae-3c297c48c8b2",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1caa19de-62a6-4a48-af51-f0164261d292"
        },
        "item": {
          "id": "f35e700e-f9d4-44d7-88bb-991a52cc7fd9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f3ce77e3-3449-4fed-bb93-bb6579c41703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0cb569-79f4-49bf-b5d5-89d5fa9f81d5",
        "cursor": {
          "ref": "a98b983f-1b63-4909-bff9-ccd8954b79a1",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "921a83ed-4658-4e88-87ca-731ae4eb56d4"
        },
        "item": {
          "id": "8b0cb569-79f4-49bf-b5d5-89d5fa9f81d5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3cd888c4-a312-4c2c-b6bc-646472002dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d98881e-fe6c-43d2-bbfc-8cf4797fff50",
        "cursor": {
          "ref": "15b2c1c3-92fc-4317-897f-f78a6a39f552",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cd4f55d0-b604-402f-90d5-3846e9929ddd"
        },
        "item": {
          "id": "7d98881e-fe6c-43d2-bbfc-8cf4797fff50",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "af8734a2-17b6-4172-bea7-ff04f403a5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bbc7db-ecb1-4bde-814f-2b4bd617d20c",
        "cursor": {
          "ref": "f60db377-d2d8-4725-940e-bb7d227b1476",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ec5859c8-99cf-4e80-bec2-d36dd802c10a"
        },
        "item": {
          "id": "f3bbc7db-ecb1-4bde-814f-2b4bd617d20c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f9b2ae81-7240-4035-a391-66184d2f850b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c525d9-670a-4b6f-ae8b-e196e2988dac",
        "cursor": {
          "ref": "4fb1f8ad-e1d2-433f-85df-466627689bce",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0bd0c76c-ed9c-4a4a-9151-0b59a78dcc51"
        },
        "item": {
          "id": "72c525d9-670a-4b6f-ae8b-e196e2988dac",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b3198b7f-e5b5-401a-bb1a-814723e30cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567d3bb9-7ec7-424a-8c81-0a47d833963a",
        "cursor": {
          "ref": "a64cc506-e89d-42a2-8530-ec1687bc263f",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1f3d3a07-f393-41f6-9461-340b65d4d72f"
        },
        "item": {
          "id": "567d3bb9-7ec7-424a-8c81-0a47d833963a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "294b0837-38be-41e4-8ef0-83397afd5a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876502e7-d816-42ad-a1b4-98fc2d85422a",
        "cursor": {
          "ref": "6922aeae-5344-4953-9a03-7a67eb2a0c15",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d80fb190-3f06-421a-94bf-1fd59317a78e"
        },
        "item": {
          "id": "876502e7-d816-42ad-a1b4-98fc2d85422a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c9b0ec64-ef3c-4da0-b5ce-edc8305073df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162adc8d-0ed5-4fad-9f01-f43c949795d2",
        "cursor": {
          "ref": "9523a8fd-94ea-4ca2-83ca-5d4a9382f1e0",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "46f770f9-596f-4584-9b52-deb38a31020e"
        },
        "item": {
          "id": "162adc8d-0ed5-4fad-9f01-f43c949795d2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dc1751ba-819c-4b8a-90eb-fe2198e7fc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c2a28d-edea-4ab1-b5b7-8e7f0e42740d",
        "cursor": {
          "ref": "32596546-5f97-4bb0-9892-18956b2854f0",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7f35ef68-cc93-408f-8900-4f8339fe573e"
        },
        "item": {
          "id": "79c2a28d-edea-4ab1-b5b7-8e7f0e42740d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "77839c00-45a4-4ece-8f10-e7f9b6411c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19022371-a4aa-48bd-968f-7e0313a77388",
        "cursor": {
          "ref": "72db58ed-e206-48df-b7b4-ec389eba0ba5",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6e4cd143-b991-46ef-94d5-283dd0aaf772"
        },
        "item": {
          "id": "19022371-a4aa-48bd-968f-7e0313a77388",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c75c65db-e503-4f2d-a711-a6882149d057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4f1203-e67b-408b-bcbc-c711b69d4b71",
        "cursor": {
          "ref": "60299ed1-14cb-4f34-a45a-d431de4d044b",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bb5bc530-c4d3-4b31-a561-0720ac496d46"
        },
        "item": {
          "id": "5e4f1203-e67b-408b-bcbc-c711b69d4b71",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2f538de5-5bdf-4a96-9567-3fddcbbef362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f13f83b-1a0c-4e54-af5f-595c22347e50",
        "cursor": {
          "ref": "b2894dab-61aa-447f-acb6-263efaec77b5",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "15008b2a-7825-4446-ba9b-8a62acdce3d3"
        },
        "item": {
          "id": "2f13f83b-1a0c-4e54-af5f-595c22347e50",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9845f7c6-bcb0-4beb-92a1-02f3182af720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72897f3-a9bc-4068-8aa3-d258c99fc7b1",
        "cursor": {
          "ref": "b4fd848e-8945-47eb-be22-97484c9bc7b3",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "49b5ebd0-2775-45f4-b7c2-76f65acaa114"
        },
        "item": {
          "id": "e72897f3-a9bc-4068-8aa3-d258c99fc7b1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5e7e8e7d-1601-4781-9413-f532dcd03115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5aca003-3383-4106-bc35-93a1232305b5",
        "cursor": {
          "ref": "c7e61133-1517-42ad-9e0e-1969e6294548",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7adfb990-5b74-4b35-bbda-8f647541ca6b"
        },
        "item": {
          "id": "f5aca003-3383-4106-bc35-93a1232305b5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "40308814-05f7-44bd-bf98-4505aff3604c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd5567a-3bc1-49cf-a545-eeede7ebc443",
        "cursor": {
          "ref": "4fbad438-61cc-413b-bc8b-8b3065df318d",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "25311e60-111e-43f6-a9ec-0dd9f48feca0"
        },
        "item": {
          "id": "1bd5567a-3bc1-49cf-a545-eeede7ebc443",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f392a3a7-f6a0-41dd-b528-8feb59e3af2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3f9df9-9f77-42d5-af7d-a27e29774c01",
        "cursor": {
          "ref": "eea28b71-0e41-4733-8a19-3e5693eed8dd",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ce024b9c-d93d-428e-921e-000cce7bc64b"
        },
        "item": {
          "id": "5a3f9df9-9f77-42d5-af7d-a27e29774c01",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "768b5546-8c90-481d-b657-86c7743e46a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989d05dc-447c-40aa-b897-f159b26bf1e2",
        "cursor": {
          "ref": "f57394f6-d9ca-4810-b337-621b34762271",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3a51e0a5-c434-4fa9-b4fb-de388f84a3b0"
        },
        "item": {
          "id": "989d05dc-447c-40aa-b897-f159b26bf1e2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f117167e-3a13-4c75-92f5-b4a113e7f226",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "192c47f5-cf71-45f7-ab1c-a89aec4837b1",
        "cursor": {
          "ref": "58e65b9a-043b-4a3f-9f2a-5eb9d265cc73",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "35ecf0f0-8542-4b12-936e-ebab81ad5814"
        },
        "item": {
          "id": "192c47f5-cf71-45f7-ab1c-a89aec4837b1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2079c518-c6cf-4455-92a5-727325610d08",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "861f1524-9ad8-43c1-839f-9a9d3432ff13",
        "cursor": {
          "ref": "c03923fa-bcc4-408f-b157-1e1191f96b19",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "324c51e9-af39-4df8-8771-6cadc91bec99"
        },
        "item": {
          "id": "861f1524-9ad8-43c1-839f-9a9d3432ff13",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bd8a8999-802e-4bb0-b3ed-160273c32fc8",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c8997558-0211-4b75-946e-b764f38cb0c2",
        "cursor": {
          "ref": "78e2593b-bc1b-4743-bda1-af9285192f1d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "671bc329-6803-43f9-94dd-f0e00dc0f868"
        },
        "item": {
          "id": "c8997558-0211-4b75-946e-b764f38cb0c2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "27364749-bdca-407f-a553-ecdc28a93e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62a4648-0616-4b3c-99cf-c1de838337ae",
        "cursor": {
          "ref": "f9c1c397-acc3-4551-9c3e-7c951fe5ab95",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "48639f79-664d-41f4-aaa9-b359f5d21d0c"
        },
        "item": {
          "id": "d62a4648-0616-4b3c-99cf-c1de838337ae",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f9079cf1-9bf0-4e8a-af52-596a66ce28a8",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c49dc023-66ed-45d1-9ea6-d03e71891113",
        "cursor": {
          "ref": "536517db-31f0-45e5-94bc-b041c2d56080",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9e3bbf72-6613-44ef-a1aa-d96a308fcdd5"
        },
        "item": {
          "id": "c49dc023-66ed-45d1-9ea6-d03e71891113",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "123283a1-6276-42f2-86d9-c410083d483f",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "614f65b7-ab9c-43fb-bc78-ed598957d49c",
        "cursor": {
          "ref": "b7379137-4e9b-4862-aa4c-bb794bc5943e",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ff614715-c0f5-488a-afc9-641636ad2ab4"
        },
        "item": {
          "id": "614f65b7-ab9c-43fb-bc78-ed598957d49c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9a85fe1c-0316-4212-84ce-d3ebd75a03a8",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "56cbac27-44ca-468e-acd6-20dfad8a5ece",
        "cursor": {
          "ref": "bae972ff-d5fc-4e41-be42-f7bbf37cad4e",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "821de6c8-0e67-4613-b844-40d7b8b69018"
        },
        "item": {
          "id": "56cbac27-44ca-468e-acd6-20dfad8a5ece",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "27fae811-3743-4372-bc88-ff981004f796",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d908603f-9ed1-470f-b2d8-d3a50b56fba5",
        "cursor": {
          "ref": "ce9e3ff5-6a30-473a-bc2a-caa46a92e20e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4332641a-6564-46ff-a4bd-69615a01abe3"
        },
        "item": {
          "id": "d908603f-9ed1-470f-b2d8-d3a50b56fba5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1a60c60a-10bf-4d50-a90e-234f3b1a874b",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "82e7da90-aad6-4a09-bde2-d43e1cb7db99",
        "cursor": {
          "ref": "5da32d7e-06ea-47c7-ad78-d2522fb71d4c",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "983be292-fb66-427f-9070-64b575a17ec4"
        },
        "item": {
          "id": "82e7da90-aad6-4a09-bde2-d43e1cb7db99",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "15944b05-bd3c-4298-947b-2209eded62bb",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "a6bf5159-a92e-4446-bdbf-9813f63a821f",
        "cursor": {
          "ref": "d0611644-7f76-4b78-b211-45627f3413c7",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c29effbe-441d-435b-b709-3886107ad73e"
        },
        "item": {
          "id": "a6bf5159-a92e-4446-bdbf-9813f63a821f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5c31a2c3-e1c5-4cd4-a948-b946bf2b9762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d922065-3a88-4eb2-a308-006213071881",
        "cursor": {
          "ref": "366ba5fd-9e4c-42c4-9b0f-e51a00d80920",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "93874180-d2ff-4b6b-b618-f92f4e0c9b9f"
        },
        "item": {
          "id": "1d922065-3a88-4eb2-a308-006213071881",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4389dfad-bbb3-4816-ae31-63f880d0b2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5699c6e-0699-4e94-b1b2-5e4c18239fff",
        "cursor": {
          "ref": "6c54a17a-9b56-4ab6-ac98-1b6ce363f7a9",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4ed934e6-e2c7-4de2-8216-8166b332208e"
        },
        "item": {
          "id": "b5699c6e-0699-4e94-b1b2-5e4c18239fff",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fb68bf59-8937-4bf6-b86c-618c537363b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a8c02c-60cf-4e73-a3f4-3ade3bee786a",
        "cursor": {
          "ref": "066e576f-4488-4baa-8bce-e5dbb569c143",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e346d384-516f-4fdb-a57e-89aac6a91435"
        },
        "item": {
          "id": "a1a8c02c-60cf-4e73-a3f4-3ade3bee786a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "347b3db5-bd26-46c0-a246-bb76b53ba512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83771de7-6bb4-4eb5-b006-a5a2f912d4a9",
        "cursor": {
          "ref": "59f9073a-af2b-4ba9-aaea-1f628fd8dcc5",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f9a1e455-d704-4684-ae6c-a8bdec54a398"
        },
        "item": {
          "id": "83771de7-6bb4-4eb5-b006-a5a2f912d4a9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2f17f55a-cdd8-4428-86af-2a933800baf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b1287e-3cf4-4e1e-ad7b-65409916adf3",
        "cursor": {
          "ref": "5a10abc5-26a7-45f9-a545-a3120d0d79ac",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e5c6a152-8d4d-4f9c-b0be-920c7c89ae65"
        },
        "item": {
          "id": "d5b1287e-3cf4-4e1e-ad7b-65409916adf3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "38d79aa5-12b4-43bb-ba12-19078f06cce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89a72bb-2294-4f64-bd41-27343dd6b560",
        "cursor": {
          "ref": "e5dd7a36-366e-42fe-ac4b-c3cbd5faf17e",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d78302b6-95ed-42db-8ef3-3cdddbea6340"
        },
        "item": {
          "id": "e89a72bb-2294-4f64-bd41-27343dd6b560",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9b198dbc-8866-4fc7-b87a-06394569d4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e73b43-cb86-4e30-837e-87f9904ec466",
        "cursor": {
          "ref": "d4d1cf8a-4dec-4761-9820-55b07c9e87f1",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1da007c1-56cf-4475-aa3d-cb5d6fe7b0b5"
        },
        "item": {
          "id": "c6e73b43-cb86-4e30-837e-87f9904ec466",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2d925a41-9915-4cde-b437-9be8dd66184c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be12324-6a32-4a35-90fc-b63f3970d38c",
        "cursor": {
          "ref": "d162a48f-9529-4c2b-9d8f-6274eec192c4",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1fbff575-4a0e-4e80-8b24-5deba12cf7f7"
        },
        "item": {
          "id": "6be12324-6a32-4a35-90fc-b63f3970d38c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b02609b4-120d-4ed9-b4a6-342fbba44056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36083867-3780-43a2-8b4d-1ff96d93e45f",
        "cursor": {
          "ref": "45cfa9e0-44c2-4707-a8b4-7b7e3403de8c",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "797d5718-f314-43aa-b8de-3a43c7efd383"
        },
        "item": {
          "id": "36083867-3780-43a2-8b4d-1ff96d93e45f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "89cb6a69-35dc-4b14-84f9-b28fba093a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8829e639-2136-4e88-b62c-15e1255a8468",
        "cursor": {
          "ref": "d053a5aa-1fcf-443e-8432-9158c802d4ad",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f8af2c2f-5148-44e5-94c2-24be579bf7c6"
        },
        "item": {
          "id": "8829e639-2136-4e88-b62c-15e1255a8468",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3ed4797a-6aa9-41c7-9880-e8e280a0968c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea331b9-bb7d-469c-88ff-d836ed5eb18f",
        "cursor": {
          "ref": "dd12cce3-9940-46d4-97f4-deb5e8c17121",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "faca9959-6ce1-46d8-8d0d-cc665e1d7b40"
        },
        "item": {
          "id": "8ea331b9-bb7d-469c-88ff-d836ed5eb18f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "077a201c-7483-44b9-bf31-2dc185d66941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c0ece5-30f8-4a60-a2ad-670d74751f78",
        "cursor": {
          "ref": "c1c724ce-e3a0-4206-8d56-6a9bfb95f88e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1dc6f45a-ca2d-4579-9c0d-3e5495cc365a"
        },
        "item": {
          "id": "31c0ece5-30f8-4a60-a2ad-670d74751f78",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a4208126-07c9-4885-9828-535a1694612e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ffc7b0-7ab9-4cf5-b971-4cbb988fe325",
        "cursor": {
          "ref": "b15fe651-9754-46d5-ab2a-ad6c0fef03dc",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "710fe008-3ed3-4f53-86bc-e90047dfe882"
        },
        "item": {
          "id": "86ffc7b0-7ab9-4cf5-b971-4cbb988fe325",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "48d3a6eb-0b64-431f-8684-92a844efcedd",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "fb108499-e328-41c1-a27e-16a25e095697",
        "cursor": {
          "ref": "e9244710-df21-4291-a26f-03c5d8e1eacc",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "97666668-787f-4c96-8556-b0f2c1d631b4"
        },
        "item": {
          "id": "fb108499-e328-41c1-a27e-16a25e095697",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "828b163a-c3e2-46eb-9219-36ad02bcef64",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "6916fba2-ad2e-4a57-b50a-4af912851da0",
        "cursor": {
          "ref": "26314a57-3133-4d75-bd63-02c7844cd3a4",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1cdc3b0e-fefd-499b-9a2d-368e7db2cf53"
        },
        "item": {
          "id": "6916fba2-ad2e-4a57-b50a-4af912851da0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e6e9204c-4a23-4a05-93cf-78b36f8938a9",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a9540283-0922-4421-ba6a-02d6156032a5",
        "cursor": {
          "ref": "59c71d3c-15ce-483b-b3f6-264a13407359",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5a9f2669-7ccf-4581-ba75-9412c1c4e281"
        },
        "item": {
          "id": "a9540283-0922-4421-ba6a-02d6156032a5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "85044bde-8fa8-4cb2-b352-50811904ee56",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "90e5716c-7f68-495d-bed7-1dd4544c5f0b",
        "cursor": {
          "ref": "a50d7c38-1c7a-4600-a8b2-668cc8b42336",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3aa15736-34d6-4cf0-8c77-242daa14af61"
        },
        "item": {
          "id": "90e5716c-7f68-495d-bed7-1dd4544c5f0b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "307f3c47-4ec6-4705-aa5b-7f7142d1a942",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9782e75f-ccc3-4d8f-a73d-a7aca5196175",
        "cursor": {
          "ref": "bb849fe3-9b59-49df-99d6-3fae46bdda1e",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "46389044-3177-4a54-89f7-5b50bbeb75c5"
        },
        "item": {
          "id": "9782e75f-ccc3-4d8f-a73d-a7aca5196175",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d918e369-543e-4e9a-97c8-ec8d6f9483e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6150e079-9c02-460f-bca5-9163fe37e1d0",
        "cursor": {
          "ref": "ea0fadaf-35e3-44ac-b2ea-0bd9f449181c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "965d61e4-2ef5-4bf3-b442-c268ecb0cc95"
        },
        "item": {
          "id": "6150e079-9c02-460f-bca5-9163fe37e1d0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "eb96a763-e29f-45d5-bacf-acddb87726d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d297cf-0a0a-4c39-952a-59d7471a9092",
        "cursor": {
          "ref": "871c43a5-841d-4d09-8363-868498cbc580",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f2ec7eb3-a224-4f23-914a-f2fa3330526c"
        },
        "item": {
          "id": "d4d297cf-0a0a-4c39-952a-59d7471a9092",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9019c6e8-67bf-46fa-ab83-c4624cad75a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecfbcaa-4075-4fe5-b4a5-c39689e41895",
        "cursor": {
          "ref": "308f965e-c306-45d5-a0f1-6ed61bc0ae68",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6f55c1e9-ac65-4dd5-8645-8a3563c8e755"
        },
        "item": {
          "id": "7ecfbcaa-4075-4fe5-b4a5-c39689e41895",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "213cc3e1-f80e-4aa6-a846-0471bec1422a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be0ecd4-fc07-47a4-8229-ddaeebebd66a",
        "cursor": {
          "ref": "9c9888a9-4c58-4bee-a1cd-3766dc50f26e",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "617c6439-5764-483f-a76d-0049f48fc574"
        },
        "item": {
          "id": "9be0ecd4-fc07-47a4-8229-ddaeebebd66a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "722e33b2-cb1f-4ffa-a00e-b1f16f865051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17b7053-e252-4555-ba47-dff077a39bc6",
        "cursor": {
          "ref": "c902d318-c36c-4bfc-b9ce-33720a78b6e9",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cb42c251-e321-4c95-b7af-547c290e92e2"
        },
        "item": {
          "id": "e17b7053-e252-4555-ba47-dff077a39bc6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c14bb22f-49bb-4955-8416-ce46f59609f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f4d64b-ed59-4e83-adac-8e568c631ad3",
        "cursor": {
          "ref": "ffbc1041-b33e-4734-a1e7-b40f429a01f0",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f5dff869-f080-435e-bc7e-55818a2b5573"
        },
        "item": {
          "id": "a4f4d64b-ed59-4e83-adac-8e568c631ad3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ef935316-bb6c-46be-90ff-e5e400d1ebc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64676f6-815b-4d82-96ad-ab523fbfb1c7",
        "cursor": {
          "ref": "80b6e56e-485c-463a-86ff-85553031b011",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "53c7c72b-c772-4ae2-8319-e023755ad8ae"
        },
        "item": {
          "id": "f64676f6-815b-4d82-96ad-ab523fbfb1c7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "78edd96a-6c2f-4c56-9250-907ae6e8da3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfab7d76-de65-4a61-889b-4105f8b914a1",
        "cursor": {
          "ref": "0f119a09-a432-4159-abf7-9a29adea5d2e",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3eef0196-4ced-41e3-a508-56ffc703432c"
        },
        "item": {
          "id": "dfab7d76-de65-4a61-889b-4105f8b914a1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "14105169-8c41-41d8-9c0f-392b7d22fc1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512bd475-8df9-4b69-a4a2-9659e307ab04",
        "cursor": {
          "ref": "7921804f-0260-4308-8488-050eb7c7a215",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "62679802-ae6a-4024-9c7d-69c8cfcdaa15"
        },
        "item": {
          "id": "512bd475-8df9-4b69-a4a2-9659e307ab04",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "57a7dd85-dfae-4faf-9535-3add07ce9dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd171710-462f-4b4a-b174-e1ef61b3d975",
        "cursor": {
          "ref": "a9994c98-b62f-40a4-8882-a1529585f6ca",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "71bc2160-a7a7-4c07-8dd6-8cc78e1ce5fc"
        },
        "item": {
          "id": "dd171710-462f-4b4a-b174-e1ef61b3d975",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2f6a5b0a-33c8-45f8-94a4-140fd08538bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9a859c-5c1f-4abc-80f3-054767996782",
        "cursor": {
          "ref": "9175b1ca-44f9-4473-a4c1-6a951635848b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "afc7072e-3346-40f4-ab57-1fb5f67fd8f4"
        },
        "item": {
          "id": "0e9a859c-5c1f-4abc-80f3-054767996782",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "19fa26fa-10ab-4278-a75d-34634f919261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b35fca-eb89-45b5-b1a4-43e547866c7f",
        "cursor": {
          "ref": "59e16e2c-3db1-4f4d-bbb1-3f09f0621f5c",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "eb6508ce-7fd8-4a50-939c-9dadfeae0034"
        },
        "item": {
          "id": "28b35fca-eb89-45b5-b1a4-43e547866c7f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "59c0d7bc-20a8-478d-a27c-a75ba5ac8ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7012d53e-da5e-4f8a-ab17-4a56bf1c8332",
        "cursor": {
          "ref": "4d9b5a62-04f9-44aa-b29c-9c4dd03c69d8",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e9a25ae9-61ac-4380-a829-1420f5648a07"
        },
        "item": {
          "id": "7012d53e-da5e-4f8a-ab17-4a56bf1c8332",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "525a91a7-d18b-4703-9975-4e9c703d9de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52fa872-bd76-4925-a8ed-1cd61f167ba3",
        "cursor": {
          "ref": "c1882722-7b80-4a82-88df-772e70dafde2",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "66b6e1ce-4ef6-4324-83c4-9c9fc94beea7"
        },
        "item": {
          "id": "e52fa872-bd76-4925-a8ed-1cd61f167ba3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "254e1cb4-d717-48b5-a9d2-8b09bc422304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c370d7-7f41-4588-8d7a-1d72ea0acc2a",
        "cursor": {
          "ref": "ff93b3ce-4bca-4196-9c8a-74fb8ec00583",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "976d4238-16c2-41b8-a96f-5dc4ac9ba3ae"
        },
        "item": {
          "id": "57c370d7-7f41-4588-8d7a-1d72ea0acc2a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e7c3b411-bbb5-4235-9526-78d70bb03d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62df3753-7dfd-48dd-8f96-f7b5e46b29c7",
        "cursor": {
          "ref": "ab1f5e86-23c6-4825-8844-8882a58992bf",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c37ac5f6-5b48-4854-abf9-b206f3af5b8b"
        },
        "item": {
          "id": "62df3753-7dfd-48dd-8f96-f7b5e46b29c7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "874fa84b-c62d-4576-a365-d670c8ca63ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5ec606-c556-4795-9fb3-d044224f26a0",
        "cursor": {
          "ref": "92ccf42a-a8d5-4bc1-81dc-a4f6711cfff8",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "6e37e1ce-036c-4f7b-889a-1552befd2409"
        },
        "item": {
          "id": "bb5ec606-c556-4795-9fb3-d044224f26a0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ece61e74-c7f7-4af4-b5c7-1dcf522b61a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bce49a4-4511-4562-992a-42195088bd45",
        "cursor": {
          "ref": "0bda7756-47e1-4a35-9e1b-8ae31ca1bb50",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "aedd1d8e-7d28-40b7-891b-5edf750e4eec"
        },
        "item": {
          "id": "8bce49a4-4511-4562-992a-42195088bd45",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a51a7397-1823-4275-9a24-e1aa3069c336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe2f93a-b21c-4608-ae67-6e374ccb1d72",
        "cursor": {
          "ref": "b05a35ac-0255-4744-a325-d60d57c7643e",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f162caab-fe4e-48ad-b93a-5cfcbb4a29b8"
        },
        "item": {
          "id": "4fe2f93a-b21c-4608-ae67-6e374ccb1d72",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "db036971-f4eb-4ef3-95d6-6162466b13ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbe4b4e-57a8-4411-9e56-9715b8d94df0",
        "cursor": {
          "ref": "941a1646-31a3-4470-bcd3-9f3bd6d2aa10",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "434dfe1a-0a44-43bc-a1ba-e19999531939"
        },
        "item": {
          "id": "cfbe4b4e-57a8-4411-9e56-9715b8d94df0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1c6bdfca-9adf-49fc-a7b6-53c552bdd3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf903348-55a3-4712-8ef5-b6c2b8053829",
        "cursor": {
          "ref": "fade3c45-d79f-4c36-a3e9-904097adeb59",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d5dd46d2-dab8-484f-a405-b0150057bfe5"
        },
        "item": {
          "id": "cf903348-55a3-4712-8ef5-b6c2b8053829",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "416ce447-276b-4fc5-a697-5b81abda4da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01364c52-65aa-4fd4-a446-de62611498cc",
        "cursor": {
          "ref": "c2f57793-9c8b-4897-bd6c-153cae65d5fa",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3732df8f-c400-45d1-96e9-7d1b01be6f92"
        },
        "item": {
          "id": "01364c52-65aa-4fd4-a446-de62611498cc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "48b75cb4-46af-4a46-b4ca-244f849edad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6f6e2c-8a9d-4fa9-9541-2b38428bb7e3",
        "cursor": {
          "ref": "18e7c9c2-8f3b-4246-a552-33dd93fd837a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a14a7189-c817-4eb6-af12-801f6bb79785"
        },
        "item": {
          "id": "9b6f6e2c-8a9d-4fa9-9541-2b38428bb7e3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ecc240d3-45c1-42e2-9953-e44928f7894e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ea5f18-c939-4c98-8f63-2fc0478d7938",
        "cursor": {
          "ref": "dc434f0a-2d2a-4db9-a4ed-53fca9fb1803",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "86565006-eb95-4ae5-ba5d-7f7c24239ec7"
        },
        "item": {
          "id": "e8ea5f18-c939-4c98-8f63-2fc0478d7938",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5277c2d5-3d11-4f03-b92f-6c92f91c883b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df486cf-3dd8-4524-bf8b-a0e32a9eb626",
        "cursor": {
          "ref": "97fe6d64-5049-479c-96d4-39441fa1dc6c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "587d0276-2ee9-4038-ab9e-b140d0b01dcf"
        },
        "item": {
          "id": "6df486cf-3dd8-4524-bf8b-a0e32a9eb626",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3725019c-4c75-44cd-b2aa-f3fee9abb05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772f1c47-4c4c-420f-8b9c-f9ea9212056e",
        "cursor": {
          "ref": "031d857b-88f4-49d7-bfb0-fc90b07b8177",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f0e794e2-df30-4e73-9157-c32fb85c814c"
        },
        "item": {
          "id": "772f1c47-4c4c-420f-8b9c-f9ea9212056e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a70ac921-d07e-4733-91ff-2f0a58040026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fabf94-1cef-4b5a-a5f0-31032f1bfaed",
        "cursor": {
          "ref": "8a7a9e4e-7c55-4cd5-bc64-86efd6bacf3e",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9b5ad6e1-4fa4-42cd-a093-550ac2a3d56f"
        },
        "item": {
          "id": "a9fabf94-1cef-4b5a-a5f0-31032f1bfaed",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f1d5314b-5f40-42c6-a908-4b6a007146c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba0e8c9-4340-448f-a905-825aa81703b6",
        "cursor": {
          "ref": "1629d649-355e-4e1b-80d7-d24ae7f8ac4c",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "9831ead1-ef06-46fb-a41d-2aecb32b3cfa"
        },
        "item": {
          "id": "bba0e8c9-4340-448f-a905-825aa81703b6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fa130710-9a70-416e-8b39-4f66d7a25e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e47f1f4-d6b7-455a-99ae-622453b26feb",
        "cursor": {
          "ref": "4c15c803-a55f-4a90-b4d7-c42ff0a5446b",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "97e6295f-5a35-443b-aab7-c6edab6b5393"
        },
        "item": {
          "id": "7e47f1f4-d6b7-455a-99ae-622453b26feb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d0704499-6fca-40ce-b76f-de9ae2612dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d469f1-0cf0-4e99-b003-07c204c46c6d",
        "cursor": {
          "ref": "d7fbde4f-c2ee-4875-b1d2-0a98a512f72d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "bc94c62f-6178-4f22-9b5d-0eb2ca971bea"
        },
        "item": {
          "id": "10d469f1-0cf0-4e99-b003-07c204c46c6d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6689fd6a-fffc-4b37-b488-e646a457b107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ab71b0-7927-4549-a94d-293ce57ab560",
        "cursor": {
          "ref": "2dec810b-c5c3-41b7-91cf-cdbf07f962a2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "3cca114c-2a9e-4121-b6c8-dc69c3129d0c"
        },
        "item": {
          "id": "10ab71b0-7927-4549-a94d-293ce57ab560",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "edfc58b2-e7c9-4184-a6cd-1d7e95ccb92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7fc35f-993b-439a-b436-e7f72bceb662",
        "cursor": {
          "ref": "28710636-7434-4ac1-9d32-3dcae9142735",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "bc312a16-c7fe-4a07-a175-f3409b5fc113"
        },
        "item": {
          "id": "ec7fc35f-993b-439a-b436-e7f72bceb662",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "de0741e3-c61c-4c33-9384-113f1103183d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f504937-a384-4511-b075-d48ae7755e43",
        "cursor": {
          "ref": "2ef40843-1296-42f7-b408-820212ce57af",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "86860290-db60-484e-b7a6-d0dc24443e90"
        },
        "item": {
          "id": "7f504937-a384-4511-b075-d48ae7755e43",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "96fd3e9d-cb06-410f-81e3-60b3a156d268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52dcc3f7-584c-46eb-962b-9dbcf098927b",
        "cursor": {
          "ref": "dda6c216-cc8f-491c-89c2-fbc2f1ed12bc",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "f66bf12a-4227-43fa-960f-05112a30f09c"
        },
        "item": {
          "id": "52dcc3f7-584c-46eb-962b-9dbcf098927b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "77967786-1345-4110-8178-d679ce0fc962",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a20039-1911-4c36-b2c4-08714cb7be6d",
        "cursor": {
          "ref": "309ade1f-5d88-4ff5-a1fa-ecec0856a57c",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "adf7e09e-2732-46f3-a480-77b8a2ff6ab7"
        },
        "item": {
          "id": "51a20039-1911-4c36-b2c4-08714cb7be6d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a41b366b-7f73-4952-aeec-bad271a02d6a",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "9178ad86-1001-4261-8ba3-9dcca06ce1f1",
        "cursor": {
          "ref": "0b6615d7-dea4-48f2-a36f-fbd0088a20cd",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e29c89b6-d999-4baf-ad47-85e7e5bde425"
        },
        "item": {
          "id": "9178ad86-1001-4261-8ba3-9dcca06ce1f1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c5bfbf3f-f981-4edf-b0f5-4b95741516c5",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ed3f7c-b003-4809-a86c-ea271f89a408",
        "cursor": {
          "ref": "ec622951-83e7-41ad-994d-8d9a8d545c50",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "59b7d624-53eb-437a-b371-c6f508387576"
        },
        "item": {
          "id": "38ed3f7c-b003-4809-a86c-ea271f89a408",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2af1be56-4b1f-47bf-a55b-7e370cec9508",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41ef254-0b23-4114-a825-8e2ff28b5af2",
        "cursor": {
          "ref": "93433ab1-5c44-4a6d-9085-487e419e4231",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a73e035c-3fe0-4040-9d93-6732e65c6a59"
        },
        "item": {
          "id": "d41ef254-0b23-4114-a825-8e2ff28b5af2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "73e09839-0e46-4ede-9d36-815c8ac7375a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41ef254-0b23-4114-a825-8e2ff28b5af2",
        "cursor": {
          "ref": "93433ab1-5c44-4a6d-9085-487e419e4231",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a73e035c-3fe0-4040-9d93-6732e65c6a59"
        },
        "item": {
          "id": "d41ef254-0b23-4114-a825-8e2ff28b5af2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "73e09839-0e46-4ede-9d36-815c8ac7375a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fcfb706-2be0-4e4a-8d5a-b87121ad23c6",
        "cursor": {
          "ref": "ea1041a8-bb8f-4252-b70a-9d7d9a2f2685",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "6b26c5d8-a045-4855-aba1-c03105e9f49d"
        },
        "item": {
          "id": "2fcfb706-2be0-4e4a-8d5a-b87121ad23c6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "99cd27e6-fc8c-4e26-a0c3-ca5e193cdfe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b773c0e-9b60-4e17-94fb-64a3272d6ed3",
        "cursor": {
          "ref": "2f9b04b4-b38d-462a-b470-f6036861842b",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "91a54c81-27b6-4781-b4aa-cabcda66c583"
        },
        "item": {
          "id": "6b773c0e-9b60-4e17-94fb-64a3272d6ed3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "070886a3-0e4b-4db6-b821-84e01cfce933",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}