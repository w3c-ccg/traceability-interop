{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "161812d0-730a-42b1-8478-44a74240b8ff",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d28a198f-f3e9-4e72-ae84-ed046430dc0d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e0ac7900-102c-4ee8-98a9-ef2635df42ee",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "20997c30-1046-4286-871a-b2e3329a92b5"
                }
              }
            ]
          },
          {
            "id": "dd2764c1-8e46-492d-8a78-3e14a94f822f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3c8901b1-dc2e-465e-9e5c-03e6ffd90f5a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "70a18a12-f221-4325-a46b-eed7143a45e0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c3b1dfe1-8e2a-4ebb-9ff8-f3560dfbab06",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "281d4552-b307-46af-98fe-5f694d4ac4dc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0434a762-47c5-4964-a921-c9e174ee2d52",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1532246c-941d-45f6-8023-2bcdf6e3ada7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc2d283d-3dfe-40d3-a677-1d453ce0e18e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30059379-c955-419a-999f-b4ff77051a5a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f31e3c80-a23e-4a8f-baf0-39205b30ac77"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7924f6e0-4b23-4578-aa7b-af17907e90d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd191de7-18a0-431e-8375-0077a9a92dec"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10a14ad4-8203-413e-bb5d-e84947569e84",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3a1f2869-7cf5-4df6-a7ef-4678ee2043e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c916a31e-1820-41ac-924a-e7dfa92e0a80",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87050b59-ce19-41d1-9c90-18d48d97b3f3"
            }
          }
        ]
      },
      {
        "id": "08640563-e767-4eb3-941d-36ce889c64bc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "273a3cc5-76a0-4b04-863b-b1f9cfddc9bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0f6417ed-958c-4fe9-a5b2-e9b3c17ffa42",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e7defc54-3d43-4025-8bdf-9e08e75760b4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a3e07d-3385-411c-ab6c-2fdb497e5c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bcac709-c059-4314-a112-27b982320d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46bfa3e1-123c-4931-81ce-995f2d740694",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f1efa1-a536-4321-8726-bd158e567157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efcb8f42-9c5f-42b1-aac8-794c32827d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3e37f5-1fa7-4a49-b8fb-54a522a94d54",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be049f74-4471-470c-9a26-b463f00d2eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5282d0ca-593a-4f46-9f0a-ffa8ce50b576"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b596124b-7bf6-42ce-8220-c82b5624fe40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c895ceb0-d74c-4716-bb24-c3a23c285a7a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d656d7-6385-422f-be19-859b33dd73b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f91b085-cac4-4c39-affb-81ca685281a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea670d22-a210-474d-96e3-b668bc83bfc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "050d8f87-d22b-430d-9cb2-898b21dc76a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d39c24-96ae-410c-b5e5-d6cba7e97426",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10492e19-f2e9-4691-a97a-326c6e3c8253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0052b13-cb63-4e70-a631-027cde4d3efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9539b210-9f8c-49ac-91dc-9b5755857fa3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "db40ee2e-6155-4e83-9950-69d7f199291c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "730ffbc4-d494-4121-8c2f-51bdb754fe35",
            "name": "Positive Testing",
            "item": [
              {
                "id": "54804126-8cf4-43eb-8402-fc3906e557db",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2eac3351-ffdb-4ff2-b41a-796d75236490",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "45ba9fa6-9fef-40a8-8971-5e1fb8afc13e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66fe3006-06e8-4aba-8f19-236988b7c59a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8ebb9da5-3694-4eee-9606-574aa58e030f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f68c3e2-9b60-4649-a765-9eefa99b260e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f41c6ea-386d-47c4-910b-0467f2d6c8cb"
            }
          }
        ]
      },
      {
        "id": "b318c363-32b6-4aab-b83c-c4b04b72d2e5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bd6bc917-19f2-418f-9490-22744feed57a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12f8057a-db08-4bb3-ad50-898b612457fc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "63a1186c-087c-4211-960b-c08eaf6f2350",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4752f9-476e-468d-8e98-750307054957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67718706-7d28-4f38-8000-9a613c3326f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8782a3b6-2ac8-4a8e-a3f4-6394b1638478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7434f2af-8a0c-4214-b49a-b7c36b79a047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa6dd4d-91f0-4731-9332-8aa1a4204373",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596916eb-7126-49d2-a058-c5f72f8e5539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419713c8-01f9-4994-bc3b-99696d88c980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86db2a8f-c189-47d8-81ff-046de80cf85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8c258b7-6540-4998-b71d-c2d3ddbbb4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c184544f-4e11-4b9d-94d2-5b24bf4274f9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841cebf7-36ef-4c60-a307-100a653ac7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be35bfd0-946c-4a3f-b519-55bc671610d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565c2245-ab3c-42e8-9024-c1247ff08617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3365b04f-b962-4b4e-9ce8-adb0dfa7fb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112068c0-6929-43f1-a311-1fb27975b96b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99bcd4c-02c6-4038-8ba9-0fae7d0d32eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6211c1d2-e1d1-4fca-bc71-0c32a4121df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731f9ac8-9f35-4ceb-84cd-8483ca28e735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30eb5575-9eb3-412c-a082-f98de7aef986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8da919-26c2-4730-b4fb-4a065a1e851a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff52f3c8-deb2-426a-9b94-f09ed82c6602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b5bac1-649f-4db3-88bf-ec42696a3410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d005f40-2f3d-484e-8352-9dcc469476b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d42e61c-6be8-4354-a18c-481129031f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39e486c-4d96-404a-8a48-9367bba7d0b8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c459c41e-ecc6-4997-8692-d196766ff63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ccaf66c-16ef-49f2-acc8-9f1f5a381c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46850d6-cd80-4b3f-ba79-bbe688f1a7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1554714-c9ad-4cfc-b1df-59d17db7fc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9a0505-b38c-4c52-a17f-fbd5d294d484",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4135e58-d990-4193-90c2-45c940b08488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e9d01a6-4bad-4e5d-9c38-9df6c56f18ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0941cd-3e83-4dce-a0b6-969dd5a2e933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50abb329-5731-482f-bcca-4fe6e8675069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae327bf-f156-44da-9377-a2efdd07af82",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9d1ab6-9669-45fb-9f0b-5b5ce863ab06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff38b4b5-2b91-4be3-ae08-94cb90e26c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875d1761-07df-4fdf-9d03-98a9ef20fb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21be605e-62de-48b1-8117-932e950f1d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf628643-eed6-4e76-994c-61bf77a20807",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f30e66-09a5-4fbe-afe4-0f233b6142f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a94c27-bdf4-4c0f-a51b-7516cc458e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54270783-58a2-452e-9c51-4cc2d59d43a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86882a7f-4829-4969-a53d-000957b12ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f2f7fd-3f48-4a48-b644-6bf8aa7d59d2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cfe795-cabe-408d-8d2e-ffdf1ca47098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18745c1-5b63-4a9e-9607-1e2f84bee0b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebab7df-443c-4f60-8370-ffbc866fcd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8747715-0f76-477d-8343-e1699873aa0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f361474b-3bca-48ef-8e00-646c8019e1c8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e29594b-eba0-4b9f-9a25-5d379b8c1a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed13ced-30b1-47df-8ba1-45d330e18b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668c1d01-ca30-495c-a128-9331386fce27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad68a405-dbf9-4da7-8c20-e8426505be76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596046a2-5295-44c3-bc08-34720e9af1d5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a08e680-4d93-41fb-8665-92cf6c0f1b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911a4e43-059e-4f31-b496-c42cbd5add3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239de1f4-fc74-4960-a928-722408604eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fa47e36-1b19-4e21-a74c-9a83b31a4435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b26d44-4920-4058-be28-668bdc68a968",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a66184e-e875-4673-8496-28aa30c8ef45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5facc7b2-b027-4b27-9614-0b50f096da9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083dd45f-62c3-4154-b855-94825cebf38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "832342e6-807b-49b8-b8bd-465b97faa989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1656690a-5681-4840-a0cc-d4b344fad51b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d565218-3683-4d01-aa6c-905a7783c050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2596ed0-54e9-4fe6-a230-3ef3b80a0593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc42f36-787c-419c-8bd0-8da6b125421f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "634a8b94-70ec-4f56-871b-3c15f0769bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e566677-50d5-4264-b74a-1de36c978d7c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2c69e7-8d86-4b90-b75d-753f50988fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269274b0-de9b-4665-8d09-51396092d5a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec404f1-1eff-439c-ac7a-d345fe82daae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89efa1d4-8815-47f5-a64d-e7bf5f375c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "addae456-5bce-4c75-bfca-f728a8258694",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c34e5e6-53bb-4b24-a0da-d8c0002c408a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b373dae-7174-4576-80eb-d94d79c78c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9101a6ff-3a96-4d86-9b21-9c7128ff6482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8b43820-5720-4788-a513-c65b414bc806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0575a6b8-4ac8-47b3-9cda-b0e0541efa68",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542245cd-a8b4-4efc-8e38-6d1e748b082c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "245cd8f0-620b-4ecc-b600-5e5e8a02a5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1589af-a1de-4d60-95cd-20c00b8097ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e8f64b6-9632-4e75-a42b-3f4c7aecd368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53275906-6ce1-4054-b47c-2f4a376291a7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89949490-fcab-4606-9847-298a9396cb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9086f92-1740-46bf-9767-11144afa0b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df46b4d2-cea6-41f6-9050-72ecb0c3bffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bdcfe63-9961-4c17-ad1a-45e9eac12fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0128f0bb-7fac-4325-bd1b-27cecc9c6ef9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a3b766-88ca-464e-a2aa-dbd80f826682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "520e29ce-5823-43ff-981c-5d35586434a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240c74e4-40f2-4c77-8980-c4b3f06f4d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa61a53d-6500-4045-aaf3-6354a38b1afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df4e7e1-9d2c-4b6d-8597-f5c3dac13a28",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ff23d3-97af-40ce-9fff-5952a0969a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61063895-5cb4-4a87-80b5-23d8ca8986af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d8633d-3477-4ae8-9304-99d5dff67e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e95f242f-d772-4a8d-a20a-c7d0d4ef7a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192e82a2-845a-4738-ad84-8087ebcda193",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693fa24e-28c1-406a-8970-98c67a273f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f5a141-fb0e-4f70-93bb-6c2d2c5d1b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc7a6f8-03cf-4cde-b0ed-4befc82310dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39d8ef06-4407-4245-b372-d2f493d357ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e41bbe-38ee-45bc-b98b-b3057e7141c8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95214c5d-73b6-498e-82de-d1506fa5b3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9160586-ff86-4322-83cd-19917d5bdece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d347e041-2aa2-441b-ab3e-36bf45668a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d7bb6c0-7544-42ad-b39c-4ee85049c3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c784c8-cf07-4c5c-8540-8aea9c73435f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d56aaed-7303-4bb0-b885-96f395f2e097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9469cfd8-3228-41ba-8f0d-b553f171fbf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b631e514-0240-445a-8dbc-8bba2675344f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89892492-5a1a-4a7a-9710-0001c7f1cf6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27ca7bb-5ae3-4b79-854f-458694b6e5ce",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2ad9ca-80ff-45ff-987e-d6e34b2b10b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6480db6c-34db-4e37-b6f1-d091d8d7f8f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13e1120-42ed-420a-a964-1451081fb28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "63f5759d-7e40-4b04-9c3f-44372c8c2519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c84f1b84-19db-4d38-b4df-ff5a18be1250",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bd3a39-baea-49b1-a801-1d540f279b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd80e26-6698-42b1-ab76-e24f8c1b9973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049326f8-dda3-42c2-bbf7-3d2fd758c601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8115c688-902e-4ef8-aa2c-4411c4e03355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2577513-f85a-418f-b4eb-86028ea1fe34",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa34948-4751-47f6-bfa0-a45bee6d6df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957ed69f-6468-49f9-a5e5-42e868350fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598f0dec-fa65-4d0a-ae0a-c317f3e8702a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3647022a-cbed-47fa-a749-989b14b8e78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0f6a78-2884-4bd5-a01d-df48e8be2756",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba6bb75-4d2f-44ff-a7f2-fd7da0fb5593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cbf70f7-f30a-4562-be43-c2049578978c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0223069d-ab1b-4bca-970d-9e904110fef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7310b8f1-4c49-418d-b32b-3b6300a84561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be90994-fbdd-4721-b9f3-35216054478b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58120be-a501-4e15-bc4b-f123da995d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513fc97a-0f86-4655-a344-5634080deb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f94f79-874d-4ba4-8d7d-bc3405281f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1f6f5ba-e242-4a71-8919-dd4907613af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005168d8-93d2-4543-91e9-d87e94f7cbf9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7b00d6-0de1-4d76-839c-a502fa4d81e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74da18a0-e529-481e-b960-961cef0d1efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cc4e42-9d8a-470f-923c-db7eb7a02133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e380a396-ea82-449b-aa00-d9190e6f0011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b1dcea-6aee-4829-a697-c1712cfe2a13",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b11dea-95d7-46a9-b1c9-2f93df7c1385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4d9d99-f5ee-4369-b938-8613864dec55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33103762-e333-4020-90c0-c5855f4474f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fcc1dcb-6607-4a77-8ad5-50edd2a45a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d570283f-8de3-4019-912d-49234ed98a6e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec5bfd2-b7ee-45e8-94e8-0260845938da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24802b16-6b9a-4145-9e07-56030a1350bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485acea2-9738-4130-95ac-5d7204ccef73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c5b0fef-e70c-457e-9b72-a11547ffd157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30417025-08aa-4093-9743-0b9a5eb17008",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4637fc3-65c8-4a4f-8477-46c40cedf74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5545bfc0-9acc-4eea-9f96-854961fbc932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e2c46d-f162-49c0-a9a1-9244fbfb9021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c13164b7-c796-4a56-9e53-f669763f65c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039e96d4-1239-4c7d-a232-10b8ad69e270",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee35480-76ee-42c0-a770-9ab5302db7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69103a55-23c5-45eb-9c56-959ffe55d957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84774b44-d4ad-4966-8c73-41730d09883c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58defafa-13e8-44dc-9242-ef8c69696725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bb0e98-b91b-4345-beb9-6d98db266bd5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313a7327-ec3a-491b-bc2f-50cb12550ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b77b7dd-53fc-4f6e-aa64-773df67a14ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba5c299-a725-42e2-8b46-d505748df188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7448806-0670-4914-8c2e-ff97ea188d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab580ca-9da6-451f-90e5-ec7aef4e4748",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bc0129-e706-4cb0-811c-7a6f12429251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e83ccaf-34b8-434f-ab6e-df432e244d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8bff71-a9b4-4a31-84d1-a0bcfbd4864d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ceaf96c3-4de7-42ed-88f3-aaded7b2adf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff6858e-b216-4b33-ad3b-c8bdc3f08003",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f9a9ae-11eb-455c-a0d2-16dca46559e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51386733-20d3-43a7-97c7-60d937f44e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c84b16-ec4d-4836-923a-4c037423352e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49f39d62-fc98-431c-bdb3-28ccadae1299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130910d4-52a6-4903-8668-a18aac83d9e6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc3b6ff-1b60-49f9-b5a2-2d3183d81e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090140df-a69c-48ae-9289-9edff893d18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd68dff-02e0-42d6-813e-8039128f0a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e8e47a-ae75-4fcd-8346-b0b8728d5b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02838243-3506-47ab-aebc-8222835ddbcb",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43bdef8-734f-487f-b5c5-422d4268e160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f9d7c0c-318c-4f0e-8fa5-18283134b23e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eceb0af-fc08-4c87-8d58-76f54cb2f3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "39e113c9-a36b-4452-af11-68ae4caf6aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c53088-d957-4d95-9981-3a0fc8197f43",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fad01d-4746-4ed1-9c33-50cb1c48e3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52657566-308f-48fb-ab3e-5139c3f78082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9032f4-8caf-4f0f-9ede-a25512bd9dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5784cf87-1c9f-4d51-82ea-33ca10a48cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0125482-f776-4c77-99bc-62f04a7ff6d6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7adf2bf-ac44-40a8-88ea-7048f4ef4ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a74b5e-c23d-4bf5-bb18-61987c94de70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78d6669-36fe-428b-a3a4-ac9b4c20f2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "92d32ab6-7f48-4d34-8942-b17b15fb2e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ea297f-d4d4-4095-9060-fe250fb85eb4",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e944074e-f3c9-4b62-9833-0c9224761c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a3d9e0-9839-4f71-a243-88db285cbcb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07944756-bdbf-4569-b862-2b32e5c5475d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "66e3ec98-a3e7-44f3-88f6-0444b3df5fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2531203-20ce-415d-a605-b5f891472640",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5315f2a7-953c-4f69-8ade-1ff0dce7c386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a80b14-702d-4aa2-b111-0b53fb06d35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb34553-e84e-416b-a63a-9d4e38d89d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "79c416b2-67c8-49a3-9803-a5a633925d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd501caa-4645-480f-813b-ebdaba530858",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fc765f-1a65-4b7d-b43d-6a8fb3dac8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025c9f45-b472-4a78-9278-65616be05931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015e050c-06c9-45ca-a6a5-eb835708bd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7437203-9c02-4e89-bf3c-d484f8ba412e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cef7452-75ff-4c4a-b4a6-6cde66210ac6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9342e9f-681a-404b-b54c-90f5bdab5d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd428a4-e94d-4cc5-9dcc-9a061370e2d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be35e2b-9f39-4b64-9ede-f3383b4c4787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1cdf319-d4ca-4b97-9010-df945e7e795b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53800da-bc7e-4901-adda-3f0551fcdaef",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffc3b85-94a6-4524-b33a-c4f3347340d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84fc824-afc8-48b9-ba8a-40d5360c1340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d168062-053e-48b1-a018-04759a23b3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4076e1-a7e4-41ed-97be-f03be237cef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2df0e7b-08e5-40d1-a346-0f7c06b97496",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39219dd0-08ec-400d-81a1-6c5fb20535de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272484c5-975b-456c-ae7c-c34b43286824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e42a1a-d6af-4ef5-a79f-1bb40b20c0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31bd3f22-9cfa-43ec-8f67-fb7a21b9eb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970f023c-b128-4271-bb55-3dc241a6f1fb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02d6124-9cbc-4c28-a570-1a3322c2ea51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0138570-4df6-47ff-ba54-156e4d431503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bf47ea-8c9d-478f-820b-c00e01968805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9e8053-d6b5-44a8-8bb6-56bb2d8ea282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9e186a-4300-41e0-ab66-831f31ab3bc7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0686f7e3-d479-4dbb-a8ce-18f6a18dbef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be004c1-e94d-4b9d-8576-33a1f0a4209b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9c9ca3-c7ec-4b79-a0c7-a2f30a71c495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdfea0e-638a-4ba8-bf64-b45ecbdf8e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf639cd6-9d27-477f-ad9b-92f96576a7d3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06df9e8c-ec40-47e7-98e1-f8f344f4a4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2b2bd2-c867-4702-899e-780828bb9554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e402d69f-25a3-49be-abc5-779fd36b1e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "daa54b6d-5c15-4d4c-ab39-03e05195d3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0badadde-f08e-419d-afd2-e9738ce84598",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0ff367-b33d-4cf1-a78a-ef096bc1cd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7990c4-9baf-4c7d-9fe4-897eb74ee972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23652adf-b30c-47bf-a843-36c2bb3d97b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5fde9212-1403-491a-9a5f-0bac9ab177df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89df78e5-2608-464a-a8b3-33d902b9de00",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09e047b-6147-4b0e-af88-73eeaae3aada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2082e4e-baa9-459b-935f-1212a2d47c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f806f8-dbe8-42c7-9973-0729304fc803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a641fb94-5a1b-4753-a2b2-f2547e56a474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab2338f-168a-4f40-96d3-278757cdcb4f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d792d3-d7fc-4fd0-b9ba-8a010bee967d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f002337-7b6b-4c7f-acba-fad947594700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9203b67-17f3-4c3d-98ea-896b2177116d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a395e510-9ad6-4bf4-b447-fa4f7809a36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31cf25b0-7860-4b0c-aaca-3c73f4017612",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc557012-3477-49ec-b300-37ad9f5f0bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12cfc01e-5fa6-437e-b8c6-f8111383a583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e1b859-c297-49e5-9f78-fb79810e552d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b5e4596-fa45-46ed-b761-112e93a14d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e68d10-5422-4f7d-ad8e-6ae5ceb5bc28",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0a4695-3e4e-4637-99ac-f4d9cb5aa8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15fd184-5bc0-473c-9900-3f14c8f63a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5592b2-e72b-4007-83b1-4ab74a241439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af040ed1-004b-45ed-bf58-f5ea3bf0fbdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0024dfe5-6517-47fd-8921-a36a397a20f3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462a486e-a0da-4d6c-8aa5-dce0fa5e34a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10dabadc-e68b-4ec7-b469-b74a29ca46ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019af00d-be7f-4c6a-af65-79b4a006c780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "256c6aaa-1b3b-4767-a87f-8c6cb2055619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8bb748-9698-4d8f-ba87-21d40c59fdde",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5770cbc7-809d-4951-9d0e-af8685020d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc58e6e-e3ba-42a0-ba93-29bab3eabb2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa636ff6-c8a3-4023-8b59-9edd32f3befb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7a77bb69-d8c9-451d-a716-f1297b15a452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c96bc8b-d20e-4fde-a7cc-2c795321286b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d65fb6-a7a1-4acf-8c9c-4708b35a3db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f1a968-b294-4636-b8c2-c5ea73017ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b6ebdb-8989-43fb-bef9-94f977bb24d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d7f7a44-b524-446a-830c-cebe7c402797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1f6b87-9e4d-4f69-9a87-fc698c458dbd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b43f5b-bae1-4339-84a8-bfd4d470f136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874a58f0-8022-4ad6-86b7-bbaae384da6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30b5104-528c-4218-ae8c-37f769187315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "359cea00-3a7b-49a0-84b3-a018d45db390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998dc099-88b9-4184-8267-487ffd99d3f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885fc220-90d0-42a2-8955-bd2279a6451b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3177b5d-fa3a-4ffd-ada6-bfa55c6e5f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcb4af4-bf5c-40cf-afe9-98cfa93f5f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6425adf5-7fea-4ef7-ba2f-c409c68c2f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12692e4-0924-459d-a8e2-26254bc4f8c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c32ce4-21f2-4331-82a2-5bb1a0b1f924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5caac8eb-a4c6-434e-949f-da6091af7ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430d4ca6-cc4d-47a8-8701-d196368ffe4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0c9fac4-d915-4e53-9b4a-fa81625da0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75dbe02-c3d5-4474-8cd7-eaa7c8582a30",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fb8429-705c-4b60-9420-46657e133264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5367ac2d-aa64-4880-96de-72e34f98904f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494f774d-1a48-46b9-9ffe-5dd46698caad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8ebbf6-80d3-453c-994e-2e351290340c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d14280-9e12-4e0f-a1aa-1c85b8790e04",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6333557-3d31-4fe6-bf04-ab24a534b56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955d0fc6-90ef-4dba-9a90-6c735c716523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4befd4ff-0fed-440f-b9b2-061dc3cd4e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e50053f-42d7-4b83-b544-7817b0fda2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7d14be-6542-490b-b14d-6f8920b5b0c2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2ddd46-d931-42d3-a3bf-1f043465b60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12181b41-253b-40f9-8666-5d1b81353f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075ddd21-09e6-4434-a29f-3b8acfd6c42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bde3e512-c171-46da-a407-5147751ccd13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04464c0-6309-44a2-89ee-e2b4ea9e3ff7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5f1bf8-e37e-42fe-9a2e-8a243b07045c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc334fec-86e0-4356-8d8e-f8b0034e2936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd111438-4d8d-4aca-b658-646846390fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "232661f1-46e2-4f09-89b6-d8e9ee202a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf424f9c-2de5-4bc6-b3c6-a155ad164861",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4707af-090e-4d22-83f7-ef7dcbb69bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad9bf13-14bd-4228-8e80-a9dfa539fb98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a6b248-e2b6-4bd5-98ed-911751b98ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3834d5de-a14c-4b33-8998-505c2aae5cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ca171f-c590-4566-9ac8-018d04c9ed34",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99efde5c-df36-40fb-8ce5-85b631ece74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc889bf-1e36-4033-a911-470c6ad2cc74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a3473d-4036-4dee-8468-e1c3ed95ecf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d345ac5a-29fd-4bb7-9479-aa03bc444d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d171ce-2928-4ada-bc04-7fb838396760",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac39760-1125-4cd0-a6dc-ee6375a8cd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202b96b8-e8fd-4242-aa1c-80a57855508a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e73de07-1380-478a-bb96-c9231ddc0486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0b31d2-dc74-4b0c-8c50-aca96aa5debd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc41c117-24f2-4f0a-ae80-5e49d252c63f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9122deea-63c9-4951-8a5c-965433ba0f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16766bb8-285a-4417-b0a5-8dd6a1970f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f487f1-43a6-4c53-ac2e-e4b7ec149a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dce3c8cb-d918-43c2-a532-11c918a139ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1600a26a-c436-4bb5-baa6-f9852bc91d60",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f5332c-4825-4f77-b4de-b8190689c0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e469fbf-a145-4f22-8009-5561235bc5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f00331-89cc-488e-9142-7a976def0811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e83c9864-15ef-4e64-9ae3-443e0558451e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2a2a36-5727-4b1d-a2af-4855953bcb9a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50e06ed-6540-40e3-ae56-2470da7a072c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27d9739-f437-4652-8d64-786cc91f6c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf860b87-da15-4c74-b6bb-dca4562fba1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73ce2397-6699-497d-a424-412480a4378a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2940507e-42f2-4cc4-9886-0f41a7cb8cf0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137fe0ad-290d-4237-b75a-06c92851a51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2911987-a8ca-4f8f-8aa4-d2b13a7e19fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99977226-7782-49f7-adc9-4bbea7468dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8be9cfb-2eaa-412b-98b4-43d8cd1b4b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5bcce1-cf49-44d7-b961-2a2a9cac7fa3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b4869b-e931-4141-911a-68c315ddb3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90aa1a6-5243-4058-862d-e8a44c867aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18c1b46-2507-480a-aae5-eba949d4864d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b2dc636-fb63-47f9-b41b-0ef062562bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8abd9e2-f110-41fb-b0d1-ec4514521d60",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da916ecd-b497-427c-86ea-4609b77503e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff29dc8c-edf6-4f06-aba2-37f62c3f7ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bc842d-f015-486f-9a4f-3d14ba808bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76c8382b-b697-4c0c-b32a-e3f0eca8ac00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5718404a-0fef-4f43-b29a-a15d25d5fc07",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df5778f-f4d7-4a38-b12b-d77864d4f890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da4d9ff-799c-467b-9108-48a6e1421e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3feb74da-00c4-49b2-a7eb-bda711bda272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bfaec8a8-9997-4125-916d-62f9bafef020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd05d599-8ff2-41c4-9474-95d1b4ef2f53",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17286b50-6eee-4564-adb5-c746342fbee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ba5ba2-f805-45b0-975a-32478ddd71bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f952e5-5e73-4ad8-8fbf-13024a3e7a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "32e41d68-e729-4e88-98cb-5c2123744081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1dfe14a-016f-462e-a1b1-f5325ac2d73b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6fca65-2dc2-44f3-8e63-29e5ce3ac2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077b9823-fe52-49a0-a64b-1c8750d7c61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7773e1d-0251-4820-98a0-f68dac0b56a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6bef09-e5a1-4ee1-97d6-884216740d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806b7707-d2b4-4938-9154-35a45f1da051",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c838ffdc-f328-4fb0-9d81-2342fda1f30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cfbdf15-a961-4cf3-9d6d-83ed24332354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87c2a40-8a6c-4df5-8449-44f2b2d86a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff63fe1-808f-4c03-a0d0-64e6eef1035d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5080a2-bb92-4dbd-a8bb-d6b724cbd3a2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6231831c-7c20-49ce-a685-0d9464cc6067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c64f80-968b-4d94-ae85-d36836f059ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc497dc9-a786-4c01-b2cd-452e63c8afa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2424f812-9eef-404c-92e9-d971a28feb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7109ba-9886-48fa-8a2a-ad5a7e464bc0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5958bd-2f10-4969-9a77-21d83bfe9615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f5f2e1-8fb0-40f8-a423-d0a24fcbd5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b69baa4-268c-4ad9-a255-5c38448cb867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91a931e4-bf5a-4417-a4f7-b80cbf6f13d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7acf0e-ab3e-4444-89c2-03d5dc60ec51",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0eb067-6c77-4550-9571-01eb4ba937cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fdde132-bfec-4d86-b31f-35618ebb2d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60f3470-577e-4dc9-bbc3-7e5142dc945f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bee6c675-aa01-40a2-b225-33d62434cb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd977fe-b362-4b0d-a575-7541c0757cdb",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a867e49-ed17-4ecf-bd0d-f9fec9891a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73835fe5-e016-4475-a720-ce8b7db15992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19b9fb4-5002-46f9-b245-ffda14a31963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "14b0dc54-2476-43c3-b470-d55e1febdb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9b4355-1db8-420b-95b1-1c8f2df64b63",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa3a498-fe1f-42c5-b631-55b575769f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fb84c4-7394-4db0-af64-0f2f2b571bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3893ad3a-a2b2-427e-9ea9-1f821751ef7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bec15d9-6e3f-41ac-ba24-6ff2a35ce8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35d82f6-3ecf-4b59-bf32-f80146ed474c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df4b7f4-292e-4802-850d-3186a463c4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d293d265-9f6b-4de0-9e1c-0aad578fa800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376a8cf1-d379-4e0e-a837-1477a4752cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "731fc0b1-7724-4214-b822-475f585908df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307e1eb5-c744-41f5-9cbc-17860c5eb400",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f18017-1578-4940-97d2-6633a122f5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea04a179-d236-4bb9-9e9f-e9289d10e17b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1328647-b07b-4cf5-acf6-832a6d8eefe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4b5fad-2bb8-4c45-ad57-927800bfc3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5ea574-47a1-413e-b079-a2f94d9cbb7f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1eb5e4-9c12-4512-b5b5-fcb1a268d38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361e5c9b-974b-4ac7-b7cd-99cfd21fc010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b535b5c6-0be3-448b-a15c-dac4188b55e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d98350f5-38c1-4ba9-8dfe-be6e36d7421e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469b1c8f-1403-4268-8f31-5350d8da26a0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93060b25-aa13-4901-bc9a-89891c8b81ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23fc8d5-fc52-4b45-bda8-d6bc9738cef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd8f9b4-076d-4d78-88ca-d3bd67a3212d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "589fa6e7-30fd-44c3-95ba-2b9bf20d6849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c78023-0a25-4656-8c5a-dbb017585a07",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a87cad6-1530-4e4f-b3a8-23b0b749b2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41c6ab7-3d1d-4517-967b-ed6c42f46df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bedc3e-c245-456b-9c8e-953d3cd606d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e862128-79fc-440c-aa50-6b959706c60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9ce30d-3f45-4c9d-8e86-b5c6cc077e52",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a078035-a747-4acf-a0b9-7dadc51f0814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3baa437a-1fe3-4514-815e-b21c765c18c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43f8aee-5359-4776-b55a-3fccbaaf1946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "128ea8a4-5cc1-4bc4-a193-87c26ba2c3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff451ca9-1689-4dfe-b6a1-73c61255df65",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458c3173-2ff4-4e51-8a7a-8eb5c5d123d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d20016a3-acaf-4b51-95b6-085db0ed3c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1292e8-8fe6-4736-ab65-a0eabd8cd294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "574eea5c-e7ff-4c08-b036-68ae35a16338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d687ee82-8bbe-47bf-9d73-d5a89c2695c0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60515845-8e25-405f-a8b7-49f1be4acc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a155bf08-8b62-4004-a08d-0a4821035338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e3e7da-7109-4b34-8f4f-7f079395e56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "04902214-92cc-4a53-9e24-4b18cc4daae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747bfe30-ca70-4b19-ac64-9c66a3d536ab",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd396eec-7a8f-4702-970b-d5cafd6a86b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2427d331-f389-44e4-b945-6ae090410511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc1b974-70e0-454c-9d30-a650e62e3c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "11d66be9-74f6-4a95-b32c-19022c43b0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d8972d-3c55-4c77-a92d-a4fe2fc74c1d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbc305f-5ee3-4a42-943f-725b78f66790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "290b09ca-4ecb-44eb-9537-5669a1bb86e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cb0bf6-4fbe-429a-b281-b57fc080b0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "afb62f5b-68d3-4b49-99c0-4eb19c8660ca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "38a0266d-b288-40a9-9a4e-f9256e6c7b03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39760496-4b4f-4b0a-ae81-f9ab0207fa24",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc23beb-90c4-4439-a958-a9074aefe4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38c5a0b9-75a7-4ac3-8588-cd889b934522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2d2fc8-22e8-4a7c-9144-7b352e0d4abd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "debca99c-14c4-4002-9dff-024f9ba65b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26cca04-aa0e-4b45-acd4-55dd4111443f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2edfc7-7092-4a07-91a6-c5e903184a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fc4493d-abff-44f9-990c-2a6cf14d5449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c4ae22-443a-4c86-8437-5922e5b558c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b083ca53-346b-44d4-b33d-aca399eb778b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c88babbb-e4df-4dac-98e2-5e782d89e8c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7c0a365-6bd1-4afd-82da-8e0900bdd56a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57c3e92b-cf67-4e6b-94fe-a741eba1e3ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2925b700-49f3-4a35-b432-1af38a54ccb1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b40a83f2-a0d7-492f-8bc5-8d5f7c4ffffb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca71cc77-8cc3-4397-9133-4aaefd875565"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fab26881-1c74-434f-80aa-e94dcf850786",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b8f7f59-fa67-49b1-ae10-c369e45b22d6"
                }
              }
            ]
          },
          {
            "id": "2bef6994-e3ab-4d89-aff3-124aeea69bff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6f98cb69-2ed4-49d7-8ab4-712e498ee27a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46f09743-eaff-4fc9-8fd4-c52f327e6add",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b9362049-17c0-4b13-a016-f571a50f47a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d0651f9-188b-435d-9df9-aec50d85fab8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f1542abc-17e7-4d25-9b4c-74c6428f2706"
                    }
                  }
                ]
              },
              {
                "id": "4b334578-1ee9-45b1-b3be-8eaac8030178",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc138f20-5314-40a8-91bd-0780b32e0a93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36778d14-cc57-420c-b9c7-8569124e8948"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c913a5b-f58b-449b-bdda-68cfc10c4994",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e2d9cdf5-6445-4236-b463-98edb73f306f"
                    }
                  }
                ]
              },
              {
                "id": "308218bb-e12b-46f7-81de-320978a5acc9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbfb3de9-5775-4122-be5f-2ee88d010f9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e0388cd-1d5f-4dce-9e68-91afacd9e646"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19591796-6578-474f-b1b8-c1b5fff621ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ae0f4bc7-34c0-4407-9422-9b05afcced98"
                    }
                  }
                ]
              },
              {
                "id": "039a6bb4-7898-47fa-88e5-9d541db8de44",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33d3912e-db73-4d13-aacc-e5f46fd6156c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc186d9d-8416-4e37-ac12-afc34cff3136"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef8d7215-1232-40ea-aea1-9b3225195cdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "727d01d4-9e92-4c1f-bb1c-7a3b9e6724c0"
                    }
                  }
                ]
              },
              {
                "id": "4d3d8a5c-4392-488b-bea7-dcd04811b48e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "589e4e18-0f20-44e9-883a-18dafee8d7df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4430232-81e2-4dde-ae20-1007452f9693"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1757bc4a-128e-4561-bf46-795f24aaeacb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8ae52318-ce52-4cd8-ad97-3ee09585cd6a"
                    }
                  }
                ]
              },
              {
                "id": "b32a620e-ddf3-4560-941c-fcc2d9a25cd9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "889d8892-d497-4df2-945b-87ff1aa4134a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3297bfff-43cf-4006-bcc9-ee3054cbdf11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "301191b7-063f-41b0-807c-5a188289cff5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a09d9780-d4ae-4392-bca3-7520ab8f84e5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a9288cf-a75f-4d2c-b28a-b6248303df78",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d7188b4-4d7c-457c-9203-14f506fd0872"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c6435a53-4e95-4743-ae04-a445c4ee5204",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0559877-1d1e-402a-8fd3-fb7e550131e5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "410c8266-d47a-4bfd-93c7-21d67a353387",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fb52252d-c31d-4d4c-bd2f-791dcb7ef514"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9573ef1d-1c3b-4807-8bc1-54a32f2429d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e81cd6a-7799-49cc-9802-888745abccda"
            }
          }
        ]
      },
      {
        "id": "369dee12-c64e-4e23-9a2e-5dcebf60cc56",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f0b8f014-7e04-4dbb-91d6-9ed8ef8ad8ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b31fc3f-d36e-47c3-8797-dced061cd9c6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ea498430-7f51-4f98-b15d-543ae458d674",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88948d2-76d2-4487-a425-6b2502193387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2baa80f0-1736-4df3-ada9-8ddb388074e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6828b01-bbdf-43d0-b18e-ca123ea398ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c861699a-c4d8-4201-b552-2534e1b483f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff73a24-e5a4-4769-b7a9-5c34128eb59e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5baf4945-ff38-47c8-b42d-5ff43178c0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1528a16-1554-4e44-b3e3-8c9929129116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48811d6f-ecdb-43f9-90e9-de1611cf9734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7de86e2-ff42-46a4-b505-5efae17cb568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85773c7-ae35-4772-a593-04d0e8d7e97c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab1b008-2185-4fef-8660-e84d2a77ef30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cff1522-b089-4d6d-b108-998f88b59d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f7378e-59f7-45ee-972f-ade0408ff936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc1a518-ccf4-4f25-90dc-60400a8be79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b07614-b508-4611-a16b-8d19341f774d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e57ac84-0cb8-4fe7-90ad-bd54bc5d9dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe52f3e6-bd37-48dc-a182-b99f4e84b051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ff1cb4-b954-4fd4-beb9-cfc2916bd7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8417c690-c923-4e1c-8ac5-902c5cbac632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974d13f3-3ecd-482d-9253-93f18a80b654",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4feb4e1-5de9-46bd-8718-35c5eff749e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d88ecb1-a706-4347-ae25-72f8c867a75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62cbfd2c-15a1-4f30-803f-a914eeceffcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba75ca0-0a23-4b40-9df3-92a21ec5b0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97f81f8-0a72-40f1-a223-93c512a7576b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5819277-3956-4040-8380-a9ebfbdc1a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a720f39f-51ff-43df-a014-1188bc21e0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78377a2-c7a5-4281-a856-e651cf9a3d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae9a58c-d4cd-49ae-8e18-ccb666ab8b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9e5748-74df-470e-9f65-8d8506a2e6f6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad94e8ee-5761-4dfb-8aa1-df0da2f22333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a86fa6-994f-48ca-8ccc-3aa3fd71e3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0107fcd5-dd70-497a-a763-d2bcc93db8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ec3cef-2f0d-4fac-aa10-10718eb5248d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c9c146-1757-4d0a-a23b-4132eb03cb49",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bee77d-2502-4547-a266-8f4be9ec26e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed68cb1-dd0b-44ee-b95f-f42b57bbbf25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1befd84f-1131-4cef-b3ce-c2c79138d3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e25243ee-e86e-4013-839b-b80c6f84c3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3c59ad-4df6-434c-9770-a5639fc7500e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3bbc2d-115d-4323-821f-6f40208f9160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e44871ef-717d-40c9-ab5e-c77ff7d3f031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f535a837-f58f-4087-9dc2-eaaabf62733b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "014d977f-68bc-43d3-a461-dc4e900f2933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac627978-95b6-4f3e-9fd6-d5a471539fde",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d9b58d-e9c4-4d95-a870-1b489b1ac5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6397d22d-817e-4431-be94-6f03862d7275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5627e8-b2f3-4c09-966e-273b850a7809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1c0da6-90c6-46d1-bbcd-0502a429eb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d92fffb-3160-41d9-8089-3575fdffc4d6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fc4a2c-13d8-4d82-8b41-85e49eee4bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50a1434-8959-4318-8675-314dda8ac630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e65ab9-0693-46f8-acd9-63873dee3050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "38def29d-5c4e-4189-9419-32808cfbdb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd597df-2271-492c-b635-872e6c03bea8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84af9ed1-70cb-4840-abb6-0c361a3f6527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c15344-eecd-4551-8117-44a65ff5a436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f456f24c-6ca1-4d42-9bab-d192bdb057dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "780bd9e9-13d8-4c19-801c-01b204188cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cfc926-2ecf-4133-83d6-94a138c17630",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714decbe-bc95-4b12-aeda-84b0e7215f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0181c5-e1b8-47e6-9008-a0661614b261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d48fe19-20f9-4188-b122-02873f8f02c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03bb18fd-cfc4-4200-9741-bb6e6415e93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f4d510-2993-492a-a969-c8e244be796d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de32779c-8aef-4ce0-a06c-7e721d70230f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37bb8c5-51e9-414d-b1bf-04d96f56492d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410abef4-143e-4ed9-8c3e-9f6cbda9a211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc0bc6f-5498-4840-9b73-fcb008ef49ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e22506-0edd-4a3d-bda1-9feeffbd5fee",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec158ad-4128-43de-8ff1-6ca4cc4bfab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3a3f82-fcbe-4135-8a0c-7461fbe77589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54a659c-8fb5-4915-935c-8dc04b182066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "342f09bf-f19f-49d5-9f9c-be31594db5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59127f1d-a472-4278-837a-62afa5e43933",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a747def-f507-44f8-a11e-fb18e0fed994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4d88fa-2ed4-43bc-8d86-c5bf93f3536a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93929d4a-909d-4915-91a3-6c301d1aa2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "57f81e2a-89e6-46b4-8e7c-4db38825f0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a678c6e5-21e2-4994-9dd9-5df5e31c9eb1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96524f58-36ae-47b0-9e66-c56368b47752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df92a8ea-3978-4b7c-9ac2-89818a891b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c1b61c-75a7-4b31-93e4-f1a43c73b8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "edcf8381-028b-4a5f-b5ae-8377df19b661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80af6bb-37cf-43e4-a5de-0e5d3b0ad899",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709672d1-5406-4c39-ada0-1aa555350116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2ba1e1-0b3d-4978-ad2d-f9611b9feefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6395862-124f-4272-817f-e02895849639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1f5c57-5cd0-4b37-bafb-91548206fed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d462ef5-7943-45e0-8f6f-6de533bce07e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d749526b-4bca-469f-8c32-46e9ed628df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ab7d66-e8d1-4958-86b8-4973158ad899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bad055-faf7-46dc-bd05-dca0ed8e49e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0131a584-4118-41a3-b6fc-23f2c0e8fff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d9a8e8-7b03-4835-90bd-5d87844816b1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba48a11-01ab-4435-a367-e1de58fc4c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1840c7-6eeb-458f-9b1f-e1116c98e54c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b808633e-1be5-4df3-b752-698a2313995b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe79b73-5302-45aa-84b4-c3f84883eabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f73d53-934f-4792-934e-8a71a801fcf0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65452dc3-ab39-4cc8-a10b-0955d377892e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b2fc075-e194-460a-b45a-bb3188293ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e13ecb-b7ca-4b83-9a88-7da4831ca193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa126e5b-c40e-4d22-a5c2-3e3f0f3f0b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d74205-4e32-4124-87c8-2b82fd7ab404",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62cf9d7-4e6d-4c85-b53c-8f8b2e8e78a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ba2392-b269-4c06-bfbe-cf68cf4b50bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533f2e73-f100-4b17-ac8e-df77c7a9e645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0458626f-4707-40a3-898a-e1f40a9c94ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25bf543-773b-4f5a-9d21-c6f5deaf97bc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54fafd06-58c1-4af0-8b9e-17d383ca86fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf41c942-8a2b-4832-b7e3-aa401061247f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad11b5a-c0c3-4ad8-8713-ffb3f4dc2331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5a461f-3d9a-4e88-aacc-d2ba77ad7d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43529328-8fc7-4115-9edd-4d4aef3c8290",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da53f4f3-0233-4263-b607-e0b59d9d88b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7640d0ad-cce9-4112-b9f4-3e16f4196d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef167c6c-14f8-4d2b-ba8b-839c6c4b212d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f63644-d904-45be-9288-3da551ac7061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb78451-220f-4b02-816b-c38192402959",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7742f1de-cda0-4393-bcb0-11cb5cadd2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4870b4c6-4213-4ab4-be1f-12f1d2298cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f276065-42e3-47ab-818d-096b4536af15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1505d4e-47f9-4d7e-bd1c-283b4b80feac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0722da3-16e8-4bea-8e6c-85ea0df17e2b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3079034-5318-4f0f-87ee-67398a3355f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df755bb0-efad-4ebf-98df-818e1daea593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b94c92-1704-4095-b244-caf3424a0983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b12db183-b0ff-4af4-817f-cbfac2aad4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db27f58-c3b7-411a-83d6-a69e322870c8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37729ee-8d0d-4cc3-8c99-8d14bc01ca5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59716ab3-7841-4b1d-ac2a-b86a6431fffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86995ba-5a57-40c2-bda0-8206eaaff626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0361fd-feff-4462-8db9-fe0f875a1019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec3bed5-b9ab-4b6f-a7dc-10409de718e6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b339506-c8f4-4830-bf8f-81a555ca4bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64445477-d951-4757-9d7e-ea5ab64161eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabeaa4b-4c1f-49c6-a840-8c13f286d504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c534a363-ed3e-42c2-a160-87527ab0acb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64564cda-0a90-4874-9b7b-a0e835d85723",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36adc9a-2975-4409-8929-9909f0b8659d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d4dd655-c027-41c5-b5de-98b8e751c8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccd4151-5151-4b64-b50b-4fe553da82e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e6f7c0-8fac-4d4a-9ec2-0d5550ed0159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5147d1b0-d822-45aa-b020-fb7a4d583423",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbce2298-534b-4ae5-9ac6-5ae458e047cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5f0ab9-e9b8-4b35-95b9-02d3b08dcbb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2976fe5d-d46a-4643-a1b0-25edbbc275f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee6e666-1e83-4e12-bbe2-b9f7d7794f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9542825-1d7f-440f-9aeb-a8f7c9708e3e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bbb8ad-f898-4a5a-bf46-e1b6706af641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0798eb8e-27e2-46d1-8852-3f58f87b0b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b065871-38e7-4a79-aeee-cff48ed3658f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1289c6d8-699a-48ce-acdb-97b9966d32a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463475bd-7a1d-4d68-bc1f-87af37104f4a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debc3a56-0393-4101-a579-131284aebf13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe4bdc6-caf9-42ec-a2aa-c685b508eb30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb14586-73cb-419c-a7df-874c89a4d260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3c55e0-1088-48fa-8bdd-5b1390e34e5f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "65650e02-a814-4429-8cce-107d71d77ca4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33b7a8ee-77aa-49e7-9083-33ed4124b355",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2b08c2-8d59-4ca2-98fd-d32cb9f41937",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1745eb-f325-48e4-9ecd-7202b6f795e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68bd09a-5500-44be-a88a-330020a7ccc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "356c32f4-1bce-4de5-904c-e91eec7f9711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ae0810-65b5-4599-a3f9-c264a6186393",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7ca1a4-93e9-42a4-bb2c-de853aedbcd9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bef375d8-3349-4449-9139-7239a8ab70a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e1bebd-f930-429d-94be-70289e4fb245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6a0ad9c-b3d2-48f7-b38c-0407182c7995"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fee0cd3c-1298-4e16-b9d8-f30b046095eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18d70e58-d23b-4989-b4e4-a3ea09e10f7f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa4a6a99-3bac-4070-8502-b4316a4640de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9552f148-c4d9-42d2-979b-bc7801f5b689"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b198c9ea-f02c-447e-8de1-41c7769f4943",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "502a230e-b542-45c8-89b3-4f4602e6309d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ae4f998-cc88-4a0e-a25c-c90986c52199",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33df5b3b-2e1e-454c-a672-ecaffcf60766"
            }
          }
        ]
      },
      {
        "id": "4271bcc5-299f-4d3d-9889-09d7b8d8e7a5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "146be3a0-bbfb-4ce5-b396-f43d470731e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f6ef9c6-b5c2-4741-8a2c-46cafa9ec33c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "655b454d-9797-441f-9f3d-12c08a5dcfbc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e915b69d-c1d7-4457-ae84-ccb2e0b705ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9c082e-fb57-405a-9b6a-c445373c621a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8688faf4-2a29-48b4-9907-1d6900f590fd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3836c09-5830-43a9-b028-90f62d155afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467cac50-24c4-431e-a2db-58cdefa5e181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6ab5a9-0256-424d-9801-4dc6b37d6ee8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87493a7-1ec9-4751-8ee0-96ff6144b52e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52377ccb-7be1-4fda-9639-67acbaea6ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69a7556-774b-4dd8-890a-1465f147b10c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0274a627-3148-45a7-8210-887742c5d307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85d7876-68bb-4405-a34e-05602060562b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f2307c-5a2d-442f-978e-97a262761184",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14eecf2-abbc-4b9d-a290-d8b6b2e34242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a1f75d-7374-4e99-80a5-2b47c17381f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803a8a46-8f04-4edc-9dd1-6d1d260126e5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670a002c-d5e3-4e60-8350-adc8e91642ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c9d85b6-5f51-4c33-9fc9-1bb269470474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7641a386-94e5-439a-9f3f-db03bb2f1919",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ca16c1-9c57-4320-86ce-a497b05169cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7b0349-7cbb-4618-b5ed-e1163c8e7301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb09267-d586-42c5-a8f0-fa756a5a81ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2aebcb-6076-43e1-94bd-1f6e0d4676ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3033c473-8517-429b-9e53-8440a95d20a7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e073948-9963-467b-896d-a010a7611db3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29aaefef-2737-4868-86cb-304a68600f52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa7668e-3873-47e4-8513-a63184cf706f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7fb480-118b-4532-ae6c-e06498b5c68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9b1ca0-99c0-4787-b1c2-f74750bef7d0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e81cfb0-66b3-4798-8a0c-012b689c9e60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f735b87b-d6e6-4f38-8746-7d605427100f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998450ed-2f84-4958-88d9-3bc9db5953b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af412bac-9f13-466f-91d0-98da68d20307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae17a9e1-79eb-4248-aaee-0e41356c622a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d37af7d-e57d-4e39-8c1d-abc5da0eff93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "822ba71e-7f8b-4dc6-93db-557e140e34bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6ea5ab-7207-46b8-b1ca-c4fcbbe31ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a911fd-2a1b-4586-9e47-9915fabfb55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1a0b47-9641-4e2d-92fd-7d7513694370",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6f60e5-f8b9-406f-8f7b-cb0618f6f1d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04cd917-9968-46ae-a264-5df678532db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9568ed2f-fde0-4fe8-b32b-1f290a4d57a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093876a0-49ba-4eeb-a802-77cedda385cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d482df97-7a3a-4b4a-8d25-6fa1ae7156c2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0427e57-4b39-4900-83cf-989a2ff07e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24e507ed-7595-4acc-9be4-366844da07fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "114a68d3-8f1d-4d0f-a1ae-c639a742559f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42d8f13-8934-46e7-8716-55571c5f4348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81b6206-d5b3-422e-848c-975bf0a54dc8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec12e357-1c37-48f6-a167-a0c8b44e0e47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd57069e-da9d-49c1-ad73-d2374dcc7ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcd55b7-6a69-4829-aea8-e14909c2288f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080eb8d9-db8e-498b-bb68-27e33df90f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1c9ba6-fda1-4bca-980e-c422a65772c1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc8a356-e87f-4f7d-b298-6c7a54eb161f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d06a66a-234e-49da-a6dc-338829b5244c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c581dbd0-da1d-4b1d-b413-844a78f442d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0abf28a8-77dd-4f03-b91d-2db6c252c788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c33c4e-549c-41ab-b23c-7a3b50b798e3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f1bb20-289f-496c-9fcc-9a2dde4a32c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5e25f73-473d-4f20-a0f2-c664b11450bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7561d97-423b-4125-afa8-9582c6ada68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae19c543-5c0b-4d21-95ff-cb47e8d37551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17510aa3-f78e-4b6d-ba21-14961daa0bf0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e98630-4c1d-47e7-90b9-9b0a8fa8f4a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef0d76cc-0275-4bf6-bbf9-b6783b3e8e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c9e50d-9d9e-4db8-bf47-6a5013c0ad05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f453d227-5e69-42a5-80fa-840bc0fd5a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b035fba6-84fd-4be4-8bcf-ce5689694b8d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b3ee4a-b764-4238-bb03-7973f26c8237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd49b39-45cd-4baa-a7f9-c4132d52ebac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1068a03a-7205-45b9-b466-b8ab9f13f68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4c888a-4d25-4b79-847d-3237beb1bb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9337973b-97d2-40f6-bc3f-ebd2906af2cd",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39801344-2f61-4779-a7c9-142c86a7ae74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e03d10d-eebd-4cbf-8731-cfc985b158a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2f8511-a436-4960-8c89-33bfe0ce5e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8cc4da1-aebc-4d63-a7e9-9d424397f8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575d8ee7-de35-483b-8b3e-2ef13e147dc1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7a4f8f-4542-4969-bbef-5a5f7ecc4604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34841575-2a3d-4eb5-a15e-8b4badf8de07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "444f89c6-7cda-4e9e-9055-459e9a49ec28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff820851-4cc2-4919-9a68-102564e3059c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be38a7cd-7253-40f5-969e-bee9585df484",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa51f7b5-e498-4c72-991e-d82539c6dc9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a00b362-95a3-40d1-8eb1-03344ab4530d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00c2d08-d94c-4ca8-b584-718165988791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1f7d09-f750-458f-98ef-218d66d3dd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb8f696-5063-4c4d-9b97-29f0cc73e56b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeccb6b3-b270-4ab2-835b-c71848001e57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3d2afe-2d69-43f6-a0df-eaa54859373f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2e88cd-3272-4055-8677-0e4d85822e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f544c991-f2d6-4e32-bba2-ad8c4dc700a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9d99b5-7f01-4f87-a191-1591dda3a693",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1517581-0c99-4c98-a868-bdd9f90521da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf58f8d-8c7f-4bf1-a814-5a803278a9ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f81222-7171-4a8c-92af-6c436d208f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452871c2-15c3-455d-afd8-1bedc1a4882c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf14ca4-6725-446c-a2a7-56fda8ed0822",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465584ca-0ca9-4a38-875f-70c7da5af03e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6455ede1-4e2e-4154-bbd3-714c5beb923a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cc522d-a390-4f9f-9967-2f1543585325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a79fb1-0bd2-48fc-8407-fe2d82e072e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e86401-d599-4a79-a5fa-dde9867c8abd",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114f1f84-8a3c-4029-b910-15b550cd1b29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ed36239-9c2e-42fb-85f8-a921e08a3588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93214d0-1b5e-48d0-af9b-f82e52838b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42a5f60-8d8a-4be6-9f5b-8791e65d9554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e1507a-1724-429e-ae2c-48f2c903fe92",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e509c76-ebfe-4666-9132-5a48793e8ae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "433934c8-308e-46af-ab8f-a7110b17d8d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "308dcdaf-e768-4c21-be5f-0efe248dfec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf72925-0cc8-4e6a-b170-da5d77d47aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1b27aa-44f8-4bfc-91ca-7ccefa22c260",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d985cad-30fa-4769-b1d6-382e045f5878",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a98a4418-4c13-473f-b7fd-ee689d9ae364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c6bf9c-d2ae-4ba5-911e-da2e131d1c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88401c5-0835-4eba-befa-3f438897be45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1779dd2-a236-47a7-a00f-8a8cc0cf7815",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567deb32-6c01-4bae-9011-4056b429b539",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3ae45aa-8851-4722-b5e0-f7f5efd34642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0ab6b6-82ea-4faa-878f-0d20946dec38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c57ecfa-cd5e-4889-8f14-8797af6d6395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1acc84-c9a7-46cc-a0ac-f8d3f4c7e206",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3decfa-09b7-4ae5-9794-7c0bac94a915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6fc479b-591e-4bae-becc-0ee19fac04ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c274d89-e019-49de-888a-3af943f2c763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092db50e-f88b-4456-aecb-8191e5dc86a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc305c8b-ba87-44c0-b844-3a45d80644fa",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30efd3ce-fe56-4046-a4cc-a2705cd275d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4462c8bc-cd1d-4c9f-ba1c-652d63284dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "925201bb-cbc4-4b6f-93f6-23545664925c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ba1e60-607f-4263-a230-24f34ec78e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fba6c61-6dae-4c7e-b63b-9b772990e507",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ad57f4-853c-4629-a891-9e038342f7c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4c7e5f7-2a33-4c21-a06f-8271ba1360e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58f3d24-bae1-430a-b74c-ba21b4294c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d547e436-7f2b-475e-bc2c-c5a843915290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5fb293-a24d-4615-ac06-8cac59e27e83",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0949188-8d4d-4399-bc59-c7a95fb1c41a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76432de2-16ca-473b-b669-a8859d2c951a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad4d524-afca-4ab3-a02e-e52b5f8e2233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687c0719-b21a-4a8d-8d85-0c69ca65c72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a780c79a-cbf8-4ace-bcd2-056c6527aae0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2402665-e381-4faa-be12-a797c4ad24b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56150e15-069c-45dc-8bda-e3f76860bc65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2628b02-2ea3-4b0d-a444-6bcc4fa73c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d76c5b7-2fc0-4c54-a0ce-54f0d0f75ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584ca997-0d27-42d3-83db-8e9c5b7247e1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fa2df3-1483-4844-bf4a-e79ff49b2b3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b4304bb-5bf0-4f37-a6c8-2e83c84a8379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ebae16-3597-4e54-998a-8a502d31d9bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99fb10b6-108d-4aa5-a301-5b3716a8b0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fe5b6d-98d0-4f73-bffb-6dad655fc93f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f304578-17e2-4ea3-8df1-322b1abc2876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab8a637e-df6d-448a-a298-74bec319411d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1746c622-227b-4079-8c05-ed9a344efe1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334080cc-398c-4f9d-9d29-525803d7b997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c44316-4852-49b9-996a-3b3189b6ca83",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcef553-ad8c-4bed-bd3c-bd0bbaba5abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1b1619-3f0a-4a27-9035-28cf40d1ad31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded0d28e-e1bc-4909-94f1-76ef8a950092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6875aaf1-b286-49d9-9455-812237c85730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cea79b6-3d55-47a0-8224-64e5fed262cd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6299ca-c4b3-4eb4-9697-9a7dd20f5e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1c7dc5-fa27-44f7-9f79-9c246ee137b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9b9efd-e0a1-4875-a192-2210616cde4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3717b905-616d-4607-9271-e80ceb131e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc6c26f-2a31-4888-9500-c2eacd6b5b66",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07d987b-26aa-4bb1-8e3b-b7bb5c7f9fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6e2171-4bbd-46d1-8957-5896363b1f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8dd554-37db-4300-a8a9-01068044ba70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb9e2704-110a-40f2-b76e-a6269e456a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2f124c-4bcd-4ba5-a7be-5a4d1551f9dc",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90740176-eff6-4c8c-a965-731293d7c9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155cb7e5-3751-43b9-a6f5-5637f63a70e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7571d158-00a4-4aa9-9025-82e3ac91cf08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfa287b-2995-4889-8312-2cafe21e8653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "becfa0d2-780e-4393-b1fb-6664d714ecba",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f34724-d736-4f99-903b-d8d89aa3f6fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b181c3a3-bc2e-47a2-aa1c-1018812e7ea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb43ceb-ceda-4eb6-af9b-2f521c94490e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494c2ba4-5d41-482e-af50-c5db32eb63a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f513273-0bba-4c0d-931b-98160492fc39",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ada7295-73e0-4f78-8109-7e036b072b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c03fcb73-a83b-4ddf-8d72-0e865096ad9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f09088-010b-42b6-9af6-c68d9fa43a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b93559d-6adc-421f-9617-30c53cbed0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8028da6-1abb-4ab5-97b8-6439d7dd7fbc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2041120d-07b4-41eb-8610-069437ce7c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cba8b2-630e-4a4f-a6c1-13eb42e3f3ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73636d2d-1b83-421d-a20d-845eb812c066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee8f18d-4840-4d06-9659-d4c1e07acb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1acef2-0bd6-465e-8cd3-4d659c62b9e8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61453cff-e261-4f95-98b6-208240dcba60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45eeea34-1e01-420f-9182-df62657dc9a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee7b1c4-7347-4a57-886a-0f25ce84911d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a951a09-7d45-40d7-8348-641f2b37d916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5130d7-a059-4fc0-971e-65fe76a851c7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5745355f-33e0-4637-a60d-e41a0ad08753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e5826f1-2b97-4465-b169-6f06b02e0107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7ca2f8-00b5-4ddc-bb5f-0d464d060d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6347bea6-6665-4abc-8dce-cdc9eb1bcf9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e93100-5c74-4db7-b634-da07fcdb6087",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13060c1e-dc1b-4249-81e3-74006763e2ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c291334-9779-4ae2-b689-da418b2ee172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa46343-a4c7-461f-9632-143b27139a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e598abea-43a2-4e77-9b02-387521ec7d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95cb76c-5303-4a00-a873-7a61d6daf248",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd5808b-87e7-474a-8633-1f5b536c2913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2780124-cbaf-4e46-8d96-652212d7e0a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e60308e-bb38-41c7-8e2d-1bca97e36338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf159669-7cd0-4aab-a870-d2fd73db71cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a371467b-cf22-4d0a-bc24-e43c246eeebe",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c90ea58-24d2-4413-bbf2-ca6a7474e407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2437ef3a-3668-47eb-b492-fee13756873f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3b86b4-4fb1-437a-b3e5-1a39643e256e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2d43bf-5ea3-4d76-a58c-7105607f973f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ed53f1-c998-4092-b85c-4a745d9f6c49",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5194a9-46d4-4cc3-86a6-140f550f389b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34577bc8-00a3-44eb-9732-0f3511f75fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d141bda0-7a08-4ca3-b129-3580cc387f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2010f15-9448-4694-9def-90c6251bae6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911d6db8-6454-4210-bfc3-e5b47381e14f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4734b710-515f-4796-ad5e-04791a5eb887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68ecf30-6378-42a9-8d3a-f9daa7f963c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ac001b-a3f6-4cb0-9f89-31bbe23dc1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b5c2ba-655c-4cb2-80c9-3d65527eb9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2f42ee-b695-45ec-8710-227e514ef064",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9240c23-4e4b-445b-ac14-08595974bd66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00bf114-30c4-411a-8581-f14655cea330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f167879f-c5b1-44fe-95f8-7864077f93ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311b3e8d-596a-4eb9-80f4-40398c7e2196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce28072b-9d1f-4679-8324-fa4b50ef2e41",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c53cf7-e25a-4ec6-872a-5a917ccdf839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5cc432-d316-42b1-acb1-fe298275a6e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d392b98-e129-4d98-bab3-724828f5a02d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8232bf38-a135-47bc-9af2-ca939be895b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a6b0c6-c5c4-460c-9c67-dbbef4c696f8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3f368d-ac69-49d5-9b49-d2627bf03e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a17e03-607e-4774-8e64-1dc736089de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ee62e3-5d85-4d11-a68a-87b9883d636e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d15d6e-05f1-4d48-92c2-217129bee796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719f311e-53f9-4b22-8051-d9dec7dee79e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdca7253-249f-418b-908c-74aff6d70ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b21f40b-9085-446b-bf32-9b772a5b6e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e3598a-6a64-4d21-b329-fdb47843662d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889b2fe6-18b1-426e-9ef1-584c53d94d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692e652b-deff-497e-89e3-616af7b102b6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b052bae-09a4-4bfc-815c-fd47c60314f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d642162-6ec3-493c-80ba-d7d3c1ddb1c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12e50d5-e971-4325-8437-a31038586310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c24ec40-c919-41b6-9458-e8ab793bf9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616a2b97-5508-449b-9f5d-dd4388b759b1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9d5e96-69b7-4166-96ed-62ef8c6fbbad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d133bb-5f5c-4abd-b99b-478491b0d352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7a4773-1614-437f-a902-bf81c9c3d241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeb4b570-c54e-4757-a0c2-f850c8654773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28044d9e-a735-40e2-9e56-68914def971b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8d6333-945e-4cc5-9505-2dafb9522c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1552b7e-0f4e-4247-9858-f78f7bc6736a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26db231-bc0d-45e9-ba1d-610b34d74c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b50973-90fa-4b93-90dd-65f10a7d1864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7bd3c0-a868-4193-ad35-40718c5b67fa",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d7eac1-b1c0-44bd-9251-276ee84c897c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a10b948-ec98-4b73-903e-160e3a545635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de89aa72-201c-41e2-9a42-1dc038a66c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672b02dc-12ae-4b3a-b154-e1895f54127f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89207671-dbfe-4fe7-b4e3-b01739c2c8f4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af2181f-11ca-4246-a999-631e258a7879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d72a994-fd06-4bf0-8d1b-47818cf4487b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9407bc1-92bf-409f-81c3-39757ce131fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dafbd2b0-04b2-420c-a10d-762f7a74bb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b160d4eb-3f09-4c55-badb-a094feac654f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adf967b-963b-4edc-a59c-bba28ef7ec84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11656371-d10c-4b39-8f62-ac1f35292ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d51f854-0609-490b-8e50-9a35e89e0403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b3df09-d77c-4335-a06f-83dc63f70a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525dd681-0aa3-4db2-a445-da261c43bb12",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23be497-a29c-4010-b0b5-894d9d23e7eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51199eb4-ca92-46b7-ae1f-caceacd1f336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b611b0a3-c6f4-44d1-8f3f-9c23d0097370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2434679-d301-4737-8d03-c506a7fbc0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf68289-1573-40a1-b015-493a92aa4d24",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0a9cb8-fc1a-490d-ba41-661be624585c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8aa9629-f190-4b4e-bd09-7a3f2953eeca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5092ef-64d7-4fd0-b71a-6e023fc03f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74f4096-0daa-4f3d-8578-7f105a58ccb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dddc087a-145e-4191-a4d0-42867edb42e2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26eefcad-e2b1-427d-8314-4487b448e823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76665f2f-75dc-49db-906b-a95a677a23f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "135acc14-7ee6-4cbf-996f-108582d7cfa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5dd46e-8bb6-4bc2-9610-f0a9fd7fe6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bf5869-a6a5-4bf3-8e3b-d9b1319812f9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012024c6-35b8-46a8-8fdf-7944a4ee40fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da19db9b-b5c1-4999-ae32-1739fd04255b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e157c16-dbc3-4b95-8365-c7e9d01e6ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5922fdbf-0a15-46e9-a749-d4f287a638b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2207c0-3229-4904-9518-a3ba9f259581",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd0e4d3-4930-424c-b6d3-2058d153f5c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663ae284-1b09-48e0-8d70-24ecb4545851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c140594f-95a1-4463-9fed-8bb7ad7b99bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ecd8c2-4f34-4e50-a5f9-f1e6c53f902f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb26c1fb-7982-45d6-b56c-ebade51b8e50",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb59589-2dd3-4f4f-9c63-f5b34685fc0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2986cf2-c697-4412-bfda-156aa31b0306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5e2ad0-0963-49a3-a3d0-c6b1038777bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7697a2ca-515c-4935-85d8-890867e322ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd046e6-acab-4bbc-8a20-d5b41a0057fc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c61163-78b0-4e0f-b081-be4c6ba2ad54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a793486a-2924-40c8-b8f8-0720d46c0ba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdcdef2-3034-4718-9b80-19152c6b3b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db7d995-b69b-4dcc-9ff6-0f5b6fceb3d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9894ac97-c91c-4b48-a521-234423c70ed6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa95a2d-2939-40b2-bd00-6163b4c9c8e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b83ffe3-405e-43bd-9071-0752c31cc0f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b8c2af-900d-44c4-b0c6-56832adbeec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9e4466-3483-493b-a4b7-1d03d2dd95c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01bbb71-03f1-4299-8d0b-cb344e4e793f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f113269-5b24-4ccc-8c11-4dd795b8b3a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe75cb98-377f-4337-bab6-2f1e01520bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fbf81c-fa99-4a71-8733-ef3d459a7017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0bb9ab-013b-4045-815f-36feaf4a409f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29bf115a-5aef-49e5-8fea-99703eaff197",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ca0b58-1904-4226-a176-906d9024e038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c904d7d5-3e2e-4f0a-a79e-5df4420f3f9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5743c2d2-1f32-43c1-a0be-5677fbccd71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbcd107a-2f37-461e-9bd3-577b1f61214f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9e2557-f5a0-496b-9e2b-8124e0c34ff1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f7e904-222c-4cff-b914-60a7bf6ff58b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d6f76f2-5d0d-4bb8-a041-433fb2978830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d254f961-4ea2-4ed4-a657-2a4c0306f5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc443b63-e040-419c-b792-2e7cfae17e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e169b757-6593-4073-b2c4-a9dc85361c42",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4b3ea3-8bd5-4643-a5e6-c1e0a371f18a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f4ff34c-6edb-487d-b575-9d2aa21d7c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9167166-e0d6-4cc1-8137-188b2f019055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60af926c-4a56-45e5-80db-8453232c6f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7625f9-0e7b-4143-96a2-37ca2d2359f0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e72c6db-9fc6-49e1-93d6-d6f3dc0fe71a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31e578c1-0b0b-49b8-b2ae-3dc42e326a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9878ca2f-4e0b-4abe-9052-9bbd97364486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daeb0d8e-1235-47e0-9530-91d4dbcedfd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82940155-8149-49ae-ad96-e77c135cfbf4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bddfb5-2255-46d4-9d2a-9560af0697a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae3c09ad-bb4d-4611-8c23-c7949ea6c106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1bf1ee-0f6b-4521-b77a-b6738c95f36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9dc46cc-9bc6-43e1-ba00-b41a6185b931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11111e26-7142-430f-80a3-6422731a9069",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2817c72d-4e2a-4d43-bda1-9b46b61b3a95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77af0dfb-9cbb-4892-ba25-c66a8bfcb926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3863024-9957-44d0-9a5e-fe0bc2f4653e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0ac216-4141-449c-a278-1b862b479e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53b7545-14bb-459c-80d8-c464f18e299f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb39e18-5121-4d8d-b624-185a95854c07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1073e2b1-34ab-4433-8801-28e1d00c6074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa715d6b-bb1a-4277-9d4e-50e182059495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2355d2d-ba88-4ea7-bf22-f777d86259f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11512795-57d4-4f4c-a837-b297f1c453b6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f52aa3-f9b0-4d25-94fb-d39c5abeca29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81fff954-3627-4fb8-b346-85ec1b808210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af73e136-f041-4390-97aa-f97a7d0a3d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2682dda-33d3-4f67-a8bb-e9069bcd1739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2aa83a-d53f-4221-bfab-25e1f8c5ab82",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a54a14f-1f8c-4104-8f2d-27d1dc4c5cae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fdeab10-68c3-4890-858f-35d55a648977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c357ad7-a336-4ca7-b891-d32d15e2c90b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c41c42-1c0f-4f9f-b17e-cdaf635fb139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1726e7-69b8-4a77-9e27-2e98abbe56fb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea15490-79bf-43a1-bc75-56e1667f1f25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71d231b6-85f3-4108-8f41-46be999251d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d96c14-2c64-4aed-89ae-14b55f6cc21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd22394-735e-47e9-b784-ece64f2cac17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e72449-a2f3-4c7f-b0cd-4f347d5f3036",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d48aef-bff2-4c55-a197-155a082eb974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db430197-76e8-408f-b4fc-7f4d42922609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7ca032-99e2-412c-a0ab-3a7bff7f5a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c72a0c-3dcc-4970-bd82-83c42c6c2fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8780e0f-1223-43dd-b874-f3950a4d5c6a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede1c773-b8de-4115-ba72-1831400c07f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a43b61d-b903-4d91-82ba-6b0963d3db6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7b0df5-8cee-4a50-b6aa-ff475a02fb1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b65f41-c187-4294-814a-43f091ff0671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad08b2b-3370-40e7-9e68-b8cc1d848a51",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68122cee-80d0-4dde-8ea6-61b783bdafd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ae4740c-c224-411a-9770-59b67d643e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a8c1ab-e42f-40cd-8e74-14ac504534bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5faf1d7-1323-42b7-8085-ccc99bae7d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338e1596-332b-4b0d-804c-9adf19e0b325",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2bee29c-1c96-4f48-b2f8-a60b9a4c51c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fc4b484-4727-4b96-ab5d-6737f35ae18e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f09212f-7db7-46eb-a8ef-c9428696cec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5505dae-1727-4683-94d8-52c3f5e6068a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c317fc-3902-4a05-b806-fecc79853575",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f1c580-4e97-4e49-bc51-b306678129eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57251586-d7e9-401e-a5b6-d452b4155149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc502070-6c04-4bf4-b622-eece5e9e5f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbee1f1-234d-43da-90c0-ab653d16642c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9748c6e0-8639-424c-b732-5b3551cdd569",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d37c0f-3294-4d41-bad2-4e6ce9ec2a01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d8f29d-d95d-4263-b020-b9d0fe4f2461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b65b96-9e93-4ad8-99b8-1ddc220d5e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272f1191-9683-4d08-8c94-336be87575bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d24e0d-892c-4156-99d9-15917011da76",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2dbfb7-68ac-4b12-9031-59ad667160b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a2690ae-7ad7-4f1a-ad4e-77e02a9139a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "145fd22e-ca6e-4f55-9331-ec66d2308f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48781916-52a5-4ee8-bd90-5b902cc0997d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9482f6e0-86e6-4502-9103-6287639e2cda",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703358e7-2a17-4682-bb25-7de2b7d1da64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7cd0e6c-8861-4d7d-aa2e-253e941fc101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6286ba6f-eef9-40f4-848d-26e790938f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0585908b-8a82-442b-904a-0e6437a450a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc73e62-49e6-4d06-8af5-8a82bac90de5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295bb57a-9031-482d-b9f7-15335637fcf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e123a734-42ee-4a7d-8a89-ed3bb26c74a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944f6c36-26db-49d6-81fc-3659c09c3a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435cbc4d-6f3d-4aef-a764-7521dcdfbe2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6072680-d1a7-4c2c-bb45-a642b8b4b707",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e17f37-810c-4e86-bcd0-2e76f62de894",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ced3db1d-49c8-40b6-bae3-d236755f09fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f5a8e1-0676-499e-b15d-89dfb4dface0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d2ddf3-f8af-44e1-8b9e-2815d96e7232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4a5dd7-ad44-47cb-a1e2-4e55191e3fa8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026fde1e-f9d7-453c-8eb6-5aa1fa1cc8f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5387375c-560e-4f71-99c8-53b0833e5ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c7ed86-dec9-44ec-aabf-2e7038363658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96007cf8-8ab6-4d34-a089-6daff7cc60cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b493be-eec5-4dbf-80b6-2ca0edd18d32",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db48511f-0094-4e38-9c05-41b6460a3a38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb4b399c-f194-43f2-ad44-7a8709862de1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74123dfd-2764-4001-9863-94236b5702d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602746d5-9003-47ee-b60b-e0c6192e4a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0933b82-0b10-452e-967e-a521babfb538",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2cadadc-a5e2-47bb-b321-5cc16502ee58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bfad72d-836e-412d-9ffe-976f881452b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "121a0ca4-192f-4f44-8850-f85abdea88a3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6275854-947c-4576-a27c-1d3a22017e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c935462d-386a-4324-a3bc-22df3996b967",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026d382d-7cb7-4ea2-b362-f3a4f6581bb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d545445-30da-4340-bbdf-380c314e33fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f5a036-f7f8-40ec-b4ce-1dd8ce969a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd4fca2-c901-4356-9c6e-6826effdb6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bebaa32-8a4f-4395-a16a-811ef393e9bb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd67b1b-f57f-42af-8886-34ba902dcb8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a2ddf18-6338-4663-aceb-50424c7d7377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34239913-b7c5-4c10-a0f8-0e141a8e91ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f42b69-6a7f-4673-bfb3-a246a2b39d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11307429-2e78-43ce-b546-77ad60d8262f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7970977a-7532-490a-bb09-6e74d5752690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d76139e4-ba4d-486f-93c1-af42c679cb97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbea03c-a042-45e7-9737-d9c154e6295f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97297185-fc29-43d6-896b-f921382eb6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f463ac-faa3-491d-9595-d2cc8fb2ef3f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2788b18-2eae-4df9-a7a7-034536348f76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6c4ef59-ca05-4530-8e70-8f9973b8fc5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94703490-e8f0-4405-af43-5acd14ad528d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c66ef5-42a2-4eb8-b6b3-bd2057a63165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a76c9a-3e69-43ae-971b-701cc81811e7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5620d2d5-97ed-4660-904f-5c8a3afcd5d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "222e11a9-8706-4cf3-96b2-339a9ab2abb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43132884-a23d-41da-a3aa-b4b5194c00c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c9dae7-148c-41e6-b9b0-3d16f80d23c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51341d88-5335-459d-bd0d-969fef1cd69a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93890065-6908-4c57-8155-04641e64b5dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd5d94c7-cf25-42ec-bf1d-459bcb381248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bd4e12-3716-4bd4-8fdc-a9f8a3b44ba0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76be6bee-5abf-4937-8878-b7d51e7095e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93e1313-6fe8-4236-a5c8-476e76327e87",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c1bd92-f501-48f7-9da3-558076d76dcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "280c08b4-2cad-4c89-9012-f5858d96b6ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c30bca7-51be-4f5b-b20e-2316fa0717ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eeffa2a-3770-4c92-b051-15eeb828a3a8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0619d48-c4d0-4dee-81cf-f9862765e5ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b68529e3-635e-45db-9701-2b2602e6011e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b901a9e-269e-416c-9b9c-14daf447c44c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b9f081ec-c721-4b7b-92a3-c11fddb6406a"
                    }
                  }
                ]
              },
              {
                "id": "deb90c8c-d2bf-48ac-93f0-61f39118497a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb35a723-2463-4b1f-9f2e-d307bf8a8543",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c3d555-2f84-4814-8226-fa42215b8397",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0ca5eb26-9e3b-47a7-8906-d1b4d1b591e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f13ba9-73f6-4126-9409-5b4c2e16d015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad100751-4445-4a46-aab3-34590fd65f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2344b0ac-4e64-4397-a499-566da60411b6",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f20f952-76cb-4c8f-800b-4cc469949000",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1b2204af-7eeb-4e9b-8472-236eb6870bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "306d2c5c-7dc9-447f-8c3a-f8fd8c115187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74686315-d73a-4638-8f36-fefa19384e28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c6c4cf7-968c-43f1-8725-966204fa666f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2357778-5edf-4345-82ef-163d3b8d2638"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95a4ee90-e24f-4c5e-ba17-3dad9030127b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81a5b6f0-6ed1-4dca-8299-50f59df880ae"
                    }
                  }
                ]
              },
              {
                "id": "61723b7a-fd03-47fa-87c4-e59a509e94a7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1198b7d1-314f-4e74-b518-fa9a62625184",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5650a9a8-089b-415c-be57-025a860d681c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e85a9057-71a1-419c-b14e-07132a6ae0a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf1af8d-ce92-40b3-9c10-65f9a233b2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1de9a1-7c61-4fbd-8d44-46a507ac68ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "98a7b1fc-da40-4db8-b3a8-686436917be3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3b795131-f233-4806-88e7-5d8d7f5daece",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15b46b98-3623-43f9-ab72-5d4c1c71f622",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ea88c70d-0a21-4ccf-aab9-829d4620a0d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be039801-5a10-4db0-b210-c2968aba5233",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e46a9d8c-25ca-44c8-aa0f-0f78dd980f2b"
                    }
                  }
                ]
              },
              {
                "id": "0e9b2cd8-1adf-4187-b796-615fad5b7b3a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b85d2929-5fc1-4cc6-8388-cdd3025eec9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "25fa1256-8eb4-45c9-97e9-9a778cad44b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a403ce60-ff17-4ce2-9db4-8fb7f5179351",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3dc0e12-a45c-43f1-ba15-f56e7b2a8242"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55a8203f-3993-484b-8e06-f95b72e1237a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "50adb1fb-25e0-4078-a917-f02a109bf6c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e899d28-da98-4928-9ea2-519c2196b0ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1034a6c5-46e1-4b5f-a38d-784b820943b0"
            }
          }
        ]
      },
      {
        "id": "344900c8-11ed-46aa-bed3-b945b9dfd67f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1c1db302-5cd6-4e98-af6f-0048cd8eb33a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25ed046a-d617-4410-83b8-3ad75144682d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23e04fb7-da89-40ed-900c-51ddcc193b53",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8672882-279a-4f56-9a48-601c5eb6c76e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1d2c4153-a8d1-4f78-8d47-17ccff35eefc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b6b350-1852-4457-b0eb-1940d7379325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b6901cf-d306-4c06-9c58-db61b25583a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df92d890-bceb-4ec1-8cc8-36a70ec9e2d8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecae3d22-499b-4e76-bd54-ad7a4f6e546c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "27f5bbad-3638-4762-a17f-57ce0aaab5eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd6e6f5-eb32-40c1-872f-62cae1d5d7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46e68018-f59b-4735-a72e-d1930226b702"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b99b8858-9739-48be-8237-37c90136fe08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9fe6ee0-4b11-4109-9148-7915f4112b39"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d46d026-ca15-4ebb-8aa9-d10c61809110",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d6985b8-746c-4b83-a6f3-18edb509d850"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a750c622-1ceb-4280-af3f-7afd5b7eec83",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b6ff38ae-8031-4929-a33b-b3c1ecabc466"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3e60e0b-e1b9-4cc6-92a6-35832fc7d596",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "195a08e4-3520-4f39-98b8-e7a89aec0e84"
            }
          }
        ]
      },
      {
        "id": "10302e93-de56-4591-9acd-967b9e3ebba5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ddb19155-b62b-4053-8b88-cb0ceee3422b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "425a3552-a5e3-4dd3-acae-826511c27809",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "317344e9-8895-4cec-ab40-f910fcb6d791",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93dc409c-5e85-47d1-a464-d585b774f838",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dfd1b92-24f7-4495-9ea3-ca764dd794a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec687b4-04e3-45ea-b579-3be87c9e7dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5247b4b0-3c0e-413a-9db7-21edd37a1447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7f8092-d963-48cf-b0e4-2ac797a90454",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daff52ce-5c23-4762-b80f-60fa7c90c16f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2e71c3bd-8cf0-4bda-9934-1fa505986dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c37a99c-f6d2-41da-8b71-ea96dd4dc2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "875a9bac-ac99-4137-978d-784b246feaf8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0aeb49e4-db69-46b4-b035-035defd2610b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e63df929-be5c-4a4f-8fc7-b5bee37a24b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9df76279-4f40-457c-8eb0-58f9da60b416",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "570177d3-d022-436c-b6e8-8c97b7d98409"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe1f9753-c98f-4c81-960d-c40d341a50a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb439cd3-ea3f-4c9d-a3ad-b778400a2be2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1849f84f-0122-458f-9870-d08a68835ebf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cff547dc-e23e-4dee-8da7-61a583a0a09c"
            }
          }
        ]
      },
      {
        "id": "9ef77c44-1c7b-476f-933e-29655a277fe7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "73721225-b8c9-46ec-9553-0a2d038a8b75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ecb4725f-8f35-4237-902d-d6e1cdae922a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "025fe3b3-8c98-426f-89bd-d774d23163f7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b65e843-92bf-40ae-aa18-be398c829233",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07208ada-0dc2-4019-87c2-faeebed5dbca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a14a84-d13e-4491-8d02-8d27091ae2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7991ccc6-1d0b-4675-aa97-43c02d16278a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cd9d5f-5573-420a-8b48-afd2d0973fc4",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea998d95-2444-4412-9c50-9cc28a6e2089",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f7de80f8-5c3c-43cb-8d7a-763060e527b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9515c2-783b-4cd9-8f2a-6f92696af17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eeedec58-5d04-4b3a-b9c6-239a3f5aaa5d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10f8101a-15c2-449e-9520-756ff1123b4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "984c57ce-d4d1-4c72-8c2e-f7f5af6fecf1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9925167c-7524-4ae9-a563-b9c26afdff04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2eb086e0-8693-48c0-a530-5c355f36231f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d582abc3-5663-4105-809f-78006d2a8127",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "77ea9d9c-e5ec-4471-afa1-a531556d908c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "730104aa-1940-4852-ac47-780f3a9ebbe1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af94aea9-3b32-4da9-8e90-1b879f0b32d1"
            }
          }
        ]
      },
      {
        "id": "3bb9390f-d845-4490-bead-371328bd7dce",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f05e00d-0d1b-4e97-b2d2-3e91c8b906cb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93f3319b-eefc-4d4d-a390-dc2566b6b4c0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ab351ed9-074b-4d5d-a19c-06f4e0c1514d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02e05612-c20d-4ab7-9226-cfc5c060db3b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b9b949b-b80a-4146-a99e-2ed0b4b12e40",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 267.63076923076903,
      "responseMin": 15,
      "responseMax": 6476,
      "responseSd": 723.7563725077405,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684370242370,
      "completed": 1684370325793
    },
    "executions": [
      {
        "id": "d28a198f-f3e9-4e72-ae84-ed046430dc0d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b50a5e3b-ad5a-4350-ac47-61218d7829ec",
          "httpRequestId": "f7a6d41a-7005-4307-965b-cbf5c5dcf538"
        },
        "item": {
          "id": "d28a198f-f3e9-4e72-ae84-ed046430dc0d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "96e3a14a-d93d-4c07-9ef9-6b44432d3869",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 0
        }
      },
      {
        "id": "dd2764c1-8e46-492d-8a78-3e14a94f822f",
        "cursor": {
          "ref": "4ed103fa-5b06-4ec5-856e-87d3fadcc6c8",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ea051ed9-febc-4543-a795-0cf8c8033ffb"
        },
        "item": {
          "id": "dd2764c1-8e46-492d-8a78-3e14a94f822f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0982f30a-b061-4701-958e-be1d2b348067",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "0434a762-47c5-4964-a921-c9e174ee2d52",
        "cursor": {
          "ref": "27a3bab2-0017-40a9-8718-0d51ac32d478",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cab985e0-3927-4553-9aad-e038164ddc6a"
        },
        "item": {
          "id": "0434a762-47c5-4964-a921-c9e174ee2d52",
          "name": "did_json"
        },
        "response": {
          "id": "3078cd66-de58-4b29-8cf3-f2bd212f7574",
          "status": "OK",
          "code": 200,
          "responseTime": 618,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7defc54-3d43-4025-8bdf-9e08e75760b4",
        "cursor": {
          "ref": "4c81591f-0130-4ab2-8288-60d47053f495",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c310d633-bb3f-48f6-b11c-417403768854"
        },
        "item": {
          "id": "e7defc54-3d43-4025-8bdf-9e08e75760b4",
          "name": "did:invalid"
        },
        "response": {
          "id": "9e8ca059-92b2-414c-b2f8-0694e348561c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1353,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e7defc54-3d43-4025-8bdf-9e08e75760b4",
        "cursor": {
          "ref": "4c81591f-0130-4ab2-8288-60d47053f495",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c310d633-bb3f-48f6-b11c-417403768854"
        },
        "item": {
          "id": "e7defc54-3d43-4025-8bdf-9e08e75760b4",
          "name": "did:invalid"
        },
        "response": {
          "id": "9e8ca059-92b2-414c-b2f8-0694e348561c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1353,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "46bfa3e1-123c-4931-81ce-995f2d740694",
        "cursor": {
          "ref": "08c7eb42-d683-4c7b-9f7b-a6945d8fe9b3",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6232d0d5-847d-4045-9076-0054025b3d84"
        },
        "item": {
          "id": "46bfa3e1-123c-4931-81ce-995f2d740694",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "215050c8-b60d-4783-97ef-2e8389f8a14f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3e37f5-1fa7-4a49-b8fb-54a522a94d54",
        "cursor": {
          "ref": "a8a7d1e2-b839-4c86-9cac-598453b49f12",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "69b76468-a9b0-485c-bcff-22338efa21b4"
        },
        "item": {
          "id": "ce3e37f5-1fa7-4a49-b8fb-54a522a94d54",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a7accb95-a686-4e67-8b5a-73410939a42c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c895ceb0-d74c-4716-bb24-c3a23c285a7a",
        "cursor": {
          "ref": "a9ed9c70-20f2-44ae-ba7a-f1982d5e2a61",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "34bd4b54-b031-4976-84be-137164aea240"
        },
        "item": {
          "id": "c895ceb0-d74c-4716-bb24-c3a23c285a7a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "862c14f8-bf24-4995-83f8-9af29b82e3a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "92d39c24-96ae-410c-b5e5-d6cba7e97426",
        "cursor": {
          "ref": "5c8f57fa-2c65-40f6-86db-fef3acf7c03a",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44222514-f127-4a3f-b23c-2036f539fa52"
        },
        "item": {
          "id": "92d39c24-96ae-410c-b5e5-d6cba7e97426",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2701e08b-7c71-4027-902c-c005027d6192",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "92d39c24-96ae-410c-b5e5-d6cba7e97426",
        "cursor": {
          "ref": "5c8f57fa-2c65-40f6-86db-fef3acf7c03a",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44222514-f127-4a3f-b23c-2036f539fa52"
        },
        "item": {
          "id": "92d39c24-96ae-410c-b5e5-d6cba7e97426",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2701e08b-7c71-4027-902c-c005027d6192",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "54804126-8cf4-43eb-8402-fc3906e557db",
        "cursor": {
          "ref": "faa694a6-0a5c-452c-8f01-94e0e9859185",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6dad119e-e2d1-45b3-b784-4ce96f391de1"
        },
        "item": {
          "id": "54804126-8cf4-43eb-8402-fc3906e557db",
          "name": "identifiers"
        },
        "response": {
          "id": "682abdf3-2950-46e8-8976-abf3d18cf796",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a1186c-087c-4211-960b-c08eaf6f2350",
        "cursor": {
          "ref": "94b18d26-a066-41a9-91f1-b25d74bfe169",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f019c5a7-091c-46c8-b934-d8118e74c038"
        },
        "item": {
          "id": "63a1186c-087c-4211-960b-c08eaf6f2350",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "14d4a080-983b-4a32-a6a6-7b137c9a34d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a1186c-087c-4211-960b-c08eaf6f2350",
        "cursor": {
          "ref": "94b18d26-a066-41a9-91f1-b25d74bfe169",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f019c5a7-091c-46c8-b934-d8118e74c038"
        },
        "item": {
          "id": "63a1186c-087c-4211-960b-c08eaf6f2350",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "14d4a080-983b-4a32-a6a6-7b137c9a34d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa6dd4d-91f0-4731-9332-8aa1a4204373",
        "cursor": {
          "ref": "16b08782-c067-4bad-a136-2ab56cd007e3",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d967d951-7c24-4211-ba5b-05f14c54bc29"
        },
        "item": {
          "id": "9aa6dd4d-91f0-4731-9332-8aa1a4204373",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "934a7210-dff8-410f-8fd2-ec1b839b949b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c184544f-4e11-4b9d-94d2-5b24bf4274f9",
        "cursor": {
          "ref": "f49bb3a2-2642-49b7-b698-0b395c4267d9",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "037659c4-ad20-4a6c-9aca-348e70e531e6"
        },
        "item": {
          "id": "c184544f-4e11-4b9d-94d2-5b24bf4274f9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "094ed11c-7863-4a0d-9b36-414edaa4a406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112068c0-6929-43f1-a311-1fb27975b96b",
        "cursor": {
          "ref": "01658983-2381-42d8-bee1-3d41229babd9",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8a0ce1c3-ae7f-4b12-9c06-5bd3c4684885"
        },
        "item": {
          "id": "112068c0-6929-43f1-a311-1fb27975b96b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e679fe67-4f85-4e8f-8511-02ac9ea3b82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b8da919-26c2-4730-b4fb-4a065a1e851a",
        "cursor": {
          "ref": "f17a5b39-614b-40c9-96a1-d1812b03a851",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9d0e5adf-74c1-48fe-acc1-d2baea2a5292"
        },
        "item": {
          "id": "6b8da919-26c2-4730-b4fb-4a065a1e851a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e2cc3765-8abc-415b-94d7-120ae8009f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39e486c-4d96-404a-8a48-9367bba7d0b8",
        "cursor": {
          "ref": "7c7822ac-1bff-4a4a-b7fa-216bba427a3c",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "613c1a6e-4d62-4860-b6d8-cb2e4f9529c7"
        },
        "item": {
          "id": "c39e486c-4d96-404a-8a48-9367bba7d0b8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9cbc9edf-39b8-4047-ac0d-06601434f9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9a0505-b38c-4c52-a17f-fbd5d294d484",
        "cursor": {
          "ref": "4769c785-a014-44ba-925a-f837eb9c2dab",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "366fec15-01f0-4bd0-a120-b22f1999bc4c"
        },
        "item": {
          "id": "eb9a0505-b38c-4c52-a17f-fbd5d294d484",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "84cde452-aaff-434f-a6bd-10e557796d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae327bf-f156-44da-9377-a2efdd07af82",
        "cursor": {
          "ref": "a15b6023-c5ff-41fa-9a80-2df9969d00db",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "470041f9-0478-4f7d-ae48-49fd9868dfa8"
        },
        "item": {
          "id": "2ae327bf-f156-44da-9377-a2efdd07af82",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "83e9ac8d-a4a0-481d-8302-24dc7cf42b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf628643-eed6-4e76-994c-61bf77a20807",
        "cursor": {
          "ref": "005d781d-8389-4e61-85f2-f03ac38d9b70",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1077e822-6704-434d-97d8-becbaf551233"
        },
        "item": {
          "id": "bf628643-eed6-4e76-994c-61bf77a20807",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "419458fd-92c1-4333-b66d-97d8cf9f7c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f2f7fd-3f48-4a48-b644-6bf8aa7d59d2",
        "cursor": {
          "ref": "b714f15b-dc58-4677-9861-e8670d620d30",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "80217227-a640-4fff-9b8a-cbfc77bf9307"
        },
        "item": {
          "id": "d9f2f7fd-3f48-4a48-b644-6bf8aa7d59d2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b04f43bc-eceb-4249-87a0-ffa2701a7a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f361474b-3bca-48ef-8e00-646c8019e1c8",
        "cursor": {
          "ref": "3783a61f-95d4-4074-ac03-90725c94ba58",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0ff1cb44-25fe-413b-a228-506ac6fc23e2"
        },
        "item": {
          "id": "f361474b-3bca-48ef-8e00-646c8019e1c8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "31ec4062-85e1-4d61-b4a7-4f4bb2a88b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596046a2-5295-44c3-bc08-34720e9af1d5",
        "cursor": {
          "ref": "cc6dd76c-2e7e-4902-bba3-bca02974a5b2",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "026d4759-59e8-41dc-acf3-24b4b156dcef"
        },
        "item": {
          "id": "596046a2-5295-44c3-bc08-34720e9af1d5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b9438ac9-3802-4767-bb58-e52787214760",
          "status": "Created",
          "code": 201,
          "responseTime": 1825,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "25b26d44-4920-4058-be28-668bdc68a968",
        "cursor": {
          "ref": "e3616652-1b3f-4180-b12f-db4412dbb781",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "40dfba84-7b8b-4df5-967d-012755adbb84"
        },
        "item": {
          "id": "25b26d44-4920-4058-be28-668bdc68a968",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "26da32bb-160d-440c-b29e-41be4fe0618e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1656690a-5681-4840-a0cc-d4b344fad51b",
        "cursor": {
          "ref": "fb058d15-299d-4e66-ab28-11e7e420e354",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6e873bb2-71d9-401d-a294-ce9358d5a13c"
        },
        "item": {
          "id": "1656690a-5681-4840-a0cc-d4b344fad51b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "fb695a1b-7abd-45ad-9578-dd2e0310dbc2",
          "status": "Created",
          "code": 201,
          "responseTime": 6476,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "6e566677-50d5-4264-b74a-1de36c978d7c",
        "cursor": {
          "ref": "4d58c5d4-32d3-49da-ab2d-994efb8c4097",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "02a639ea-d305-4f72-b247-c8c2fa29155e"
        },
        "item": {
          "id": "6e566677-50d5-4264-b74a-1de36c978d7c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9b16e1c8-7e2d-41b1-a971-560a1b83c4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "addae456-5bce-4c75-bfca-f728a8258694",
        "cursor": {
          "ref": "6c4e6c1a-0f1e-4ee4-a615-366a4b6f0afe",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ba80f596-ba0a-4d7c-9ea7-45e535a7dd75"
        },
        "item": {
          "id": "addae456-5bce-4c75-bfca-f728a8258694",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "60f27b6b-2769-4d41-adbb-8dcf6821bf87",
          "status": "Created",
          "code": 201,
          "responseTime": 3727,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0575a6b8-4ac8-47b3-9cda-b0e0541efa68",
        "cursor": {
          "ref": "a4f93c29-bea7-473f-82bc-cc02bf28cef7",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "98a8cfde-2748-40b0-8d08-ba5e8e86f80b"
        },
        "item": {
          "id": "0575a6b8-4ac8-47b3-9cda-b0e0541efa68",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "18d29164-865c-493b-beed-3d7e79e24a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53275906-6ce1-4054-b47c-2f4a376291a7",
        "cursor": {
          "ref": "1a92d4e5-6af3-4a59-828e-675d9da59424",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9086ff52-e92b-4b15-a345-8f342c687338"
        },
        "item": {
          "id": "53275906-6ce1-4054-b47c-2f4a376291a7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8bf1f949-f5f3-4a84-872f-7d270f1fd841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0128f0bb-7fac-4325-bd1b-27cecc9c6ef9",
        "cursor": {
          "ref": "6673b7f3-4569-46f6-972b-2f323429c5e4",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8e9702c2-e2a2-45e8-acb8-1ba66db4e40d"
        },
        "item": {
          "id": "0128f0bb-7fac-4325-bd1b-27cecc9c6ef9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "463e6e35-00c2-4cc1-8a99-3cc1de3236bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df4e7e1-9d2c-4b6d-8597-f5c3dac13a28",
        "cursor": {
          "ref": "a2d64f9a-81b1-4092-ab5a-82e301bf90f5",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "18ef297c-84c4-4a31-bc90-0b39e52fd4db"
        },
        "item": {
          "id": "0df4e7e1-9d2c-4b6d-8597-f5c3dac13a28",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "11f2ad30-47e1-47a8-b803-914e90bbc335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192e82a2-845a-4738-ad84-8087ebcda193",
        "cursor": {
          "ref": "c0a98c25-c56e-46e7-a969-99077147eb44",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "296fcc07-035e-4542-8302-ec81ff534537"
        },
        "item": {
          "id": "192e82a2-845a-4738-ad84-8087ebcda193",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "acce9f7d-6b9b-4908-99bc-cd5677ba9168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e41bbe-38ee-45bc-b98b-b3057e7141c8",
        "cursor": {
          "ref": "8c304a53-8868-4a84-bff9-3fd050bb7b20",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9e1d3107-5731-48bc-ab92-a64a83b3d48e"
        },
        "item": {
          "id": "39e41bbe-38ee-45bc-b98b-b3057e7141c8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9cc38461-214f-4341-8090-069bf80afd67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c784c8-cf07-4c5c-8540-8aea9c73435f",
        "cursor": {
          "ref": "5d9f606d-752b-4555-9709-7ac0104143d8",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "dfd17279-e648-43bf-9c9d-e0692f509fb3"
        },
        "item": {
          "id": "73c784c8-cf07-4c5c-8540-8aea9c73435f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "348ce4de-d7a9-4b40-a51c-6badb17b29c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27ca7bb-5ae3-4b79-854f-458694b6e5ce",
        "cursor": {
          "ref": "5d20b92a-9ab0-4ec2-9e51-e5ff2f2f27f3",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5eec809d-19af-4d77-9f5f-983dc3acc6c9"
        },
        "item": {
          "id": "b27ca7bb-5ae3-4b79-854f-458694b6e5ce",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "47e64ff2-75b3-47eb-857a-863c94bb70cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c84f1b84-19db-4d38-b4df-ff5a18be1250",
        "cursor": {
          "ref": "4cb9dfd4-b079-4fac-ba34-d8f02a44762f",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "77875f11-5dbd-4c4a-a0ad-202a8725c156"
        },
        "item": {
          "id": "c84f1b84-19db-4d38-b4df-ff5a18be1250",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f0f089ba-f168-4094-b419-514dcbcbd8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2577513-f85a-418f-b4eb-86028ea1fe34",
        "cursor": {
          "ref": "c0cfc23d-6ee9-49d6-9c70-8fe235da32f8",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a769ada9-7302-497b-92d5-16f56033fa50"
        },
        "item": {
          "id": "c2577513-f85a-418f-b4eb-86028ea1fe34",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d9f15092-a976-4ce6-8f9d-c0b7e378fda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0f6a78-2884-4bd5-a01d-df48e8be2756",
        "cursor": {
          "ref": "5d73d29f-0b6a-4d19-924c-3f2c75b29fcc",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "042ccb51-5aa4-4e0c-a5ff-5cfda18109ff"
        },
        "item": {
          "id": "4f0f6a78-2884-4bd5-a01d-df48e8be2756",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6ca4cc44-304a-405a-895f-dfb6370dbea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be90994-fbdd-4721-b9f3-35216054478b",
        "cursor": {
          "ref": "66958a0d-8049-40f9-ab56-777bd183519f",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c3c29e11-bca6-4825-87fc-0a2ee3b81634"
        },
        "item": {
          "id": "1be90994-fbdd-4721-b9f3-35216054478b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "03bb5358-deba-4ef1-a750-b199a9669706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005168d8-93d2-4543-91e9-d87e94f7cbf9",
        "cursor": {
          "ref": "64c9c7b7-7ede-4be0-a22c-cf1dd6334695",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ceb65fd5-6586-4063-a0de-a855a25eddae"
        },
        "item": {
          "id": "005168d8-93d2-4543-91e9-d87e94f7cbf9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fbd3f885-73b0-48ac-8603-e6ec0b0dab7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b1dcea-6aee-4829-a697-c1712cfe2a13",
        "cursor": {
          "ref": "dbddecfc-1962-4f50-8d36-6ab2d5f14f92",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d76399bd-1437-4abd-b850-050482b1b635"
        },
        "item": {
          "id": "61b1dcea-6aee-4829-a697-c1712cfe2a13",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fde0e307-8f6c-428a-a226-e89c02630e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d570283f-8de3-4019-912d-49234ed98a6e",
        "cursor": {
          "ref": "a311fb13-4b5f-410c-9ab4-1dffba79db99",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "340a60fb-c78e-4778-86e1-2178474fbcfa"
        },
        "item": {
          "id": "d570283f-8de3-4019-912d-49234ed98a6e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f86e4c6d-8ff3-4e2e-8971-6097ddb854fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30417025-08aa-4093-9743-0b9a5eb17008",
        "cursor": {
          "ref": "1eda21fd-0482-461f-968d-657ddc401bb8",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ee273fea-ea05-4650-9661-f1b7e839f608"
        },
        "item": {
          "id": "30417025-08aa-4093-9743-0b9a5eb17008",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f409b5a6-67a2-491a-a52e-55775c2a35e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039e96d4-1239-4c7d-a232-10b8ad69e270",
        "cursor": {
          "ref": "3f22c8ae-b76e-4ec2-b778-e6cd48f374a9",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "99167be6-6c73-480b-8e07-190ea02006a7"
        },
        "item": {
          "id": "039e96d4-1239-4c7d-a232-10b8ad69e270",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a98854ec-5106-467d-bec4-24b341e5566a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76bb0e98-b91b-4345-beb9-6d98db266bd5",
        "cursor": {
          "ref": "47138d6b-c1c2-444f-980e-fe89bcf16ebb",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "214ef99c-0051-403d-bd22-02d3b431eb5b"
        },
        "item": {
          "id": "76bb0e98-b91b-4345-beb9-6d98db266bd5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "da4bcb0e-1ecc-4686-8666-032a9ed9062c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab580ca-9da6-451f-90e5-ec7aef4e4748",
        "cursor": {
          "ref": "882d696e-0c9a-483e-8463-686e99f29934",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "25e3497a-69eb-4cef-a822-eefaa8f2b178"
        },
        "item": {
          "id": "0ab580ca-9da6-451f-90e5-ec7aef4e4748",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "575734b8-94b8-463a-ac00-f24ad0eced9b",
          "status": "Created",
          "code": 201,
          "responseTime": 1876,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9ff6858e-b216-4b33-ad3b-c8bdc3f08003",
        "cursor": {
          "ref": "6171c89d-d6fe-49b5-a97a-3c93e7a857b9",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9388d0a0-d583-43cd-8907-4c4ccd4b12c6"
        },
        "item": {
          "id": "9ff6858e-b216-4b33-ad3b-c8bdc3f08003",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d1d839fd-e760-4892-8ff7-47e94f442d58",
          "status": "Created",
          "code": 201,
          "responseTime": 2621,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "130910d4-52a6-4903-8668-a18aac83d9e6",
        "cursor": {
          "ref": "12fb690d-124d-4ebd-bf0a-26eff1e1e3d7",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "44dcc618-33db-48be-9a4b-c53f2463a4d2"
        },
        "item": {
          "id": "130910d4-52a6-4903-8668-a18aac83d9e6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c0f45290-12db-4425-823f-0a751265541c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02838243-3506-47ab-aebc-8222835ddbcb",
        "cursor": {
          "ref": "fe11bff4-29cf-4055-873e-fa54d3833bfe",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "629aa435-75de-4dfa-a071-d759bc1d66c4"
        },
        "item": {
          "id": "02838243-3506-47ab-aebc-8222835ddbcb",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2cfb1e27-e6b3-49ae-b2db-ef1b8e3033f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c53088-d957-4d95-9981-3a0fc8197f43",
        "cursor": {
          "ref": "acede0f2-45b9-4743-aaaa-edd3f9d5d193",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9acac537-ad89-420f-8fa0-dd4bde47c156"
        },
        "item": {
          "id": "64c53088-d957-4d95-9981-3a0fc8197f43",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "733c1b66-6da1-413e-ad10-fc4be006887f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0125482-f776-4c77-99bc-62f04a7ff6d6",
        "cursor": {
          "ref": "6911d24a-d9cf-4eed-8009-eb131d1bd277",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bc623792-7a6e-4b6d-a76c-977f9c6cab6a"
        },
        "item": {
          "id": "d0125482-f776-4c77-99bc-62f04a7ff6d6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ead4fb01-a917-4865-be36-77a79294bd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ea297f-d4d4-4095-9060-fe250fb85eb4",
        "cursor": {
          "ref": "0189efb8-495b-4475-b1a0-cdd73d0fa301",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cc080a18-5913-42ba-95ed-3f6bddc4d8e5"
        },
        "item": {
          "id": "82ea297f-d4d4-4095-9060-fe250fb85eb4",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e883e18a-f07a-4526-8771-c1394d709346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2531203-20ce-415d-a605-b5f891472640",
        "cursor": {
          "ref": "e510c009-f1cc-45ed-9ac6-ad7ec92e41fb",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "577d0c20-fbdc-4823-8b88-0cb96af5f028"
        },
        "item": {
          "id": "e2531203-20ce-415d-a605-b5f891472640",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a009c683-3c25-4115-be97-bbca30f55a1b",
          "status": "Created",
          "code": 201,
          "responseTime": 2436,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cd501caa-4645-480f-813b-ebdaba530858",
        "cursor": {
          "ref": "f1d6e568-1273-4b32-8bd5-e400c299e9d2",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "90c33759-5646-497e-8fb9-9c77d8ac72da"
        },
        "item": {
          "id": "cd501caa-4645-480f-813b-ebdaba530858",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "83d9cdfb-a7aa-45f5-97e7-6a68993ebaf6",
          "status": "Created",
          "code": 201,
          "responseTime": 2680,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3cef7452-75ff-4c4a-b4a6-6cde66210ac6",
        "cursor": {
          "ref": "72b13407-c690-4272-ad3a-e1b7841d89cd",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1c132223-504e-41e6-b4e7-ac2929df3512"
        },
        "item": {
          "id": "3cef7452-75ff-4c4a-b4a6-6cde66210ac6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1eda1510-9c9f-4ced-bc24-8a7158addfc3",
          "status": "Created",
          "code": 201,
          "responseTime": 2309,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "e53800da-bc7e-4901-adda-3f0551fcdaef",
        "cursor": {
          "ref": "6973ac1c-4495-4be6-a905-614d1514c418",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c6bcd104-90bc-4dd4-9310-fcee28064969"
        },
        "item": {
          "id": "e53800da-bc7e-4901-adda-3f0551fcdaef",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "64dc8f59-785d-4482-a705-6b0bdcf3f2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 587,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2df0e7b-08e5-40d1-a346-0f7c06b97496",
        "cursor": {
          "ref": "a75507ff-90f2-4ad0-a133-4c2c6ff20e35",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0fdd3ef2-dbfb-4df4-bb5c-3bd79ea03920"
        },
        "item": {
          "id": "f2df0e7b-08e5-40d1-a346-0f7c06b97496",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5d6dbc76-a5c5-49b7-b67f-b087ff19a781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970f023c-b128-4271-bb55-3dc241a6f1fb",
        "cursor": {
          "ref": "b5b5b0d9-f759-4c75-a8da-1c5a536c6668",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3a53db5d-7c83-482f-be10-62d6d2ddffaf"
        },
        "item": {
          "id": "970f023c-b128-4271-bb55-3dc241a6f1fb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c70ed3b5-e005-490c-8077-896c3c7d0e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9e186a-4300-41e0-ab66-831f31ab3bc7",
        "cursor": {
          "ref": "852feb7c-37bb-478f-8e2b-7c994418622b",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "51439a4a-adc1-437f-b840-213fca1456f5"
        },
        "item": {
          "id": "9a9e186a-4300-41e0-ab66-831f31ab3bc7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "57b72577-a784-41c3-b4e2-db88ca4ed8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf639cd6-9d27-477f-ad9b-92f96576a7d3",
        "cursor": {
          "ref": "8f65df63-30cd-477e-835b-790f88d1c49e",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c690e7cf-6240-4503-994c-3ca1c628be48"
        },
        "item": {
          "id": "cf639cd6-9d27-477f-ad9b-92f96576a7d3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "53d69be7-2cf4-42c4-bab9-7651acc1df0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0badadde-f08e-419d-afd2-e9738ce84598",
        "cursor": {
          "ref": "a6614cab-d1c3-417a-abbf-70bb7a307745",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b8b34b46-15de-4472-a59e-ad44d79e8e81"
        },
        "item": {
          "id": "0badadde-f08e-419d-afd2-e9738ce84598",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b90dd714-6f29-471e-8ffc-bd88bcda40a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89df78e5-2608-464a-a8b3-33d902b9de00",
        "cursor": {
          "ref": "ff26279b-7ac8-4769-93f9-f6229d17bfa5",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a0a9c644-a8eb-4187-ab0f-0eff8edbe0ab"
        },
        "item": {
          "id": "89df78e5-2608-464a-a8b3-33d902b9de00",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "768ed39b-9cb0-48b5-83f5-8a661acecea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab2338f-168a-4f40-96d3-278757cdcb4f",
        "cursor": {
          "ref": "70485e4c-77ca-4223-834d-5a626767824a",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f4924668-a648-4b94-8031-de80d11d74fd"
        },
        "item": {
          "id": "dab2338f-168a-4f40-96d3-278757cdcb4f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "adba5872-e5a7-4010-bf4f-dcf40e5007c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cf25b0-7860-4b0c-aaca-3c73f4017612",
        "cursor": {
          "ref": "60183f41-481e-42fa-82f1-8a88d4fd59a7",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "52b0e94b-6e33-4f90-bef5-e324526db666"
        },
        "item": {
          "id": "31cf25b0-7860-4b0c-aaca-3c73f4017612",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9ba45edc-3e06-4bcf-b2ab-acdf6fcff3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e68d10-5422-4f7d-ad8e-6ae5ceb5bc28",
        "cursor": {
          "ref": "ff5a6865-9735-4e7c-b490-eb51263de820",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "de29c8f3-a26e-4754-9c67-afda6ff92ef5"
        },
        "item": {
          "id": "28e68d10-5422-4f7d-ad8e-6ae5ceb5bc28",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "36a2f1e2-5e14-4141-adb3-fd910b6318cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0024dfe5-6517-47fd-8921-a36a397a20f3",
        "cursor": {
          "ref": "ee957532-36aa-483f-917b-80fcb6589672",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f979d76a-7fd6-44ed-920d-53d3c7e6d3e1"
        },
        "item": {
          "id": "0024dfe5-6517-47fd-8921-a36a397a20f3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e65a4723-63fc-47e9-a256-50eaaed01b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8bb748-9698-4d8f-ba87-21d40c59fdde",
        "cursor": {
          "ref": "95ca8b86-ff45-4281-a070-bb814bbed37b",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1593c1f2-26d9-4cee-864d-95b22b915911"
        },
        "item": {
          "id": "7f8bb748-9698-4d8f-ba87-21d40c59fdde",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "41571e02-392e-48ad-a1e8-1874933a04af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c96bc8b-d20e-4fde-a7cc-2c795321286b",
        "cursor": {
          "ref": "89e0acc5-df35-47de-9209-7313a009e261",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f98f902e-e2c7-4144-89c5-26b9d1f02c90"
        },
        "item": {
          "id": "0c96bc8b-d20e-4fde-a7cc-2c795321286b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b8ec9bcb-4937-449f-8f56-384418c08788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1f6b87-9e4d-4f69-9a87-fc698c458dbd",
        "cursor": {
          "ref": "4f6c330d-b842-4d0c-9768-2f55c328bbcd",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0c494fc5-837a-4ab3-ae59-88f973c99ad1"
        },
        "item": {
          "id": "dd1f6b87-9e4d-4f69-9a87-fc698c458dbd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ff69130d-d18a-428e-9168-fa8d3d8dabc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998dc099-88b9-4184-8267-487ffd99d3f5",
        "cursor": {
          "ref": "a6d6d9c0-b1c9-4cfa-99cb-bb9e6d48c0ad",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "466bf4c0-017a-424e-9893-7eeb3f5f09f1"
        },
        "item": {
          "id": "998dc099-88b9-4184-8267-487ffd99d3f5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4b7a9327-e266-4dba-9107-a541aedeb596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12692e4-0924-459d-a8e2-26254bc4f8c4",
        "cursor": {
          "ref": "687cad1a-8d3a-4a3c-84db-7c4a3adec1ff",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3883ac29-ae70-48da-956e-40d23b5319ca"
        },
        "item": {
          "id": "d12692e4-0924-459d-a8e2-26254bc4f8c4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e957a16c-9607-41c2-afa7-cea77a22b1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75dbe02-c3d5-4474-8cd7-eaa7c8582a30",
        "cursor": {
          "ref": "d5a5bb90-cc66-49a4-ba10-eebe367527a9",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b2b1b161-fb8c-431b-be00-637731977aec"
        },
        "item": {
          "id": "a75dbe02-c3d5-4474-8cd7-eaa7c8582a30",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "46051274-9923-4848-8c11-abd14bf81cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d14280-9e12-4e0f-a1aa-1c85b8790e04",
        "cursor": {
          "ref": "9cf5b120-59d1-441a-9bc2-a9823ac062a2",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2c8ddf13-17f9-438f-83fa-0c52787069ea"
        },
        "item": {
          "id": "91d14280-9e12-4e0f-a1aa-1c85b8790e04",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d4fa99c3-fe63-4a0b-91e3-37c4963262ed",
          "status": "Created",
          "code": 201,
          "responseTime": 2757,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "1b7d14be-6542-490b-b14d-6f8920b5b0c2",
        "cursor": {
          "ref": "b2ebad8f-506a-41c7-8f72-2c826a7bdf86",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3995d23a-ce87-48b6-9448-28e0e4cae44b"
        },
        "item": {
          "id": "1b7d14be-6542-490b-b14d-6f8920b5b0c2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bd6393d3-ef7e-480c-bf91-5ddca1271408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04464c0-6309-44a2-89ee-e2b4ea9e3ff7",
        "cursor": {
          "ref": "a3db5c45-b58f-4ff9-a46d-5d5709d0a416",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5290f4f2-12df-4456-83be-b902b49a884b"
        },
        "item": {
          "id": "b04464c0-6309-44a2-89ee-e2b4ea9e3ff7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8a20050d-32fb-460c-a0fd-65e478a90121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf424f9c-2de5-4bc6-b3c6-a155ad164861",
        "cursor": {
          "ref": "636abb0f-cdbb-44e4-b8e0-4f7a50bc41f2",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0461304d-9126-41ff-8af9-e3cc6baec6b4"
        },
        "item": {
          "id": "cf424f9c-2de5-4bc6-b3c6-a155ad164861",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "21b5f941-584b-4405-bf30-76110932587e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ca171f-c590-4566-9ac8-018d04c9ed34",
        "cursor": {
          "ref": "b0a0e24f-16de-4fdf-8114-d91a8eac503e",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "53cc8cd2-c413-450e-8222-425f3d14733e"
        },
        "item": {
          "id": "76ca171f-c590-4566-9ac8-018d04c9ed34",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c9d48b99-e69e-4ac2-967d-d2b95db458ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d171ce-2928-4ada-bc04-7fb838396760",
        "cursor": {
          "ref": "b0ddb84a-0864-4826-8125-924e0ebc61fb",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e54a711e-f780-458a-a6a0-522e5c9365db"
        },
        "item": {
          "id": "01d171ce-2928-4ada-bc04-7fb838396760",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8ac7b7f9-abc1-4dd9-a2a9-51aa573d1c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc41c117-24f2-4f0a-ae80-5e49d252c63f",
        "cursor": {
          "ref": "ad220858-126c-417c-b3ee-5a2c67e5e95e",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c8a6dccd-98a6-4cc5-a81e-5576590231da"
        },
        "item": {
          "id": "fc41c117-24f2-4f0a-ae80-5e49d252c63f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e8dbf87a-7cd7-48dd-ae17-49688afe26ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1600a26a-c436-4bb5-baa6-f9852bc91d60",
        "cursor": {
          "ref": "7d10ebfc-202f-4dd7-a664-c6c7a7872609",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fc2c6426-38e1-4ec6-bf82-ada33b2743c9"
        },
        "item": {
          "id": "1600a26a-c436-4bb5-baa6-f9852bc91d60",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c9badc50-89bd-4830-87dc-b56b1950e13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2a2a36-5727-4b1d-a2af-4855953bcb9a",
        "cursor": {
          "ref": "a3098ca4-7c7a-4880-b407-35c24fa1aee1",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "98135b4a-f3ea-4e3d-867f-e8240f228a18"
        },
        "item": {
          "id": "6d2a2a36-5727-4b1d-a2af-4855953bcb9a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "afad42b9-2388-49c8-a7a9-df5074821602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2940507e-42f2-4cc4-9886-0f41a7cb8cf0",
        "cursor": {
          "ref": "586c35a5-275d-427e-9803-fd69f5e28b96",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1dbfb9a8-0564-4970-84bb-2ecd06726197"
        },
        "item": {
          "id": "2940507e-42f2-4cc4-9886-0f41a7cb8cf0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d122476f-a431-493a-a6c3-3233351e02b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5bcce1-cf49-44d7-b961-2a2a9cac7fa3",
        "cursor": {
          "ref": "252f49c9-ef49-4ed0-95a9-fddc6baf7e64",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2b3c3c36-1100-41e9-b157-1c8d93232abf"
        },
        "item": {
          "id": "cf5bcce1-cf49-44d7-b961-2a2a9cac7fa3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "71bd6103-e575-4563-9766-2775c572aa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8abd9e2-f110-41fb-b0d1-ec4514521d60",
        "cursor": {
          "ref": "196cca74-0665-45da-9960-aa97ed8246f3",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9c3dc496-2dc9-4546-bf17-30731ef366d4"
        },
        "item": {
          "id": "f8abd9e2-f110-41fb-b0d1-ec4514521d60",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e9031067-e87d-4076-af9a-2e0be4a0312f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5718404a-0fef-4f43-b29a-a15d25d5fc07",
        "cursor": {
          "ref": "235a0f4b-97b2-4216-9362-34a63e444bcf",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dacb1644-cd10-49bf-8955-e84377708452"
        },
        "item": {
          "id": "5718404a-0fef-4f43-b29a-a15d25d5fc07",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "53c0539f-002b-4a90-a245-5e60c74cfe23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd05d599-8ff2-41c4-9474-95d1b4ef2f53",
        "cursor": {
          "ref": "e6abaf72-f086-4971-88b7-1afeee7ff8c8",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "db83581f-b7bb-4325-b5cf-c30dbbc720aa"
        },
        "item": {
          "id": "dd05d599-8ff2-41c4-9474-95d1b4ef2f53",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1fd6540b-6132-4d44-90f0-ac4c9b7826e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dfe14a-016f-462e-a1b1-f5325ac2d73b",
        "cursor": {
          "ref": "b2cfb77a-a6c6-4496-bca6-77d0cbcb6686",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "48a1793d-7184-4aaf-ae9c-18f12a684a57"
        },
        "item": {
          "id": "f1dfe14a-016f-462e-a1b1-f5325ac2d73b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9af57c30-583c-49ce-abf3-941cb0adc302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806b7707-d2b4-4938-9154-35a45f1da051",
        "cursor": {
          "ref": "845c2d5c-ddba-4e4e-9cc5-f5172596c52a",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ed1bbad1-e6b8-46b4-a4a2-1b3fe6e5eee1"
        },
        "item": {
          "id": "806b7707-d2b4-4938-9154-35a45f1da051",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9a7b51c4-a99d-4a98-aee5-d90aaa5eac4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5080a2-bb92-4dbd-a8bb-d6b724cbd3a2",
        "cursor": {
          "ref": "3fd2c31f-f926-4bbc-93a7-acd630b2f885",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b6bae472-122b-4202-9644-3c7af1409951"
        },
        "item": {
          "id": "cf5080a2-bb92-4dbd-a8bb-d6b724cbd3a2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8fa3568b-5237-4b2f-b209-e679145972ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7109ba-9886-48fa-8a2a-ad5a7e464bc0",
        "cursor": {
          "ref": "c48b968c-bf7c-4fa0-ab66-750d1768e5f0",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "077c2a2b-25ef-4e4d-8341-bd0dc06b1bee"
        },
        "item": {
          "id": "eb7109ba-9886-48fa-8a2a-ad5a7e464bc0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c289e5b1-ffbb-42af-9971-a90cd23ca18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7acf0e-ab3e-4444-89c2-03d5dc60ec51",
        "cursor": {
          "ref": "ad877c9d-3461-44df-95b0-d11926493713",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "009c023a-563e-4abd-aebe-c59b1b10d846"
        },
        "item": {
          "id": "ee7acf0e-ab3e-4444-89c2-03d5dc60ec51",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "98bb8b6e-fb00-4329-bee0-a6a346c6ebca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd977fe-b362-4b0d-a575-7541c0757cdb",
        "cursor": {
          "ref": "7c55e99d-eed4-4727-8ef3-0f75c093f8db",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "71bfd676-8f4a-4700-8a0d-558fbb7fce3c"
        },
        "item": {
          "id": "8cd977fe-b362-4b0d-a575-7541c0757cdb",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3f1a326b-be3b-4c18-87b4-5f1ecf31a40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9b4355-1db8-420b-95b1-1c8f2df64b63",
        "cursor": {
          "ref": "9a44cdb3-1d13-48e2-866e-de7d30c147c9",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "33135155-c8ea-4331-9e09-7304aa4abc22"
        },
        "item": {
          "id": "4d9b4355-1db8-420b-95b1-1c8f2df64b63",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c704561f-2ea2-414d-82e4-b1ebd00b4fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35d82f6-3ecf-4b59-bf32-f80146ed474c",
        "cursor": {
          "ref": "a309df10-596b-4785-8783-793a65d2e6e3",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c59ea4d1-a8b9-4b52-a566-42fcc4cdf0ba"
        },
        "item": {
          "id": "c35d82f6-3ecf-4b59-bf32-f80146ed474c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "60d979a9-7822-48bd-aaa9-f22935f52944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307e1eb5-c744-41f5-9cbc-17860c5eb400",
        "cursor": {
          "ref": "0c821ab9-54c0-453d-aff2-eaa367b84b62",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5518f2f7-c842-40a8-a567-40429af4a665"
        },
        "item": {
          "id": "307e1eb5-c744-41f5-9cbc-17860c5eb400",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "72eaf890-1f7c-4e5c-aa94-2db5bc7b6a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5ea574-47a1-413e-b079-a2f94d9cbb7f",
        "cursor": {
          "ref": "539cc7b8-a894-4bf2-9af4-6b5e2e6cf64f",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b92f59fe-4845-4db4-a2db-0b257ee89d09"
        },
        "item": {
          "id": "3d5ea574-47a1-413e-b079-a2f94d9cbb7f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0baa5832-e613-4a0e-a9e5-97da33d0f044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469b1c8f-1403-4268-8f31-5350d8da26a0",
        "cursor": {
          "ref": "2fd85e85-b44b-4f3b-ba3e-21e898a6982d",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "02d214e1-9321-48c4-80d4-f9da851e9092"
        },
        "item": {
          "id": "469b1c8f-1403-4268-8f31-5350d8da26a0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2f25f134-b943-41bd-a3d7-5c4ccd776ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c78023-0a25-4656-8c5a-dbb017585a07",
        "cursor": {
          "ref": "8ead6e07-b642-4218-b10a-509c7d39f054",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "30ba1fbc-4043-4521-8bf3-4535df4520f3"
        },
        "item": {
          "id": "c8c78023-0a25-4656-8c5a-dbb017585a07",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fb2cf799-987d-44ec-a0ff-cfc5f06aa941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9ce30d-3f45-4c9d-8e86-b5c6cc077e52",
        "cursor": {
          "ref": "b9c91352-d480-4f4f-9525-9d0041ea6520",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b299f2c1-e8f9-4fa1-b7bd-fb9497e76d42"
        },
        "item": {
          "id": "3e9ce30d-3f45-4c9d-8e86-b5c6cc077e52",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c5164631-d189-429e-ac07-9263e4997b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff451ca9-1689-4dfe-b6a1-73c61255df65",
        "cursor": {
          "ref": "75b02e6f-f5a4-44fe-87d2-8738bff695e6",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "33740699-4d6c-402d-97d1-5d78186f2533"
        },
        "item": {
          "id": "ff451ca9-1689-4dfe-b6a1-73c61255df65",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "861db293-ff36-4101-a53c-e96ff55a9a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d687ee82-8bbe-47bf-9d73-d5a89c2695c0",
        "cursor": {
          "ref": "9589d311-8c40-4852-9b30-d4bbec859400",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "294e6c34-d532-4b6f-a18d-74910dfeff73"
        },
        "item": {
          "id": "d687ee82-8bbe-47bf-9d73-d5a89c2695c0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5d575e8b-6ed6-4754-8a80-391cccb1ea24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747bfe30-ca70-4b19-ac64-9c66a3d536ab",
        "cursor": {
          "ref": "80d2f7ef-e2d7-4f80-8555-3c1de6d4eeba",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8fa65ee0-4f66-45d7-8ffe-b6618d1d3d42"
        },
        "item": {
          "id": "747bfe30-ca70-4b19-ac64-9c66a3d536ab",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "682d0f5d-cccd-4131-bc31-df96fc885aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d8972d-3c55-4c77-a92d-a4fe2fc74c1d",
        "cursor": {
          "ref": "de358852-167d-4106-afdb-d36daaed945d",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0f9ca37a-0e20-49aa-912c-512bbda6558c"
        },
        "item": {
          "id": "c2d8972d-3c55-4c77-a92d-a4fe2fc74c1d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b2343755-ee18-440e-bbfa-044aba763e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39760496-4b4f-4b0a-ae81-f9ab0207fa24",
        "cursor": {
          "ref": "f0a7fe30-a0ab-4bba-b8ad-1c5df9eb3694",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "be8b3845-c92d-4fdc-8a4b-c2a15a7e5ca4"
        },
        "item": {
          "id": "39760496-4b4f-4b0a-ae81-f9ab0207fa24",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b37da008-c49a-46c6-b289-35ffe9b6dfd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "c26cca04-aa0e-4b45-acd4-55dd4111443f",
        "cursor": {
          "ref": "86a29230-e584-4871-ab31-9afed8f17c54",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5e272e24-8ff9-4c88-88f8-d994bdfb553e"
        },
        "item": {
          "id": "c26cca04-aa0e-4b45-acd4-55dd4111443f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "127a957d-be53-4bbb-afd1-2042a1739258",
          "status": "Created",
          "code": 201,
          "responseTime": 2062,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "6f98cb69-2ed4-49d7-8ab4-712e498ee27a",
        "cursor": {
          "ref": "f3381c46-2449-4de8-adde-cbc9d168b417",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "11a0550a-973b-4b4a-b5dc-8eb34cdc3962"
        },
        "item": {
          "id": "6f98cb69-2ed4-49d7-8ab4-712e498ee27a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "035a28b2-87a9-47db-ac05-3b58fcb09b1f",
          "status": "Created",
          "code": 201,
          "responseTime": 2346,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b334578-1ee9-45b1-b3be-8eaac8030178",
        "cursor": {
          "ref": "dfd8b6a6-f7a7-44ae-b827-49e16f7c5588",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e6062c69-29c8-4eec-a961-1f2dc10a7da1"
        },
        "item": {
          "id": "4b334578-1ee9-45b1-b3be-8eaac8030178",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9f859f67-f0f9-45af-9651-681e19d83e81",
          "status": "Created",
          "code": 201,
          "responseTime": 2540,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "308218bb-e12b-46f7-81de-320978a5acc9",
        "cursor": {
          "ref": "c4d452e7-5adb-422b-bb58-57a572281db9",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f24c7004-328f-471d-a78c-602bfb8cc0d4"
        },
        "item": {
          "id": "308218bb-e12b-46f7-81de-320978a5acc9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e817cf0b-2b35-4f67-aa2a-c139f6ef000c",
          "status": "Created",
          "code": 201,
          "responseTime": 2253,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "039a6bb4-7898-47fa-88e5-9d541db8de44",
        "cursor": {
          "ref": "2113e88c-19e6-4be3-bc89-96179a5c927f",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9a6b3f70-2fc2-4f19-83f0-aff3ecf55e95"
        },
        "item": {
          "id": "039a6bb4-7898-47fa-88e5-9d541db8de44",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f95e373d-482e-4e44-8b91-065cc26c44db",
          "status": "Created",
          "code": 201,
          "responseTime": 2584,
          "responseSize": 994
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3d8a5c-4392-488b-bea7-dcd04811b48e",
        "cursor": {
          "ref": "d57ee342-2197-4e0d-82e4-6b49b2b7fe21",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "76622fe4-607f-41bc-b8c4-fcccfc2d0feb"
        },
        "item": {
          "id": "4d3d8a5c-4392-488b-bea7-dcd04811b48e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "778d205d-9e79-4f2f-95a7-f8da5e8f3a65",
          "status": "Created",
          "code": 201,
          "responseTime": 2223,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-18T00:38:18Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-18T00:38:18Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "b32a620e-ddf3-4560-941c-fcc2d9a25cd9",
        "cursor": {
          "ref": "277d80ad-01df-4bd5-839c-e6190dc67fed",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c44e5b28-0c6f-4d90-a130-1c1f22743276"
        },
        "item": {
          "id": "b32a620e-ddf3-4560-941c-fcc2d9a25cd9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0ad6b2f1-1d98-46bb-96eb-b19a74e71552",
          "status": "Created",
          "code": 201,
          "responseTime": 2281,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea498430-7f51-4f98-b15d-543ae458d674",
        "cursor": {
          "ref": "3449cba5-5f65-4ccd-8d43-edb24213fc14",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "707ad715-1b69-46b9-b6ad-18de41f0f433"
        },
        "item": {
          "id": "ea498430-7f51-4f98-b15d-543ae458d674",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2361612a-2789-469b-906b-837ae510178f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea498430-7f51-4f98-b15d-543ae458d674",
        "cursor": {
          "ref": "3449cba5-5f65-4ccd-8d43-edb24213fc14",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "707ad715-1b69-46b9-b6ad-18de41f0f433"
        },
        "item": {
          "id": "ea498430-7f51-4f98-b15d-543ae458d674",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2361612a-2789-469b-906b-837ae510178f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff73a24-e5a4-4769-b7a9-5c34128eb59e",
        "cursor": {
          "ref": "14ab25fa-e8d0-4d1b-989d-32f3dc232385",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3912afa7-ba88-4d8e-879d-5fcc89ba7610"
        },
        "item": {
          "id": "9ff73a24-e5a4-4769-b7a9-5c34128eb59e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5e103a8f-812f-4a52-86e3-87400cf8208a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85773c7-ae35-4772-a593-04d0e8d7e97c",
        "cursor": {
          "ref": "3c453ed7-ac0e-4cf8-8435-bad843735f7b",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0da208f7-1f95-4896-a04c-7e98414343b5"
        },
        "item": {
          "id": "c85773c7-ae35-4772-a593-04d0e8d7e97c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6bef10a7-4d89-4848-9bf5-7deaca8d7525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b07614-b508-4611-a16b-8d19341f774d",
        "cursor": {
          "ref": "22f3a51c-d786-4e06-a981-f17f751ccbe6",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "33fe77f7-8df9-4ba3-86dc-b6cf546d2173"
        },
        "item": {
          "id": "26b07614-b508-4611-a16b-8d19341f774d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "017682f2-76a7-4ec3-9050-72c69b1863ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974d13f3-3ecd-482d-9253-93f18a80b654",
        "cursor": {
          "ref": "f3970a19-5562-403a-9791-88412e051439",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fcbf1615-7f38-4470-9e4a-e6bfa75cc8a6"
        },
        "item": {
          "id": "974d13f3-3ecd-482d-9253-93f18a80b654",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e5f398e7-8417-4d38-bf80-a0b4257db73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97f81f8-0a72-40f1-a223-93c512a7576b",
        "cursor": {
          "ref": "a84b9d43-bf40-447d-91b7-b8bd6b5de1e6",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "621a797c-0e28-4fc2-ac3a-5824643c3a25"
        },
        "item": {
          "id": "b97f81f8-0a72-40f1-a223-93c512a7576b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f8187e13-60e6-4dce-a2bd-c86718064343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9e5748-74df-470e-9f65-8d8506a2e6f6",
        "cursor": {
          "ref": "a88fd363-a832-428c-8074-89e8072f2b32",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e500e056-702d-44bf-9aef-57b9b3adf093"
        },
        "item": {
          "id": "0e9e5748-74df-470e-9f65-8d8506a2e6f6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f4c73ca9-fa52-41a3-9bb2-34739f90196c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c9c146-1757-4d0a-a23b-4132eb03cb49",
        "cursor": {
          "ref": "8b1570e3-cc6c-48e9-a719-1191a3e8736f",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3c657dab-1a55-4349-8230-8e5952de5138"
        },
        "item": {
          "id": "d5c9c146-1757-4d0a-a23b-4132eb03cb49",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a58eae9c-a2f6-46d4-8c47-206f24113a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3c59ad-4df6-434c-9770-a5639fc7500e",
        "cursor": {
          "ref": "07cbe706-e115-45ce-b776-8fc22dd88cb6",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "118c3dde-1eca-414d-aa4d-d82ec59cbe1e"
        },
        "item": {
          "id": "7e3c59ad-4df6-434c-9770-a5639fc7500e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "26cf7581-305f-4cde-8d44-db4b0da9d230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac627978-95b6-4f3e-9fd6-d5a471539fde",
        "cursor": {
          "ref": "89afbc76-eabf-4160-bdd4-c53d16de8489",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "af75b013-f80d-4511-83aa-9164bf9d0d64"
        },
        "item": {
          "id": "ac627978-95b6-4f3e-9fd6-d5a471539fde",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "50441809-5e95-4c91-91a9-0cbc2f250af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d92fffb-3160-41d9-8089-3575fdffc4d6",
        "cursor": {
          "ref": "e5f4b002-d241-446e-bc39-988ffca381c3",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "12d0f696-abed-4a06-bc0b-eff7b6ffe0a9"
        },
        "item": {
          "id": "3d92fffb-3160-41d9-8089-3575fdffc4d6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "30a1f9c3-9eca-4869-874c-99a463266586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd597df-2271-492c-b635-872e6c03bea8",
        "cursor": {
          "ref": "08c03d09-35cb-412c-9c24-a74064a24159",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3777b40c-b629-4140-a6c5-52e18cb5df9a"
        },
        "item": {
          "id": "6cd597df-2271-492c-b635-872e6c03bea8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3331d7b3-899c-4da2-9cd7-9d4ce3170fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cfc926-2ecf-4133-83d6-94a138c17630",
        "cursor": {
          "ref": "53bd1021-df03-449d-b91f-913746a056f9",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "714dea44-7fd2-4878-be4f-f2493e275a5c"
        },
        "item": {
          "id": "66cfc926-2ecf-4133-83d6-94a138c17630",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cc9ee0b4-ca48-449d-932a-62a0181b88d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f4d510-2993-492a-a969-c8e244be796d",
        "cursor": {
          "ref": "2e4cf4b5-7ef4-4906-8129-095e3e0b40ea",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9213ad97-4e8f-4db1-b785-5bacf602107d"
        },
        "item": {
          "id": "66f4d510-2993-492a-a969-c8e244be796d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a7347bc3-c713-4fa0-8911-60fbd2bbebe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e22506-0edd-4a3d-bda1-9feeffbd5fee",
        "cursor": {
          "ref": "6cfc4e5d-3c4a-48d4-a54f-e9d2bc72e66b",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "323981f3-7292-4ab6-85bf-ef4d02a58c42"
        },
        "item": {
          "id": "19e22506-0edd-4a3d-bda1-9feeffbd5fee",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "55519675-6200-4e16-9d35-16008526e51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59127f1d-a472-4278-837a-62afa5e43933",
        "cursor": {
          "ref": "809cf11b-b5ab-4ac4-bdd7-49dc6c8acfbd",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2ba8c79a-636f-4b31-ac4a-6f5840887a51"
        },
        "item": {
          "id": "59127f1d-a472-4278-837a-62afa5e43933",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "baa739d5-9fe0-46f5-9bea-d5ec8f85b6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a678c6e5-21e2-4994-9dd9-5df5e31c9eb1",
        "cursor": {
          "ref": "a46d3bd7-07b9-43a2-97a4-cd3a270ed988",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bc1d3e61-f5be-476b-bf57-db191c8f3d39"
        },
        "item": {
          "id": "a678c6e5-21e2-4994-9dd9-5df5e31c9eb1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "af3a5075-b9c7-4aeb-9492-d8539e78bac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80af6bb-37cf-43e4-a5de-0e5d3b0ad899",
        "cursor": {
          "ref": "e1ccb77f-82cd-4510-b582-7148351ea7ff",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1c1d2506-7cf3-4c2b-aeba-f38c2d860d7a"
        },
        "item": {
          "id": "c80af6bb-37cf-43e4-a5de-0e5d3b0ad899",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4fade921-807c-4818-938a-b59a64bfd5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d462ef5-7943-45e0-8f6f-6de533bce07e",
        "cursor": {
          "ref": "0710f7bf-00a4-4162-873a-ea33ca111440",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b5474bda-1118-4a70-a5d8-121c2026d36e"
        },
        "item": {
          "id": "6d462ef5-7943-45e0-8f6f-6de533bce07e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "269fbb3a-b49d-4ffd-875e-149f7a61d5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d9a8e8-7b03-4835-90bd-5d87844816b1",
        "cursor": {
          "ref": "e987e150-6526-43cb-ad2f-171128ef9cbc",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f170dd56-ff6c-4033-a069-8e40ea6f92dc"
        },
        "item": {
          "id": "51d9a8e8-7b03-4835-90bd-5d87844816b1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b8a16a2e-6f1a-41ff-8053-a0fa5d67dbf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f73d53-934f-4792-934e-8a71a801fcf0",
        "cursor": {
          "ref": "c5a750de-ded3-4e68-882e-9990af2c918d",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9e1b79e8-4f87-46ac-bcf7-1836125906c1"
        },
        "item": {
          "id": "60f73d53-934f-4792-934e-8a71a801fcf0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6d1f9ada-e84f-43d3-8cbc-0b310d5145a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d74205-4e32-4124-87c8-2b82fd7ab404",
        "cursor": {
          "ref": "2bb3ea2c-ebf3-440c-b7c5-4e1d7438f59c",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e5942c18-366b-4154-91cf-06c1a72a6101"
        },
        "item": {
          "id": "65d74205-4e32-4124-87c8-2b82fd7ab404",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "52a59848-8fed-4f78-b91f-8043613ed405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25bf543-773b-4f5a-9d21-c6f5deaf97bc",
        "cursor": {
          "ref": "54a9a69b-8b09-4a93-bfd3-6683cb3f89e9",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7fd2e493-9bbe-4885-8067-a9475d7fc7ec"
        },
        "item": {
          "id": "a25bf543-773b-4f5a-9d21-c6f5deaf97bc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d5f65193-7c15-446c-8dae-1080cc7e0503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43529328-8fc7-4115-9edd-4d4aef3c8290",
        "cursor": {
          "ref": "ba09b1d9-c763-4f41-929d-7bb07171f05d",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9f1113ff-8e77-4684-89ef-b364c2921fc3"
        },
        "item": {
          "id": "43529328-8fc7-4115-9edd-4d4aef3c8290",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fba81967-a3c0-49ea-9fd2-ccccceba6ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb78451-220f-4b02-816b-c38192402959",
        "cursor": {
          "ref": "2bbdb9e7-2294-495b-a7a9-20a4d87e7fa5",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0bb688ef-8514-4a5c-9f90-20eccfadd5a6"
        },
        "item": {
          "id": "ddb78451-220f-4b02-816b-c38192402959",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fcff42a3-8d52-458e-b5cc-a289cd14909a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0722da3-16e8-4bea-8e6c-85ea0df17e2b",
        "cursor": {
          "ref": "bf39d99e-d203-4c67-8e7e-537b0c8ec1b1",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "35f41bcf-1906-437d-a16c-543e7303f5fc"
        },
        "item": {
          "id": "f0722da3-16e8-4bea-8e6c-85ea0df17e2b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9ba77d07-9577-4591-b232-750e3b52fddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db27f58-c3b7-411a-83d6-a69e322870c8",
        "cursor": {
          "ref": "5d398f1f-e310-4fe8-ab92-1797cd2c456d",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1861f9f5-fb56-4f94-a64d-724d1b363ab9"
        },
        "item": {
          "id": "6db27f58-c3b7-411a-83d6-a69e322870c8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c382a289-9608-4698-8783-e4dd8a9d66bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec3bed5-b9ab-4b6f-a7dc-10409de718e6",
        "cursor": {
          "ref": "d8a7c906-3ddf-49f4-ae5c-b2f9f8929558",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d0bcc960-b5ee-4f67-b79b-6b93dcddf704"
        },
        "item": {
          "id": "8ec3bed5-b9ab-4b6f-a7dc-10409de718e6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c67e118d-a57b-4003-99aa-3ed9bf75031d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64564cda-0a90-4874-9b7b-a0e835d85723",
        "cursor": {
          "ref": "3086eea6-13fe-436d-b03c-0326a6410b47",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "bf25c66e-94fc-4ade-a877-c4ba74607d16"
        },
        "item": {
          "id": "64564cda-0a90-4874-9b7b-a0e835d85723",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8f84a225-88c8-4e32-8965-217e5faf4f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5147d1b0-d822-45aa-b020-fb7a4d583423",
        "cursor": {
          "ref": "e399949a-a876-4861-9640-dccae0fcf9d4",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1171a8e8-df61-448b-92c9-9eeb46f374e7"
        },
        "item": {
          "id": "5147d1b0-d822-45aa-b020-fb7a4d583423",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2b162365-a470-4f37-9157-701632e0f266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9542825-1d7f-440f-9aeb-a8f7c9708e3e",
        "cursor": {
          "ref": "7dcece35-386b-418c-92f4-6127866aaa22",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "85eec8f9-6541-4914-846e-b1bbd1389376"
        },
        "item": {
          "id": "f9542825-1d7f-440f-9aeb-a8f7c9708e3e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b432421b-3c0f-42fe-8e53-e7af09c4d7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463475bd-7a1d-4d68-bc1f-87af37104f4a",
        "cursor": {
          "ref": "fe30d247-d085-4fdc-b795-b260886220f5",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "391978d1-b1c0-4b69-996a-2b13b6a5e047"
        },
        "item": {
          "id": "463475bd-7a1d-4d68-bc1f-87af37104f4a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0fb91a92-4c6e-4e42-9a0c-dbf244c9ecef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b7a8ee-77aa-49e7-9083-33ed4124b355",
        "cursor": {
          "ref": "9631d924-8be0-49b4-801f-ca494d30565c",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "dadf04b9-d8bc-44fe-98bc-b7a07fda8fed"
        },
        "item": {
          "id": "33b7a8ee-77aa-49e7-9083-33ed4124b355",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "890b4011-bd31-42e1-b69e-1562260ba394",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c9ae0810-65b5-4599-a3f9-c264a6186393",
        "cursor": {
          "ref": "f6a8b878-c434-41c1-b5ea-f6233db11e37",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "51d4337d-01a8-4cda-879a-05bdce0ce3b0"
        },
        "item": {
          "id": "c9ae0810-65b5-4599-a3f9-c264a6186393",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "851ec4d6-1467-42b9-8277-174cb9bfd0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "655b454d-9797-441f-9f3d-12c08a5dcfbc",
        "cursor": {
          "ref": "20412224-52a2-45a5-8e28-6efa92d97e53",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "41ac9df4-c529-4ff1-8143-7e091c7b3e56"
        },
        "item": {
          "id": "655b454d-9797-441f-9f3d-12c08a5dcfbc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c630aa06-7918-4358-a3a5-be94b2a85d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655b454d-9797-441f-9f3d-12c08a5dcfbc",
        "cursor": {
          "ref": "20412224-52a2-45a5-8e28-6efa92d97e53",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "41ac9df4-c529-4ff1-8143-7e091c7b3e56"
        },
        "item": {
          "id": "655b454d-9797-441f-9f3d-12c08a5dcfbc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c630aa06-7918-4358-a3a5-be94b2a85d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8688faf4-2a29-48b4-9907-1d6900f590fd",
        "cursor": {
          "ref": "ddec9b1d-499e-4475-8317-24e8c3325492",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7a2877ac-be0c-4756-b30d-e62494544617"
        },
        "item": {
          "id": "8688faf4-2a29-48b4-9907-1d6900f590fd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9fcbc29d-1fa9-4010-a44e-da1d80828b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6ab5a9-0256-424d-9801-4dc6b37d6ee8",
        "cursor": {
          "ref": "c51be23c-163f-43d7-b8e6-44020e6893fd",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0a965ac5-e642-4f8a-a459-c082fd970a67"
        },
        "item": {
          "id": "1b6ab5a9-0256-424d-9801-4dc6b37d6ee8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "33c9b81d-0556-40ad-924c-7236ddb2a57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69a7556-774b-4dd8-890a-1465f147b10c",
        "cursor": {
          "ref": "4ec0e578-342c-44ff-9fe6-46daf081b796",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9706e392-ccf2-40a3-a022-4795de5526ea"
        },
        "item": {
          "id": "a69a7556-774b-4dd8-890a-1465f147b10c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "87cd7aed-cccf-40eb-addd-4bceb09052c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f2307c-5a2d-442f-978e-97a262761184",
        "cursor": {
          "ref": "ac3d879f-a3d6-451a-b4ef-45e6b79ed1fe",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9d9a823c-ab91-4edf-a817-9c08e1361cce"
        },
        "item": {
          "id": "77f2307c-5a2d-442f-978e-97a262761184",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4eff9a70-dbc4-4168-b995-d22188dc6668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803a8a46-8f04-4edc-9dd1-6d1d260126e5",
        "cursor": {
          "ref": "a6028e72-13fd-4ef9-9d64-fc841dd0af97",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "737835bf-eb35-45e1-afe0-55206661f4a8"
        },
        "item": {
          "id": "803a8a46-8f04-4edc-9dd1-6d1d260126e5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8aacbdc5-e8ad-49cb-ad24-258816c328d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7641a386-94e5-439a-9f3f-db03bb2f1919",
        "cursor": {
          "ref": "ad2af24c-d397-4f49-9766-a3e1acd6232d",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "317478dd-db84-4b18-8388-8f9c946b49f1"
        },
        "item": {
          "id": "7641a386-94e5-439a-9f3f-db03bb2f1919",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "33c24753-a17c-4145-a9ba-12407770d065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3033c473-8517-429b-9e53-8440a95d20a7",
        "cursor": {
          "ref": "e4d492e8-fa46-4b25-aaff-8bae59efea1a",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9788c370-32d8-4846-9a48-2df45eb5e09c"
        },
        "item": {
          "id": "3033c473-8517-429b-9e53-8440a95d20a7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "81ab41c8-62a6-4ac1-9de4-8b18bf4a237c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9b1ca0-99c0-4787-b1c2-f74750bef7d0",
        "cursor": {
          "ref": "8d0319c2-5d77-456f-af5b-80a7fee9b6d6",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "48b37478-49d3-4d3d-9dc1-9f56eb411e3f"
        },
        "item": {
          "id": "df9b1ca0-99c0-4787-b1c2-f74750bef7d0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bd95fabb-2923-49f6-af7f-8a96029811d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae17a9e1-79eb-4248-aaee-0e41356c622a",
        "cursor": {
          "ref": "8ee49875-6bf3-4339-9dbf-5a9e7f7f9b3c",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fbb965f9-d658-4deb-895b-1159fa4860e5"
        },
        "item": {
          "id": "ae17a9e1-79eb-4248-aaee-0e41356c622a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a4f963cb-4d5f-4e0c-9a73-92c545898552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1a0b47-9641-4e2d-92fd-7d7513694370",
        "cursor": {
          "ref": "e08ce103-d6ee-4a90-b135-f98c7c870f40",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d3e6ed3d-a218-491b-8b09-9ecd06b1a69e"
        },
        "item": {
          "id": "ec1a0b47-9641-4e2d-92fd-7d7513694370",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b52244ca-9fb5-4722-ad54-77a9b5777610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d482df97-7a3a-4b4a-8d25-6fa1ae7156c2",
        "cursor": {
          "ref": "dc7b3ad2-efce-43f8-a211-dd05dab88b8e",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4d11c6c3-894f-475a-844f-104760df5a33"
        },
        "item": {
          "id": "d482df97-7a3a-4b4a-8d25-6fa1ae7156c2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c87ac00f-9507-4467-bda5-0dbf70550691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81b6206-d5b3-422e-848c-975bf0a54dc8",
        "cursor": {
          "ref": "e85b9782-c9d9-4fdd-9244-a0551e0a7b82",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0a208a21-3e3d-4a9e-a09e-7de9372e850e"
        },
        "item": {
          "id": "e81b6206-d5b3-422e-848c-975bf0a54dc8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "72faf018-3801-4687-b38f-982e381d6fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1c9ba6-fda1-4bca-980e-c422a65772c1",
        "cursor": {
          "ref": "f7faf763-7be7-4f6f-b281-42cc031ee670",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ac09d853-d7e0-4ce7-bcb5-74c2a5b58dda"
        },
        "item": {
          "id": "ec1c9ba6-fda1-4bca-980e-c422a65772c1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8ed6c827-8be2-4f25-8dcd-99c3daca2ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c33c4e-549c-41ab-b23c-7a3b50b798e3",
        "cursor": {
          "ref": "254f164b-3cbd-4423-a01d-64a723653fc5",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "47c2ee5f-61eb-4692-b7f5-c506f560d094"
        },
        "item": {
          "id": "36c33c4e-549c-41ab-b23c-7a3b50b798e3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "da8d9747-d142-47a0-81de-9e4041f121f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17510aa3-f78e-4b6d-ba21-14961daa0bf0",
        "cursor": {
          "ref": "b27403ff-bb7d-4a1e-8172-829030166c21",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "992f4967-c3c3-4cf9-acaf-5e46c2d1697f"
        },
        "item": {
          "id": "17510aa3-f78e-4b6d-ba21-14961daa0bf0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8e1f3c86-6123-4bc5-8e6d-51a3f9821c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b035fba6-84fd-4be4-8bcf-ce5689694b8d",
        "cursor": {
          "ref": "bd71e75b-b596-454e-9758-53c2d917dde8",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a2c57ace-952d-433c-a2da-bc91223cb604"
        },
        "item": {
          "id": "b035fba6-84fd-4be4-8bcf-ce5689694b8d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "88d750ce-6534-4cc3-9b8b-203ed20b3ea0",
          "status": "OK",
          "code": 200,
          "responseTime": 252,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "9337973b-97d2-40f6-bc3f-ebd2906af2cd",
        "cursor": {
          "ref": "1a73a8b6-c057-46fb-89e9-062b5f53c83a",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8a78cf3f-58ee-486b-9112-7b32412873ce"
        },
        "item": {
          "id": "9337973b-97d2-40f6-bc3f-ebd2906af2cd",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e5be6574-5535-40f8-92d4-ca51000be857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575d8ee7-de35-483b-8b3e-2ef13e147dc1",
        "cursor": {
          "ref": "dd214b0d-0ccf-4f2f-a39d-2a80addea1bf",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e1fff9ce-1666-491f-b3f8-d0170a12bf30"
        },
        "item": {
          "id": "575d8ee7-de35-483b-8b3e-2ef13e147dc1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "210a4c2f-a65b-4297-9d3f-3496ab043597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be38a7cd-7253-40f5-969e-bee9585df484",
        "cursor": {
          "ref": "d597f609-93ec-4e59-8bd5-84c1a3ed868f",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "83a53426-de54-4723-aaf2-5dd58664c466"
        },
        "item": {
          "id": "be38a7cd-7253-40f5-969e-bee9585df484",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "587e38a6-a70d-46bb-827e-882d6d84e09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb8f696-5063-4c4d-9b97-29f0cc73e56b",
        "cursor": {
          "ref": "96a93e7d-70d1-4081-a122-572b19258a98",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "30361aea-23c4-410b-8b96-fc40f998c38e"
        },
        "item": {
          "id": "ccb8f696-5063-4c4d-9b97-29f0cc73e56b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6e8f5c8e-1cb1-4482-927a-7080502335d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9d99b5-7f01-4f87-a191-1591dda3a693",
        "cursor": {
          "ref": "8767f5fa-4eab-424d-a206-5447a1a9bd4c",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "14f6975d-5bbf-4fb9-986e-413a5893c138"
        },
        "item": {
          "id": "de9d99b5-7f01-4f87-a191-1591dda3a693",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e4c78a23-fe80-4563-8a38-02ac3a27490f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf14ca4-6725-446c-a2a7-56fda8ed0822",
        "cursor": {
          "ref": "7503e6d2-3ffb-418b-b79e-177e8e349aa6",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5100a5ce-7148-4d45-a6a9-90168e6325ec"
        },
        "item": {
          "id": "fbf14ca4-6725-446c-a2a7-56fda8ed0822",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "125a3bc8-b50b-47dd-aa3b-238c2bfdc0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e86401-d599-4a79-a5fa-dde9867c8abd",
        "cursor": {
          "ref": "0946898e-4f18-445e-90e9-b8bf05a25087",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b0159558-9a95-48dd-bfb4-62d21ad0ef67"
        },
        "item": {
          "id": "53e86401-d599-4a79-a5fa-dde9867c8abd",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a23d747f-6795-45e7-b6d3-03ec05424528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e1507a-1724-429e-ae2c-48f2c903fe92",
        "cursor": {
          "ref": "234fc007-ca8c-4f59-9500-4c4221935451",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8d664186-7a69-4fa2-8697-c67139ef3c0f"
        },
        "item": {
          "id": "11e1507a-1724-429e-ae2c-48f2c903fe92",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ac9b2cbe-5acf-473c-9f80-8281e68d9e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1b27aa-44f8-4bfc-91ca-7ccefa22c260",
        "cursor": {
          "ref": "5f03c87b-62a5-4653-8c31-f02e265c1159",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "56b2b1c6-5b87-4148-8403-37447b5e0f10"
        },
        "item": {
          "id": "7f1b27aa-44f8-4bfc-91ca-7ccefa22c260",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "66c794a3-c33c-44cc-840a-33f4c48e414f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1779dd2-a236-47a7-a00f-8a8cc0cf7815",
        "cursor": {
          "ref": "62e7f3b5-85ff-4bb6-92d7-8d7a1907fe20",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0813e27a-f64e-4873-ad0d-b1ee59cb0bee"
        },
        "item": {
          "id": "a1779dd2-a236-47a7-a00f-8a8cc0cf7815",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "68683b9b-3ba2-4eeb-8341-47082d79d2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1acc84-c9a7-46cc-a0ac-f8d3f4c7e206",
        "cursor": {
          "ref": "45a088db-6702-4dea-aa99-7fc17dde3c7d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "02eb9c43-5397-4020-838d-fbdc1d01521a"
        },
        "item": {
          "id": "ec1acc84-c9a7-46cc-a0ac-f8d3f4c7e206",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "75d3e1af-f283-44a0-a1e4-61d988a1b163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc305c8b-ba87-44c0-b844-3a45d80644fa",
        "cursor": {
          "ref": "c2e1781c-d6d6-4133-b7f4-decec0bf84d2",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cd472782-b72a-4a73-89c0-9e5b5a365fe6"
        },
        "item": {
          "id": "bc305c8b-ba87-44c0-b844-3a45d80644fa",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "32682212-0023-4bc6-b129-e733fdb25ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fba6c61-6dae-4c7e-b63b-9b772990e507",
        "cursor": {
          "ref": "70fc0c7e-febc-41c9-aa94-008412f0f77b",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2346650b-5093-49e8-b8c6-e4913a0717ea"
        },
        "item": {
          "id": "1fba6c61-6dae-4c7e-b63b-9b772990e507",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f09f0eec-9d10-4c97-b2ba-3ed0982b9057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5fb293-a24d-4615-ac06-8cac59e27e83",
        "cursor": {
          "ref": "d4536b08-3a3c-4dff-89ad-2b0ff9a7bb2e",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0acaf03a-f201-4db7-b647-859bb64465fd"
        },
        "item": {
          "id": "ad5fb293-a24d-4615-ac06-8cac59e27e83",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c861a15e-8472-49bb-8fe2-a2efa27f584c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a780c79a-cbf8-4ace-bcd2-056c6527aae0",
        "cursor": {
          "ref": "5418f40d-1d3c-448f-b6f1-76a01ee8607c",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "33d84a6b-fd20-4827-8c01-9e2317af4b67"
        },
        "item": {
          "id": "a780c79a-cbf8-4ace-bcd2-056c6527aae0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cd9173b7-9e2f-4c50-9905-97c192f5c036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584ca997-0d27-42d3-83db-8e9c5b7247e1",
        "cursor": {
          "ref": "79742628-6f0e-460f-8732-7f5ad0eee98c",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "22067182-5444-46b7-8a77-eb44a15b233a"
        },
        "item": {
          "id": "584ca997-0d27-42d3-83db-8e9c5b7247e1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8a47d595-9e7e-4f6d-910e-e59519199a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fe5b6d-98d0-4f73-bffb-6dad655fc93f",
        "cursor": {
          "ref": "f964febd-aa2f-4bc1-95ec-01d4d838f953",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c540857d-0f8d-4f8d-8df7-2abbaf92a28b"
        },
        "item": {
          "id": "b9fe5b6d-98d0-4f73-bffb-6dad655fc93f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8162d01f-ee37-4faf-b085-6be63a6e9b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c44316-4852-49b9-996a-3b3189b6ca83",
        "cursor": {
          "ref": "d52ca7d1-1f5b-4938-a7ea-8a3366e6d5ba",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dc33a14f-7367-4f6b-ac9e-1486b5afd826"
        },
        "item": {
          "id": "c0c44316-4852-49b9-996a-3b3189b6ca83",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1da8a81a-5946-49bc-9104-3c7fc384a4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cea79b6-3d55-47a0-8224-64e5fed262cd",
        "cursor": {
          "ref": "c619fee9-a0fa-4344-9cb3-e8e0186e60ba",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b08a1b91-fe26-4f53-abb9-1c6b9af8cb53"
        },
        "item": {
          "id": "7cea79b6-3d55-47a0-8224-64e5fed262cd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "552ff42c-8230-4c28-bbef-b2edf8ff0f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc6c26f-2a31-4888-9500-c2eacd6b5b66",
        "cursor": {
          "ref": "cd4a8b70-2bd3-4bf9-abb2-29cf94fb9e1f",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d4a11c63-591f-4974-8903-b95976cf57aa"
        },
        "item": {
          "id": "2fc6c26f-2a31-4888-9500-c2eacd6b5b66",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4589f267-0086-4dc1-83fe-80981b096ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2f124c-4bcd-4ba5-a7be-5a4d1551f9dc",
        "cursor": {
          "ref": "7a40b849-56fe-4151-9274-81ec9b18b986",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "39774a9c-5518-4c40-8820-50d6bdb01bdb"
        },
        "item": {
          "id": "bb2f124c-4bcd-4ba5-a7be-5a4d1551f9dc",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "db01a166-003c-4939-a255-1d77295ea24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "becfa0d2-780e-4393-b1fb-6664d714ecba",
        "cursor": {
          "ref": "27b36231-95d4-4c26-b46a-bd50f4a1fc65",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d504fbe2-4dd1-4a9f-aaa1-69a7129bcfa2"
        },
        "item": {
          "id": "becfa0d2-780e-4393-b1fb-6664d714ecba",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dac54b9b-e09e-4006-89fa-8d772801a694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f513273-0bba-4c0d-931b-98160492fc39",
        "cursor": {
          "ref": "73b09785-7a39-469f-9752-69b056ba888b",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e70b603e-5a6f-43da-a8fc-76cac0d5f78e"
        },
        "item": {
          "id": "8f513273-0bba-4c0d-931b-98160492fc39",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4c84ea4d-bf4d-47c8-8d89-d3158fdc9a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8028da6-1abb-4ab5-97b8-6439d7dd7fbc",
        "cursor": {
          "ref": "dab0247a-22e7-4a8c-801f-83c39f5eceb8",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d4eae16c-8062-4100-ba9b-b6eae0a6c307"
        },
        "item": {
          "id": "e8028da6-1abb-4ab5-97b8-6439d7dd7fbc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "88032ae8-73ad-4c0a-a5c9-5612fef1b0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1acef2-0bd6-465e-8cd3-4d659c62b9e8",
        "cursor": {
          "ref": "3917ed1b-629d-42e0-9533-71ceef05314d",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a297686c-4bc3-4fee-8dac-f3a84d29ea37"
        },
        "item": {
          "id": "da1acef2-0bd6-465e-8cd3-4d659c62b9e8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bee61e87-dd3e-4a9b-991a-2041abace1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5130d7-a059-4fc0-971e-65fe76a851c7",
        "cursor": {
          "ref": "a82e8c9d-05d6-4967-8287-5fd4cf5a9f17",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e56776fa-d906-4d7b-92b1-b54bbfa44463"
        },
        "item": {
          "id": "da5130d7-a059-4fc0-971e-65fe76a851c7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2fe00813-6d94-4ccf-9fbf-0433a5f5aff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e93100-5c74-4db7-b634-da07fcdb6087",
        "cursor": {
          "ref": "9442f802-0b46-448e-8f4c-5e0a88f123fe",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dabad1cd-44d2-4941-8ddf-0c1c0ef3430c"
        },
        "item": {
          "id": "d3e93100-5c74-4db7-b634-da07fcdb6087",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4701827e-a5be-4b63-8a47-44827390806c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95cb76c-5303-4a00-a873-7a61d6daf248",
        "cursor": {
          "ref": "1eb2e439-f497-4323-a793-88d960ad7174",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "325a731b-435f-41cc-b84a-fababe43eb7b"
        },
        "item": {
          "id": "b95cb76c-5303-4a00-a873-7a61d6daf248",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "16ce0da7-7477-43dd-ad4f-e335ac569796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a371467b-cf22-4d0a-bc24-e43c246eeebe",
        "cursor": {
          "ref": "ec8bb5f7-6a0f-4661-9d2b-6ae71f76a8aa",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c5c7fffb-595f-4b14-bb0f-e2e61303b254"
        },
        "item": {
          "id": "a371467b-cf22-4d0a-bc24-e43c246eeebe",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e2e2bc79-31ed-4f3d-93ab-6ab703a4907d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ed53f1-c998-4092-b85c-4a745d9f6c49",
        "cursor": {
          "ref": "ece7aeaa-5181-40e1-9dd1-0efad80c4966",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "af0c7fb9-764b-4b5e-b04e-44b018608784"
        },
        "item": {
          "id": "f4ed53f1-c998-4092-b85c-4a745d9f6c49",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "af796548-35ed-496b-b278-0af6bd0398c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911d6db8-6454-4210-bfc3-e5b47381e14f",
        "cursor": {
          "ref": "9fa04af7-f0e6-4189-ad16-c57f45f68b93",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "37a7b383-b64b-4027-9056-ca7bbc6c93e1"
        },
        "item": {
          "id": "911d6db8-6454-4210-bfc3-e5b47381e14f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "132e9820-75d1-4617-a2da-5cfeb297508c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2f42ee-b695-45ec-8710-227e514ef064",
        "cursor": {
          "ref": "de54ac26-bd02-40a3-bf7d-e1bfc41df1c1",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cdc00dcd-3d0f-473b-8bae-394402b04a10"
        },
        "item": {
          "id": "0a2f42ee-b695-45ec-8710-227e514ef064",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5c84bc62-dcf0-4c06-881f-17915b63bfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 751,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce28072b-9d1f-4679-8324-fa4b50ef2e41",
        "cursor": {
          "ref": "675f10fb-db66-48e1-ad11-71572e3a48e2",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8a853e55-0013-4630-ad9b-cc0dc3af88a8"
        },
        "item": {
          "id": "ce28072b-9d1f-4679-8324-fa4b50ef2e41",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ade765eb-93c4-4f79-b220-45b5cbf3aebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a6b0c6-c5c4-460c-9c67-dbbef4c696f8",
        "cursor": {
          "ref": "e623f7bb-d774-4d22-be04-43878aec1f59",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "30239533-8085-44ee-b450-e329f04f767a"
        },
        "item": {
          "id": "21a6b0c6-c5c4-460c-9c67-dbbef4c696f8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "308b428f-88c9-4a0f-8765-30c9e7b5d5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719f311e-53f9-4b22-8051-d9dec7dee79e",
        "cursor": {
          "ref": "01029ea9-c397-4934-82a5-788fe4746c5d",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "db49c6c9-9974-498e-b1b9-83007a5b2c33"
        },
        "item": {
          "id": "719f311e-53f9-4b22-8051-d9dec7dee79e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b93b8552-ea84-41df-96c8-60792415650d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692e652b-deff-497e-89e3-616af7b102b6",
        "cursor": {
          "ref": "8417051b-392b-49df-98dd-53d63bba4394",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0a94da32-5f26-4282-b751-e649ccf11fe3"
        },
        "item": {
          "id": "692e652b-deff-497e-89e3-616af7b102b6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0701a182-066b-4463-a32f-78742f8ac243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616a2b97-5508-449b-9f5d-dd4388b759b1",
        "cursor": {
          "ref": "af6e8db0-985d-4e5c-9efe-ae1cb86c0a6d",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a96bfe1e-270c-4e3f-931e-19f03a044758"
        },
        "item": {
          "id": "616a2b97-5508-449b-9f5d-dd4388b759b1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b69e446e-02e5-4372-b535-1a840ac879b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28044d9e-a735-40e2-9e56-68914def971b",
        "cursor": {
          "ref": "c67b0ec6-1104-4149-92e7-a3cc7fc8ddce",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7eac7de2-379a-4594-814d-652c329e8212"
        },
        "item": {
          "id": "28044d9e-a735-40e2-9e56-68914def971b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8ecbf536-fdd1-4ee9-9064-e8a8a452f943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7bd3c0-a868-4193-ad35-40718c5b67fa",
        "cursor": {
          "ref": "5ee5354c-b384-4dd4-86f1-d8d0bec49997",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d30deee0-042b-45d8-9181-590435826ec2"
        },
        "item": {
          "id": "1a7bd3c0-a868-4193-ad35-40718c5b67fa",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f4745ee1-549c-4370-857a-6bcc13221a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89207671-dbfe-4fe7-b4e3-b01739c2c8f4",
        "cursor": {
          "ref": "6da2405a-d246-4c6c-a77d-644aec8210af",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "75af5b21-ad21-497b-9305-815932c735ab"
        },
        "item": {
          "id": "89207671-dbfe-4fe7-b4e3-b01739c2c8f4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2be93ef9-87a7-4e96-bceb-9bbaf979a6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b160d4eb-3f09-4c55-badb-a094feac654f",
        "cursor": {
          "ref": "61f89a7f-f33b-4a28-9079-1b48c62f1360",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9d91d3de-bdfa-48e8-ad87-73d5ce3494f8"
        },
        "item": {
          "id": "b160d4eb-3f09-4c55-badb-a094feac654f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9a1abd8e-a037-48b9-800d-88c200cfa8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525dd681-0aa3-4db2-a445-da261c43bb12",
        "cursor": {
          "ref": "770cd251-f0a7-4031-84bf-1ab87edecb87",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ca49e505-8695-464d-b774-039f2c6afcfa"
        },
        "item": {
          "id": "525dd681-0aa3-4db2-a445-da261c43bb12",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c4776985-6f5a-4d17-a7cd-983725f5b8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf68289-1573-40a1-b015-493a92aa4d24",
        "cursor": {
          "ref": "d86df2ba-4c1f-43d9-bafb-9169fde3b848",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "881f8263-75e0-4610-85ed-9737594b12c9"
        },
        "item": {
          "id": "faf68289-1573-40a1-b015-493a92aa4d24",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6618b00d-950e-4ab6-9fa1-19310c9551eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dddc087a-145e-4191-a4d0-42867edb42e2",
        "cursor": {
          "ref": "5c7f043d-53f1-45df-8395-f5cb327ce585",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9fd3229b-0c74-4b3d-ac83-9dad4a3c8c59"
        },
        "item": {
          "id": "dddc087a-145e-4191-a4d0-42867edb42e2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "bfc47edf-4d39-485f-8985-0b2eedd81487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bf5869-a6a5-4bf3-8e3b-d9b1319812f9",
        "cursor": {
          "ref": "120105d4-36f7-4fef-aa76-acf334c17692",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "65bbd2f0-064e-45e7-a6ee-73efd8674425"
        },
        "item": {
          "id": "b3bf5869-a6a5-4bf3-8e3b-d9b1319812f9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "91c47911-2a88-4c72-a1af-5b81dc0635d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2207c0-3229-4904-9518-a3ba9f259581",
        "cursor": {
          "ref": "d20d5f4e-6612-41c2-a0a0-2d414a9cb67a",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ffc8d06f-235c-42b2-9d72-464525835fea"
        },
        "item": {
          "id": "3a2207c0-3229-4904-9518-a3ba9f259581",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7bd77b28-9176-4fe9-a27e-e9b939dee041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb26c1fb-7982-45d6-b56c-ebade51b8e50",
        "cursor": {
          "ref": "34fd3f91-60fa-4006-8cb1-c5c4810c42b9",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fadb2e29-0361-454f-a66e-328b3cd5bb0b"
        },
        "item": {
          "id": "eb26c1fb-7982-45d6-b56c-ebade51b8e50",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6ffbad50-54fa-45f8-9858-0a9fb88b889c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd046e6-acab-4bbc-8a20-d5b41a0057fc",
        "cursor": {
          "ref": "a48f4449-5b7e-4ed6-a637-d2cc9679e9d7",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "965d9416-7a97-4abf-a1d2-22740e0ae77a"
        },
        "item": {
          "id": "bfd046e6-acab-4bbc-8a20-d5b41a0057fc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "170dd4a7-e0ef-48fb-8c2f-e07d7c1932b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9894ac97-c91c-4b48-a521-234423c70ed6",
        "cursor": {
          "ref": "0ccebfc9-e2a2-47f5-8704-d8bbdebb0ed4",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "98ced879-ba1c-4396-86ea-44a61b3f0978"
        },
        "item": {
          "id": "9894ac97-c91c-4b48-a521-234423c70ed6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "91151410-60ff-4dc7-95f3-d165096d6d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01bbb71-03f1-4299-8d0b-cb344e4e793f",
        "cursor": {
          "ref": "d035ca1e-d305-40eb-ae34-6103dc8c0325",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b04e4b2f-40c6-401d-907c-1af7b6576156"
        },
        "item": {
          "id": "c01bbb71-03f1-4299-8d0b-cb344e4e793f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a04fee20-e360-481c-b336-56956b8f2ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bf115a-5aef-49e5-8fea-99703eaff197",
        "cursor": {
          "ref": "5ced3a0c-7f8b-4d3d-807c-8875e2198da4",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "89b9118d-e721-4775-a5f4-bc63cb3581b4"
        },
        "item": {
          "id": "29bf115a-5aef-49e5-8fea-99703eaff197",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cc60206c-18bc-401d-8039-d9ccc239a71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9e2557-f5a0-496b-9e2b-8124e0c34ff1",
        "cursor": {
          "ref": "9543ace5-8b56-44a5-9e8c-4430d5a1452c",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0f4c3eb4-e120-4f26-96ed-9c2283571056"
        },
        "item": {
          "id": "ae9e2557-f5a0-496b-9e2b-8124e0c34ff1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ff78a60b-3cd4-4648-b48b-258debcdb676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e169b757-6593-4073-b2c4-a9dc85361c42",
        "cursor": {
          "ref": "df7c646a-a249-4c42-a70c-abf569939757",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d40a1b06-8df7-495a-837c-7b67067cb94e"
        },
        "item": {
          "id": "e169b757-6593-4073-b2c4-a9dc85361c42",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cd5c2a68-4e3f-41be-b84c-4a3dfea62546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7625f9-0e7b-4143-96a2-37ca2d2359f0",
        "cursor": {
          "ref": "7d85b53e-b433-402e-95cc-395a67047b6d",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3463d574-4e4d-444b-bafc-3903174b5b45"
        },
        "item": {
          "id": "de7625f9-0e7b-4143-96a2-37ca2d2359f0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c9013909-aa10-4987-ab7e-09cfa3ca4431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82940155-8149-49ae-ad96-e77c135cfbf4",
        "cursor": {
          "ref": "9bd4e185-c230-4efe-9b73-9c8d05227868",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "87267199-94fc-4369-9536-9d29e26e542f"
        },
        "item": {
          "id": "82940155-8149-49ae-ad96-e77c135cfbf4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "66def746-1529-40f5-9a50-8b112819b0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11111e26-7142-430f-80a3-6422731a9069",
        "cursor": {
          "ref": "d8aaf04e-7bab-494e-99d3-b8c50676ba60",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fd6cd50c-b6ea-414a-ab33-94f38a7139b6"
        },
        "item": {
          "id": "11111e26-7142-430f-80a3-6422731a9069",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8216e0b1-54e6-44bd-821e-ac57606a0c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53b7545-14bb-459c-80d8-c464f18e299f",
        "cursor": {
          "ref": "d0341281-f886-49de-9ff4-e2e15ae9957f",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c72381c7-03be-48b8-96ab-a7acbdc73548"
        },
        "item": {
          "id": "e53b7545-14bb-459c-80d8-c464f18e299f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9eb6bcfa-565d-4760-9eef-09fe80b2cb83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11512795-57d4-4f4c-a837-b297f1c453b6",
        "cursor": {
          "ref": "b26db15c-0cc5-44d3-8a30-727b45d38d7c",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ed3543af-5f8d-438c-b6b4-879166ad6751"
        },
        "item": {
          "id": "11512795-57d4-4f4c-a837-b297f1c453b6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7865dbc1-2d1f-4e45-b9de-2505bf6c3cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2aa83a-d53f-4221-bfab-25e1f8c5ab82",
        "cursor": {
          "ref": "8612566b-4f20-4915-adfb-0a17e3f5fc85",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5d7d8d16-e053-48ba-ad7b-ddbe57dd7173"
        },
        "item": {
          "id": "0b2aa83a-d53f-4221-bfab-25e1f8c5ab82",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c8cd349c-12a9-4e8f-ab02-73e910850293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1726e7-69b8-4a77-9e27-2e98abbe56fb",
        "cursor": {
          "ref": "a9bb7b1c-e08f-47ac-8475-c579e485fb84",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1fa761a8-a2c9-42f7-9ab3-0d052fc74ad5"
        },
        "item": {
          "id": "ad1726e7-69b8-4a77-9e27-2e98abbe56fb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7388893a-90c8-437f-a75e-a9893597303e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e72449-a2f3-4c7f-b0cd-4f347d5f3036",
        "cursor": {
          "ref": "3b96194b-dc90-45b8-afbe-23bc24d53157",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "78a72d78-69fa-4bf0-9423-b70a52789903"
        },
        "item": {
          "id": "49e72449-a2f3-4c7f-b0cd-4f347d5f3036",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "da26c181-675e-461c-bbd3-f50aaea6767b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8780e0f-1223-43dd-b874-f3950a4d5c6a",
        "cursor": {
          "ref": "13165840-871b-4704-8608-146657f64dcd",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "37f01ced-d13c-4af6-8b82-f34fa3a9df2c"
        },
        "item": {
          "id": "d8780e0f-1223-43dd-b874-f3950a4d5c6a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8542fe47-27c8-4707-b63c-3e9024738d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad08b2b-3370-40e7-9e68-b8cc1d848a51",
        "cursor": {
          "ref": "dd378164-f9e6-4cda-a8f4-496b85ef8455",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b4ad9bfa-2618-4978-a489-8de9aef7a022"
        },
        "item": {
          "id": "5ad08b2b-3370-40e7-9e68-b8cc1d848a51",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c945f728-6381-40f3-8f8d-ab248f201e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338e1596-332b-4b0d-804c-9adf19e0b325",
        "cursor": {
          "ref": "831e1026-0fdd-4f9f-8d77-268d768c5670",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c3877302-26c5-409c-bf5e-13e947732b01"
        },
        "item": {
          "id": "338e1596-332b-4b0d-804c-9adf19e0b325",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b96f7eb6-5990-4575-ac63-f8f386c95491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c317fc-3902-4a05-b806-fecc79853575",
        "cursor": {
          "ref": "77f4102a-ac62-4cc9-9fea-4ce055a807d2",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5f4b0273-9d31-41f5-bd12-16f33e6b21c1"
        },
        "item": {
          "id": "75c317fc-3902-4a05-b806-fecc79853575",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "20fd1ca9-b4b3-4891-99e7-e0aca2ed6f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9748c6e0-8639-424c-b732-5b3551cdd569",
        "cursor": {
          "ref": "915864c7-baee-4b34-827e-ed31079882bb",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0be7e2cf-c5ec-4790-a045-f89d16c270c9"
        },
        "item": {
          "id": "9748c6e0-8639-424c-b732-5b3551cdd569",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2491344d-7137-4563-a218-2a336e23642b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d24e0d-892c-4156-99d9-15917011da76",
        "cursor": {
          "ref": "86e88228-91d2-4f3d-864a-e1d16f551c48",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d30eb67b-016b-4c03-9d85-89c0fcd0973a"
        },
        "item": {
          "id": "20d24e0d-892c-4156-99d9-15917011da76",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "394bd503-bcb7-4910-8b86-ed91fe3d0b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9482f6e0-86e6-4502-9103-6287639e2cda",
        "cursor": {
          "ref": "9bfbde3f-500a-44f5-ab72-2e6a71d59481",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a8b5584e-f1d9-4d17-a362-674a560da759"
        },
        "item": {
          "id": "9482f6e0-86e6-4502-9103-6287639e2cda",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "372d80b9-2fd9-4dc0-9d16-602b49010daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc73e62-49e6-4d06-8af5-8a82bac90de5",
        "cursor": {
          "ref": "9274c118-a49c-477a-988b-b64be18c02dc",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "19589fe1-c3a6-4ad5-95b7-3a62be070221"
        },
        "item": {
          "id": "4cc73e62-49e6-4d06-8af5-8a82bac90de5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3040b5b2-d2aa-4f57-8813-072ef17f5cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6072680-d1a7-4c2c-bb45-a642b8b4b707",
        "cursor": {
          "ref": "9c58c77c-ad7b-459b-be16-2a0b11b3e4db",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "873ba89f-eadb-4c81-8e6c-49f43d8c7e9f"
        },
        "item": {
          "id": "f6072680-d1a7-4c2c-bb45-a642b8b4b707",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f38068b3-9164-41ee-8f96-3129134c72d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4a5dd7-ad44-47cb-a1e2-4e55191e3fa8",
        "cursor": {
          "ref": "f5c325b4-ca71-473b-b8a1-aae52f9fb07e",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "888e504a-bdc3-4b1b-a8e8-644075fb60e1"
        },
        "item": {
          "id": "0b4a5dd7-ad44-47cb-a1e2-4e55191e3fa8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "eacf5fee-f749-40a6-b8f4-f628a2026db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b493be-eec5-4dbf-80b6-2ca0edd18d32",
        "cursor": {
          "ref": "56225342-471e-49aa-b91c-aaa3a63a3bb9",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bba09df3-5b0e-4207-9e2d-ca81f03ac0d1"
        },
        "item": {
          "id": "63b493be-eec5-4dbf-80b6-2ca0edd18d32",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1d9efe5c-ed18-4adf-935d-0cbb13d8c7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0933b82-0b10-452e-967e-a521babfb538",
        "cursor": {
          "ref": "385509f9-f07b-4ce2-840c-85abf4bfaffa",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0530dfe6-f570-40a2-95da-c4e16162b06f"
        },
        "item": {
          "id": "a0933b82-0b10-452e-967e-a521babfb538",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "73d4baaa-a0d0-41ae-9fe0-24e02d360174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c935462d-386a-4324-a3bc-22df3996b967",
        "cursor": {
          "ref": "92679d68-a8e0-47a2-a299-63379b88cfcb",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bfb3f1ce-e18a-42f1-a6e3-56185ad2e4cf"
        },
        "item": {
          "id": "c935462d-386a-4324-a3bc-22df3996b967",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7eaa734b-3fe9-411c-8c29-9eec92bddf7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bebaa32-8a4f-4395-a16a-811ef393e9bb",
        "cursor": {
          "ref": "6bfe2b62-08e6-4e08-9f11-6584781b28b2",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2e7248df-609b-4b58-9f2c-fc3d5509e136"
        },
        "item": {
          "id": "1bebaa32-8a4f-4395-a16a-811ef393e9bb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "45699371-925f-4758-80bf-b4a38ff475f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11307429-2e78-43ce-b546-77ad60d8262f",
        "cursor": {
          "ref": "c2680ab2-b163-4870-a08f-07c9d92b217a",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3cd48abe-a6b4-46ba-b4d5-860a56a79c2b"
        },
        "item": {
          "id": "11307429-2e78-43ce-b546-77ad60d8262f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ff1ab873-5e08-476f-b5b9-4dbe0ddb2cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f463ac-faa3-491d-9595-d2cc8fb2ef3f",
        "cursor": {
          "ref": "c6007e09-e80e-489f-b501-91331eac0675",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "646fe548-e6dc-4973-b924-80a03935bfc6"
        },
        "item": {
          "id": "74f463ac-faa3-491d-9595-d2cc8fb2ef3f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ca80e8b8-f16f-46de-beec-2ebd9166a57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a76c9a-3e69-43ae-971b-701cc81811e7",
        "cursor": {
          "ref": "3d02db31-6c03-4dfb-9148-0019bb782619",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "69afa6f2-99d8-44a3-99a7-1c8e93880b4d"
        },
        "item": {
          "id": "55a76c9a-3e69-43ae-971b-701cc81811e7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "313513f5-a6b7-4268-8dc5-2a92017eb11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51341d88-5335-459d-bd0d-969fef1cd69a",
        "cursor": {
          "ref": "8ccdc7f7-68ab-4009-96aa-ba4465f1018e",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f0f3280f-a917-47f2-aedc-e2d6a400aa79"
        },
        "item": {
          "id": "51341d88-5335-459d-bd0d-969fef1cd69a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "deb3a74b-c0c1-4c6c-8e5a-b64e75fd1acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93e1313-6fe8-4236-a5c8-476e76327e87",
        "cursor": {
          "ref": "92c18499-0597-4c84-985e-e0c4760550a7",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "520c5446-561f-4623-9ac5-9bf7a4019610"
        },
        "item": {
          "id": "a93e1313-6fe8-4236-a5c8-476e76327e87",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5494a443-20a9-4b83-91f8-2741528e7677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb35a723-2463-4b1f-9f2e-d307bf8a8543",
        "cursor": {
          "ref": "1c74372e-8de9-4889-9dfc-6dbb623c34c6",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "43e84dcd-20ef-4778-93b1-cff495087c5b"
        },
        "item": {
          "id": "fb35a723-2463-4b1f-9f2e-d307bf8a8543",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ecec96e2-1860-4ed9-be78-37cd1cfc9af6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "2344b0ac-4e64-4397-a499-566da60411b6",
        "cursor": {
          "ref": "dfe411ef-62e7-449b-b32b-9b4f6a49bb78",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "277e5405-3d95-4f09-b6fc-a597e01d380e"
        },
        "item": {
          "id": "2344b0ac-4e64-4397-a499-566da60411b6",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "01bc970c-d459-4721-99f7-56f05e8b1c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1198b7d1-314f-4e74-b518-fa9a62625184",
        "cursor": {
          "ref": "5d1f4238-7558-440f-bf4f-6da5f5208897",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dced69c3-1a54-4af2-b9ee-4b4e24366c08"
        },
        "item": {
          "id": "1198b7d1-314f-4e74-b518-fa9a62625184",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "37084263-e441-4d54-a05f-c58d9441972a",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b795131-f233-4806-88e7-5d8d7f5daece",
        "cursor": {
          "ref": "fe25e1df-83ed-4c7f-88be-b34857c9aaa2",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "19490e17-d442-48b2-8062-c9fc54a8d916"
        },
        "item": {
          "id": "3b795131-f233-4806-88e7-5d8d7f5daece",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fc61a8fb-4a31-4a42-835c-e443e597bfd9",
          "status": "OK",
          "code": 200,
          "responseTime": 2158,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9b2cd8-1adf-4187-b796-615fad5b7b3a",
        "cursor": {
          "ref": "c3c05cb1-fc3b-4beb-bf30-4efcd59809b7",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b5e3779e-b0cc-4f1b-a74a-5a271eda3f99"
        },
        "item": {
          "id": "0e9b2cd8-1adf-4187-b796-615fad5b7b3a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "049f1866-c7d1-4d5f-bfbf-ac0a67cb6de6",
          "status": "OK",
          "code": 200,
          "responseTime": 2425,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e04fb7-da89-40ed-900c-51ddcc193b53",
        "cursor": {
          "ref": "cd49a70e-a086-4349-af0d-dbb1dc49a3df",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4de39ec5-0f41-48ea-a020-3229ed529122"
        },
        "item": {
          "id": "23e04fb7-da89-40ed-900c-51ddcc193b53",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aa36e184-c29f-4de2-a500-b27ec94bf37f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "23e04fb7-da89-40ed-900c-51ddcc193b53",
        "cursor": {
          "ref": "cd49a70e-a086-4349-af0d-dbb1dc49a3df",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4de39ec5-0f41-48ea-a020-3229ed529122"
        },
        "item": {
          "id": "23e04fb7-da89-40ed-900c-51ddcc193b53",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aa36e184-c29f-4de2-a500-b27ec94bf37f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "23e04fb7-da89-40ed-900c-51ddcc193b53",
        "cursor": {
          "ref": "cd49a70e-a086-4349-af0d-dbb1dc49a3df",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4de39ec5-0f41-48ea-a020-3229ed529122"
        },
        "item": {
          "id": "23e04fb7-da89-40ed-900c-51ddcc193b53",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aa36e184-c29f-4de2-a500-b27ec94bf37f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "df92d890-bceb-4ec1-8cc8-36a70ec9e2d8",
        "cursor": {
          "ref": "86f66f47-30d0-4b02-9aa4-bd6c48acef55",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "949900c5-7c8e-4e77-81ad-18a552e63b21"
        },
        "item": {
          "id": "df92d890-bceb-4ec1-8cc8-36a70ec9e2d8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6e9c1cd0-58cb-4553-8545-e87708abc7a3",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "317344e9-8895-4cec-ab40-f910fcb6d791",
        "cursor": {
          "ref": "f605b345-29a4-4df4-8be0-1a0634ba0e76",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "76f7c0c9-48ed-415a-bf82-e32f3bf9350d"
        },
        "item": {
          "id": "317344e9-8895-4cec-ab40-f910fcb6d791",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "38289ca2-010e-47d0-be03-6bcc5ee37e92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "317344e9-8895-4cec-ab40-f910fcb6d791",
        "cursor": {
          "ref": "f605b345-29a4-4df4-8be0-1a0634ba0e76",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "76f7c0c9-48ed-415a-bf82-e32f3bf9350d"
        },
        "item": {
          "id": "317344e9-8895-4cec-ab40-f910fcb6d791",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "38289ca2-010e-47d0-be03-6bcc5ee37e92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "3f7f8092-d963-48cf-b0e4-2ac797a90454",
        "cursor": {
          "ref": "2a08c005-1ede-4334-94a9-61cbcaf5ef2c",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c095348d-2328-4de7-8d0f-a3265ec6f281"
        },
        "item": {
          "id": "3f7f8092-d963-48cf-b0e4-2ac797a90454",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "15ec6fbd-376c-4357-af56-03db5ef514db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 163,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "025fe3b3-8c98-426f-89bd-d774d23163f7",
        "cursor": {
          "ref": "6827ea3d-f766-49bb-af07-00d56076afa1",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7d18757b-93f5-4c16-89eb-fe0655b9300e"
        },
        "item": {
          "id": "025fe3b3-8c98-426f-89bd-d774d23163f7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5f4614fe-b6be-42ac-98d9-54cc6cba3c97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "025fe3b3-8c98-426f-89bd-d774d23163f7",
        "cursor": {
          "ref": "6827ea3d-f766-49bb-af07-00d56076afa1",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7d18757b-93f5-4c16-89eb-fe0655b9300e"
        },
        "item": {
          "id": "025fe3b3-8c98-426f-89bd-d774d23163f7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5f4614fe-b6be-42ac-98d9-54cc6cba3c97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c7cd9d5f-5573-420a-8b48-afd2d0973fc4",
        "cursor": {
          "ref": "05c47a27-3520-4558-9a72-798472325bd3",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "305264d8-afb2-4cc0-bfc7-88f9b2fc75d1"
        },
        "item": {
          "id": "c7cd9d5f-5573-420a-8b48-afd2d0973fc4",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "07e7c33f-60cc-422f-9302-883d8745ca07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}