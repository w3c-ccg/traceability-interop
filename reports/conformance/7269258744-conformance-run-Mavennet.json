{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "33bd3b23-d34d-4142-8448-fd687da5a6b8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f8d6f15d-49f1-4d57-97da-cef86cc848e7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6231c722-e86c-44c5-b18d-4510c69c5b6d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "307aa623-b875-4b5b-b1a3-dfb54cfad543"
                }
              }
            ]
          },
          {
            "id": "51167e73-3e2d-4c28-b927-1661ac6bf43f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9661ae12-e410-4538-9ed9-90c2ed1cfd5f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5ed7024b-2589-4878-a393-d003898e4c74"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8a886901-bd24-4cb8-89e3-7302a90e424b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1fa28565-9588-4c05-aa55-eefbc4fc70de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "53110484-f00e-46ca-b2b0-fe6ba2843e10",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1c904e2-9716-4ef2-8201-2cdbfb911133",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1de84d2-c80e-4432-af25-fbfae080fdc6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b68f5d14-e2b6-42d0-86d0-20e36d8c5cd9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2a679a6f-7033-402b-bd92-37c0446f8a16"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a9386332-66b6-400a-8c90-13fb77d0f164",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fbf72402-e613-4743-a209-5574fd9722f9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "254fc030-bcf9-4ff0-a7f9-ac30c12e9eea",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c7a714f7-d85a-4e2b-98c5-0dc36d31af37"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87f27a2e-b1b5-45fb-a6cd-beedc20d3e32",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6dd3987f-562b-48e0-b999-0831b0f13153"
            }
          }
        ]
      },
      {
        "id": "bcd2e72d-fd62-4779-a2a3-d2276040e704",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ae3fefda-6386-4d58-85e6-d2cb2074fea7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3bc90399-abcf-4d7d-b70d-743ab84aa127",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6ee5e553-46a0-464c-82e8-472a3e883818",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335d6759-d810-494c-9de4-081f947d5088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24d646f3-7c2d-463a-b715-42cc1583be40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef52fc61-d21a-4894-ae0d-972cd153fd0f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc0ecf0-1c48-435f-8e85-f18b31102aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "204c8958-9767-46bf-8b67-1d595b616186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff814f7-6963-4cd0-a430-2f34a1ec1228",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05de36b-7826-4891-a32b-0ca9650c9eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6673fbc-f20f-404d-890a-a0e83bcd12b5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4e196726-3220-4aa1-a1b3-6503b478c53c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "332c937c-3438-44d5-b2f3-208df63043c7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce75dc4-f875-42eb-a4e4-c053ea6cdd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fa42e8b-8c03-4f13-8235-4f148cef0ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f9448b-df95-49b3-9805-8d6a3e58728f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0a0438-fda9-4b2a-86b1-29b8bb11e976"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0bf6c0b4-2f1f-4739-a881-4df53303181c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9aebdb47-063f-4b13-b113-c4dba462066a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc978a81-22f8-44a8-aa20-6ea3a56088b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "50cbadaa-dcdb-4804-8317-994c2e160e2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f50c2070-f93e-4609-b738-3c531e39a9ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6d5cb36c-572d-4bc5-958b-c0bb0f032e2c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "659b9b15-1e73-415e-b7ec-26dc17926386",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "516ded5b-9889-42d8-a271-ca0e1ef9164c"
            }
          }
        ]
      },
      {
        "id": "f8d27bc4-f98f-44a6-bcfe-ef4271eef652",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "223fa117-6c00-4410-b39b-00e7ebe2adf8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "498b8e61-4a5e-4959-8428-1af71c9d1f05",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8d0f7651-cc12-44e1-aad8-d9e03b5fb15a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad5968a-893b-44e4-8918-130b87cd2197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0475863d-567b-4cda-b492-5f8a8144b39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d0044e-c1ab-40ae-b226-c5a4421e3779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "855c77ff-bb98-45f0-a4c5-5ef57008be1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00acf77c-734f-40f9-b5b1-aa512bd84bc5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae3715f-d20c-452d-afba-189c28a0ded8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36045f9d-1e45-49d9-835c-81fe2a44da95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0363a89a-c56f-4d50-8551-844ae78c46ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbf7f9de-0e94-446e-8dec-9009ccd1903c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafc8400-f6b0-4ca2-a3f2-1375a959a236",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72facda-5cc1-4864-8809-529aa6d6049f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa4dfd7b-f752-413b-9eda-83cddacf7d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbd87fd-986e-4c27-8980-89815f997f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86b99158-c3b2-4561-a841-a4d701051b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3773df0a-cc65-47b4-abee-f273b66aeed6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c0bef1-a704-4435-b328-d12b901785a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b440f43-38d9-4cdf-b7fc-ca8508ead71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49546c15-1f2f-43d1-9541-5afb6f9e52cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5c350fb-1a28-483a-aa26-92345b4d4c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127d568b-2f2f-4266-b8b2-77f99afc7df2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce787db-c7a3-4261-b289-c4d5dfa9504f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff513375-f3ac-469e-9304-d47b2f355849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1b4aae-7159-4cb0-a076-1c72bd75ece8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01e93d00-120d-4cdf-908c-042aec7f72d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bcf941-bc3e-416a-852f-8f991c147fea",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54929e09-7d69-4664-a73b-3f57e87819a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44221ea4-de5f-483a-9cfa-933c26fe901d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111efc5b-9090-4e5e-854e-bc859bb5d39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59107f07-e87d-40d0-ac23-b1617fe4cb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8758fb5f-7483-4919-88cb-1516024d65c9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8fffbe-7e4e-4fea-b799-a241a9d6180a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3934d7f7-3239-4b42-b422-87a0ec11c58e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3249a76-6aad-4cda-831a-a71c17be924b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ee05a7d-a60f-4271-a6c7-639ff0756c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38851fa-6f53-4d25-abe6-6f1afc210555",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a4f095-3b45-4449-832b-968c32f3e2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136cc33d-d582-4156-88e7-95212845c99e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ceff56-bd7b-4937-b4b9-58f9e44b8ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34ed8a53-aa71-4b2c-9949-c6ee7fa27ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f744e530-e551-4db3-9ce4-15f5cea66fa9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f643818-e9b5-4fdb-b8e3-aacab4500e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd890ba4-c31d-4cb0-912e-9d324955d9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b1d313-cd2d-4474-98d3-fb1fdfd6144b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93d1a8cf-4c7d-45cf-a804-e8c8689ffefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e29d9d-5499-47f2-99e4-dc6de180f5c7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2262b0-ac6d-4571-9e73-1c0237bb2704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5267eb-0b00-4c52-adce-30ad0ca5d0f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ba36d5-3885-4f4f-b339-a7889066979c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1c1f5f3-9177-456a-a821-8a164cc60933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8860da9-4373-4f1f-8e9b-aa1915048c70",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61987c0-7cda-40b1-ad7f-27a67ee4747f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468b8786-6235-4215-ad0d-dc23b26a018c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb0c35a-87a5-4313-8e87-6f94913b086b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60b72b66-d93a-4e9e-893d-8bebf77560f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed52a5d-bccb-4622-b51f-29c50267d940",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e677764-9c8a-42cf-924b-8ee15c31a541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5709dd83-b2e2-492f-9893-e7bdeae76a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db06dbb0-5dfd-4b52-859f-e7635855e09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42722e53-6eaa-4b6c-8a80-bf7f23651c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3993a3fb-51fd-4852-8026-56f3c2e4bfeb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ec207e-4751-4edc-974c-6b29069dbfdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4acd5911-dfa6-48e6-9d6c-a0dd86cd4f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d4ccce-688b-42b8-87f3-b99dbeb746b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "246fbeb4-b280-466a-a77b-c769df29b6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed472219-9395-4307-b00a-a4a6adf9fec5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b8a85c-2935-43b8-8656-d22cc089cdbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a50c12-de41-4571-a953-534ca90caa59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ee2a60-18fa-4d99-8f85-c4b2d1c68dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad739c77-6578-41fd-b1dc-15a965fc4512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a47e37c-f81a-4e3d-b7e1-d08efc2a4810",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d214ce21-0b3a-4a18-93b3-a0f4b7fa52d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21077e95-3f9a-4c40-b062-706114cc6759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a76ad8-1936-43e5-b09d-8814bd7250a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f1f3490-b06f-4f29-858a-4ed47e4c2b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee15a51-6c65-4e38-9c40-b802884af29b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d34c773-4d9d-498f-9e17-7aa31863e40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11768f95-9c59-4fe0-a462-64235f9f4244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce7201f-286e-4f3b-adc4-2f6e82bf8c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ad4d539-d332-40d1-90b8-671ce14a3b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35cefc6d-25e4-4a3c-bf7f-597e0e19ffb5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c47dd93-cebf-43a1-bdd0-94a487aa6934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483765f2-0317-4dbf-a6ee-d0d1c2460b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0613904f-8755-43bb-b885-7d9c679042d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afa268b7-1c27-43a9-9a42-52331d5b7e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5814b539-4cfd-4022-921e-0987cfa6b663",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079a5b1e-2d41-48e7-937b-10c06e6be4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4574efcc-37e1-4781-9ef6-d0339985d6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0563ff-4d13-402c-ac26-e306e43e2d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cdc17ea-c741-46ac-9ea3-1af665bf1dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91376b5-fd34-4aaa-9b3c-5a6223a03577",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c0cd74-8384-40b6-b07d-b171c26112db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "315935a5-09c8-464d-b079-a0e108807e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7b9d39-6bba-4786-b9fe-997439bf515a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d43db0-414c-4c7f-b19c-6a0ee8d54814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7da0f91-f53e-4169-a0ea-e5a02bea3799",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9216bfa2-02be-4172-b389-5dc6c89f0038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a4b74a-65cf-49b7-ac90-11ec0f44c8c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5871b6e-9f2a-4f05-8f18-4ae403678804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47c742ae-6afa-4170-b0cb-d4965954b0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e119db90-7c5c-4ba6-8c3e-df0b1ad3e380",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e61def-8d2e-4585-9fe0-a47cf59b49c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138faec3-b346-4c47-8ed0-2d130fd5c3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625498d2-3930-4e65-8b11-c940d6f8192c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0111c373-a312-4cbb-a54f-592d8c46058f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe640e31-a6f0-4398-b372-ea293f3b41d9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e426baa-c80c-4100-ad96-71f807153c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30fabace-3536-497b-a4d8-9fa1e6b54dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f8c9d0-cfae-4e85-a2b3-54d12514dd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e5d594-4ddb-4bfc-aefa-f91cc31c7a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92da221c-5b48-487b-9997-40f3aa3ef7c4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1201b8-43fc-49e7-bbc6-dd64621690b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e75b08-2470-4725-951f-accd9f580e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b70899-4fbe-4e5a-8a80-c395ec1af51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b67bde6-32a8-4345-baea-76ee014277a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4982d1-619c-43c1-8382-12d562797e9e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13902be0-01bd-43e7-9447-0dfc9dd28206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b284ab-94d2-4160-929f-86c38df655ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a905ba22-cde3-40e8-bd1e-ee0ff60f2cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d112461-c119-4c1e-af0b-5baa7653152b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0896d64-5653-4bc6-b95b-3e7e48863b39",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75be345a-bf96-474e-959f-6bc3c26b9caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91506b40-01da-40c1-ad43-3ea1115c7398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20d0f4a-7941-4619-b598-055eaa1d623c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c79d2d7-1dc1-4a79-a71d-36d143f2bc1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291e78ca-e851-4eb2-8c83-5092f1f735cc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8233a011-01d2-4a9c-bf53-60cdc3c3110b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57e8780-3a76-4bb0-bf75-cff4efc5f111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9036c1a0-0888-41da-bccb-b6392d3e046b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1bc8ad9-24e4-4563-afd5-5ded6449ce9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca52a85-30c4-4254-8d38-74df8ea31d19",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd8d34d-76a8-46c5-9dcd-5933a09af399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5444dd3a-a0d3-42e6-8429-58aaf0fbd15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b314d6-8b30-4c63-8cdb-81b2e7dc5b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa02bd9-73e0-45a8-b4ae-e86f490ff68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1642e907-8929-44b8-9e27-05b2556c0d07",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc689b92-59eb-44e9-85a6-ce0c41e8f9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a03a33-7be1-469e-a233-888411f2c8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359d51a7-98f3-4fb4-a886-1fe7db70d237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f28a064d-4288-4adb-9a57-ab29d99e2a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac827ba-b310-495f-8ed1-1bf6476e18f7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13bd643f-59d7-4390-b567-b6f8cbdd69cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7206f575-0df9-4af9-a6c2-c6660fe8eeb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074cd47b-fe75-44ec-8993-7d9671c8c3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc10d24-4b8a-48c5-bcaa-d3ce4865238a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d119913-d394-4735-b660-0ebd68a22dbe",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76ec5bb-4e12-47c3-8a53-3c879c80ef1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b550adb3-976c-4136-87a1-9731bab2ffa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c7450d-9517-4c6c-8e73-c7a47cb9d372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "44fd95a3-e421-409c-8b2a-ee0eed7d916b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81d5664-4027-44b4-8371-e220d063ec2c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53eee278-42b8-46ab-92c9-bea4430c406e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee2d5817-2225-4d91-a4db-9a6f1bb72004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db7c1ec-7f1d-4be1-bcae-65cf9bd3fe29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d615f823-0ecd-40ee-b58e-02569a165261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a55786-efcb-4798-9433-e207a7d976bb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7b9430-67cc-41bc-9b59-a910d41d71f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed4ad6ce-813c-4251-826d-c06497f2a7c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b119221c-982c-4202-885c-652d05e5dd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b947e46f-9026-4ece-8d22-c8d31b9ce77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d03e331-8b87-4a4b-aa32-31ef6ad1b48c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b5aad9-6b15-4431-99dc-3ee9fda2d648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533e4dac-0960-4874-8126-2dfd1d83c8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d55dad-21ca-41db-838d-f6a01a4d303a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf789c7d-3fae-4443-a9ba-c3dae53ca2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f372fa-c91f-49ce-b29c-905ee41f8471",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a20915-6994-4aef-ac4e-0b4fa51321d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5636a32-7208-447d-86d7-c4a07a058688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013ee97e-1255-4d9b-b9a6-5cdfe6a1c0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c0b291-8353-49c7-bb79-8d122ff4ce05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45934b3c-7fa0-4c4b-9b54-395597e27c1e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e7f540-bf73-4a27-8d53-06e2603863f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d925cc1-50ee-40ae-9743-50f66608e051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a890d30d-c15f-4b12-83ea-b1baf82c877b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3e6e8a-c520-4212-8572-5ca1adbf5f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59164e10-3525-4f03-9204-0e97c3f73e09",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f251119-97f5-4be3-afee-95db9cf2a69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8a1c5ae-f9f6-42ef-b7b2-de9ac49de963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147bc292-e6c0-4dbb-a4eb-f476335f6c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba57bf2f-2b35-4ac0-b4d8-c36ffccfd5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7abff9-01ad-4772-bf42-40bc1cef6384",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7fd5f4-3ebd-4ba5-b022-8b8f75b1a9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09f4241-3a0f-48cf-9276-53e773237f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0c34e8-c581-4821-9ebd-a702b79b26d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d8d46c5-5efc-4f89-9a51-013d4d4e5046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6d0bfd-1b0c-4f5c-9fe1-9fcb72c630f7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9230ad62-d77b-47c2-b938-a4787498cb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480b0ce2-8e6a-4e71-9dff-d50eee55b887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7402292-089e-4f75-bb7d-9f73446b96a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e7e2e20-3024-421d-b951-cbc18906b29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738304a5-ec3d-4d02-8b4e-96663dbc063a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14d3bf0-0bbe-430a-87b5-ab9de8dd2600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f4733f-edc9-4838-9157-47f6f65793a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c453d9-02d9-4641-8a80-c71544249118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fda367d8-7ac5-416f-ad97-7abd35c5c3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916c7707-440f-4b4e-840f-3c781284d2cb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960e99f6-aad6-4dad-bdc6-f857092e3583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09b3d41-7132-4b98-afca-b3ba7bf75a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfc6ee8-d139-4254-9268-0603d56b6f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "072d0218-afd1-4994-afa7-9516589c8715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c777b92e-1ea2-40d2-ab01-19ea9a937ed3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c046d5-14b8-436a-940f-a70c2faa7169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18aaa9a-7e10-4991-9cb1-53edde3fd91f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf4889c-b4e8-4f96-958b-3cc4381cdeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd68c85-08dd-4468-8993-d06d7e01a211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e1b4cd-0f5b-4077-ae5e-1b510f229df1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a030b07f-3d42-4cae-b7e1-86bdb2f5331a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd8c234-5084-480c-8f17-40b93f8ac6c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68e7906-9db7-43f0-9bcd-7b57e3d1b52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "66c1aa57-8cfa-441a-9707-942c5736b5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71a8731-18b5-4ca5-8376-bd473e7d1d48",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51675487-3309-41f6-b306-93c330edeb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c3f976-14aa-407d-8e1e-ee9ec8bc8906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33628c3d-e394-46da-aeb6-6c1b73c32602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b15d531-8ee3-4bd4-98fd-457e2f035080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc624316-0254-4a75-a853-ba15dc3b2193",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04657627-c599-4eb1-9a85-201405ddca19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b30ff62-e70e-4dbf-8fc4-7d65321a76c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdcd5dd-27db-47b8-9377-9e4d8781331c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "12536937-19ab-4f8a-b480-9af2e9b18c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400ef7f6-5ded-4841-8790-964d090fa1eb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107ae370-e91c-499e-9444-7aede83c77f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9962d974-8690-4d91-bcaf-8de1c9952fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693941c3-71f6-444a-9b19-9a146285e7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bcab40a-8cdf-4aac-bf81-314fd89c6c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c564675-8c27-4675-8572-4df749b795d3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52cde0e1-116f-4eec-bdee-53c925cf9eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47879c28-9a6c-41ee-864f-285d9c2039ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b3ef49-498b-431b-952c-2f368e227e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "660f14e5-30c9-436b-b985-44f831b68165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef4a15e-fd42-45f4-99e5-2ffc0644a0c4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aa00d6-d6f5-4197-815a-e4c71bcd0c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7461daae-d491-4543-b0e3-7679455a269a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae18fce3-f770-4adc-b128-d32555d82182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cfc86b1-f05b-4b28-a0bd-9641dc3273ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58255fb8-99dc-4d7d-9ca0-1089f8422c4d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ea4304-c3ae-432b-af11-16d4301f781f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a04e19-025c-4e13-9582-5ee2e0d6d0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd15b41-fd88-4523-a024-d2eb8b2254c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a47e0372-f5a3-40af-9cd5-b7a9eec9d345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9e133a-cdb8-43d5-93c6-0983de02c1fc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81ac5e4-5f24-4a43-8cd8-5886b6fe0e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56f07b5-f7a0-4a02-9d9e-b124bf542479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1987bfe-db66-4002-b1f6-d7a0363964b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4249a6ca-c4d2-4487-b202-d64bb53909ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e82e88a-b77d-44b1-a891-2642f4565833",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6685b8c8-9c6f-4c95-9723-c7bcc1d83e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc9d021-1606-4d6e-866b-33c95a33d74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f811ed-ba7d-490a-ae86-c8381259e02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2ecc2e-377e-4643-8e3c-01e089cc9f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5b7964-7b99-41c6-9b31-0d67c48dd9f0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf0549e-dea4-409a-be7d-c4681bc17256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0203a2b7-2aec-4c28-a33c-6e8ccbbd59fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c520c5-c161-4bec-8e19-45f875ebc4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cfce0fa-1721-4bb0-8536-96ed87e2c8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6bfbb8-4afb-4b2a-b765-d34b70f75215",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed1d815-21b9-46a9-94af-e0ea51bcf0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496d1bca-9be8-4844-8601-89db77c36fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7626b5cc-cecb-440a-ae60-9a732df97234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb932cf-dbae-47e8-a2d2-99a2cf23917d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9353e6-ed36-4b58-96c7-a50072b1a8b0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea85a7d-86ee-4bd9-a1f2-735a81b52ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf384b32-2dd7-45d0-a8cd-cff516ea14b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafb3c03-147c-4cab-80f6-3dc6f653303d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7a30c27-eb53-4e61-a8cc-2179568e3953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efc087c-8647-4ff0-b8be-2bcf4a676e99",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8beca440-8d25-4e5a-9dff-b894619294ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab7ad80-2685-469d-b000-4ca2909e2feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f6ac9a-49c2-4b31-ab78-ea7d6bdbd9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0203a961-c1e1-43c0-8f8d-e2e1de63cbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea594c7-3e24-494b-ac8b-e43369a19bd4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab457a7-6ac5-4d49-b240-4e500ea21cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0be989f-5ec9-4cf5-93f6-15b267313cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85595346-e544-4836-98eb-9f84b5470874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86609205-c772-4460-9a69-b3eafce6c81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6050e3d1-4ad4-494e-be03-bb9c5a92dfce",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c18427-fb18-4a1c-b00a-6a4e4fb98637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7710fcf6-831a-492e-87d8-503f952a87ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5350f09f-c2d2-451d-85e5-084b601622d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2b263dbe-061c-4a1f-92de-2d57d55b5b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9680adb-0c25-4331-96b8-11c2f103b4aa",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962ddeec-a39c-4636-82e8-e8fdf4323e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2e8608-19ec-4077-8164-488bbc09ca86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c244cde6-8c8b-42ad-8d9e-a67b32da54ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "be521c95-1da2-4a74-a9de-b1437c41237b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e271b656-3a2c-4b57-aa85-9c3bbd35d9ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef66e7bb-b307-495f-9c46-492fb9ab1e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3d7319-3b78-4645-9371-22fe246e6259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31cfef7c-f0d8-4fc8-ac9b-de84bccbb0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f00d5a-aea9-4521-b1ad-ee088f395437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cc4202-b232-409d-bb5c-6285d9df861d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484b1962-786e-452d-98bd-52dbce92a81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a650d7ad-0bcf-4088-81cf-bdc6ea926b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42c953c-5e9c-4d0d-981a-7e896d590ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb95e9b-cda8-4354-9f24-4943e979fd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc3a9de-c8c7-4acf-a310-be7d9ea956f8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a30f03-da8b-4ac6-a18a-51c6e42fe28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "702dffc9-dd3f-4c16-b477-d56bae8ceff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ca0b0c-ff54-461d-b8ed-a63e6485256b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d072712-67dd-45de-a5bb-5b808a46fe7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8f2df3-18d7-4cfd-a488-cab2e9d43458",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d55b294-7049-448a-b3bc-2acbb1e786e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152c7480-5585-4fbb-b83b-60d535a100aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac3f1b8-15da-42ec-b83f-29d58352b3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dddbe7a-eb3a-4247-9a59-f82a67ac48b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ff830f-8a6e-4690-9c8e-e3138fe20b03",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbef0a40-4a45-41cd-962b-defa8c3ab1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66ebc25-1a84-4791-9570-1120282f302e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ea1b0c-7d15-4a35-a925-2f4e4ef9852d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "198bca70-33c2-448c-99b9-df9e1109b844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc4ee4d-3c20-4e62-900c-b5852adacd51",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2154ff6-def2-4520-8fce-2d2c5aa4a1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571615a0-266b-44b1-a0d3-00bfe3f51c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97af01ea-e60a-4473-9e01-e9f8ccf2044c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7181c9b-b7a8-4471-a74b-f2efda33153a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59805c8-218b-4179-b697-810921627a7a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35323d32-cbca-4764-aad1-919ee4a6df6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3417ec3c-e766-4649-a1e9-f474bdc3965c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd36b45d-6d06-489a-8f9d-19536f9a1f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "590e55cd-d5c3-4683-b01e-ddb2b44a05b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859549c7-ee4d-4622-9f3e-50613b8c712a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ade793-67a5-492a-9c96-493c8f9834ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a1ecd1-3e08-4faa-9bee-d7db2dd3a643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307129a7-545b-45f0-81e4-892f8f5c67f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20f403a5-bccf-43e7-ab1e-c216bc75c9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428189b4-4f74-4f91-a6f5-6614c6d49036",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4694db8-f529-46a3-a07a-81ce3dba4a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e8774d-95df-4636-bdff-742a34dd26e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c82d866-d74d-4c2e-af11-f8db06f05758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66ca1c20-044e-4bed-87f6-4656feb72032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5484cf26-6750-4499-95d9-93e514577385",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef7aa3d-1a62-4f18-822d-5d7bde6df5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1143a28-abe6-420a-94ee-cacf309922b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bc70d2-ca95-44c3-bf79-01237dca0175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01517ad5-e188-447a-bf10-531c59a59173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d16f2db-df1a-45a1-908f-67f083680e47",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901860b0-b68d-4141-9f00-7da4794ebfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b19c32d4-83d0-4d04-b99b-8f39f8e2a428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffe3b6c-b30a-46d2-8422-5ec5dfb6381f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2b378b-7d28-4e02-9613-ecd92449022c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5855595a-52d4-4bdd-ab9c-c07ad8bc0952",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f064516-3515-487b-9e8c-0439161c7fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce15ebd-d8da-48a8-84bf-e84cecc21941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f5ba01-7038-4efb-bac3-87fd83026631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8726573f-ee83-4957-8fdf-6d77dee606b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f069bb-f62d-4333-b9fc-2945245d6e9b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880e6ccd-7167-4d0a-8117-1c3e381ea68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962d5112-dd28-4126-b933-528c7c765a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81ecd1f-b4f5-4dbc-8260-93b7ceecb8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee521220-0969-4408-b4cf-cda73dea43eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d338bb-c9dc-4dc4-a1f7-b52202d52462",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa385bcf-6c47-4e2d-8ae9-c628457c17e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5125a2b5-686e-4a86-896d-ad5c921ac337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4011b5a-fcea-4410-a20a-afed2e10f048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f480ea-0899-4f12-9222-389a9b61a19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da43a4e-c785-4be6-b01e-a0afc556fd63",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e4ef14-ad25-4fbd-8eee-a9ff2e4453c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5613816-86c8-4f17-b0ae-39d23f1e8758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790c899b-ef80-4b58-a58a-13e0fd274124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac0b194-d35a-4567-b38e-66995831aaac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62f8e9c-0f3f-4b81-8b71-f674c759f2c3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314096ba-cff7-43a5-88fc-7df7483d5c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09f8515-243a-4515-894e-9382e09b3c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ab378b-7d0a-4417-979f-f15aab0f5552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5df18182-627e-4745-a1c4-b1ccd2c14669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3aa1f5f-57dc-46a3-bb3c-eb187728b75c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd7daa1-d85e-499f-b17e-efae6c20f8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb521bb9-6edc-408a-b0ad-88ea8f702a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8823f064-3943-4597-be64-f863ac383fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db7ae097-b7f7-4a9d-96f6-9580f9aaf5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445d7728-9deb-4f73-b21b-7cfcce82d4bf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d6241b-5c77-497e-a05d-179b604aa8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d8a3f4a-5284-426a-b259-3f1499fef5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc6cc10-d247-429d-aebd-a4a7029d6534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ea7233-08be-48c8-b858-d8af6825e4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63432d46-cac6-44ac-84a1-f5e32d15864a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a445c0d-b305-446f-8025-0ba3db68de26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14679446-0e5c-4be9-95cb-2aebc8e3daff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db55b0a-874b-4445-9a95-0c9d6d3725a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06abf722-88e0-4186-8646-e4df341de620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de554154-fefe-4c9e-b305-1d4b30555c33",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28f9cc8-87de-49e9-8223-4f96c5179a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c09358e-06c5-4c13-8a14-1b263fcdf329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2986ad71-2939-4f25-9bb2-61d969ff59eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2fe11e-96e3-4486-90b9-c6e56d827886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6290bd-c3c8-4f46-9d9c-392f9cc9070c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fd8d99-8a75-4674-b15c-2d8432a4e40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0271400f-dcd0-499a-8942-f221da076815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35381ca1-7bcd-4055-8fea-3b2d848212bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3937723e-f2c4-4012-aefe-6bcae6f884fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8229082d-95ff-411e-bdd6-abab5c5c73ab",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520651b1-5603-415c-96ee-987bc65f6548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f9e307-3622-43f8-b1e6-9f127344cb4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33c05b3-9cd4-41a9-a9eb-7e5f1ecb1326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5298e5f7-adeb-4481-b413-71df62e6027b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9011f8c9-ffe3-4084-8a9c-2f4ef4bb142c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f8d497-80d7-4233-b2ec-e4aa8e3e837f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7531f4e-abc1-46aa-a68b-e1c26e2b76c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44d3aac-f345-43e7-89a8-760c5740cfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a82906f-b85e-4441-9afc-8f37fe57725b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d23bf52-5cf7-45b4-8ac1-6d2620bef090",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d473b192-7ba2-451d-9db6-6151f1f8afe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0a5986-d874-4f3f-91a5-1049ca069efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd7a112-14e3-4012-8bc1-6521bec2ba54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba14ac16-ed09-452c-a21a-aafec14f078d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28144e91-4a8b-4468-b4ce-344ec92e54d3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919068d2-3a76-43ad-a7c0-2235ce180615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5dbdc9f-7d7a-4b94-aa4e-2b0fba6138d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4318260-d827-434b-92b6-4c3785254406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b535b3-77c0-4771-8524-4243aa351738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ae3fa1-7797-4d70-b464-88ff879901ce",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef302c3-a9b7-43eb-8197-fc1fc180b477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92a327f-0fc1-4fad-99b3-a4a696cc8269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0d6acd-a3a6-4c7c-9d5d-298c41239813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4da9cce7-f9e3-4fba-b677-804ce0e30d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e3e50f-144f-477c-9f02-958fd0c0bdb5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380337b3-a053-4e88-a422-d1a68ad6ba02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3410492f-111b-43a3-ae3b-ce9ff5ca132d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b55bb6b-04e6-4182-9ee9-ce5bf0b1bb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9a6c81-dd4c-40fa-8fa8-ce7f3098363d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8e797c-8bca-4b90-897a-4833b718f91a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba3c830-2f39-4e73-8f75-e8470e92cdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baab6fa5-3353-4dfd-b291-12595de4dd5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a540a6-5870-45a4-b59f-9b47955051b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf788cae-3819-46a6-88a5-69e92f9017cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aafdb09-7da8-4978-8788-cf7e5e2b3717",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc32837-5300-4037-84d7-e515d6c91412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf40e79f-3774-4eeb-ad32-7e3df251eb68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80aa6c2c-7da0-48e7-a0eb-cae2592ec3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d84bc7f2-7e86-40b0-aa09-f1b37ed16751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a4cc3f-6561-456c-9b53-de42a4421400",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0d40cb-487f-47f7-9dbd-7efdf4a24326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef285d09-0c09-4cb1-a578-9366046436a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77992265-2182-4351-b4a7-f60481fc130b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c26146e-b897-439f-b055-f5159009a2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d535f5-096d-4ce9-a2a5-9a9dfbfaeae9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898f215c-eb54-423e-b2c0-185c9181c029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bec9e3-856c-45d2-83f0-80429cf86051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c67bc28-deeb-4770-8326-0b375f8cef74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffcf2e80-5570-4c54-b706-3c372abe3f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064e0db3-a258-4de8-b346-b35966bd46fb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b291ad5-254c-48ae-94f9-99c2287ddb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e034d341-4a09-4db7-8970-5c36e3649955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080bf069-01ac-4fdd-9f4d-cd62b2e84d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d02075aa-6da0-4549-9641-fe86f5d6b9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b848937c-4d64-4644-bbd9-12cd72df1910",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add0ff4e-d248-425c-8016-89a6e618ff50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295d0acb-3320-4d34-a0a7-48a81c273cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855085ae-3db9-49f4-b9ea-ffb3728d6daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e015e933-0a72-43ff-8e64-bab1810d7706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827ddc1e-16e4-4990-9a98-c40c1e1c6d5c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e24ab2-bd1e-4dac-a7a1-937cec087f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b207fdf4-77c9-4595-b4e9-a0d7b8ef70ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06aac40-e2ce-4e8d-8149-c6ad22d86a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "384d9f95-c882-4ff3-b8d5-41bfad90d2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a777d913-636b-4bd3-b21d-d69c13c793b0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084a40df-b1af-4d1d-a1e2-ef07a35bdba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "64ea45a9-a468-4a84-a7b4-8fdfb0705f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72645765-b40f-4840-a237-70479285a35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e117981d-1b60-4af7-a53b-fd302a5c1794"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7ee571d2-f206-4448-95a8-fb46d01e520d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c4aa6baa-4b74-4e44-8a46-6e928240e70e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1becd8a-da2f-42ec-a4ef-c1ef97c30e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "388b5ae7-6971-4377-8c5c-f63506013b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129c8c2d-4ab5-4e2e-9ab9-7d712cbaf05a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89ca48ea-ca69-42c3-834d-e364d00a9e47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3a9ac02-b47b-4986-b511-0cf4f437e5c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff549060-3e91-468a-a1a7-61ddef7d3a28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c71c3aa-7d56-4c41-b869-809a9a1327c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c13539f-02ac-462b-bd2c-c0cee387e888"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e4064a50-7631-41d0-aa7c-bf64ec7f413b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc03cb4e-c2b7-4405-b78a-56234ad21abe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "64edaf05-6c1d-416b-9246-ac69c5379ba0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "412d9de0-22be-486f-8ff9-38a3dc72ae0a"
                }
              }
            ]
          },
          {
            "id": "a3311b12-7898-4000-b089-cef0b78eeabc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "227001be-e596-48e9-a4ba-00c5c1e04ed8",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "64c94a11-bbed-4d79-898e-e374d73c0d07",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c07540c-76ce-4e07-b4b9-fe082c8a0a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9d39bcf2-8481-46ea-a83a-b86322cfcf24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345b6ac6-71fc-43b5-9ec9-469e79b90f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4697d04-3534-4097-8029-2cc3f95a9b2e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d8a8a860-355f-49b4-9256-e963442f75ab",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8aeedea-5bcf-44ed-bded-d1294cfac9d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74c7a2c0-c288-4328-9a3a-7ba9e436a042"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d90a8ff3-6b47-4c92-aed6-ffb19a6831c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "66766d03-1c29-45ab-bc1f-b85560879a78"
                    }
                  }
                ]
              },
              {
                "id": "18df96cf-59c8-4aed-93d6-90fda0698d70",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b2d4641-5b84-4d53-878a-8404d4391819",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18096492-bf4a-4b11-9821-948cc6f39c63"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "359f7644-b215-4fc0-898c-b57d2cca7bbd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d46843c9-30de-46a7-8cda-cd42ba3d89a2"
                    }
                  }
                ]
              },
              {
                "id": "9b1f8311-5287-4599-8354-10f3663d1225",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a506a590-385f-499f-91f3-4e1bbaf61ad4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d055fcc4-42b1-416d-b9cc-f627e59c8fdd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ccf8f5e-6cd0-41e8-97a0-e5cd34a324de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ec9654b9-d961-48da-b155-56e9bf1d545f"
                    }
                  }
                ]
              },
              {
                "id": "13f77e2b-76b0-4c03-8929-5b4314dc71d2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35bd3ac7-1d21-4468-bba3-493de5c2132e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5de45e94-6187-48e5-9fb7-244864ea7698"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1353969-16aa-4668-9a0b-7a74a61b9370",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a27d6162-e439-4511-b521-d84944fe5598"
                    }
                  }
                ]
              },
              {
                "id": "81d5e8bc-24b9-45fd-8fe0-9b162066d3d3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "34156b9a-d63c-4518-8097-b91a900ac14c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5298b507-bec4-4ca4-b8ad-54ead7ceaf2a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec287c67-ff7d-4be7-9d3f-972cbbd2f6b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9df2bd83-e9dc-4adb-9e84-9a5498387c81"
                    }
                  }
                ]
              },
              {
                "id": "5eff5587-ae14-4586-8aef-e9a20bb8774b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fa6bf1d-9f9e-4086-8079-8f6456dc33ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb37be2f-47c7-4fa5-b305-b1c732cb8f40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a742d7f7-7242-4f62-b44c-1de18d600746",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cc60d63a-31a0-4a7c-8fc6-4b19bcedf817"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b238457c-9299-4766-bb93-8e76cbb08d13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6d90223-df1c-4a7e-9a90-c442db23550c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b0784e4a-eb3b-4974-8b3f-40473dc84402",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0884ee52-271b-43c9-ad70-eccb497a8e87"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01f0be61-35c1-4ac0-893e-689f167125c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "34f1aca8-3324-466d-a932-91d0a58a164a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90f91b6a-eac1-44f1-9cdb-fccd8a6ad4ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a42b47ed-0f59-4dc2-81bb-715f3bdf403b"
            }
          }
        ]
      },
      {
        "id": "80725762-b476-4014-9015-719061468883",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8e6513cf-71a6-42c5-a516-34b7450ef662",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69bdd923-acb5-4da9-8b8b-8b7487dca6ab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "13e26049-e80a-44b5-ae07-1cd454d762ec",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975068ee-0124-48d9-9301-de58e7f8d6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ad6580-7c14-44da-ae83-fab1752b698d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3aa5759-0a5d-4d7d-8c7b-c02815a16047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fbf7410-bd9c-4d3b-93bc-f75a047eefff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b70985-7df9-4979-a740-291164aa529a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f6f0ad-d3aa-4c4d-af54-080f2dc745df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff14242-7881-4b8c-9207-11df6bfa8a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d183ba5-337f-4859-a615-5afeed474fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4619269f-8715-4562-9dea-7c862ce461cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d591713-7c95-4a03-90c0-be9d1af55ba0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "addc4335-8c33-4393-841e-a08ea80131d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0e3f1f-78ae-4f67-b226-b7d50d17bdbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3de39a-ea3b-4d71-b0ad-84cb208a243a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c13032f-383e-48c2-b1e7-f006fac7fcae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dad1c0a-49c6-400d-8fe2-51871f9b9e52",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555938da-9df2-446b-a624-31ce3e2d1dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a55826-f3ea-442a-ab2f-dcbcb7495ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5f7358-9d43-4e28-8ded-f65933d04b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd99e5f2-248a-4b4e-925e-dcdfadeb03db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b24effa-e240-4cde-83da-a8d6c7ae150a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972096cc-19ff-4a75-b52a-1f8bd25cc9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06bad1b9-76fd-49e1-9db6-ef41ac1d3b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655bc0eb-4fc1-41eb-a0bd-fca26d1650e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "391eacba-0227-4b31-ab15-c657ad598ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9307de-c869-46b4-8d7a-50e939e42a02",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c230bb-3044-42e0-83a2-ba85f5df767f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e7eaea-48c3-4d87-b639-615f80ff2aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045bc57d-ef5e-4980-95c0-13a274092356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "028eb3df-7597-4366-bef9-c556c98b36fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7fd9e7-e49d-4bed-8ebf-3153d8354817",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe19872-1c14-4e6d-9312-e1d1163c59ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865e43a5-6f87-4d78-a4f3-ed9206e1b0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef8b4cb-8c9c-40e9-a6d8-3ed4c3b1623c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "57e5165f-e073-4bfd-ad9d-c1c1569dc755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac81fb6-36ce-4b4f-be98-c7e0b97c2c6b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61bf5ae-b4d0-4439-9ae5-26d5183906ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d70e526-bf7d-4a32-8151-4a3326bc34c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333fa6d6-2810-4e5a-b117-817840dd9534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a62e34e-ccb5-4253-aebb-72e697b7f7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b72f2e-94a9-40c6-8243-57c3807959d6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2486e987-1bdb-4499-ba58-fea084159554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43dba603-f683-4966-95a9-f78bdf6faad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c767bff-07e0-4b1b-933b-316862d3eeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "015729a4-0356-4689-bd29-4e6fdf29aae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd89c11-541d-4d82-b303-22ae6313dd26",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5742e6a-8c6d-4f2e-8a31-14f0855ea107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6803b35-e7e9-4f2b-8124-c3612abb3550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65daf9fc-9ee4-4a84-b14e-089493aca86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b24d7b1-d6d6-48d8-99c7-2154cbbe4b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875578d4-aca5-4d0b-9a3e-ecc53d5856d3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bd9c44-7b50-4de4-8b09-3e2495df521d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "759b9a86-4986-4898-a859-190d3d28665e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7417b0-d497-4ceb-b57f-93b1b7924767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b571c253-1b0f-4e5a-8a70-ac3b73564bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526c0295-ec92-4c90-ac6d-753fb9c59956",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1184b99d-2eb5-4fca-9c5b-08e676bd5a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d138872-8b0c-46f4-a6f1-010f45fa0b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ed1ef0-11f4-4910-8b34-f7cc62d80e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "034e310c-3bf5-4717-9b15-346c34fad898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06acd8a3-6571-43e6-9556-61a32124c2fe",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f36e29-b9e6-4bfa-a05d-d32ce478ed95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24287df-90bb-48a3-84e8-b62e67d7be09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab10d855-6a68-477c-8885-980218cbe903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "07a987a4-1707-4163-a665-8423a7b2f158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ead9604-31be-4d60-bf1a-af8863c7d43d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0696eb-c2cd-4e3b-ab22-ffeb4f4270aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd40009-d829-4940-9fac-4a5bf2043ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916da5d0-8afb-4110-a948-0c6ec69cd6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed4d311-b323-496c-a9eb-ec54858dd1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6476594a-5bc9-420a-8c1b-ab0780745dc0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07eb193-a502-4679-9adf-fdcc54567d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5e468f-3476-4433-bddf-94f185a872eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68710206-3749-4244-8a53-70c72b66403d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d8ce95c-f71d-4c29-a331-e85f6a5ed7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd4197d-5295-40a1-8012-77d4c4504833",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5841ec-7d90-4d0d-ad31-20ecbda27002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9e7b17-cbac-42f9-9620-2e97413fd3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d12827-c85b-4892-8e51-825115f04a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b333e483-196e-4cf4-8c9f-df8506943216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c19be7-d5a7-4869-a81a-6798f541822e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf14d1c-4fd5-4138-866e-820d73dec3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c87117-813a-43e2-9f57-024a36331c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbe4844-aae4-4af7-8769-868693e9c4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "92984d2f-7696-4e8b-b46f-689881840291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9112b927-894e-4232-93af-8308f99f88e3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d13866-9408-4509-874f-0c92cd500b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25acae8a-1b96-4a71-9655-b47bed6f7c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c83f03-fea2-4d94-83fe-dd4be5f38527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3963581-c8a4-4848-bcb4-25498a0511b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262b0f57-f05f-40e2-8ef0-c7664513ea50",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a65f98-7c3c-488c-964b-6b09d5ca6b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48ea9e3-bccb-42f0-aef2-3bf2558c8a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158e518b-7113-4aee-90ce-ce003fcebf7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad96d75c-b993-466f-9745-ee06c193214c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f26e938-f0ff-4ee5-8de8-6cd768931b2a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348526fe-939a-4d3f-9828-8f078f0125c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dab42d9-d527-40e5-9433-40ffb86f5481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7360595a-fe2d-4f7b-a0f3-a22c753babcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e7efe8-6a2c-414a-8da2-3bd9b05eeb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d522af2-da5c-4e46-ab19-6614f16149a3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbbe2b2-0b1e-4068-9b43-31d0f3c99b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8504a9e2-a5e8-4434-86ad-1c65b97ff222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b06c69-41cd-4074-8288-b98ffe198b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6c826d-6048-45ff-bd61-a6c642666662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22936b6-6385-432d-9c3f-54a30675e087",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da52733b-8749-4bac-8469-d2d6304ed90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9384b06b-b5d8-4e42-9b92-7eb1b2114483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc4fcf4-6496-4763-a787-68383039988d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3412523d-2d22-43ba-8f7a-d11734c66ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99948fd-61b8-4c45-8602-207796d518d6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5221bcb-f6ad-4794-ae0b-e64ce33a2eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded61782-25b5-464c-8eaf-0f0e0eac918b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424b73b5-9857-4ca2-b515-063a0481adaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3c7ead-1b4a-42a1-a67f-dae0cbfc9280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641da633-a83c-4e62-8f39-4459e17cddfd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26aa220d-09bd-4580-a27b-8675c188fca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2bb052-f834-48e7-b040-58441732bb70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5986cac-beb4-410e-af66-f771ffb9eed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39a0214c-3476-4aac-b73f-e9f7bee1624e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cb452c-b647-4126-af49-3438d72e2b38",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f6c4a5-99c5-474a-bb1e-0d0e48bd9818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b38f35-ccd6-482c-8d0a-ba2382e837f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dbe6b2-be8a-4bf1-96d7-136e71b4eab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dba683f7-3deb-41c9-99b4-24924cf0f366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45158a9-7036-4786-b607-5e420ead3cd8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3722de-1f31-4d89-ae18-1dff4b502c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83892d1e-24ec-4ba7-990e-56cf375e74c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d297475-00ee-4f1d-aaf7-491cb780ad56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09cf0a68-f330-4945-aaec-c3d4f699cb1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a163bbe9-aac4-45c7-8a12-71ba5fd74705",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6878a2b2-f06b-47f5-81c4-bf89f5cd1a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041764f6-efdb-464c-a129-35a5a00501bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c17601-d75e-463e-ba99-3120bb05379a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b3ad126-9ee5-4a6f-95c7-54b879105a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1217ec2-8feb-4c0f-95f1-813eb9c98994",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5a4de3-01b0-427e-81cb-6e8d3187a9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85042c76-b05d-41ae-8ec1-c09e8330ca56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f806f0fe-e8f1-4654-bbda-abd0af9d8715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba3ab1b3-97b9-402c-99ab-96412fc06853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f35d19a-d9fa-46b8-8426-06a41ebcb63f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c950b9-151f-4b7f-ab28-36f27eaa58db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb08532-f254-4fa3-976f-59b835b97c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c043d51e-df49-4b4b-9bb3-39b413e8e8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86735e78-6718-4e22-89d6-eb437807700a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5171f5-57d3-4b97-97c0-78fa548d4892",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753da818-d205-41f9-a7df-0bd1d0aef091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e27825d-015f-4162-a805-594c191fdff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e3ae6a-7d23-43dd-87e3-c2df62f5be82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d498f766-55b9-47c5-b8be-6a14b9ea93be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec847880-e075-4f15-aad8-6bf7e3df7b54",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88eb443b-25e3-4a65-9e98-514d4ce5035b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494534f1-ac2b-41e8-83a7-59c2374bae08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1862dda8-1c1d-48f1-a1b6-5d99c268b410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07730614-a71c-4901-9f05-d5c2313d2c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0e781a-d6c1-4512-9bf1-117a691d884c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cd8f2c-fd80-4f3c-b24b-00edf5ba5005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5080d080-a5b9-4998-bf81-806167e1602c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18e6888-f1ae-4fbe-ac3b-e20dac6cd0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69fa4154-7ffa-439b-b7a5-b12df7c1dbd2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ae26e477-1c8d-49a9-837a-1e3ee5ccc69e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02ccce72-98f3-434a-b0cd-6353406dba74",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08cc1ba-d1f9-49cb-9345-8dbc618e6c69",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2dc251a1-dfb0-4876-9b31-ae1dd10b20db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b956b67-5c2e-4c1b-ac63-cb15bfbf7652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad7965dc-2ae8-4d36-9347-2dca5d8d072b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a945ccd2-ca95-4e0b-a832-870806df20e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad0014e5-9c6c-47a4-9cca-9b8725858124"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbfa4cd3-cac4-4ebc-8555-f610fb091cf1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3abcccc-33f4-4f28-9561-40492b9d8bf5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3085a6c1-3d1a-4281-a1a2-27ef9335f038",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ec14b42b-c9a4-4dbe-add6-bcd7b9c78837"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63fe2518-3d66-4bee-a88c-d1b5db49802e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1c9c8e6-d112-42a5-93ae-25db332c34a6"
            }
          }
        ]
      },
      {
        "id": "f852a077-fd01-4a5f-9ce0-a4c5f69b4006",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "e441d439-770d-483f-ab9c-ff074230e4a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80e56f77-7b7e-4eb8-86d5-299cccaca33b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4bc8802f-3ab2-4836-bd08-417594a5aeb5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a95c26-d6a3-4526-9004-ed0bbfbece34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18d5ffc-6c16-4455-a420-ac08ecbe8eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7636fe-394c-43e8-86fe-6afcf48691c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca82dbc6-1b87-4c9c-9f42-bafb07c621f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f599c34-bbf2-4c0a-ae0e-e229a5469f81",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ad05f5-8c87-4c57-9a2d-441cd36af6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16558157-8487-4498-8d75-c55208e7b8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3706e92c-eb5e-458c-8a0d-d98e54af83ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c910a0b6-1775-4b27-88f0-69c3a5463286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9ede5c-6247-4597-8047-cae0882d3f4a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d891304-cce4-43f2-a9a9-3a7061fe2909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b2df63-3ecd-4d2d-9d61-d789d62dc5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddb861a-d4a3-4699-81e1-660fe0b26363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c70f7342-7d28-433c-ae4f-90f7ec2183eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdda01b7-7e7b-4279-a721-7793b75b575d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995a4074-2b54-4d8e-b306-7182b42f41e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ffcd25-305b-4c40-b7d0-ca0c8bfee765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a7fe06-91f4-4323-9ead-7c2c0005179e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98221958-5c29-446a-9b8b-f5ac35e0fa66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f0a672-1c09-4ed4-8f47-b3d765f4dbc5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b785a47d-4ef1-4fbf-b577-7998f31e9866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093c544a-3137-46e9-b1ee-b5e453897269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c78447-b293-4b86-8744-d9e47dbda88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "000ce56c-8bcb-4f0c-a6e8-f69850de21a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665a4382-6758-4931-9f1f-550c5d2ceb2e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecd5a7a-e6f6-42a6-a4b6-c1a4221b2310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d54ad78-339c-4b06-a422-33313c3af704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe345c8-0d40-4082-bc85-7d786af943b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41d87b66-6f03-40cd-bf83-a16212a4f0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ebe9c0-564e-4efb-bd8d-addc0616d9b4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c341e6a6-ecad-4ab5-826d-dfa3af4742a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06eea1a-af79-46dc-ab12-8a513d81f50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b74b8c-5bb7-4f5e-810e-d9dd027a9a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9acc2c3-4ba6-4db6-be36-edb37f63d28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefb98a5-7d48-4fc3-b425-0b8f9a518a2f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7c1ee1-0cc0-4675-8a25-fa4f849f46e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c40ba03-4d89-4dd4-8b9d-8c133c62c326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c679608-ded5-43a5-925b-f557e4254cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe2c0a0-bef4-48c4-970c-606c146aa821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571385e5-e003-4da9-b841-187bb40c176e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0c8521-8f03-4cee-b08d-46cdeb39dd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dce90b3-2170-4f26-9f69-1ab727ba9dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a18ff85-3280-4adc-b43e-61dce964a337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3256d927-07f9-4133-9937-856a5fbbf9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcffbda-9718-4ab3-a2fe-bfee39ac4dd5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c782a3b-261b-48a0-b7ee-4611a5655d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d212156-af8e-4c35-8e1f-69437e7e2c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce51375b-40d9-43b0-bbc4-664a81b9ec7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c41a2c1-d2e2-4ca5-8c38-2c36d71c5d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e17ae6d-4536-4314-a018-9782ddf06de4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44758be2-ca9d-4464-b517-a2a6eec28a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38ed09b-a055-4df3-a2f4-9acdade7fb56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f2dd2f-da8d-4810-a096-ae5a275ac1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5e54769d-0116-4c1d-b45c-5cabb09f1e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94db6560-717b-4df3-9b49-f1451783e34e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0c4e70-5c4f-42c1-a7ab-8b600faffc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87434c9c-7276-4237-9dbc-46060c5723f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d023a5-833b-4b43-af33-27bff6ec55d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a088d2-4298-4535-9d47-27690f90c94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9595bc-b95c-4515-90b9-db45bc689d54",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0dc828d-ac19-47ef-8048-f0559105042a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8a3703-6b18-40c3-af1f-c40d44c16ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06b36cd-26e2-4800-bcad-f58ee3c498e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c36287f-aba7-4b81-8380-0c2cbb768aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb39c7a9-47e2-46f2-ac18-b3aa3b805ca6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90fe8c40-9a34-4e4c-aef4-c3bcdea42be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd42b250-a58d-4672-ac75-33717a0135d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f50a79-1e90-400f-a5d5-dd2c64969d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2a53e2-3387-4397-8d13-f2a61aeebed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc429722-578e-4dd3-a5c3-de43c77fe9a2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b196b7e-e1c7-493a-8b51-9ea7615165ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa53f040-01c5-419c-9720-9d67c1ad59ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24100b27-906f-4bb9-adb8-b2a11af58e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd0731c-cd86-4aa3-a003-71683a4b6eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2019788-5507-405b-a75f-4f8019ccfbe6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42fd05a-6d4c-48ab-beca-b094622c1235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f5b30c-993a-431f-a814-9f0b198e25b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa614f62-3db5-4b77-a900-9da3f357da27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3aa1d1-40b2-4a0b-ab67-bec3b9d73f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc68916-6ca8-4bea-85ff-12d5dbc8f4e1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971e31b3-fb0f-46e8-b0fe-a40fdd66ec74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304be5e7-0df5-4eef-892b-76bfa2a81287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda68e05-19ce-4f30-95b7-6f473049fd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6ddac7-41b4-4727-88c0-534cff934397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e88764e-3b8a-4959-8649-8ee49a2bfc8c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8070d22-2606-40f9-bd5e-36cbc644866e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2951c16-fc2b-46f8-8032-b366d64f922a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316f8237-365d-4b61-95b3-ea0314c0b04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "07f61f4b-54c7-41ee-8ec7-d3467172e79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3561dc7-59cd-4529-9333-9b813c05f60d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef256cd0-6acf-47d4-a45a-6e288209ff9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef004fdf-5049-4b5a-ac22-7dd99622be23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab56c8d-4b17-4db3-87d4-7af30da4c0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ef38b8-8a7a-4683-a8cb-8f05036493bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1676a4a7-6dd8-40d1-a741-8b16633f9e97",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60b3bc3-c667-4bf9-9534-2619372adc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ad59a4-5f17-4add-b127-fb0aa251bcbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4425f48f-9777-4bc5-bc06-072d27003db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea6efe1-fbe8-4859-92d6-49fd48dc30e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebf4960-cce1-4106-ac34-53624e9473c3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd4da38-1106-4d99-8788-1e23643ed78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8243e01-0424-4189-9d56-a17970dc09a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4919c33d-e6fe-4a86-a722-a5578d90e18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7df1d56-56c2-479b-a7ab-24e49c8a3777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9491eb74-aed8-41ff-986a-c521b9f24300",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abb5914-bd97-46c6-9f4d-b83cab5b4eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9f99ca-c094-42dd-8682-5f0391914823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7371d10a-accc-4f59-bbbf-ab6322c3197d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e191f4e1-1597-4f4a-89ba-d5b9867ad198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e59e74-4c08-4056-9b9a-26fd9c453e49",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54565260-3f37-4ab4-9abd-02d99e5efb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d11974c-790e-4661-b4b0-89a9f9a4a8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd1cb7d-4e42-4bd3-93df-2fca7c397958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d502b287-a23f-4fd3-9223-dd9bba357420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601c275b-b98c-4904-8185-8b9b84099e8b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f3609a-928b-4fc7-8761-ebefc06f03b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe31240-a826-495e-8e53-1e2923ea3bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ab728d-b87e-4509-99d5-22c027a6f0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff3f6f2-e102-42a6-a963-e1b900398b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867acfdd-f8dc-43e1-837e-33b55a87b229",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d9f9c9-51c7-4fa1-a8a9-ca4797f42406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272b9204-df2f-4f0c-a443-f5caac931b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc271384-86fa-46b2-b6e3-36918465e187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5991771-5fc4-4297-bb9d-9d3cd5352670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401c9a60-deef-4e7e-a3d7-a91be795bae9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3a0a20-4dda-4cf7-9790-a35dd9c207f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d9c1515-d149-4886-bd23-8e453aa314f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6de80fa-223a-4d1d-995d-4891dcd9921a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75cf3b06-3f4f-4347-aa0c-c0b62f25ed20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d56d72f-5f2e-49cb-8877-6a0636fe6cf2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3420c4b-d403-4cd7-8ff8-063b1c3fc58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54920b08-ac56-4d39-b0e3-e60a87150a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e43f7e-6079-4c34-94b9-ba894921a7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4e70c1-d371-436c-8112-b511a5db0ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e3b388-7592-406b-aa53-adb997e316f3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17407e3-51c8-46bf-9b42-e170135fbd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e97f133-09e1-428a-bd88-e7e480a7dcb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ad2ac9-98d1-40de-ac3b-72e5699efe03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac68955-b35e-417d-b00f-09d481cb825b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748e5e95-9908-4fc7-a3a2-fe1a7d083ed0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eeb2175-d2bf-4311-8e86-5f77d628f50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "763e2687-7a2d-4498-93f4-812c245856cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec50eed6-5efd-4c05-955f-20939905dc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3ee05d-0b78-4f4f-8706-af12fc15e766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4e7406-2444-4fc8-a253-b3c42156f3ae",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b158dd39-f719-46f3-9a6b-f73ef7cd86dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a63625-a2d1-41a5-83bf-563e3df17168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f90b04-3084-4559-97c9-2585ca2d7bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6967952-0b2e-41b4-b1cd-d186b771907c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942ff668-7f03-4ce4-88b0-a2c4b7a80b91",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5f921a-6acb-4d52-a4eb-48ba22a87789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea8070e-c7e0-4f35-b193-4018c2a4a9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a526f5ac-a8fb-45b6-9f4e-a5ca2cf3dcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "729017e8-8f06-463e-9c5c-ff9ba094a371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5a8141-56b3-4003-8678-bff986e3425f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ea9a8c-3838-49ed-9fd6-15fba49c46b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c7d4131-e19e-4401-be59-1c39e608dff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5287e156-a034-4b1d-80df-7f4b630eddfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "481bec9f-80a8-4d6a-aed6-3c3f7238d0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2b80c0-3c46-44cd-84ef-cb6482d524b2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33e1e41-09e4-4ae6-8e75-90a87f567a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1097d1-4422-4b1b-875e-c2c89ce588f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5ec6c3-2963-43cd-b106-a88d457d12ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2a960e-b01a-4f78-8083-bba6c64d33ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6946bb3d-a76f-4c4e-a012-5ad96a060e2d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62797dca-c1a8-440c-b031-3b3217ca8a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f368e6f-8d7d-49a5-9e97-e50811e7f672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c92fef-ff66-4ac7-9a12-d1cd12aae289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad2af6d8-59b9-4b23-915b-9d899a2e52d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e70755-5a5f-4a1a-9681-73c3b05d08a7",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09e7b53-8c9f-4e1e-a713-ece4e00ef1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d17f700-7d9f-4728-a7e6-b492343a6a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12301c92-e6b4-420c-9e49-381c6234f7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "474a7754-40e8-482a-851f-87e7ec4b763f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd5aeb4-cd0c-4c1f-9ccc-48139af766fa",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f21c0a-8d0e-4334-b612-c323c6a4df64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ebacb2-2a2e-486a-8641-c14e43f47884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ae1c7d-5df0-4d1a-b6c3-b3ef579c1482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11f043d9-287f-4359-96f9-00b08a81dfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b0ddc2-b92b-4fce-b52c-ef5351a2069e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d10ff6-813f-4bbd-8ce3-083cc70cc98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52ec2af-69b1-499d-8e35-180acc248292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3c046f-06dd-43a9-807b-bfda92481785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52f9fda4-05c3-4b9c-96e0-67807f574045"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fdc13d54-af12-4728-b624-251271384895",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7165139-a1c2-4b2b-b8de-91e4ea5218bf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639ea04d-31ee-46d9-8d00-d2e0acb5ae13",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd413eb-2c70-467e-bc0a-798cdfcdd6a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6fb6f7-b8ab-4749-a3c7-59114daefc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f577be4-f797-4a01-a910-385487ce86a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bfc9522-9e0b-4761-b15a-50a4265ef44e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d51fe3eb-6c08-4056-905c-a65017d45370"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0ee4135-e2f9-4333-b2b3-5941d3b38a94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55e2ff4e-0d22-41fc-be80-5c2d70fd99bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69693bbd-1627-4329-a68f-92bca017aff8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f1a86925-6408-444a-9213-1a3a9d0b0d09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f7786a7-7512-446f-b493-f17cb7ae6c52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b11ffef-d3d8-4bfd-99bf-b71b9949a25e"
            }
          }
        ]
      },
      {
        "id": "14b9af22-1553-4772-9a8a-84c051d629f1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f217ac11-8355-42df-8b14-6e8cf89be569",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9dca71ba-df6d-4403-8cbc-4049a83fcc01",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b710015f-8db7-4102-8092-817a18db96ad",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94069328-6cd3-4e82-b63a-dfebb668fb9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfebd9a-1acb-4a5a-b112-89655e0f8804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b23ee1-45db-4d6b-a33a-09e16f42da4d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8486a606-86dc-4feb-a52a-a45b593e3971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2faf8c1a-d49e-47bc-b953-561a516b6f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c8bc43-9050-4a56-98b3-ea255788f593",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9443a1-5de7-49eb-b583-7284c745450f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82a352b-cfe9-48ba-9da5-c5011dc50db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c094cc-593e-4e48-8157-7fd3bcc1fcca",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fef4bd2-e49c-4783-b99f-b5bd220a9ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1c1ac6-17f5-4ad0-9f50-822674fe4c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42dfed5-6ca1-4c1f-a8bb-ee64d868acc1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a9df23-9745-4dbf-8b1f-e35e95b93dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48db8a98-47a0-4e40-9fd4-384962005236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e8d792-520f-4031-bd2b-526c359176d7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "522daf92-64cf-4ff7-998e-d8264487010e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921111a4-d978-4eb1-9268-fd7d62e07b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2634e165-eecc-4116-adcf-78cb43789c81",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6241d9d-9bae-41d3-8db9-93569cd0f8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e4e78f-39a0-4995-bdb2-afbe9ba5eab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf7c6ed-8e58-4277-8925-d8f068354f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b283aa2d-685c-4208-8541-524f3ae0d73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d8db11-a1a3-4fb3-a29b-cf8de0e25b2f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab23704a-3310-4ca1-a3d8-b34e94e6cc5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdded00e-3ba3-432e-9239-c9e3d3416fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18f82f3-5b2e-452e-8e82-5dfc4f4180a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a5a95b8-6658-4e52-aeda-adaa0bdaa506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69e081f-b8cd-4af7-bb59-05f139d5ddc2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc601e67-e294-491e-856a-1f7c42ee7f78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be7892d9-58cb-43ce-be98-b3285045ac76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf7432f-780d-47cc-8e4b-9dc88fc2aa18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f7d3ba-495d-4cd9-a606-7a7e80da7848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a194496-a65f-4e07-8ada-f57c97abe40d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b32710-5593-46ba-ab6c-59788ed0a722",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b6f8c8c-b922-4b60-941f-924f88242f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ad1ec9-41df-4589-b496-c1405a2877d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e82a31-ef3f-4d94-87d2-658b01a47e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2a8c94-cf7b-402e-b6ea-3038cd2db163",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91dd048-cad5-4f1e-b02e-693615edc148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94242df6-e317-4846-91c9-a8006c590a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8fcc25-897f-4ff2-85fe-b262fc7d22f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca523f1-2c25-4a42-9fe8-0076a0780979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b59b71-9940-4e72-b443-a10dbb8d0de9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1863bf-fb65-454d-9920-b6a3cf483320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73a9b38-53ab-44b8-bd87-bad61a26d5c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7786bffc-88b1-43ea-bad6-588e6fae0b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c99e5c-7c9a-4b17-a3d7-a652a97f8e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb176d79-7f9c-47eb-927f-5a284949ead0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284b27cd-071d-456d-9b5a-1866b34fcbc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feae23b8-a3f6-417d-9b9d-f4fc72d26105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8511719-76cf-4904-b824-fd0a28647623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2cdd6f9-119b-4366-8986-ea5f39684bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d920dc-9635-42d3-8b39-9f39ec177362",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cb84b8-95a2-4c19-a0b0-84219da82a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e08ddfb-685d-479c-a5a4-c79226dc862c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b74b50-789c-4452-a254-e67c628b452c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e2d586-3f98-41e7-88e7-5c5f98f93f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa36546-d28b-48e9-b227-5a5a2d65c445",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744a5ad6-bd45-48ee-a313-c0dd5aa05f96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61ac6347-3f04-4213-af74-6ad04de2c8d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b762fa34-8b00-4a5a-9115-4c64d3e0a118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a21e5690-028c-4629-885e-ce9d633cd3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2f37f3-7b93-40df-b708-9292191d62ea",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b653c539-0fab-40f7-a861-83f10f977e01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3d23d28-442e-46b6-9eb9-91ff2d576a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "538f290a-1023-4c32-a77a-d3c7c69fcfad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1291dfc-878e-445f-8002-3e6e717bc628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7315f5ae-92e0-46b5-8f69-3068edffa6b1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32b25d4-45eb-435d-bf81-94ff586f4327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3bf90ad-3728-4a8b-8477-7b07b1322199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278b767d-0a65-4486-bcd0-1257b6dd2e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b74bc6-3e52-41b2-b74d-065ec2e51c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20652fba-063f-4057-a4a5-7a45b9dc2999",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f99cbe-6d78-4c22-a093-834d8027443b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30937640-d78e-45c6-9775-aa7719256e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed9a46e-e783-458e-95d1-7f224af81f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d5fa92-cb81-439d-826a-b2db0a34cd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a47457-69b0-485c-803c-9ead10f0d5bc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97dc4116-0577-4e56-9d2f-318e79b2c309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6239f5-d408-4bc8-8dc5-5a7f30ee4cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eac509c-ca12-4fb6-b593-5bce49ab4014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d9c835-9849-4bfa-8356-2de3d827690b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa3a685-8e76-44f9-9d75-49201e6eaf39",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b630958b-76f2-4fd9-9a6b-c528d4c8ed06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2bc198-e878-4976-ade1-77e6e5faba58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "830edb3f-818f-42ef-942d-6b4027202bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ecd000-f5a5-47d6-9c09-8f9429a21481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999c248f-da16-44ca-848b-da6b93db0c38",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643c088a-c0be-4858-aad8-7ad1fce2b016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f7112f-e235-4923-bbda-1a4cc4a807f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f9830d-3a0a-48a8-917b-0c46b5500c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd85a67-f692-4a38-be47-82697bd559c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e3474f-4708-4da8-8128-a37d57679fa2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c46f9c-0aa5-47e1-a311-db6f8ee7a82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5b5dc6-f9f9-4a2d-9d9e-bee07817a81c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5277c466-6021-4ce1-80ac-cae53d19237a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be38812b-1e3f-4a95-af39-08869d796edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75e516d-5782-495d-8e01-77d836b8b8b9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b107655-3a1b-4725-b65c-2f8f529bb22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1edcbccf-1fb1-446a-99ae-305246e6a7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25482523-4a78-4d73-a6fc-df1110595934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a73f321-acec-4212-98ac-34b79124247c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5697f42-6dfd-4ae5-95fc-9c359c80b925",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f48f85-7a9f-4f79-a5f3-4fa5aacaf0a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d060e8bc-de3e-41a8-9c11-85293789c00f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a80020-9410-4d0a-846e-810f21b87a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df83fe5f-7f35-4ce2-bd30-23a79a29e26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f4c6d9-2111-4e21-beba-754b46b5333b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ca2c72-3d35-41d2-b7f0-a9a750659b78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4924830-cf9b-451a-8c6f-84f593fb9737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57858bed-7b99-4849-98be-ffc89209ed42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e702aa-5c2c-46e1-b50a-83e4e7f8e922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a8eeb5-eebe-469e-9938-614ae957c5f7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7351bef-2fd6-4c1f-9836-aeccbbb75f95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8008728a-f5bb-43d4-b3b3-772ced1a0be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70d66d4-19f3-4d08-8df2-d320bf049b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f046099-1aa3-4e6a-8d23-20eaea62559a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33f3c65-a301-4be8-929a-cd832a8f45cb",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b358cbc-906e-4166-97b0-e370fcc8a3fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1902d377-1ad7-4358-b946-5e5813ec77b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f88826a-7df9-4bfe-a2dc-b6918f42f988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa48befa-d17d-4abd-a981-e81501a51d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d576f1a-bbd8-4aa3-8410-db1932ca823e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3d0c40-cfb6-423c-bdc6-5d578da3c816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db853387-8999-43ee-a7e3-31075f325efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc52285-a415-405b-9f60-9345f5b1a585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9894da-e7dd-4e91-84f7-de76e9ed1da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193c6c8b-31ef-495e-81ea-fb6478270c57",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef6c286-e1f0-4f13-ab19-a1ebe36f7f58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08289786-afa0-4b2b-bc1d-4a81493584bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b181224d-3809-437f-8d74-51d0ff4e7982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bde81a9-fb0f-416a-9133-14cac51560c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5885f14-2058-4df0-9e39-f6126918ba7b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6db9b3-bdc0-4bbb-bfb4-a5d5f57bcfef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "309cccca-0dde-4f9c-872b-7f83e14b0954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e076c84d-a6c6-4e5b-930c-1f9330a1f60b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ec767d-7428-422f-bbfc-c97c31421e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a5e022-3fcd-4f7d-b515-acf0a8578fd6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3f1294-4a19-4d15-a561-d2c82ce88870",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "178d5b01-db90-4634-95dd-6fb4d9e335a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c1e34a-cc44-49ee-b7f7-452e5e5ace2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e906007-403b-43a3-a245-6f1c54245c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabe8d49-d036-4e55-9668-9a8adf08d110",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60821888-4a00-4b50-b859-bf9ee12c5856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b0328e2-2e4b-4e9f-9087-f4c580604cbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f0b9ab-e919-469e-96b7-a016e3f34d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8a21aa-9760-48ad-8429-ebcba74a2e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803a18cc-8eac-43db-9883-c0fb302eac38",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637a0b64-68e4-49b2-b6c0-8a65ac8cf471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6549753-243a-4cb2-ab5f-cf06506d0811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d449fc8f-ca6b-4426-9b22-ea8343b374ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e34419ee-20f4-4b09-857b-4294f45a5ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecb5b2e-18f7-488b-99ca-4baf93462f95",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8037878-d77e-4222-bedf-db86547fc3a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11ced804-88cb-4702-9c9e-7b50715af046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d267ca-ecd9-491d-8975-22317e3202cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fced8e9-62dc-4090-b636-ef4e04b1ad6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1390fc08-d56c-4d88-a7f5-72d98e7eb789",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1935e43-447e-4dd4-ad1d-c1045c34be74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58fb6dd4-b65c-4ba5-8282-cdb1e046fc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9b5582-a29b-417a-800b-ffe785006ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd5ba81-071c-4cf2-9d2f-6451a031492c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f07ea77-bb1d-4311-adf6-f4485e581992",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7df5272-85ab-4f6a-ad06-aa5acc95382a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56435854-debe-482c-8c4a-b24921b76158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0df7c13-2acd-472d-b604-dfdb6bc220bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57e59d7-4f17-4fa6-823f-9da18884b4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243357bf-7e6f-4901-b437-ce5fad4a0125",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bae56a-9349-49d7-930f-d0c204530bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2cc88fa-827f-4d47-ab9e-a62224b31e59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08902006-c016-4f47-9237-8f42e2093ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c25232-aa8f-41f0-b301-6489566818b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ab2a7c-be9a-4779-bd4c-9ea0543d3a99",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf190f0-6694-4d23-992f-1d79e11d2848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702b3eca-9376-4dbf-8bc3-77d2ea1957c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5947c1ca-40ed-46e0-ae01-5326c3a9ceb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca315141-eb77-4931-a85d-410ffdeca983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0d69f6-c979-4af1-81e6-aeaf2c747a9b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed38810-845d-4a7e-930b-8478580a1b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117b7de0-ce7e-47d6-ac27-93c73d59c563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d96799-9fa1-4f57-ac71-88c986289ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b010360-e6fb-4912-8e9c-025634e5b371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6f7728-f11c-4f4e-a92f-e1ffcdea310c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6027dde-5d3d-4d28-8638-938a6f12722b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2de3792-c4cb-4de5-94c5-1a419abc7f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac80bf3-205c-4a57-9624-ccad32657378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed645d2b-7f6c-49da-a353-aed0a34b0395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1ba790-30de-4f95-aeb9-936e73066f45",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8dd52e-2132-4b86-b290-605533c82acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5d3d71-a9ae-419a-bab4-851557c65359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "048e9799-0108-4cab-a3b7-2dcfa1c61fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a7b2f2-7800-4ba6-8311-e8d9b8b8fa1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4085841d-379d-45bd-9ce5-e416d165de7c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50af3c71-8b2e-4ba1-9174-acc8d609c880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2da861d-2abd-4a0d-b379-40b1a75daea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7312b51-2651-4bcd-b34e-fb31c2b04fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1876c51c-4b5a-47cc-a6d0-c55d28fae3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61cb4047-b21a-4e75-b6f4-5004e7e5296f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17092d7d-3081-4cf1-8c43-fe133b9aaaf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6848f54-a1b5-4886-8ef7-8f19b77d6ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c62eb29-d1c6-409c-a519-b6702a74170e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "369323b0-9e19-4b38-a2ad-b129e9a99716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de07c4a-7957-4ceb-bdc1-91585a118855",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28354d4c-0786-4d1b-b3cf-8aed67eed04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b918c635-1244-441d-a007-c46db2b448df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b54bc6c-2906-45a9-a698-811f12d4b654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfa07f8-7a4c-475b-b8ac-560b924552d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c091cf44-efdd-4c91-bc82-1446859a49fc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7f88d4-901d-4326-a129-eb25f2d10986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29bdd870-1819-41d4-989a-1f9ff06f09e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a47db4-18b2-4281-bc1d-1b5b62525710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636a928b-6b84-4429-a355-723658e8460c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d129142-748c-455d-9ae8-e0cefdba8044",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c692873-279e-406d-9504-3d0324296ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2159d09a-54ad-4e86-a1f6-8c0b49a099ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa1a55a-4f90-45bd-8870-23708834d229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d5c9d7-2aaf-434b-91a3-781894bda050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc54c092-827a-4bae-809c-298b5cb4dc5e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88dea86-e7a6-427e-9fb8-72c1421c7dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9083b1d3-6e4a-4729-b1ab-c13e21ac9bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50f664a-b483-461c-b6dd-c603f3b3865d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b27a5d-e422-44c9-9d05-044be9c6b424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb95810-c601-4a49-81d6-b10f09f2afe3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f844cb15-4fc9-4fff-bbd5-f537f463891a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b653d6d-4b32-49db-b20f-e88bfc90763b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9faa14ec-c88d-43a6-866b-686687dd35d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6928996-0752-491f-b02b-1207e728ca97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13cb1ddf-4706-466e-8f83-b3180b565d2e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d975c30-78bb-4c12-8df0-76890b7b1bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a93c1b-5eee-45d6-831b-a7807be3933b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c1dc68-055a-41d9-bb62-a413bce85746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff241872-fe0d-4e35-a51d-481b46a56cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c89cbb4-9c19-4238-ac22-31fbad3ede34",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad6f202-294f-4e09-8e8c-ec378ec6adc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8831803-bbd9-489d-8647-7642fe981549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1d46f7-0cbe-4542-933c-9fa8c4c237d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f99f0d7-f8d0-4dff-b970-8554ecbcc97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2922b0b4-19f0-42e8-8335-670fe6cb7c1e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5adbe2-d57d-4328-9571-dbf12120f661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ccc79c-3c24-4f70-aea3-41e7c3184a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f97c86-6e4d-454d-874e-d21f6817538a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bba1a99-18c2-42d4-a3e4-ba22e7e814e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4bfcd2a-6f90-4658-81fe-1678e7d5e59a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27fc0a1-42f7-4c97-902d-1042ae3e0dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1a3e505-b18e-4c7e-b695-933cd07f720d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "623b9dca-4547-4524-af87-d886f47b0003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05581480-09f0-47ae-b847-2c6a36f1d61d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c61bc3-569d-41fd-921e-b0a46ec86c1e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3040f6f0-3e45-4501-862a-bee30610d729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7cb00b-32ce-4f07-8ddc-5f7e35700890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799a0951-bf27-4be0-8cf0-6e1acfc39852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce135c53-b992-4eca-9048-fc68bf28ea26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b621bf45-10c7-4c61-a8ae-c79838e96be2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25f6bd9-a65a-44e3-86e7-f2073edf63ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b678031-fd8f-4535-bf3e-8ff921ef2f51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc31d40f-4681-4413-b004-5bb4f7383439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11befa9e-3e78-4a8e-a101-72360fe35dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4149d3-e96f-40a5-98d1-768018ff3dad",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1203837-f6f5-479e-a55e-5932212fe22c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47753160-b0c0-481d-844d-a094e7d4bfa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e75282-e08f-429f-b351-ea8e57a6bb92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a422a4-0594-4e5e-a890-c83137b3b425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca2a22d-4d52-4733-ad9b-ccce2649eed2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ca988d-bfc8-443c-9bca-b9e41d9061f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73c4af8-de1c-4672-ba8d-2ddb8aecc349"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64353a9-a0fe-42d0-b051-f7354fe9e7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23396891-c4c7-4cd1-b7d0-ddfcf8ba8e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a13894-a7dc-4bae-8f47-5d28b0e659f9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b1e730-9f66-4664-b979-1458cb45c506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6adaf694-b02d-4f16-b579-5dcb43e0f41d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a295f79-065c-4755-8453-1ef4281a6976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d2eae5-24e4-4b77-81d4-68db5d1f94d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f474d446-be7b-49c6-be93-8f0e667ad1c9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af378628-d67a-489a-b17f-c91b9afcab4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4464fe87-4ed0-42e8-af42-4f776fcf6837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357a3fa4-8058-4bbe-b0ef-5e6699dc412d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4923d232-24dc-46da-ad01-c11d4277cea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b8f90b-681e-4d20-8276-71375ac35ca2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff45e2d-35d4-4222-8966-9493061b8db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4a7dad-b5d3-4ff4-bfed-b5e00bde39e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1082e155-a001-453a-9439-e6a10f190d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fc102c-66f9-4760-b8a1-bf731a489f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2cc697b-57ef-45b6-b3f1-df105bdc7c1e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d376e20e-7aa1-4fe6-99f5-4e3afa846381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acdf988d-4988-4d5f-bf3c-0ac140ba8e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c34301-d0cf-4447-b935-0963e65411f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a8177a1-958d-4dfb-980b-fb43d1d2de64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80d2243-956d-47eb-951f-b83ac4035a4e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4389aa-d2b3-4502-8784-d8e32e3c48d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d8b31d-d73a-4824-8155-53eefe44f7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a99a62-913f-4039-bdcf-ab8cc35b6a9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9feebf-d818-4a49-9ae9-f9087b83db1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d33045-4495-409f-9708-0237f46b2768",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9319e109-cce9-44e0-8524-a43cb099f987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04964d2-5c7c-4971-8d94-eff349b5a5dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b51645-280e-4946-8da6-2981b9fd424d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9f9257-9880-417a-9760-bf26e95c3aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a5bc22-0683-4a73-aa04-7854a3e5d403",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82d2de0-7a90-43c5-b4c7-36462a27b3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3fabd3-3f77-4d16-bcbf-0cbd65dd0fa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff30ad9c-68f6-4d85-b51b-1569f0738349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a830896-2469-410c-9517-8acd166aa612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58dfbab4-2c26-4db7-a0c8-de24f055ccfd",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04f26e8-f1da-49f7-919d-1a8e68f9d921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f401a5a4-3fbf-49f8-8d1b-e23ad7e1c1a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce63751-0f08-4212-99da-5ced1f20e136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5124cb0a-4910-46ce-be7c-c72e8969c4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d09f42c-fcd3-4f65-a912-579469f08432",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5914c0ae-3026-422c-a696-467b6f8169a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ce0b20-d8d2-4142-a91f-2d795d954c83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15493b1-b73d-444e-a42e-d53044b7ee01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2381b8c7-1090-43d8-b9f2-546cd25b62cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5491b3-8cd3-4688-ad71-b9196f687929",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b4e6f5-c3d1-4610-b2a7-54ddb20610a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ec4b6b9-d9eb-49c8-85e8-e951424c5032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d28797-fba9-48e4-b7fc-8dd0e541fd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b058ac9f-380d-4881-a3fd-b96729439390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31416a11-4d95-4a87-882b-c609aac98c59",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b8e503-0e15-4dd0-aeb9-7c9ee89af7db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700f47df-e92d-4bd7-9b6e-bf63948dfca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3356e634-dd0a-445b-bc85-e40e9e1db148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b219696-f3fb-4359-a9e6-e1383a4e3df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb3a282-d4dc-4836-b569-16151f6b35c5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838db4ac-5f6b-4512-8466-209c978db954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4503aca7-802f-40eb-a311-a33f6a8fbcf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab194e7-ea09-459e-9d2e-a181e564508d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbb0643-c39c-43bd-ad35-1e49e4502b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6808e9-328a-4a70-b117-593917c59438",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7654828-9e33-4f75-8560-4245781b662c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4ad34a2-b5cb-43c9-8123-75720738cf8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cee9ab2-4dc1-47a1-8f78-f253021549e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "477165d3-34fa-47f5-8101-30b9a67cbf88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a04a3f-d1df-456b-a35b-9680455de3d7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9252618b-bd2a-492d-9a44-a5d5dadd822b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "660cae53-bacb-4c40-b59a-1b3fec078d6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6b8731-b394-4790-bd6d-de774ef614cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f73cc1-23f2-4b46-b9f1-8e955542a578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261188a5-f579-4efd-bb45-f246cf0456fc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf709e2-58f3-4425-b0ea-82716c51ad93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b25b7dd6-8b4a-430e-811a-8c3be73a2fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "517ebae3-06a0-40b5-af79-4ee40e17a35b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d29c32e-b079-4265-9532-b472597848f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72904080-9a9f-4254-8e75-c8d6be47bb43",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b65c22-5cbb-4d77-aa43-d2172e344b8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7be0ca8-0361-487d-aeef-5c6fd69f5d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1717ee2-bf34-4018-b148-2ea65e8b9dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4771aec4-4b4c-41b8-907d-1eb7b62e2e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6a30d5-0747-452e-896b-d82844ca7a6e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa72ac38-8e18-43b0-9635-78e1ad930a38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c79fa6cf-9c54-4700-ba19-1166fa01918e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7a60ae-b250-4f88-86ff-4ee485d750d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16477538-6233-49c9-860d-26c654ce87f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc0bd5e-d2ee-4db8-a4ae-f33f3dc7088f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33ad01b-0228-436c-b989-2d9e0f534c85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c1adbe0-d0b4-42d0-b155-766589b92cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6391a2-aa0d-45e6-83b9-32a50cbda17c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a980c0c9-c598-4d5a-93f8-f6ad07503948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88a04b7-d4b3-4a58-9f95-618289bf424b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165ddf9e-2f8d-4b70-a9bc-542159bbc837",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aae57c56-8da0-4ddd-b9d2-88b44777ee66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cc3a3e-12bc-4fcf-a687-e9e7be268b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324152a9-60b8-45e9-a2d4-30b0e5fc1654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38053987-8989-4ba8-8ffd-7abed1e9a0ee",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8070c78-9565-45c8-a3c7-76bb594987ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b16f2b59-ceb2-42d9-abee-a60706365b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c0ed1-1855-4a0a-8b9d-d354ff4e5a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f8a75b-c7dd-44bb-a5bc-e2d563bf95e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df674b3-81b8-45ee-8b02-7b3c59f44e3c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd04c06-fdc1-44a9-b065-ef0769c027c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e04d869d-638a-4b59-bced-f42e2cc0138a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "635be4ba-4bf6-4ced-9179-eac7e636da68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85470e81-50d5-4627-93e4-40897185c5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bab8e5-0fc3-4c74-b613-ee6034f71601",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb25d80-bb47-4646-948a-56beae3bc2ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16fce383-d9df-4c69-9e89-c14acf3c637c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be85385-36bc-401a-957d-c45a30818f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5ddec0-6889-48d1-bf08-7bc0e48c355a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d43253-c0fa-49aa-94cb-b422c32b91b4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41619761-cd4c-4233-836f-1a2b1b2939d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db45040f-2887-4de4-9d27-0bde6081d01b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "753feda8-f3a9-4690-b031-7f687ea5af2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10eeb6e8-a939-48b9-a108-efe788db6ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa03efdb-3fde-41b6-a3a8-5ff58507e085",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e556df7-8fd4-4b52-bfd4-01c53025bfe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "349b90a6-7e67-4dd6-a9d7-7b4e099a95ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079d6506-6e39-435f-a5b5-e2fc526c9a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890c6670-d766-4114-9adf-45361d483bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17ffcf9-d479-436b-bfec-a25deb79f200",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c48eb52-678b-41a5-99b2-2a102cf43cd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ebc3d7a-e499-4ce9-8434-5d289edeaa3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "908fc061-e552-417f-9c41-d17dab03e759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807ea3f7-6da0-410a-a0ea-2d51265dc96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb09c6b-4b17-4811-ad78-b1f50cfb7e10",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cc200c-5e39-462c-8675-c8ce66288b5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aba22843-e5d4-4399-b2fb-c149f8edcb74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042fb489-aa12-44af-b1e8-903e09431d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fecb1a7-4d8b-4ef2-bc89-86490c14c8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5451ad68-efa1-431e-8584-5aedc50a8bad",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d1e279-fcd7-494f-9501-c0af931380df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a263081-9287-4a7b-b2d6-72f153aa2f12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "636b3a6a-c3d2-4e10-a77a-7175fff22eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e93aa4-80da-423e-8769-6e7d68b226dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99e49e7-d679-48fc-9dd1-fd05d2975c4b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8d1022-17bc-4dce-a16e-36d0fb561c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4090d3ca-e150-4765-b633-fcd6f1c414fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8170d4-14d5-48c5-93a2-88bd5bba6a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63bb5df8-2a78-43f1-9be0-50ea3fbe542b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bffcb8-de14-4479-8bbc-c90a038da026",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bcc1b0-5a04-4610-a8e1-fa42442205f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e1cb12-319a-4e2c-af31-05e069ddc7f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e6f34f-07cf-409d-8adc-487bc02b7d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cdd0ffa-ec7c-4179-b0bc-2c211e25bca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab7ef64-7ca1-4982-9a16-c01892588adb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bb962a-dbd8-42a4-b187-d292716dcc20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe83daf-6f3f-4582-9d2a-8ca767502119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "684afe30-b4ce-493f-b4a5-d32ca581492f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e042994-d00b-4864-8a91-98a763cbb585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de19a0fe-7390-42c0-ba39-1d770b7ed11f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6ffdf7-47cd-43c1-9e46-56e7f18b9a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e178ec9-c75c-4cd4-85dd-4bcbc1ba4752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9b2292-606b-4e3e-be16-47cc446cdb57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58fccfc5-52d3-4e0a-bea3-d427353fc6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f09c95a-9a81-4a87-a80f-49a86626cbe0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f61439-5e66-4a80-86f7-425fcc6cbce8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95b406a8-b655-49a6-b1ac-03328178b7d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eae6084-474f-4017-99e9-6e4e91ce1543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90806f52-c7b6-48c3-9e14-515087e7f60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df456100-aec2-4bc2-a7cd-a2ccc05b509b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4d15cc-e512-4491-99e8-eaff99c8c805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d6e0eb3-9088-4541-8a4c-a1363b009a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f72fd6f-0716-4349-8351-05c04b769d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f120da-3fe8-48b1-9b6f-31dcd2c49fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff26fc8-c78a-4d00-adc6-40bce7f6ddcf",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050886f3-a71c-4a5b-8b16-771ec0073f6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74d58d79-f19c-471a-9505-1a276118ee50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a093fda0-b8bd-4191-b56f-8d76f19e405c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d555a237-563f-43f0-ad8d-a7198237ae7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a767ae26-f62b-489b-ba0a-0df4fa621acb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017f4cea-fcdf-486d-8c35-309c9712afc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "871f3e28-44ef-49f4-842a-a5162fdf0604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b403a97-db17-47d5-b1f8-894cefac0d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8188d55d-7eae-4450-95df-c274f980453f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2428ab21-8a0c-4e8b-b0b4-d4dedeeb733c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846cb54a-36dc-4ce0-951a-7e2630f85ba0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b73356e-1bc0-428a-b2ab-7df1058813fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63760d13-be5a-46c6-a959-8f4492b6cd1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34bd5e44-ee00-46f2-ad1f-2381528f16fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9d8a01-d47d-4b05-b5f4-e605f6af659b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2921f632-b440-4380-aadc-0052eb86f9f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2df9a196-e865-4bf4-9269-8f82959941bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10501314-6d4a-47b3-9b84-a6563cf6c643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8541478a-2763-4f1a-80e2-5b20988ffee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465a0edc-0a83-465a-b66d-dbe99e929659",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c0b577-d57a-4466-ac3a-57b9ccf5c11e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c891cc1-aa88-4bdd-9c3a-b4161069d95e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c036b08d-b62b-4d85-947c-efc244cef7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa632a76-1ce1-49e2-a6c2-7f9f07b3cf5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908d16b7-ee37-4c0f-8f4b-24b642a3e76e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68ec805-2580-4c30-9e45-ab07a81ba2eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1db9a980-85f0-4b1b-b84f-47d5267ba704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c912626-06ca-4dc5-8d71-c7351fc7f82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb78d0c0-9709-4d95-bffe-cd91cfdd10c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c6c953-477d-4cd0-88f1-883e7f8ffcb9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0eaa36-5076-4f1f-8c19-c74476d6554f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe6d6940-2ad5-4a94-81b4-0247bc4f3b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371a5153-239c-44a1-b80c-f32feffe1e30",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0896e2af-d1d7-4cb6-8613-7835039e6ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f78079-9c16-4d96-835a-0a31fa26481d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b81520-22bf-4c12-9937-c01515df7c8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b99e7252-6e91-4f20-b049-f971fea41735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82aaf8ec-3c15-4364-8464-136d3b45c034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f4530a8-ec8b-487d-972b-418459c851bf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b883742c-0a52-45fb-b78d-11ff966f153e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e7d1908-ef13-47ab-9df5-e154b7b2fce1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "640d73a9-7299-45cf-a650-9545d010ca81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b4b497a1-c21c-412a-a909-931034c9cfa5"
                    }
                  }
                ]
              },
              {
                "id": "2bf367d7-88eb-4b67-af87-0fa89ef1ceaa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e07f0e5-a466-4ade-865b-1f2a0c449584",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be1dd46-bdcc-4198-851d-304547073ebc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "05298dce-eb42-4a07-8dbb-e8129df384d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b49cfb1-3d9d-48ca-9bac-0515c9086baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25cd475d-090e-4541-ab08-60cc6e417cdb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a530e0a-bdd0-4fb6-a1c7-f8ac1fbe6e1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba78e4fe-52c5-418a-bb34-ba4933767bc2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec877388-0636-4ab1-89fa-c67d2b04775a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1d335ea-3664-4c7c-96f1-454f8b6b8c59"
                    }
                  }
                ]
              },
              {
                "id": "7f52026e-1b86-4865-ba03-534fc87bfad9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "49f790c2-8e2a-4ef4-9f13-0b861cdf7b70",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186e74c6-50fa-4ecd-93aa-4bbb878a1b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fa6fc204-f34a-414c-8104-b539e2d25adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47761e27-497d-4e3b-97bb-0e2dd2a4336d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e656663d-fd13-447a-b4c5-b647c1ed05de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "38c66f6f-aa46-4271-a8ed-5a091f104af4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bbc147de-052d-4cc3-ad45-6e08e5fd6f0b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "284719d9-70e4-49cc-8e71-745e75166fef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7f51e49e-096a-41f6-9f92-fb1f6e203504"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "814b87fb-92b7-47e1-96ff-6a7c68a36e97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e7ca111-aaae-4d8c-b263-4d5af7257ba9"
                    }
                  }
                ]
              },
              {
                "id": "3eab7672-2ec6-4913-8fde-c2665b62c98c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed234548-2197-47dd-9987-10d599116184",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "01416330-aa99-4fc0-9d71-87e41296356e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d04a362-80c4-48bf-830d-64c1a7bb6cbe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa4c0341-4ac9-481b-a123-6d3d42645152"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "118d78d4-f5db-4117-8b03-7548cfbce6ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "deb4af9d-88ca-4850-8b7a-59f9fb6d2573"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc691e9d-7736-493d-8458-a6451fdc7b5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd18ddb0-cfe0-414e-9631-5b92d5c6be8a"
            }
          }
        ]
      },
      {
        "id": "6e7c2cec-15c9-4ca9-be38-2846da81c92c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "49d47181-3e44-47eb-9896-03b5500614fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a73b8ff8-1e22-4ef6-9ca3-814c6d56f183",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c90b91b8-4a49-4949-bc28-69310e38bd43",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b438b0-d035-4d07-ac15-f6d938e8d2c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "660eba0e-ea0a-4a92-a693-fedbf7c1fa57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cbc1d2-4714-4606-b02f-b547611a9a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90ed01ea-c4e6-423d-9e69-d859dba3fcaa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cbbb83d-d7bf-4131-ad39-1349949148b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29f6714a-7299-4694-826a-5aa067daeea6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1767188b-8229-400e-b592-8be373fec816",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20ccdaeb-9fcc-40e6-9f8e-4f476323a1e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "191ca1c9-baed-4451-a8e0-df9871de2181",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "250a7591-def6-4885-8cb5-e43e74f14f98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80ee9d0a-14ce-4832-a842-49ac65a69e61",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "636a0743-3f3d-4b90-9fd7-cd4aebddafa3"
            }
          }
        ]
      },
      {
        "id": "c9a4e109-3d0d-4d19-a4bd-ba5866b9c825",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2a96b44f-323e-4990-96b2-d50f71933cdc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb949f7f-6d58-42a7-8472-7c12c1772c6b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0708cc1d-e0b4-4e02-83c9-c2e36c453d63",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b10744-219c-4505-8174-0a6250a0ab9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "accdbc63-7bba-4c23-871d-41225c9b8f07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e45de3-bfd0-4b50-b00c-e9cdde87239b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9a83095-8ba2-446b-986a-dcdba8d04594"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7af2ad76-0a23-4341-adcf-8f2dafdf0701",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9130d5f7-35be-4ab6-b5b8-e0045b50971b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c266bef-05ca-40c3-b931-e0097e930bb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49c5d713-b3a7-4c9c-8925-dafb3040e8a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de9a36b9-4465-4ec1-a1ee-4facc00474ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "be923802-6b6f-4fa9-bff7-df47faf8e5d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cc3f9e8-d2ce-4a88-b339-368aa0542cf9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0fcbe2c5-2ceb-40ab-9c93-d2c94d2173f8"
            }
          }
        ]
      },
      {
        "id": "f5cbcefc-8b13-4467-94e8-c582a90f5390",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "718abd83-404f-4d91-a770-df89eec4a552",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa9c23b9-005f-4e2c-9e14-c0d3ba7235ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "57d7be00-2d3a-4f97-8ec8-e1ece9cd9bd0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea95f17c-1afc-4b58-baad-1636a12bedd7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12f9d9b5-3303-4c0e-b573-d117f2aa36a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60402927-67cd-4959-9970-d3d178699938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5cae47e4-7ba4-4d1d-8678-50631f8e9330"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f066d5a-67ef-4382-b03b-a11eec9af663",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "914bce95-2360-4531-be8c-145e418e0269"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a51fb54-4865-4e93-bbc7-406074238919",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca69e271-206e-4e1b-ab82-4a901f3b1586"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cb2f969-3e20-4259-bb54-cb7791f517b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0db6554b-e95e-4828-8b1f-ff52850802b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f7f6a1d-1e46-4e64-b52c-c6d44d76ae7f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3274ffc-c0fd-4a0f-bc71-c569a8991633"
            }
          }
        ]
      },
      {
        "id": "9ac50adc-c8d7-4ff1-b649-90df8d1053fc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58332cf3-97fc-41ef-b12e-be36a0dbfc99",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9583a2f-8e8e-44a8-81af-f625a584474f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9bb4cdc0-71fc-4081-860b-db9df7da079f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3791f0fd-b66d-45af-a249-ff7b482f4d92",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77b6993e-33bc-4a01-b503-83f519d06abe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.22456140350879,
      "responseMin": 6,
      "responseMax": 495,
      "responseSd": 74.00283607818457,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703032151528,
      "completed": 1703032180884
    },
    "executions": [
      {
        "id": "f8d6f15d-49f1-4d57-97da-cef86cc848e7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1abf369f-0e2b-4549-a467-81f17fec7a64",
          "httpRequestId": "fc9a1478-22aa-44dd-8ad7-7e7a13cd6f7c"
        },
        "item": {
          "id": "f8d6f15d-49f1-4d57-97da-cef86cc848e7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "74775576-96bb-4bdb-ae16-3d8208382484",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "51167e73-3e2d-4c28-b927-1661ac6bf43f",
        "cursor": {
          "ref": "11c019b6-8c2a-45ff-b344-024c4aef02e2",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "740b5400-24bb-4c89-bf50-a7a2d9a37667"
        },
        "item": {
          "id": "51167e73-3e2d-4c28-b927-1661ac6bf43f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a6ea18b1-a7ef-404f-8e81-f82342abcf1b",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "53110484-f00e-46ca-b2b0-fe6ba2843e10",
        "cursor": {
          "ref": "00c89891-c8bd-4cda-8a4f-78af4811884a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2fb75830-0595-4eb5-b27b-2a5c733440dd"
        },
        "item": {
          "id": "53110484-f00e-46ca-b2b0-fe6ba2843e10",
          "name": "did_json"
        },
        "response": {
          "id": "4c71de4b-0f39-4fe5-9015-a1f12ea31d1a",
          "status": "OK",
          "code": 200,
          "responseTime": 390,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee5e553-46a0-464c-82e8-472a3e883818",
        "cursor": {
          "ref": "1bd43889-26c8-4263-8e98-ce90df9b6543",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0334c9f1-61e6-493d-98de-238e8b6da373"
        },
        "item": {
          "id": "6ee5e553-46a0-464c-82e8-472a3e883818",
          "name": "did:invalid"
        },
        "response": {
          "id": "a95a66b8-41dc-4908-9eb6-540f8d1a5e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee5e553-46a0-464c-82e8-472a3e883818",
        "cursor": {
          "ref": "1bd43889-26c8-4263-8e98-ce90df9b6543",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0334c9f1-61e6-493d-98de-238e8b6da373"
        },
        "item": {
          "id": "6ee5e553-46a0-464c-82e8-472a3e883818",
          "name": "did:invalid"
        },
        "response": {
          "id": "a95a66b8-41dc-4908-9eb6-540f8d1a5e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef52fc61-d21a-4894-ae0d-972cd153fd0f",
        "cursor": {
          "ref": "522a47a8-3396-4880-a664-a45daeec40b1",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "39cf1037-136a-4e43-b8ad-d7a2df03a5b5"
        },
        "item": {
          "id": "ef52fc61-d21a-4894-ae0d-972cd153fd0f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e5bf8881-aed6-41ed-bed4-15c76f0c3e95",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff814f7-6963-4cd0-a430-2f34a1ec1228",
        "cursor": {
          "ref": "bde726de-e540-408b-8e3c-59792985942b",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "695ce8d4-dba1-4775-b36e-e6880cd16032"
        },
        "item": {
          "id": "2ff814f7-6963-4cd0-a430-2f34a1ec1228",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "669eb16a-5ea5-4bf5-b75d-0c2cc966eef4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 56,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332c937c-3438-44d5-b2f3-208df63043c7",
        "cursor": {
          "ref": "d186863b-ae28-4f96-9551-587af65683a4",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "32bc2f10-e1aa-4922-95f3-a33d9d9322c1"
        },
        "item": {
          "id": "332c937c-3438-44d5-b2f3-208df63043c7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "648048fe-21d3-4ff5-ab73-fef190940d04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aebdb47-063f-4b13-b113-c4dba462066a",
        "cursor": {
          "ref": "affa73c1-b93a-4b3c-a250-1a97ac45ec88",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "69bd169f-32f9-4315-a4b7-9e9381683ea8"
        },
        "item": {
          "id": "9aebdb47-063f-4b13-b113-c4dba462066a",
          "name": "identifiers"
        },
        "response": {
          "id": "89be5290-9c4a-4c0e-987c-f46ae26e0d2c",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0f7651-cc12-44e1-aad8-d9e03b5fb15a",
        "cursor": {
          "ref": "9ca95dcc-0427-4a7f-81cf-a4f337aa8361",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8f3a6651-a0ef-449d-8203-a1282da0b0d2"
        },
        "item": {
          "id": "8d0f7651-cc12-44e1-aad8-d9e03b5fb15a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4012c366-4fb7-45ff-8e0b-9d58ecf4afcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00acf77c-734f-40f9-b5b1-aa512bd84bc5",
        "cursor": {
          "ref": "937a23d4-91fa-4f13-9e24-a651dd5455ad",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "25066cac-af3a-4474-8e1f-27549d417a63"
        },
        "item": {
          "id": "00acf77c-734f-40f9-b5b1-aa512bd84bc5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c1f3595b-f0ed-45c7-88fa-27dbfd1854c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafc8400-f6b0-4ca2-a3f2-1375a959a236",
        "cursor": {
          "ref": "e42048bb-e99c-41a0-a0a3-cbb020c4d578",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a0729c54-2cbc-4ebc-bb2e-ab89eb5b2f57"
        },
        "item": {
          "id": "dafc8400-f6b0-4ca2-a3f2-1375a959a236",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8826c1ac-9bba-46ed-883b-8a8e03854948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3773df0a-cc65-47b4-abee-f273b66aeed6",
        "cursor": {
          "ref": "78a3b948-1d13-43b2-a374-a3f930212bf5",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "818b6166-95ba-4d16-973d-c59f129c0dd6"
        },
        "item": {
          "id": "3773df0a-cc65-47b4-abee-f273b66aeed6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "70ca7f42-4cbe-4bbc-abca-179c9b5de0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127d568b-2f2f-4266-b8b2-77f99afc7df2",
        "cursor": {
          "ref": "71c1221e-bac2-402b-8412-995aaa159b67",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2f14208f-a9a6-4b1a-b51a-4e538a72a084"
        },
        "item": {
          "id": "127d568b-2f2f-4266-b8b2-77f99afc7df2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ef8709ee-50a0-450c-b98d-a19af0782e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bcf941-bc3e-416a-852f-8f991c147fea",
        "cursor": {
          "ref": "169f38e6-1f09-44e1-84d7-aba8e961c3e3",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7bda8117-9abb-4477-a4c1-a236500522fa"
        },
        "item": {
          "id": "e8bcf941-bc3e-416a-852f-8f991c147fea",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1c5507eb-c4bd-4c64-9979-16eaeeb0eb1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8758fb5f-7483-4919-88cb-1516024d65c9",
        "cursor": {
          "ref": "6dc26bda-5d2a-46e4-8a09-e08ad34421e1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2bf8383c-de06-4835-a3fa-308bf36ac8cd"
        },
        "item": {
          "id": "8758fb5f-7483-4919-88cb-1516024d65c9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "eaf5ab25-df6e-4017-aedf-6d297698de64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38851fa-6f53-4d25-abe6-6f1afc210555",
        "cursor": {
          "ref": "5d57b00a-4b64-4a62-8536-fb148305e91d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "91f6bcc5-9f77-490f-9120-04f7465b3685"
        },
        "item": {
          "id": "c38851fa-6f53-4d25-abe6-6f1afc210555",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "950e80f8-1a77-4663-aa6b-9461a24ae16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f744e530-e551-4db3-9ce4-15f5cea66fa9",
        "cursor": {
          "ref": "e7a4538b-b991-4a9a-ada7-88afb08ae1ff",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7c46eff0-59df-4b66-bd66-46d8ef3481f3"
        },
        "item": {
          "id": "f744e530-e551-4db3-9ce4-15f5cea66fa9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e3327934-02aa-4781-8c61-d7ed3c450d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e29d9d-5499-47f2-99e4-dc6de180f5c7",
        "cursor": {
          "ref": "87eb2041-673c-4c10-98c6-caaf56623811",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "232770e0-4c6e-4705-89a6-30192d9898e8"
        },
        "item": {
          "id": "21e29d9d-5499-47f2-99e4-dc6de180f5c7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e99a2e85-465e-45b0-b4d5-48fa0a8cd166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8860da9-4373-4f1f-8e9b-aa1915048c70",
        "cursor": {
          "ref": "9a10089d-22f8-4f39-8170-242818be0c58",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "287b8935-8e46-4597-8067-e64daf538aae"
        },
        "item": {
          "id": "f8860da9-4373-4f1f-8e9b-aa1915048c70",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1e8437e7-59dc-4a5c-89c4-9536b390206c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed52a5d-bccb-4622-b51f-29c50267d940",
        "cursor": {
          "ref": "0dfe73b6-27d8-4a3d-a229-d56b5d626a33",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "98438ce5-6950-436a-a5cd-c1fe031e57da"
        },
        "item": {
          "id": "2ed52a5d-bccb-4622-b51f-29c50267d940",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "782cdb3c-6d52-450d-a609-0b78cdc619a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3993a3fb-51fd-4852-8026-56f3c2e4bfeb",
        "cursor": {
          "ref": "f773c483-9560-4175-aa66-0ae1f7dfb4ff",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b564d473-dca5-45d6-856c-e0ca42df3aef"
        },
        "item": {
          "id": "3993a3fb-51fd-4852-8026-56f3c2e4bfeb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a7c7e7e3-9142-4184-be41-c53f605cfda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed472219-9395-4307-b00a-a4a6adf9fec5",
        "cursor": {
          "ref": "1383d04c-b53f-45f5-8d0d-9938fdceeeea",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a1c6c879-4914-43f6-9106-42a7fa9447e4"
        },
        "item": {
          "id": "ed472219-9395-4307-b00a-a4a6adf9fec5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "de6b48eb-82d2-48c5-86fb-eb5e3ab2cc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a47e37c-f81a-4e3d-b7e1-d08efc2a4810",
        "cursor": {
          "ref": "688774ac-d27b-43a7-9518-c69da5cc31d5",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9f024662-d627-44c8-b7c3-605821425a3f"
        },
        "item": {
          "id": "4a47e37c-f81a-4e3d-b7e1-d08efc2a4810",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5bc8b542-ce88-4fa9-9b73-a0c0732cbe22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee15a51-6c65-4e38-9c40-b802884af29b",
        "cursor": {
          "ref": "55fe8cc4-660d-43f9-9ac3-43d375f4f6b5",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ca30b2e6-6110-4689-9fc2-14fd6f6021a2"
        },
        "item": {
          "id": "1ee15a51-6c65-4e38-9c40-b802884af29b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5dd679a4-5e53-48c2-9d02-fa9b2e670935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35cefc6d-25e4-4a3c-bf7f-597e0e19ffb5",
        "cursor": {
          "ref": "c3ca7db8-1972-4573-babc-21a612cafaaf",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9924cfc9-69a0-4ef6-b9a0-4eefff51a6e9"
        },
        "item": {
          "id": "35cefc6d-25e4-4a3c-bf7f-597e0e19ffb5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7f13c50e-ecc4-4af0-b0da-60943c76ede5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5814b539-4cfd-4022-921e-0987cfa6b663",
        "cursor": {
          "ref": "f0d994f0-760a-4cb3-95f9-8472f9b5f53c",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "04ab32c4-0df5-4454-8348-11fef90c5e56"
        },
        "item": {
          "id": "5814b539-4cfd-4022-921e-0987cfa6b663",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0494740f-226f-4199-ac5d-dabf375bad24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91376b5-fd34-4aaa-9b3c-5a6223a03577",
        "cursor": {
          "ref": "724027d3-a880-464f-b1fd-73b8fcc392fd",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bbe26153-9893-4f68-8ff8-70fb77cf633b"
        },
        "item": {
          "id": "b91376b5-fd34-4aaa-9b3c-5a6223a03577",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "98f76a50-166f-46a0-b92d-132f98f44600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7da0f91-f53e-4169-a0ea-e5a02bea3799",
        "cursor": {
          "ref": "ded489b5-f214-4dcf-84a3-fe593e7a78d6",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fe977620-a3fa-44ce-a344-cdcc6e4b3af4"
        },
        "item": {
          "id": "b7da0f91-f53e-4169-a0ea-e5a02bea3799",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "27344cc3-c621-4506-940a-d566630f549d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e119db90-7c5c-4ba6-8c3e-df0b1ad3e380",
        "cursor": {
          "ref": "e85d7866-98a5-4a0e-903e-ba52389da0d2",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4188552f-0335-4e57-be41-d0c9afba6589"
        },
        "item": {
          "id": "e119db90-7c5c-4ba6-8c3e-df0b1ad3e380",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a018d5ed-4bd3-4036-9893-902ebdea4ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe640e31-a6f0-4398-b372-ea293f3b41d9",
        "cursor": {
          "ref": "e09bcffc-c900-4e16-9aa2-5b00105bb8a5",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2d03f00f-23ea-42a7-a256-e5d8b47685ae"
        },
        "item": {
          "id": "fe640e31-a6f0-4398-b372-ea293f3b41d9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "98080fac-e14e-46f9-9135-0962458a84c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92da221c-5b48-487b-9997-40f3aa3ef7c4",
        "cursor": {
          "ref": "6ce90f21-b891-44fe-8db2-babbd90a36af",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "add31db3-a3e9-4557-95cc-42360e7a8f48"
        },
        "item": {
          "id": "92da221c-5b48-487b-9997-40f3aa3ef7c4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d7f6c7f3-e62a-4829-8b83-8cdab7bf0ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4982d1-619c-43c1-8382-12d562797e9e",
        "cursor": {
          "ref": "f990c4d4-8c37-4616-a4b1-6b45ae49cde3",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8d8cb69e-bf55-42c6-b88c-7d050e011e43"
        },
        "item": {
          "id": "1b4982d1-619c-43c1-8382-12d562797e9e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f7b28017-4e8d-453e-bff0-93256abdd981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0896d64-5653-4bc6-b95b-3e7e48863b39",
        "cursor": {
          "ref": "f212cf38-e2e8-4ac8-8913-201212eff22a",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5cf5da00-2946-441e-ac9f-d82088e88e3a"
        },
        "item": {
          "id": "a0896d64-5653-4bc6-b95b-3e7e48863b39",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5b37cf42-3cb5-498f-8c73-7086a1f91556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291e78ca-e851-4eb2-8c83-5092f1f735cc",
        "cursor": {
          "ref": "59e115b8-ae16-4107-856d-3e77136ff1b0",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "15f1f27b-6617-4800-ae15-4dfed9f79d9d"
        },
        "item": {
          "id": "291e78ca-e851-4eb2-8c83-5092f1f735cc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "025bd9ff-f916-4564-8dcc-acecd688767f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca52a85-30c4-4254-8d38-74df8ea31d19",
        "cursor": {
          "ref": "1f33c2af-0757-4952-9ca3-88a67c788475",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8bb6ef2b-cf62-4a8e-8be6-16059f624d6c"
        },
        "item": {
          "id": "cca52a85-30c4-4254-8d38-74df8ea31d19",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6a513cdb-fe6e-45d8-a379-43c3f8903720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1642e907-8929-44b8-9e27-05b2556c0d07",
        "cursor": {
          "ref": "1b1e97ab-c6c6-425a-ba30-206782cddbc4",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "68eb7e48-7002-4b79-98a9-cf694f9541c5"
        },
        "item": {
          "id": "1642e907-8929-44b8-9e27-05b2556c0d07",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3bd87f0f-bce1-4c51-a6ef-e460c812882b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac827ba-b310-495f-8ed1-1bf6476e18f7",
        "cursor": {
          "ref": "e70e48bc-71d5-41b8-8346-5613a505866b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2d2109bf-f6f4-4ad1-b9e4-a7cb3aefb03e"
        },
        "item": {
          "id": "0ac827ba-b310-495f-8ed1-1bf6476e18f7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2f9d7457-56ff-4432-8dd2-b9656253cca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d119913-d394-4735-b660-0ebd68a22dbe",
        "cursor": {
          "ref": "0352ad91-cf1f-4590-9a34-097ef9b33a95",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "55a207ba-c523-4e3f-bf0c-ea4c65a48fca"
        },
        "item": {
          "id": "4d119913-d394-4735-b660-0ebd68a22dbe",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "edb0a07b-85d1-4d5d-8e6a-a41c949e170d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81d5664-4027-44b4-8371-e220d063ec2c",
        "cursor": {
          "ref": "3639b42e-c033-4cdd-b1aa-187aeee82afd",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c3e75829-226d-4528-9b59-b4d8f9ed5ca3"
        },
        "item": {
          "id": "b81d5664-4027-44b4-8371-e220d063ec2c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "796b12ae-b78e-48f1-9d92-1b25b7c89ebd",
          "status": "Created",
          "code": 201,
          "responseTime": 495,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "42a55786-efcb-4798-9433-e207a7d976bb",
        "cursor": {
          "ref": "7929182b-2854-45f4-84bc-28d508f881dc",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "19e91ddb-b7fc-4d71-ab90-d6d27e169bbc"
        },
        "item": {
          "id": "42a55786-efcb-4798-9433-e207a7d976bb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "393954f6-a297-46fb-b482-a790374a9fae",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1d03e331-8b87-4a4b-aa32-31ef6ad1b48c",
        "cursor": {
          "ref": "cfe4a517-107d-4ea8-9e99-082f71b74792",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1dda4713-1d2c-4783-aa30-5fa4b32b7c51"
        },
        "item": {
          "id": "1d03e331-8b87-4a4b-aa32-31ef6ad1b48c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8b508c67-dc98-4ad2-a5ea-839fd1354d5b",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "21f372fa-c91f-49ce-b29c-905ee41f8471",
        "cursor": {
          "ref": "d0271fdb-661b-4a53-923a-56b0768482b6",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "21d886a9-0336-4234-a2be-7566656bf32f"
        },
        "item": {
          "id": "21f372fa-c91f-49ce-b29c-905ee41f8471",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fb9997f4-7f56-4b0c-83db-770781340b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45934b3c-7fa0-4c4b-9b54-395597e27c1e",
        "cursor": {
          "ref": "0442f91d-6c54-46d4-91ee-8b7349a813c6",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "56ea85de-6116-4e3a-80d2-5f68b056d007"
        },
        "item": {
          "id": "45934b3c-7fa0-4c4b-9b54-395597e27c1e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4b44aa88-41d7-45d0-8493-a98a7cc240f0",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "59164e10-3525-4f03-9204-0e97c3f73e09",
        "cursor": {
          "ref": "0b4a0197-f104-447d-8d5d-d402ce339d94",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "641470fd-bf43-4965-bbf4-a62ce3b9e124"
        },
        "item": {
          "id": "59164e10-3525-4f03-9204-0e97c3f73e09",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e9f0454f-7937-42bc-8d90-33e1e5a8ab21",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "de7abff9-01ad-4772-bf42-40bc1cef6384",
        "cursor": {
          "ref": "64588d3a-aeb3-4123-a37a-a54fb4086888",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2595d76f-9132-40d7-8b7a-e9cd0eac49cb"
        },
        "item": {
          "id": "de7abff9-01ad-4772-bf42-40bc1cef6384",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d1f98a37-5b07-4df6-8efa-70d73b4fcb18",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9a6d0bfd-1b0c-4f5c-9fe1-9fcb72c630f7",
        "cursor": {
          "ref": "c7e47e38-3a34-40a0-8920-744a598d05f4",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "78823215-bb65-4142-b9d7-d72515b0a84c"
        },
        "item": {
          "id": "9a6d0bfd-1b0c-4f5c-9fe1-9fcb72c630f7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "82c8abb0-8c6a-4380-a959-6b2f76bd9139",
          "status": "Created",
          "code": 201,
          "responseTime": 443,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "738304a5-ec3d-4d02-8b4e-96663dbc063a",
        "cursor": {
          "ref": "2c14d13b-78f9-4178-947b-ba10ae74994a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b7899f7c-0ae8-49d3-846b-f25e5d60ab76"
        },
        "item": {
          "id": "738304a5-ec3d-4d02-8b4e-96663dbc063a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ef7f10d6-89a2-45f4-9cdd-23773393f5dd",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "916c7707-440f-4b4e-840f-3c781284d2cb",
        "cursor": {
          "ref": "289bb38e-6a0c-4d10-ad1c-00f9d11a722c",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e1560c28-9b2f-4dd0-afd4-35f08faa7481"
        },
        "item": {
          "id": "916c7707-440f-4b4e-840f-3c781284d2cb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d4ca7021-0277-4e40-9f65-1e4a6b6d8abf",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c777b92e-1ea2-40d2-ab01-19ea9a937ed3",
        "cursor": {
          "ref": "7e31fb86-d471-4eca-82e2-49be3cf0e8ef",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aeb0e293-5435-4aee-a671-7148732df4c1"
        },
        "item": {
          "id": "c777b92e-1ea2-40d2-ab01-19ea9a937ed3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f8df0760-7c7f-4858-afc8-cfd86721ce8e",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "41e1b4cd-0f5b-4077-ae5e-1b510f229df1",
        "cursor": {
          "ref": "4e47920e-4ca9-409a-a665-dc91829b11f1",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4950c913-7d53-49df-a1ef-be316ff2ea5a"
        },
        "item": {
          "id": "41e1b4cd-0f5b-4077-ae5e-1b510f229df1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "35ee4c0a-5b0f-455e-b79e-5bfabd1371b3",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a71a8731-18b5-4ca5-8376-bd473e7d1d48",
        "cursor": {
          "ref": "f76ec1cd-58e1-4abb-826a-3b10b87b53e5",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "36931bab-7012-4333-b0f0-e7fc4f8f1124"
        },
        "item": {
          "id": "a71a8731-18b5-4ca5-8376-bd473e7d1d48",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "12715e4e-b9bc-45db-83da-e41dd72222b6",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cc624316-0254-4a75-a853-ba15dc3b2193",
        "cursor": {
          "ref": "c072fec4-da5d-48c0-afdc-96d093340239",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7d202b48-6850-411b-ac1c-4452aa4502da"
        },
        "item": {
          "id": "cc624316-0254-4a75-a853-ba15dc3b2193",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b30fed11-e3b0-4283-9b21-707a596956aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400ef7f6-5ded-4841-8790-964d090fa1eb",
        "cursor": {
          "ref": "5273d8d9-3c7c-4ecb-800b-82b94db2f039",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bd8e5335-3a89-4028-8fa9-4f3cfa9e956d"
        },
        "item": {
          "id": "400ef7f6-5ded-4841-8790-964d090fa1eb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "46bcfdd2-648b-4105-82d9-5e87e967dd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c564675-8c27-4675-8572-4df749b795d3",
        "cursor": {
          "ref": "83b52bed-58e1-444e-9044-2097b01fe9a0",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6508810e-b8b8-418c-a218-fc12b4af663d"
        },
        "item": {
          "id": "0c564675-8c27-4675-8572-4df749b795d3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "aa89dbae-e872-4f2f-939d-11e00408512f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef4a15e-fd42-45f4-99e5-2ffc0644a0c4",
        "cursor": {
          "ref": "93efd46c-4bb0-4412-babc-63b06af5d9ef",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b0f6d46f-6c87-4ab5-ae81-f86c020ef5f6"
        },
        "item": {
          "id": "3ef4a15e-fd42-45f4-99e5-2ffc0644a0c4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9ff9d664-59c3-41c6-96b6-aff209043e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58255fb8-99dc-4d7d-9ca0-1089f8422c4d",
        "cursor": {
          "ref": "de17eb8f-a3b8-4ae9-8098-e85b8638a66b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "000bac31-2a0f-49bb-a3aa-e404bbbef461"
        },
        "item": {
          "id": "58255fb8-99dc-4d7d-9ca0-1089f8422c4d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "52eda2b1-196b-492b-b08c-795605ad56cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9e133a-cdb8-43d5-93c6-0983de02c1fc",
        "cursor": {
          "ref": "7d55d972-cfc5-41e3-be22-b600ec7ac3f9",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d5b62c93-b878-4f25-974f-a8c918eea9f0"
        },
        "item": {
          "id": "1a9e133a-cdb8-43d5-93c6-0983de02c1fc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bf8e34f7-92df-4c15-8daf-f382fe8ecee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e82e88a-b77d-44b1-a891-2642f4565833",
        "cursor": {
          "ref": "02fe37eb-1cea-4cfa-915a-ccb3b2b7aada",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b1d8c6d0-fae7-4147-a1f1-484bd5fba344"
        },
        "item": {
          "id": "8e82e88a-b77d-44b1-a891-2642f4565833",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ade4ff21-97fa-47e1-b24c-542452ec74e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5b7964-7b99-41c6-9b31-0d67c48dd9f0",
        "cursor": {
          "ref": "1a9267a8-06a1-4fee-803a-73794161cca3",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "24051a34-bab0-4472-97cd-4b5815c03101"
        },
        "item": {
          "id": "2f5b7964-7b99-41c6-9b31-0d67c48dd9f0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b6f6cc39-8b0b-4013-bb16-1e47ef94bd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6bfbb8-4afb-4b2a-b765-d34b70f75215",
        "cursor": {
          "ref": "fd6d37bc-0f28-4b2a-9d0e-d71062ab8e52",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "eda2d9c5-29e5-4ec1-8930-9163bf2c8dbb"
        },
        "item": {
          "id": "4d6bfbb8-4afb-4b2a-b765-d34b70f75215",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ac2107bb-d6db-4ba2-b4ec-dcfaea46f3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9353e6-ed36-4b58-96c7-a50072b1a8b0",
        "cursor": {
          "ref": "5a22bfed-beb9-4a65-a30e-eaf5662648e6",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "91fba950-3d85-46b9-9eee-a45a84a3f1a3"
        },
        "item": {
          "id": "0b9353e6-ed36-4b58-96c7-a50072b1a8b0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0bffe6bb-4472-4673-887e-44033e8e8529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efc087c-8647-4ff0-b8be-2bcf4a676e99",
        "cursor": {
          "ref": "41352f33-27fc-44e6-b9e4-0b4909a17e94",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4083f279-43d1-43b2-8c36-39cf7a321243"
        },
        "item": {
          "id": "4efc087c-8647-4ff0-b8be-2bcf4a676e99",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f49728d7-7443-4832-adfe-f2d69d0f8eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea594c7-3e24-494b-ac8b-e43369a19bd4",
        "cursor": {
          "ref": "fa25d5e4-b1ac-4057-bd4f-d4c8090fdcaa",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "32d6769b-6ef4-46ee-b567-8f4e4bd6b05e"
        },
        "item": {
          "id": "5ea594c7-3e24-494b-ac8b-e43369a19bd4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b5fb7ca8-9a0a-4fa3-8a11-7f516cec19a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6050e3d1-4ad4-494e-be03-bb9c5a92dfce",
        "cursor": {
          "ref": "64dace58-c5ac-47ed-939c-343358e85825",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b6f8d327-2fdb-41d4-ae2f-f662e4cfc8b7"
        },
        "item": {
          "id": "6050e3d1-4ad4-494e-be03-bb9c5a92dfce",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c13ea645-96e8-4e57-8e91-660dd865b729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9680adb-0c25-4331-96b8-11c2f103b4aa",
        "cursor": {
          "ref": "92a8cf65-b70c-4085-8981-89e3298e6f68",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ca44988f-a81c-44da-9408-660209a411fb"
        },
        "item": {
          "id": "c9680adb-0c25-4331-96b8-11c2f103b4aa",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "372f4100-0c59-44b3-bc8e-0a88ba5e8f52",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e271b656-3a2c-4b57-aa85-9c3bbd35d9ec",
        "cursor": {
          "ref": "d66d898d-291e-4b4d-b65d-9d5398012050",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d41e0c2b-54a4-488e-aeb8-090efdc94ea6"
        },
        "item": {
          "id": "e271b656-3a2c-4b57-aa85-9c3bbd35d9ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "584318df-bb68-4494-ac42-b5e06a9bb2b7",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c5cc4202-b232-409d-bb5c-6285d9df861d",
        "cursor": {
          "ref": "7f6d0111-1f14-42b4-bdaf-9ca9f40f2351",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8a7fe330-8df9-4bc6-b536-9de6d6f43cd5"
        },
        "item": {
          "id": "c5cc4202-b232-409d-bb5c-6285d9df861d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "92055390-4579-4f2a-92f8-c073da16204a",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3bc3a9de-c8c7-4acf-a310-be7d9ea956f8",
        "cursor": {
          "ref": "b11d64d2-6925-4703-b8ed-3ee9ce237796",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "216803e4-f519-43af-a0fb-b25e25f8078e"
        },
        "item": {
          "id": "3bc3a9de-c8c7-4acf-a310-be7d9ea956f8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e6c94faf-2f9d-4d9c-bce4-7c5590f7bf75",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "af8f2df3-18d7-4cfd-a488-cab2e9d43458",
        "cursor": {
          "ref": "465ee1c9-d10c-4476-bb87-3ebf0df1b182",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ffd653bc-1735-4e1e-846d-a6751883f571"
        },
        "item": {
          "id": "af8f2df3-18d7-4cfd-a488-cab2e9d43458",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0d7ffda0-0c38-4502-b23b-b609983bdef4",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d3ff830f-8a6e-4690-9c8e-e3138fe20b03",
        "cursor": {
          "ref": "2344e00b-b086-448f-a775-601783ef482b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "52daf7b5-113f-46fb-913d-ee329d31b5dd"
        },
        "item": {
          "id": "d3ff830f-8a6e-4690-9c8e-e3138fe20b03",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b8fa2975-7a2b-4543-9cda-7fa5f10fbbef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc4ee4d-3c20-4e62-900c-b5852adacd51",
        "cursor": {
          "ref": "d0db9c46-aaf0-422b-ab03-91417d871ed8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4c535956-313b-4604-a8b0-24dd11626636"
        },
        "item": {
          "id": "adc4ee4d-3c20-4e62-900c-b5852adacd51",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1bd4d89f-685c-4925-a117-9177f4cb4a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59805c8-218b-4179-b697-810921627a7a",
        "cursor": {
          "ref": "ac7547ea-72b3-45b5-bcfc-b378e0ff44d8",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "385837b4-5f68-4af6-b37f-d5cc0593a5b0"
        },
        "item": {
          "id": "b59805c8-218b-4179-b697-810921627a7a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "da89b402-cf22-44ad-8da7-10e1862864ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859549c7-ee4d-4622-9f3e-50613b8c712a",
        "cursor": {
          "ref": "149a5d81-e5fe-43e8-8d02-136f58daaa59",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e892de59-a83d-4c88-881b-4ea824ca79e9"
        },
        "item": {
          "id": "859549c7-ee4d-4622-9f3e-50613b8c712a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "eef0323b-7a6c-418c-9516-09203238d6b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428189b4-4f74-4f91-a6f5-6614c6d49036",
        "cursor": {
          "ref": "b25b54bd-eeb1-4c68-b96f-8fd722b1ace7",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9ca35da0-ed05-4402-bd82-5eb8c08b4ebc"
        },
        "item": {
          "id": "428189b4-4f74-4f91-a6f5-6614c6d49036",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "06337f3b-1b8c-421f-939d-e4a106bf9d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5484cf26-6750-4499-95d9-93e514577385",
        "cursor": {
          "ref": "96e05a01-4258-49b7-909d-cdbca53270d1",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6950644b-8011-4b0e-a72b-469cde78c92e"
        },
        "item": {
          "id": "5484cf26-6750-4499-95d9-93e514577385",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5c70a866-2894-4c13-97d6-90154b425f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d16f2db-df1a-45a1-908f-67f083680e47",
        "cursor": {
          "ref": "101a8b11-5196-423a-b1d6-93932027036b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1969d127-aeb5-44ed-a949-428b8256738f"
        },
        "item": {
          "id": "2d16f2db-df1a-45a1-908f-67f083680e47",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f3f81916-28df-458e-bc18-d2b8db949852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5855595a-52d4-4bdd-ab9c-c07ad8bc0952",
        "cursor": {
          "ref": "b928d58e-f41e-4e20-8fc1-31ce760cdcee",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1c81599b-7f56-41a3-bde1-88256441bc67"
        },
        "item": {
          "id": "5855595a-52d4-4bdd-ab9c-c07ad8bc0952",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "eb9af9b2-1a98-42b2-8e6d-608e41a877f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f069bb-f62d-4333-b9fc-2945245d6e9b",
        "cursor": {
          "ref": "ffcdd9c6-e00c-44a2-8355-8ac086f35178",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "38cc2816-d385-4c86-8191-3db310ab5e71"
        },
        "item": {
          "id": "06f069bb-f62d-4333-b9fc-2945245d6e9b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "eb129490-7892-492d-a7f4-dc30ff5ce83b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d338bb-c9dc-4dc4-a1f7-b52202d52462",
        "cursor": {
          "ref": "6b4961eb-f3af-4d26-aa23-b82b65f3ab4c",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5c678972-8d55-4580-990c-66cf999011af"
        },
        "item": {
          "id": "99d338bb-c9dc-4dc4-a1f7-b52202d52462",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e1ee4a34-bc9e-4ce0-b565-4ef0f6798913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da43a4e-c785-4be6-b01e-a0afc556fd63",
        "cursor": {
          "ref": "6ccba1e4-5c57-4259-aed9-7ed71781845d",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a819939f-812f-4ede-b0ee-f71ae531ca89"
        },
        "item": {
          "id": "0da43a4e-c785-4be6-b01e-a0afc556fd63",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "21875b1c-795c-4756-8544-d7088cc38e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62f8e9c-0f3f-4b81-8b71-f674c759f2c3",
        "cursor": {
          "ref": "d23cfbda-23d5-47ab-bfba-b97bda35ed03",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "69bfe180-0a4b-4c50-bfb5-32d168e5e279"
        },
        "item": {
          "id": "a62f8e9c-0f3f-4b81-8b71-f674c759f2c3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9c040d52-0ce5-46a0-b0d6-59dc6e999dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3aa1f5f-57dc-46a3-bb3c-eb187728b75c",
        "cursor": {
          "ref": "95bbf3a8-adfa-4b47-8cbc-1892e91191e6",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a9abb504-80e8-4924-bba0-7b8efc9a9f48"
        },
        "item": {
          "id": "e3aa1f5f-57dc-46a3-bb3c-eb187728b75c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "81b5882b-ac4c-4643-931b-bdf6b12612d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445d7728-9deb-4f73-b21b-7cfcce82d4bf",
        "cursor": {
          "ref": "17dba684-a36a-4c8c-940c-e689a2130aba",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "40fbbc3f-b585-453b-86f5-f8b147c0a785"
        },
        "item": {
          "id": "445d7728-9deb-4f73-b21b-7cfcce82d4bf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a423ccb7-ddb8-48af-afd0-c1d1933cccc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63432d46-cac6-44ac-84a1-f5e32d15864a",
        "cursor": {
          "ref": "2f64da6f-c038-4b77-b5de-0c3c968781c3",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f0d7fb4e-6391-43c3-81a9-d1b093a4a359"
        },
        "item": {
          "id": "63432d46-cac6-44ac-84a1-f5e32d15864a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e22c1c2f-3779-4df6-87f9-042186ec6675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de554154-fefe-4c9e-b305-1d4b30555c33",
        "cursor": {
          "ref": "80049608-e1d3-4873-98af-43cc6f7a8287",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "59c15fd6-0dd9-48aa-80a7-d043af0b96a5"
        },
        "item": {
          "id": "de554154-fefe-4c9e-b305-1d4b30555c33",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "88040676-07a8-4e4a-a20d-1fb1e50bccba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6290bd-c3c8-4f46-9d9c-392f9cc9070c",
        "cursor": {
          "ref": "8746c20c-5213-4f9f-86fe-ceac895655c4",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "68778fdc-8aa7-4bd5-ae94-249e7fa34182"
        },
        "item": {
          "id": "2f6290bd-c3c8-4f46-9d9c-392f9cc9070c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "393b23a9-b45e-4ba7-a20a-b6364630444f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8229082d-95ff-411e-bdd6-abab5c5c73ab",
        "cursor": {
          "ref": "46a5abfb-3e7f-4eaf-a1d2-87f91a811d3e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d5c90a49-eba2-421b-adbf-e0d020c6f074"
        },
        "item": {
          "id": "8229082d-95ff-411e-bdd6-abab5c5c73ab",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2a49dcc4-2b63-4be8-a591-d6de66d287b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9011f8c9-ffe3-4084-8a9c-2f4ef4bb142c",
        "cursor": {
          "ref": "11335068-36e4-4b35-8a33-7caf2167319c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7cea644e-b5ed-4450-a581-eceff1d264c9"
        },
        "item": {
          "id": "9011f8c9-ffe3-4084-8a9c-2f4ef4bb142c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "374b0d34-03e0-42ac-8abb-af2e7b695cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d23bf52-5cf7-45b4-8ac1-6d2620bef090",
        "cursor": {
          "ref": "6e87afea-f497-49d8-b495-ae2c9fc7dd7e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "14fef179-3f5d-419e-94ac-34a3c3c4e48a"
        },
        "item": {
          "id": "4d23bf52-5cf7-45b4-8ac1-6d2620bef090",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5235972c-6cbf-494d-9200-a9e637d69c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28144e91-4a8b-4468-b4ce-344ec92e54d3",
        "cursor": {
          "ref": "386d36f1-c5e6-4204-920a-044f16a43c12",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "aa3f2906-559b-4c06-941b-fab898b9f515"
        },
        "item": {
          "id": "28144e91-4a8b-4468-b4ce-344ec92e54d3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9ef27ff1-7722-4ddc-8768-aee48001778b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ae3fa1-7797-4d70-b464-88ff879901ce",
        "cursor": {
          "ref": "ba6c1ffb-27a4-482e-b9c3-d2a1744e9391",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d3805a4d-bd8b-41d2-bdd5-4786bd021c4a"
        },
        "item": {
          "id": "63ae3fa1-7797-4d70-b464-88ff879901ce",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a976144b-c488-48e7-b9ae-8ef2b8ffa2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e3e50f-144f-477c-9f02-958fd0c0bdb5",
        "cursor": {
          "ref": "0fc13e34-6c70-4c8e-9478-6f4b82cc3858",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "49e2c8ff-bec5-41ea-9ad6-e9a6e6587091"
        },
        "item": {
          "id": "d3e3e50f-144f-477c-9f02-958fd0c0bdb5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f1095106-5b5a-4bbb-88d5-17745c5a0900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8e797c-8bca-4b90-897a-4833b718f91a",
        "cursor": {
          "ref": "0d80b4e1-ce69-4c5b-9de8-37e9715da084",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ae09239f-d632-40a6-9185-1ddeb5a3b412"
        },
        "item": {
          "id": "8c8e797c-8bca-4b90-897a-4833b718f91a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "06170b59-4b5f-410c-8d35-c0d866a418a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aafdb09-7da8-4978-8788-cf7e5e2b3717",
        "cursor": {
          "ref": "3922c2d0-9188-4f4a-98a7-d921addff66c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "22c4294a-5ab8-4237-a0b0-3abf33bab696"
        },
        "item": {
          "id": "5aafdb09-7da8-4978-8788-cf7e5e2b3717",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7ad97437-e954-41d7-8db9-f33149d4aff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a4cc3f-6561-456c-9b53-de42a4421400",
        "cursor": {
          "ref": "34753bd0-8667-401e-adfa-3871bfb84c88",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8deec8ed-bfe9-410b-9e8b-1456ffa00615"
        },
        "item": {
          "id": "87a4cc3f-6561-456c-9b53-de42a4421400",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b9f4fbc7-9a8d-4726-9532-69e1734fe9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d535f5-096d-4ce9-a2a5-9a9dfbfaeae9",
        "cursor": {
          "ref": "00ca2880-2567-4319-86ac-55fa33706cdf",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6028ea11-6b85-4e0f-a758-1d857fb71971"
        },
        "item": {
          "id": "a1d535f5-096d-4ce9-a2a5-9a9dfbfaeae9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4339ebc0-f030-44c7-8004-64a8ad8556d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064e0db3-a258-4de8-b346-b35966bd46fb",
        "cursor": {
          "ref": "617f8709-430b-4d33-93a4-484a67f21091",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cc3491da-33c7-4f30-85e0-4290837c611a"
        },
        "item": {
          "id": "064e0db3-a258-4de8-b346-b35966bd46fb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "51add175-dd3b-4f2f-af74-c298cfb200be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b848937c-4d64-4644-bbd9-12cd72df1910",
        "cursor": {
          "ref": "b47b6e0e-8b89-4d13-a665-ffb15414ce0c",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1b87f4d8-6062-453b-83cb-f4a58e7ddfad"
        },
        "item": {
          "id": "b848937c-4d64-4644-bbd9-12cd72df1910",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "98cb2092-3fbc-46c7-a856-450cf9b5b3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827ddc1e-16e4-4990-9a98-c40c1e1c6d5c",
        "cursor": {
          "ref": "f8687168-ab04-40c9-9fe6-ea11a147ed3c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "916f94f8-b199-442a-9d87-dc462b620aad"
        },
        "item": {
          "id": "827ddc1e-16e4-4990-9a98-c40c1e1c6d5c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "be7ed8cc-817f-4a68-a03a-2955583a2147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a777d913-636b-4bd3-b21d-d69c13c793b0",
        "cursor": {
          "ref": "89e9d486-670a-47d5-907d-a3de690e1081",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d0184a51-e66a-4a35-8126-1431ef4f9772"
        },
        "item": {
          "id": "a777d913-636b-4bd3-b21d-d69c13c793b0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2787730e-30fc-4a60-b3c2-70bd19ea9881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4aa6baa-4b74-4e44-8a46-6e928240e70e",
        "cursor": {
          "ref": "03e2f1c6-3863-43e7-a0f3-016ae8300a26",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e61c58b0-c177-49de-81a6-ff9758ffb444"
        },
        "item": {
          "id": "c4aa6baa-4b74-4e44-8a46-6e928240e70e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b69f6dbb-8224-449b-9e42-e9be81e0ac3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c94a11-bbed-4d79-898e-e374d73c0d07",
        "cursor": {
          "ref": "1cf34716-dae4-434c-8611-7bc030281169",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "342516f8-ef02-45a4-a076-8fecf04ecb0d"
        },
        "item": {
          "id": "64c94a11-bbed-4d79-898e-e374d73c0d07",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "41124650-c074-471f-9bd1-1d338c6a6eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d8a8a860-355f-49b4-9256-e963442f75ab",
        "cursor": {
          "ref": "93fa928a-5be3-46a6-ba98-57b491250d8d",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8f04eac8-6d2c-49ef-a483-1ac32fb96030"
        },
        "item": {
          "id": "d8a8a860-355f-49b4-9256-e963442f75ab",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8546a569-b5b3-413b-a7f9-ba2002787f52",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "18df96cf-59c8-4aed-93d6-90fda0698d70",
        "cursor": {
          "ref": "0ca52ddb-d08a-4e9a-9b18-1efd998ac215",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "fafe4068-3151-4245-93a5-1a7808707dc1"
        },
        "item": {
          "id": "18df96cf-59c8-4aed-93d6-90fda0698d70",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "25fdd751-aa46-46ac-9d73-2db4fe52660d",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1f8311-5287-4599-8354-10f3663d1225",
        "cursor": {
          "ref": "4260b4b2-a1cc-4b86-a8ce-7de798dfcd3c",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f1a1a468-e5e8-4c83-9710-b351877c4d2e"
        },
        "item": {
          "id": "9b1f8311-5287-4599-8354-10f3663d1225",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2f6c964a-0b6a-4313-97e0-ba4e1de4ad44",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f77e2b-76b0-4c03-8929-5b4314dc71d2",
        "cursor": {
          "ref": "f17f7516-853e-49f9-9728-4df19f1ffb62",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "54b60dd6-f697-48dc-9c0d-52c7a939a398"
        },
        "item": {
          "id": "13f77e2b-76b0-4c03-8929-5b4314dc71d2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0c4bcce6-8864-452b-874e-cf61f3cda96a",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d5e8bc-24b9-45fd-8fe0-9b162066d3d3",
        "cursor": {
          "ref": "21d2fef6-b099-49d6-a911-e55fb6f4e0be",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "eecbb720-ede9-4f04-a278-ad6389c29cc6"
        },
        "item": {
          "id": "81d5e8bc-24b9-45fd-8fe0-9b162066d3d3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "71562fda-cb7e-4f61-bddf-3ff7bc26f0e0",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-20T00:29:25.865Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-20T00:29:25.865Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5eff5587-ae14-4586-8aef-e9a20bb8774b",
        "cursor": {
          "ref": "da2d3343-f413-44d8-9d1a-a9e2a17984c5",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "14d26854-b440-4806-9b9f-d189a5aae45c"
        },
        "item": {
          "id": "5eff5587-ae14-4586-8aef-e9a20bb8774b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "068982e0-dd71-4d37-92bb-abcf56564cc0",
          "status": "Created",
          "code": 201,
          "responseTime": 396,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e26049-e80a-44b5-ae07-1cd454d762ec",
        "cursor": {
          "ref": "dd09d64d-686a-47a7-bbea-84100705a6ce",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "518d051b-addb-4b93-9d42-ad2241a0eaeb"
        },
        "item": {
          "id": "13e26049-e80a-44b5-ae07-1cd454d762ec",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1970e44e-55c6-431e-a43e-1ef2a2af3c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b70985-7df9-4979-a740-291164aa529a",
        "cursor": {
          "ref": "e6ad9a12-38f6-410f-84a9-43b5de9a12a2",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "42827d83-16bc-4045-869b-86e448e80cb0"
        },
        "item": {
          "id": "50b70985-7df9-4979-a740-291164aa529a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b76adb75-8249-4b1f-833d-73c4145ae22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d591713-7c95-4a03-90c0-be9d1af55ba0",
        "cursor": {
          "ref": "3e46d104-0150-45ee-bf84-e36e87daab8b",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7948608f-5714-4729-95a0-133ec255297d"
        },
        "item": {
          "id": "9d591713-7c95-4a03-90c0-be9d1af55ba0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7e330d38-55bd-4aa3-8734-f714094211d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dad1c0a-49c6-400d-8fe2-51871f9b9e52",
        "cursor": {
          "ref": "98d154a4-3742-4fec-980b-af87797be21d",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f391ec18-5934-4fd7-8257-b3b6dad20875"
        },
        "item": {
          "id": "2dad1c0a-49c6-400d-8fe2-51871f9b9e52",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bf865237-329e-4ca7-8a96-d94a12b6af60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b24effa-e240-4cde-83da-a8d6c7ae150a",
        "cursor": {
          "ref": "c1738a7e-941b-417f-8438-c3dd3c105d30",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5a039c81-28e8-4d2a-8129-4a91a5c1fad3"
        },
        "item": {
          "id": "7b24effa-e240-4cde-83da-a8d6c7ae150a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "08dd981f-3494-4860-a470-660de7075776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9307de-c869-46b4-8d7a-50e939e42a02",
        "cursor": {
          "ref": "78f12f46-ca1a-4030-8dab-9721473ac513",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f7562623-5d5f-4ab6-9739-2cc46bd37b0b"
        },
        "item": {
          "id": "6a9307de-c869-46b4-8d7a-50e939e42a02",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "96d2b4a6-761b-43ce-b22f-55464c13c636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7fd9e7-e49d-4bed-8ebf-3153d8354817",
        "cursor": {
          "ref": "fe9d510e-cf77-4fa5-adca-c1ec1bf4e017",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8caff5ef-ca00-4884-9494-bfc931f68dfd"
        },
        "item": {
          "id": "9e7fd9e7-e49d-4bed-8ebf-3153d8354817",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "04ee22af-8e7e-44a8-898e-251ce0a7e463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac81fb6-36ce-4b4f-be98-c7e0b97c2c6b",
        "cursor": {
          "ref": "e08d7a00-cd2c-4f30-b464-56e6615c887a",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "940a085e-70b5-447a-85cd-f5a1ef1c6351"
        },
        "item": {
          "id": "fac81fb6-36ce-4b4f-be98-c7e0b97c2c6b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cba1f364-ebbf-42e5-a121-829ce3f44755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b72f2e-94a9-40c6-8243-57c3807959d6",
        "cursor": {
          "ref": "d0a4330d-9482-490c-8aed-11b9bed8f02c",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e26bb8d0-ed77-46d1-a2ca-e0908d49f74a"
        },
        "item": {
          "id": "b0b72f2e-94a9-40c6-8243-57c3807959d6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e2ce0371-113e-4e69-a66f-6b16b3aabb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd89c11-541d-4d82-b303-22ae6313dd26",
        "cursor": {
          "ref": "cc2d9151-aa0b-4430-91dc-89a002ecd7be",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3fc14968-37af-49a8-a69d-ee8cbad639bd"
        },
        "item": {
          "id": "8cd89c11-541d-4d82-b303-22ae6313dd26",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2cdba977-14d4-4fa1-9d3e-4e1219323a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875578d4-aca5-4d0b-9a3e-ecc53d5856d3",
        "cursor": {
          "ref": "6ecda73f-400f-4942-ba4e-4d041dc04491",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bd1c0bbe-dc4c-402a-8a93-107d15127790"
        },
        "item": {
          "id": "875578d4-aca5-4d0b-9a3e-ecc53d5856d3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7327d4f4-c288-4907-bb3a-a7dd8e2e4abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526c0295-ec92-4c90-ac6d-753fb9c59956",
        "cursor": {
          "ref": "d79c238b-4b0d-4f8b-a0a3-1848524ea9a3",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a2e3a1c3-130b-4332-b310-f8884319af3e"
        },
        "item": {
          "id": "526c0295-ec92-4c90-ac6d-753fb9c59956",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7f9e86db-393d-42f0-952f-32eddfda7984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06acd8a3-6571-43e6-9556-61a32124c2fe",
        "cursor": {
          "ref": "c9ccd2a1-a93f-4c91-9f94-8a7c666b0660",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "36ee0427-3ca7-400a-ade2-09f069d7c784"
        },
        "item": {
          "id": "06acd8a3-6571-43e6-9556-61a32124c2fe",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4de455e4-b618-4e60-aa67-62b37a74f2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ead9604-31be-4d60-bf1a-af8863c7d43d",
        "cursor": {
          "ref": "2b2fefbf-78a9-4d37-9d27-938548206e5d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "03f6f3bd-0e0c-4932-a07c-6183ba8e83e2"
        },
        "item": {
          "id": "7ead9604-31be-4d60-bf1a-af8863c7d43d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "de46c288-a391-4c98-910a-9a4b833c61c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6476594a-5bc9-420a-8c1b-ab0780745dc0",
        "cursor": {
          "ref": "cca18a96-8d41-4536-9df2-5359ebe004c6",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c5b579e7-e153-4dcf-b5a7-41fc16166d3d"
        },
        "item": {
          "id": "6476594a-5bc9-420a-8c1b-ab0780745dc0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cb08c9a5-ce7e-44be-8309-242f518497b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd4197d-5295-40a1-8012-77d4c4504833",
        "cursor": {
          "ref": "9c036776-f18c-43e7-bea3-77b91be857fb",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5d2dd4a2-f2ed-4a5f-be9c-eef7019443e6"
        },
        "item": {
          "id": "bfd4197d-5295-40a1-8012-77d4c4504833",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "48dd6497-bf4c-41ff-bc35-9f7cf1ed76b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c19be7-d5a7-4869-a81a-6798f541822e",
        "cursor": {
          "ref": "7a4962d2-9695-4b2e-a980-ba678a5ba060",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f59f029e-cc0d-4a73-9894-979d967a68af"
        },
        "item": {
          "id": "e8c19be7-d5a7-4869-a81a-6798f541822e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1e42b6b0-f72a-41ee-8e03-151a821bdd52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9112b927-894e-4232-93af-8308f99f88e3",
        "cursor": {
          "ref": "fdd949d3-e008-49b0-bbd7-579ec7115b9b",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "28837b1a-6bc7-4b53-ad32-3f1b3837125e"
        },
        "item": {
          "id": "9112b927-894e-4232-93af-8308f99f88e3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f4d8557a-1d53-448d-a484-6cc74b9ccb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262b0f57-f05f-40e2-8ef0-c7664513ea50",
        "cursor": {
          "ref": "78706086-ed43-44dd-9feb-dd3a63295902",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d60a7917-760d-4ac9-b600-182770e9d3e3"
        },
        "item": {
          "id": "262b0f57-f05f-40e2-8ef0-c7664513ea50",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9777cda8-6069-4382-923f-f7b2955efc70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f26e938-f0ff-4ee5-8de8-6cd768931b2a",
        "cursor": {
          "ref": "b1c4c80d-72a9-426d-b52b-f9f2caf21aa8",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1432045a-9bd1-4abb-8d9f-b7872e76e2be"
        },
        "item": {
          "id": "6f26e938-f0ff-4ee5-8de8-6cd768931b2a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5480f590-a007-4108-bc81-bb41886af01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d522af2-da5c-4e46-ab19-6614f16149a3",
        "cursor": {
          "ref": "9732487f-ef54-4f7d-963c-833888148f56",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fb8a055e-5559-4f19-b4b8-e62583ab9922"
        },
        "item": {
          "id": "6d522af2-da5c-4e46-ab19-6614f16149a3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f717717e-cc2e-4f5c-8c91-eb4e9b7d0303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22936b6-6385-432d-9c3f-54a30675e087",
        "cursor": {
          "ref": "f29d75bb-2269-4a00-b33a-a3caaf90cf8d",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1ccbc8b8-3af6-4282-84b3-8266c5c2b103"
        },
        "item": {
          "id": "c22936b6-6385-432d-9c3f-54a30675e087",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bab5b8ac-17e3-4ae0-a0bd-7fab1a26fa90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99948fd-61b8-4c45-8602-207796d518d6",
        "cursor": {
          "ref": "a5a3d25b-5726-4ab2-92f0-f4401dab444c",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e5196977-d2e9-4dc9-9882-b83dc351ba68"
        },
        "item": {
          "id": "f99948fd-61b8-4c45-8602-207796d518d6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "79e28302-b80a-4608-b55b-a9b77ee3a8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641da633-a83c-4e62-8f39-4459e17cddfd",
        "cursor": {
          "ref": "9547bc3e-1c93-43ae-8dda-4186ec44584a",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bfee5c39-c9ea-4b64-b258-1d9bc2849d2d"
        },
        "item": {
          "id": "641da633-a83c-4e62-8f39-4459e17cddfd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9bd36d97-74b0-4acc-9bb7-5de42762749b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cb452c-b647-4126-af49-3438d72e2b38",
        "cursor": {
          "ref": "2e9c69d3-92e0-4eec-a0b7-d638529b08d2",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "14fd5948-c038-4f97-a16e-f14d48113a46"
        },
        "item": {
          "id": "53cb452c-b647-4126-af49-3438d72e2b38",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "709f9f6d-a645-483c-b341-09043168be9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45158a9-7036-4786-b607-5e420ead3cd8",
        "cursor": {
          "ref": "fc7a43a4-b352-45c0-8eb9-a5d90ccce9d4",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5a9dd0a3-48d6-4b12-8df4-c62201d3b583"
        },
        "item": {
          "id": "c45158a9-7036-4786-b607-5e420ead3cd8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8c48d57d-7716-48b1-b4a8-725507c09f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a163bbe9-aac4-45c7-8a12-71ba5fd74705",
        "cursor": {
          "ref": "4e3f146a-d1aa-408a-8dfe-fe41b18911a5",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bf75e354-b5b0-4eba-88ee-7f0f0c6045ae"
        },
        "item": {
          "id": "a163bbe9-aac4-45c7-8a12-71ba5fd74705",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "eed48baf-30e2-447b-b13b-f9487859b3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1217ec2-8feb-4c0f-95f1-813eb9c98994",
        "cursor": {
          "ref": "40ee19b0-f4ec-4afe-b3d9-25fc9450f1f5",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ad78a67b-355b-4c22-ba46-3521e86cce9c"
        },
        "item": {
          "id": "c1217ec2-8feb-4c0f-95f1-813eb9c98994",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2faa6d24-4aad-4f48-8fd9-a4c4d34cc36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f35d19a-d9fa-46b8-8426-06a41ebcb63f",
        "cursor": {
          "ref": "d6276c11-b669-4160-9ed7-038969accfb4",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "749b5e90-5bce-4811-af39-737cc3467d8f"
        },
        "item": {
          "id": "3f35d19a-d9fa-46b8-8426-06a41ebcb63f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a3bf2394-1f4e-49bd-8927-c546e42497be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5171f5-57d3-4b97-97c0-78fa548d4892",
        "cursor": {
          "ref": "82b15131-e1f5-4ead-acce-4028aa1bdd07",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c9ff7845-67b4-409c-baa3-6ee04c277b0a"
        },
        "item": {
          "id": "9f5171f5-57d3-4b97-97c0-78fa548d4892",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "016b36be-927c-46b4-abf5-e56e11041097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec847880-e075-4f15-aad8-6bf7e3df7b54",
        "cursor": {
          "ref": "e4fc5b07-668c-4c77-a65f-33b566247e4a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e81f2015-35d5-46f7-8fbb-407b457fbaf3"
        },
        "item": {
          "id": "ec847880-e075-4f15-aad8-6bf7e3df7b54",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c1f76b9f-1234-4994-86ad-8133efd7dcab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0e781a-d6c1-4512-9bf1-117a691d884c",
        "cursor": {
          "ref": "6328b633-7b5e-4507-9a00-e64b28d8e0ad",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8f5c3198-2adb-4758-a6f9-b83a3f057218"
        },
        "item": {
          "id": "8d0e781a-d6c1-4512-9bf1-117a691d884c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "10785d21-7b38-4665-9226-cea74a3985b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ccce72-98f3-434a-b0cd-6353406dba74",
        "cursor": {
          "ref": "c370460f-b758-4d5f-921a-edc3dd1efe53",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c765ff4c-486d-4c0e-ae6a-7fd7a358f138"
        },
        "item": {
          "id": "02ccce72-98f3-434a-b0cd-6353406dba74",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "23d9fe46-1387-463b-8f5a-f6b3ac03e9d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc8802f-3ab2-4836-bd08-417594a5aeb5",
        "cursor": {
          "ref": "4043b3db-88eb-4ec1-b450-065b067361cc",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f1aec9ce-ec52-4f5b-8732-e1f63ab53d4d"
        },
        "item": {
          "id": "4bc8802f-3ab2-4836-bd08-417594a5aeb5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f05258c9-179f-44e2-8012-11ddd6eb812b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f599c34-bbf2-4c0a-ae0e-e229a5469f81",
        "cursor": {
          "ref": "3a9cb972-f29b-4e6a-8615-f127c2eb755a",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a460033a-6efc-44a5-a103-d8043f6fb200"
        },
        "item": {
          "id": "0f599c34-bbf2-4c0a-ae0e-e229a5469f81",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "55b72155-15e8-4191-bf00-c2a6ce139b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9ede5c-6247-4597-8047-cae0882d3f4a",
        "cursor": {
          "ref": "30202ead-6ee5-487a-a52b-15bcf7e02cf4",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ebcec590-41f2-4578-bb9b-80b2551e8c40"
        },
        "item": {
          "id": "5c9ede5c-6247-4597-8047-cae0882d3f4a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "984cf76a-9894-4656-a533-f7950347111d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdda01b7-7e7b-4279-a721-7793b75b575d",
        "cursor": {
          "ref": "40ec77e8-2132-4a39-bee8-5a6d6230ba47",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7f9273f2-25d3-43f6-9c12-5620f2825b01"
        },
        "item": {
          "id": "bdda01b7-7e7b-4279-a721-7793b75b575d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3e9175da-6e29-4537-86db-545e5ef7aed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f0a672-1c09-4ed4-8f47-b3d765f4dbc5",
        "cursor": {
          "ref": "f7e46e51-5c74-4126-8a9a-8e6fd37599df",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "aa7e99ef-29d5-4365-a3a9-ee7123132711"
        },
        "item": {
          "id": "85f0a672-1c09-4ed4-8f47-b3d765f4dbc5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f4df4aa1-f31b-454b-a891-a909af0f350a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665a4382-6758-4931-9f1f-550c5d2ceb2e",
        "cursor": {
          "ref": "e327f1e0-c3f9-4b6b-84df-6fd0645dab11",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a458b5c9-647e-4c10-b9c7-a2c43a4403b3"
        },
        "item": {
          "id": "665a4382-6758-4931-9f1f-550c5d2ceb2e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0439d489-1cf8-4333-b59b-3cc3f531cbce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ebe9c0-564e-4efb-bd8d-addc0616d9b4",
        "cursor": {
          "ref": "c9820c60-caf3-4416-8dae-316cbc353358",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "470e6bbc-1b8d-4eef-9938-7123069619fb"
        },
        "item": {
          "id": "42ebe9c0-564e-4efb-bd8d-addc0616d9b4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b89143be-12de-4299-99de-4bf2be51f983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefb98a5-7d48-4fc3-b425-0b8f9a518a2f",
        "cursor": {
          "ref": "6aa22246-57dd-4945-8ec7-f058339026f1",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2e950f5f-987c-4c70-9d99-32419cae7f83"
        },
        "item": {
          "id": "fefb98a5-7d48-4fc3-b425-0b8f9a518a2f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5fd27518-2be1-4f3f-ac5c-4a3c642ed25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571385e5-e003-4da9-b841-187bb40c176e",
        "cursor": {
          "ref": "ca5753b4-1422-4ce8-8735-9b52f3450129",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "05ce5f75-0f83-4a66-87df-062d4ad6810a"
        },
        "item": {
          "id": "571385e5-e003-4da9-b841-187bb40c176e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "444bb747-448a-4e06-a771-431f54997be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcffbda-9718-4ab3-a2fe-bfee39ac4dd5",
        "cursor": {
          "ref": "f450af85-bc7c-47dc-88fe-c2f449cbbd98",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c8b273dd-3821-4399-ae09-60ce787dd8d3"
        },
        "item": {
          "id": "3dcffbda-9718-4ab3-a2fe-bfee39ac4dd5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7086eff9-97f2-4a26-9ed9-04882b0f2664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e17ae6d-4536-4314-a018-9782ddf06de4",
        "cursor": {
          "ref": "d0fafc73-4d3e-4918-bc79-7b3ba401ed06",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d5842539-1ae3-4201-850d-3336b0ab1b1f"
        },
        "item": {
          "id": "5e17ae6d-4536-4314-a018-9782ddf06de4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "21e8f400-da0e-40e5-9d4f-4fb1638fa8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94db6560-717b-4df3-9b49-f1451783e34e",
        "cursor": {
          "ref": "96ca3b57-9803-4324-95a6-c8c0599a5c3a",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "db46bfd8-c216-49be-9550-c540d6654c12"
        },
        "item": {
          "id": "94db6560-717b-4df3-9b49-f1451783e34e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "acc2d4a4-5cf8-4b73-acc6-2b2be44c8ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9595bc-b95c-4515-90b9-db45bc689d54",
        "cursor": {
          "ref": "631b3153-c2f5-4a38-aa16-c6daa6a45f9a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cd6dc13a-ce31-4e73-a018-f442a543685a"
        },
        "item": {
          "id": "df9595bc-b95c-4515-90b9-db45bc689d54",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e5287247-cb4c-4e1d-a75e-ca8417067329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb39c7a9-47e2-46f2-ac18-b3aa3b805ca6",
        "cursor": {
          "ref": "08339c72-a5f1-43aa-a584-f1b0fb00d9d0",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "19977b51-2f4f-494a-b911-fa6415e93437"
        },
        "item": {
          "id": "fb39c7a9-47e2-46f2-ac18-b3aa3b805ca6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4d8b0099-08d2-4eda-907f-2708938a4f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc429722-578e-4dd3-a5c3-de43c77fe9a2",
        "cursor": {
          "ref": "4e737260-f008-4d23-81ff-0a83fee813cc",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e4157cb9-1a4b-4444-8b2c-24aa5154a059"
        },
        "item": {
          "id": "fc429722-578e-4dd3-a5c3-de43c77fe9a2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e0a5bf7b-b7c5-4ce5-9736-a1f4164f5a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2019788-5507-405b-a75f-4f8019ccfbe6",
        "cursor": {
          "ref": "7b2b8580-7314-4f95-a8d9-73fb724c51a6",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c769a421-7aa9-407e-9341-cb99613e4009"
        },
        "item": {
          "id": "b2019788-5507-405b-a75f-4f8019ccfbe6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0070f101-acc0-48b8-aa03-e7fd1839ef5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc68916-6ca8-4bea-85ff-12d5dbc8f4e1",
        "cursor": {
          "ref": "5d3e18b1-dc30-4ddf-a992-711445615708",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "74bb3c97-0043-4004-aada-153b80b5178d"
        },
        "item": {
          "id": "7dc68916-6ca8-4bea-85ff-12d5dbc8f4e1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "27805c86-5666-444f-880a-7c60edcae72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e88764e-3b8a-4959-8649-8ee49a2bfc8c",
        "cursor": {
          "ref": "df0380c4-539a-429a-90aa-389f0e822f0e",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "793a8bb6-af89-4f07-8643-ca62641bdc57"
        },
        "item": {
          "id": "2e88764e-3b8a-4959-8649-8ee49a2bfc8c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0447e841-a44e-4962-a84b-0c435c382b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3561dc7-59cd-4529-9333-9b813c05f60d",
        "cursor": {
          "ref": "d2089263-203c-4817-b4b5-b8958f6bcc91",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8086c1ca-2fd9-49f4-a0a9-4d3ff66271dd"
        },
        "item": {
          "id": "e3561dc7-59cd-4529-9333-9b813c05f60d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0fce182e-0505-4376-9451-e2710b4d32c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1676a4a7-6dd8-40d1-a741-8b16633f9e97",
        "cursor": {
          "ref": "53704704-8ed8-466a-9b3f-72c1a4d55f00",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4cc0e837-65c9-4191-a506-511c7add0af9"
        },
        "item": {
          "id": "1676a4a7-6dd8-40d1-a741-8b16633f9e97",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dc30a265-6cab-481d-b97b-f410b60e9f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebf4960-cce1-4106-ac34-53624e9473c3",
        "cursor": {
          "ref": "a9d6a0ef-5a71-419e-a7e0-cd1ba47319c3",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5d8e6201-324e-427f-86d6-095410901cb4"
        },
        "item": {
          "id": "0ebf4960-cce1-4106-ac34-53624e9473c3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cde287df-6019-4701-9f06-b1ae818684e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9491eb74-aed8-41ff-986a-c521b9f24300",
        "cursor": {
          "ref": "3940f10c-5123-4440-b70a-1ae1e57da99c",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3b81f343-db6d-46c1-9ef9-913f6dad36d8"
        },
        "item": {
          "id": "9491eb74-aed8-41ff-986a-c521b9f24300",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c967efa1-aa91-447e-95c2-fe1a19cf6577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e59e74-4c08-4056-9b9a-26fd9c453e49",
        "cursor": {
          "ref": "4aa00936-adca-477f-a38d-ae1d8a4ac77b",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b91653b7-3e51-4c7e-bf11-4c773ad088e1"
        },
        "item": {
          "id": "12e59e74-4c08-4056-9b9a-26fd9c453e49",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b3c0e161-2997-48e6-a651-1d5522510ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601c275b-b98c-4904-8185-8b9b84099e8b",
        "cursor": {
          "ref": "bb1ff71c-ad08-484e-abad-3cf201572c50",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fd41b44b-6951-41f3-9267-805fa06c12f8"
        },
        "item": {
          "id": "601c275b-b98c-4904-8185-8b9b84099e8b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5f397c26-b9b6-4c8a-b818-eb440b06fc55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867acfdd-f8dc-43e1-837e-33b55a87b229",
        "cursor": {
          "ref": "9d850a73-b70a-4d8b-bda3-eea710a4b276",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f62f7aa9-1482-4c0c-845f-e8b39e0b001e"
        },
        "item": {
          "id": "867acfdd-f8dc-43e1-837e-33b55a87b229",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "137b594e-95f4-493d-926e-5c80af2775cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401c9a60-deef-4e7e-a3d7-a91be795bae9",
        "cursor": {
          "ref": "4eaf4b90-12bb-4246-8c95-d6420256d364",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5e78a469-1f60-4b3a-991f-342f8923e521"
        },
        "item": {
          "id": "401c9a60-deef-4e7e-a3d7-a91be795bae9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "050447ee-c4d9-492d-b6aa-f42964fd23dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d56d72f-5f2e-49cb-8877-6a0636fe6cf2",
        "cursor": {
          "ref": "21730294-6888-4ca4-9007-0bfa7ef126a4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ced4b7c3-8bac-4ae2-8193-9876b31ee62f"
        },
        "item": {
          "id": "4d56d72f-5f2e-49cb-8877-6a0636fe6cf2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "48c15a14-06a1-4525-8168-6f969314c798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e3b388-7592-406b-aa53-adb997e316f3",
        "cursor": {
          "ref": "39fd7b57-aa49-4288-a67d-d51dc64938e7",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a69bfe40-f3e3-4a9b-9151-7572c43210b8"
        },
        "item": {
          "id": "f3e3b388-7592-406b-aa53-adb997e316f3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "975eac26-f4ef-48d1-a555-994a7e5b2c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748e5e95-9908-4fc7-a3a2-fe1a7d083ed0",
        "cursor": {
          "ref": "1597b666-4176-4478-97d7-ac45d66cad2f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cc888315-4661-4761-86c6-0ab7b64779e0"
        },
        "item": {
          "id": "748e5e95-9908-4fc7-a3a2-fe1a7d083ed0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d3ae5a0d-4c37-43af-991b-ced50f5d4400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4e7406-2444-4fc8-a253-b3c42156f3ae",
        "cursor": {
          "ref": "dc7b157e-c90c-4eb0-a543-e2c125a2e246",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "50de0fa5-5367-4c2b-8475-f9bf655c54ce"
        },
        "item": {
          "id": "df4e7406-2444-4fc8-a253-b3c42156f3ae",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "73b2800f-dfe4-4d70-aebe-af884a56a84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942ff668-7f03-4ce4-88b0-a2c4b7a80b91",
        "cursor": {
          "ref": "396676a5-6a43-4d52-a18f-d333a01fe271",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "55e95570-dee2-4a0b-86d6-3959ce87ccb5"
        },
        "item": {
          "id": "942ff668-7f03-4ce4-88b0-a2c4b7a80b91",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2678c28d-8722-43a4-8c9a-ebc7eaa8769e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5a8141-56b3-4003-8678-bff986e3425f",
        "cursor": {
          "ref": "41312915-0e2d-44f8-98fa-62bb6127fb94",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5e288c26-5e9f-4cb3-9a02-9e58e951ef26"
        },
        "item": {
          "id": "1a5a8141-56b3-4003-8678-bff986e3425f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1a62c4c7-1e9a-4d59-9dfb-e4e8243f289e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2b80c0-3c46-44cd-84ef-cb6482d524b2",
        "cursor": {
          "ref": "83424723-7401-4d2e-ba39-fd6e5636c4f0",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "691a8d35-827c-4dd8-bc5e-b8ee278607ea"
        },
        "item": {
          "id": "6c2b80c0-3c46-44cd-84ef-cb6482d524b2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b2525c01-c524-46c8-a3e3-f61475920cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6946bb3d-a76f-4c4e-a012-5ad96a060e2d",
        "cursor": {
          "ref": "ebb87557-1bdd-4a50-86fa-4948eaf48737",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cde1736f-75c0-4a13-abdf-756bd749511f"
        },
        "item": {
          "id": "6946bb3d-a76f-4c4e-a012-5ad96a060e2d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "02992f29-dfe1-475e-9506-8b8f18c41071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e70755-5a5f-4a1a-9681-73c3b05d08a7",
        "cursor": {
          "ref": "f44ec2fb-e25b-48b8-873b-a04a3d6f110b",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e6ce1985-43fd-4fc8-b487-ee9938d34922"
        },
        "item": {
          "id": "c6e70755-5a5f-4a1a-9681-73c3b05d08a7",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "dbebd254-c126-463f-afcd-ece89e181097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd5aeb4-cd0c-4c1f-9ccc-48139af766fa",
        "cursor": {
          "ref": "a4c8d0d4-1949-4638-9138-70c990292670",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "61565a09-c64b-48ec-b695-a4c69ed2f281"
        },
        "item": {
          "id": "5fd5aeb4-cd0c-4c1f-9ccc-48139af766fa",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "411bc8e4-7a8c-4d83-bb70-8a0632adadb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b0ddc2-b92b-4fce-b52c-ef5351a2069e",
        "cursor": {
          "ref": "3a6a4891-e559-4c2a-a6ad-dc6f4df22796",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a3a856b8-7bde-40dd-8d70-d14ad490b435"
        },
        "item": {
          "id": "96b0ddc2-b92b-4fce-b52c-ef5351a2069e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "dd414654-9efe-48b8-8c00-d16dd14f9c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7165139-a1c2-4b2b-b8de-91e4ea5218bf",
        "cursor": {
          "ref": "42f662e5-3fa6-4e82-801a-798c04523b9c",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ef1e9fd0-5acb-45e5-92ad-5505580a8603"
        },
        "item": {
          "id": "f7165139-a1c2-4b2b-b8de-91e4ea5218bf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0339320b-dbc0-4205-a26f-4e5d759d6b6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b710015f-8db7-4102-8092-817a18db96ad",
        "cursor": {
          "ref": "7ada89b3-0c56-4e49-bb51-0c1d0ca47282",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4350b3ef-b7df-44e1-b52e-6fc321a10902"
        },
        "item": {
          "id": "b710015f-8db7-4102-8092-817a18db96ad",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2f5ec5cf-2747-491e-8f31-c1c8f9ad3713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b23ee1-45db-4d6b-a33a-09e16f42da4d",
        "cursor": {
          "ref": "b7898a87-e2e7-4c30-9805-55926fe7e8f7",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "116d996c-6c7d-4dfc-b950-df63d2bb7a60"
        },
        "item": {
          "id": "73b23ee1-45db-4d6b-a33a-09e16f42da4d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7d95376b-e292-4d44-a39d-eb1a7344ecbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c8bc43-9050-4a56-98b3-ea255788f593",
        "cursor": {
          "ref": "14035f04-2d69-4c2f-8f85-2324cedf9a22",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "576c3e2f-fcd9-4659-9dc3-7daf6a0446a2"
        },
        "item": {
          "id": "a0c8bc43-9050-4a56-98b3-ea255788f593",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e7c7c276-d2d5-47e2-9a92-8517623fbfc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c094cc-593e-4e48-8157-7fd3bcc1fcca",
        "cursor": {
          "ref": "5e4fdc94-078f-4639-bd2c-5ae90eade3ab",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "32f6d9e7-681d-4ca5-8014-1d48d8249709"
        },
        "item": {
          "id": "74c094cc-593e-4e48-8157-7fd3bcc1fcca",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8f54a083-e34a-47e8-b593-5a5b53105320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42dfed5-6ca1-4c1f-a8bb-ee64d868acc1",
        "cursor": {
          "ref": "9b81710d-3e5d-4c19-bdb4-be5d69ce58c9",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5fa87101-e9f0-4879-88eb-2a918efdf135"
        },
        "item": {
          "id": "c42dfed5-6ca1-4c1f-a8bb-ee64d868acc1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "061ef1ae-e232-4d34-995c-0995b591766d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e8d792-520f-4031-bd2b-526c359176d7",
        "cursor": {
          "ref": "b03f88d6-3744-4bf5-8142-a68ed35efa1c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "02aeebb6-b796-4885-9da7-490b6534d15e"
        },
        "item": {
          "id": "47e8d792-520f-4031-bd2b-526c359176d7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8001ec9b-5e9a-48e4-a463-d87ad3532a4d",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "2634e165-eecc-4116-adcf-78cb43789c81",
        "cursor": {
          "ref": "45fa49c5-c7a9-4d4a-9bc4-d39642a7af05",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "29ded326-cb56-4900-97cf-247dd200906c"
        },
        "item": {
          "id": "2634e165-eecc-4116-adcf-78cb43789c81",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b8f2a0c0-5361-4feb-b710-f654816c5266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d8db11-a1a3-4fb3-a29b-cf8de0e25b2f",
        "cursor": {
          "ref": "230d0d27-5b6f-4097-aa45-0b12843b3a26",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f49e1b96-9f77-4a1d-9756-5c0a8ceb0b72"
        },
        "item": {
          "id": "e8d8db11-a1a3-4fb3-a29b-cf8de0e25b2f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f375ad83-e727-4dfa-928d-de7cff9f87f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69e081f-b8cd-4af7-bb59-05f139d5ddc2",
        "cursor": {
          "ref": "642ced78-9916-4c16-9568-c4db4196aa0f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ddecd898-f18c-4dbe-be2e-d0d7adedfca3"
        },
        "item": {
          "id": "a69e081f-b8cd-4af7-bb59-05f139d5ddc2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3839580f-8a18-4773-a2b0-8462ff12be3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a194496-a65f-4e07-8ada-f57c97abe40d",
        "cursor": {
          "ref": "770618ae-2d43-457e-96ac-0ec2fd2af465",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b2d85ebf-7a8c-4fae-86b2-ce3e7960fbfa"
        },
        "item": {
          "id": "0a194496-a65f-4e07-8ada-f57c97abe40d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3997cd5f-751e-44b5-a0d4-bec7a3cf67f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2a8c94-cf7b-402e-b6ea-3038cd2db163",
        "cursor": {
          "ref": "88262bf6-ee17-4d47-be1d-9f96a06152f6",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c256c394-a915-4563-bf48-e71100a2e7d8"
        },
        "item": {
          "id": "9e2a8c94-cf7b-402e-b6ea-3038cd2db163",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "db238038-0b1a-4e6b-b4b5-84c991856649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b59b71-9940-4e72-b443-a10dbb8d0de9",
        "cursor": {
          "ref": "3fc67d32-bff3-4b7d-a800-e7ce0b716c14",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8767d0a5-0f2e-4c0d-9dd0-6a04e25959a1"
        },
        "item": {
          "id": "81b59b71-9940-4e72-b443-a10dbb8d0de9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c7038ba1-a5cc-4b3d-a770-da81e6638b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb176d79-7f9c-47eb-927f-5a284949ead0",
        "cursor": {
          "ref": "0c318e05-1d41-484e-99a9-08a38afb69f8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0f7e36a1-2ac4-455a-b172-fe603ba44c2b"
        },
        "item": {
          "id": "bb176d79-7f9c-47eb-927f-5a284949ead0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "451b7881-464d-4b17-9a4e-9c377afcd161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d920dc-9635-42d3-8b39-9f39ec177362",
        "cursor": {
          "ref": "bbc7e3be-d210-4c1b-8faa-8c80825f32bd",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "69eabc29-0ced-44bf-b317-72daa0fdfa42"
        },
        "item": {
          "id": "62d920dc-9635-42d3-8b39-9f39ec177362",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6a49f62c-7451-4814-9f48-389abbfbfa27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa36546-d28b-48e9-b227-5a5a2d65c445",
        "cursor": {
          "ref": "033ebc76-05df-462f-a4a5-55c4ff73e8a8",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "78d72bfc-f503-4b56-bd99-425297a659b6"
        },
        "item": {
          "id": "bfa36546-d28b-48e9-b227-5a5a2d65c445",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5cf8cdb5-2ce2-4d97-830a-47467cbdd19c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2f37f3-7b93-40df-b708-9292191d62ea",
        "cursor": {
          "ref": "4a491944-3ab3-457c-9ef8-e73e7f1cbdc6",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "315d2513-1e0e-412d-aaab-cc1621073bee"
        },
        "item": {
          "id": "1a2f37f3-7b93-40df-b708-9292191d62ea",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bbf5d22b-1d56-4e78-b8c8-ef4769664134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7315f5ae-92e0-46b5-8f69-3068edffa6b1",
        "cursor": {
          "ref": "4b25c406-d0c9-4880-9b1d-1714b8e38a06",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ed3441ea-6610-4ebd-96f9-615ac42cca33"
        },
        "item": {
          "id": "7315f5ae-92e0-46b5-8f69-3068edffa6b1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "907daa20-d73d-4d4c-88bc-a2ff975bc307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20652fba-063f-4057-a4a5-7a45b9dc2999",
        "cursor": {
          "ref": "a4e112f5-48d1-429b-88be-f5a9e11646c4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8d6cad26-efb7-443b-bb00-9333e41fba5f"
        },
        "item": {
          "id": "20652fba-063f-4057-a4a5-7a45b9dc2999",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "67d43eea-4a74-44e6-a15b-a5b7dd0c41c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a47457-69b0-485c-803c-9ead10f0d5bc",
        "cursor": {
          "ref": "58258fce-7ed0-418d-8048-102053b645c7",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d1c04cbe-58d3-4222-98eb-4da868f78a8b"
        },
        "item": {
          "id": "84a47457-69b0-485c-803c-9ead10f0d5bc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0367ded0-f627-4a1d-ae4c-688541915c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa3a685-8e76-44f9-9d75-49201e6eaf39",
        "cursor": {
          "ref": "6e71fb0d-3029-4be7-ae9e-18e0ac761e85",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "038d6c59-e1a8-4ae9-812f-0ad42a06272b"
        },
        "item": {
          "id": "3fa3a685-8e76-44f9-9d75-49201e6eaf39",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f4eccafc-ca2c-4abd-8698-8bf93c5bab21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999c248f-da16-44ca-848b-da6b93db0c38",
        "cursor": {
          "ref": "6e304a0e-9552-4f45-b07d-f23d9c308575",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8290d44d-f6d1-43a8-ba83-d323d579e23e"
        },
        "item": {
          "id": "999c248f-da16-44ca-848b-da6b93db0c38",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "59dbd137-2b20-4458-a921-d8561a821083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e3474f-4708-4da8-8128-a37d57679fa2",
        "cursor": {
          "ref": "d9821b21-18ed-4be5-9258-73f9a06c0bad",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "89692878-abde-4095-8ab9-3aecbb26584f"
        },
        "item": {
          "id": "81e3474f-4708-4da8-8128-a37d57679fa2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "38cfdf61-a6b1-413e-ae4b-2a05d7379a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75e516d-5782-495d-8e01-77d836b8b8b9",
        "cursor": {
          "ref": "6d600cc9-94e2-4181-a659-40576ce4b49b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "49c9eb39-723b-4aa3-a627-83cf21fa9c33"
        },
        "item": {
          "id": "e75e516d-5782-495d-8e01-77d836b8b8b9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0f2f8575-b561-48a6-917e-7a9d9c41413d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5697f42-6dfd-4ae5-95fc-9c359c80b925",
        "cursor": {
          "ref": "4d3e5965-edbe-4d0c-8833-350880b98328",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "425705a3-5a06-4ac9-8826-d8b631acd8e7"
        },
        "item": {
          "id": "c5697f42-6dfd-4ae5-95fc-9c359c80b925",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "03195c33-ffe8-40a3-9dd6-a03566e8298a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f4c6d9-2111-4e21-beba-754b46b5333b",
        "cursor": {
          "ref": "c90809c1-d2e6-4816-8065-9e84136b0e5d",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7b17983e-29e7-47e0-97cb-3ebc22a70ea8"
        },
        "item": {
          "id": "d7f4c6d9-2111-4e21-beba-754b46b5333b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4d19bf26-299b-4730-b26b-47d465a9f297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a8eeb5-eebe-469e-9938-614ae957c5f7",
        "cursor": {
          "ref": "0baae9ed-73bc-47d7-aa22-5cf9d709c317",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "95b5cd2f-ef95-421a-bc04-8145fea788e9"
        },
        "item": {
          "id": "e8a8eeb5-eebe-469e-9938-614ae957c5f7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "81241c7d-baca-47e3-8bc3-61f6dde12bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33f3c65-a301-4be8-929a-cd832a8f45cb",
        "cursor": {
          "ref": "50e7eda2-556b-4df5-be4a-8225bcc951cd",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "942c3cbc-8768-4340-9de5-598fc003cd3c"
        },
        "item": {
          "id": "a33f3c65-a301-4be8-929a-cd832a8f45cb",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a2dbb9f7-93db-431f-9507-d1c26370ded7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d576f1a-bbd8-4aa3-8410-db1932ca823e",
        "cursor": {
          "ref": "f8415ddf-89aa-429c-a90e-2910968637a2",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1ed6e150-d0da-4b7c-995d-1d08e4942c1c"
        },
        "item": {
          "id": "0d576f1a-bbd8-4aa3-8410-db1932ca823e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "12c5a2d3-4dba-499e-a60d-7b8018536d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193c6c8b-31ef-495e-81ea-fb6478270c57",
        "cursor": {
          "ref": "6e9fec51-242b-47e1-97cc-272fcba7e45a",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "aa097f2e-e4f8-4a5f-8d4e-492f074898d0"
        },
        "item": {
          "id": "193c6c8b-31ef-495e-81ea-fb6478270c57",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9518bdae-1538-4b8d-83c9-90c51753b8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5885f14-2058-4df0-9e39-f6126918ba7b",
        "cursor": {
          "ref": "6fc6e398-93e8-4370-b1ff-8232f475da70",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8df02dfc-34eb-4fbb-b205-548899ac5da4"
        },
        "item": {
          "id": "a5885f14-2058-4df0-9e39-f6126918ba7b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "07ce806f-5ceb-446e-871b-35f5d4c6abdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a5e022-3fcd-4f7d-b515-acf0a8578fd6",
        "cursor": {
          "ref": "6f0be4d2-67b8-42cb-a46d-aa0c5ab2614c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9b8fdeed-e907-4908-9cda-2e7b57ab4595"
        },
        "item": {
          "id": "12a5e022-3fcd-4f7d-b515-acf0a8578fd6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6bd689a5-075a-4b95-bb15-755b48f9272a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabe8d49-d036-4e55-9668-9a8adf08d110",
        "cursor": {
          "ref": "18972ba6-72c7-4603-b298-6f87e50b4fe0",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4f2006d7-e1a2-466b-b0ff-f4dd583ecdb3"
        },
        "item": {
          "id": "eabe8d49-d036-4e55-9668-9a8adf08d110",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "36206252-6826-48a5-a32c-940ec9ab3668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803a18cc-8eac-43db-9883-c0fb302eac38",
        "cursor": {
          "ref": "bfe5becf-d3ea-490e-82bd-056f985569c6",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a7261379-19c8-438f-bd40-d6ab6b1479cb"
        },
        "item": {
          "id": "803a18cc-8eac-43db-9883-c0fb302eac38",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e104d41e-f3d1-416c-b75c-3d000a25cef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aecb5b2e-18f7-488b-99ca-4baf93462f95",
        "cursor": {
          "ref": "0fcb786d-78fd-4de3-a86c-a1798a9bbd88",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8c040302-7001-4fec-8cdb-6f8c1725142d"
        },
        "item": {
          "id": "aecb5b2e-18f7-488b-99ca-4baf93462f95",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3861359c-727d-48a7-84cb-32dddf9932ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1390fc08-d56c-4d88-a7f5-72d98e7eb789",
        "cursor": {
          "ref": "66cf5d43-3a3b-46a0-89fb-f31c79fdb577",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "da9e6a39-61ed-45f5-83dc-594b7a88e3a9"
        },
        "item": {
          "id": "1390fc08-d56c-4d88-a7f5-72d98e7eb789",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "af1053b4-9d39-482a-924e-04aad7f9f5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f07ea77-bb1d-4311-adf6-f4485e581992",
        "cursor": {
          "ref": "8f875997-bddc-4197-a99b-0884aa5996a4",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "86811c55-99e8-44a2-8b1d-072bb2a78478"
        },
        "item": {
          "id": "6f07ea77-bb1d-4311-adf6-f4485e581992",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ee504a73-953b-4ba1-9037-19f05abd5ca4",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "243357bf-7e6f-4901-b437-ce5fad4a0125",
        "cursor": {
          "ref": "7915d01b-8874-4c13-8340-5ae0e823de1b",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "60e2031f-498b-4cab-9368-1985a6538812"
        },
        "item": {
          "id": "243357bf-7e6f-4901-b437-ce5fad4a0125",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ce661caf-200e-4261-a30c-78782b979322",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c9ab2a7c-be9a-4779-bd4c-9ea0543d3a99",
        "cursor": {
          "ref": "813813d2-c13b-4560-bb1c-8068e5ad47e9",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2eca5698-ab76-450e-bdfc-ba34905831e9"
        },
        "item": {
          "id": "c9ab2a7c-be9a-4779-bd4c-9ea0543d3a99",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a6c00b13-883e-46b2-9edc-46cb101040e6",
          "status": "OK",
          "code": 200,
          "responseTime": 341,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "5b0d69f6-c979-4af1-81e6-aeaf2c747a9b",
        "cursor": {
          "ref": "2068db3e-6ed7-4140-a3c7-f569f0c98fd9",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cab29ca3-3439-45ed-ae30-d6071fdb081a"
        },
        "item": {
          "id": "5b0d69f6-c979-4af1-81e6-aeaf2c747a9b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f0873c0b-0db1-433d-9097-4e8bb95c3d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6f7728-f11c-4f4e-a92f-e1ffcdea310c",
        "cursor": {
          "ref": "e311b847-5fad-4e02-af93-8ef987eb6afc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "94f20432-7a96-4766-997b-9aa589cc7e79"
        },
        "item": {
          "id": "7f6f7728-f11c-4f4e-a92f-e1ffcdea310c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "49fd371a-49c1-4bdc-9e8e-53ed3d04d40c",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1b1ba790-30de-4f95-aeb9-936e73066f45",
        "cursor": {
          "ref": "3917aad7-72e2-48d9-970c-72d42a4b29fe",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "95a026dc-3c4d-4c7d-bec2-1c3828a6ed85"
        },
        "item": {
          "id": "1b1ba790-30de-4f95-aeb9-936e73066f45",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "424694b7-4f05-4205-8f76-7ba8caa6ee67",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4085841d-379d-45bd-9ce5-e416d165de7c",
        "cursor": {
          "ref": "29dd45f7-9734-4f18-946b-aebb609ed787",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "113c2087-54b0-479f-8306-629aed420123"
        },
        "item": {
          "id": "4085841d-379d-45bd-9ce5-e416d165de7c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0f85b560-1d41-486a-8d47-40be53fd4d14",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "61cb4047-b21a-4e75-b6f4-5004e7e5296f",
        "cursor": {
          "ref": "0f07f6eb-9918-4e98-aa04-f00f1c7438ed",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bd71b982-3fd2-489f-a91c-533e558ff491"
        },
        "item": {
          "id": "61cb4047-b21a-4e75-b6f4-5004e7e5296f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ab62f59e-3515-4d0a-890c-e1576e278dbe",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "4de07c4a-7957-4ceb-bdc1-91585a118855",
        "cursor": {
          "ref": "35f6970b-140f-4ea0-ad2e-612e4b464164",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "927253b4-3859-45ce-921f-9c6b7c38fa69"
        },
        "item": {
          "id": "4de07c4a-7957-4ceb-bdc1-91585a118855",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ff221a7f-fdee-4889-96d4-96efabe82acb",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "c091cf44-efdd-4c91-bc82-1446859a49fc",
        "cursor": {
          "ref": "56d3c6a0-4b24-4dbb-a23d-a9c3638818b9",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8ef8a35d-24c0-4533-90e3-ed4e25f13d42"
        },
        "item": {
          "id": "c091cf44-efdd-4c91-bc82-1446859a49fc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1164c02f-a9e1-4f91-a8f7-3f5ce5467ea9",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "4d129142-748c-455d-9ae8-e0cefdba8044",
        "cursor": {
          "ref": "4c990ac1-a701-4e2b-8942-b6049c051779",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7808b0d7-6c60-4908-9bff-44811c2e5805"
        },
        "item": {
          "id": "4d129142-748c-455d-9ae8-e0cefdba8044",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "262e51a1-ce29-471b-95bf-09a50d14bcf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc54c092-827a-4bae-809c-298b5cb4dc5e",
        "cursor": {
          "ref": "297541e7-7670-4626-9d6b-06529395ff95",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fd60cbae-e463-4875-ac50-9f0b0a085942"
        },
        "item": {
          "id": "bc54c092-827a-4bae-809c-298b5cb4dc5e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9586b63c-fa09-4e19-9d62-752c7280bd7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb95810-c601-4a49-81d6-b10f09f2afe3",
        "cursor": {
          "ref": "8f3dd1be-f723-4623-bb99-55bb7a41273b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b92bb4ea-1b3c-4d2c-9924-c99c02a55c2a"
        },
        "item": {
          "id": "7eb95810-c601-4a49-81d6-b10f09f2afe3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "579ffaef-50ef-4a8b-a364-1ee9d0bef19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13cb1ddf-4706-466e-8f83-b3180b565d2e",
        "cursor": {
          "ref": "6d8916e2-1bd6-42b9-9dbe-abfc7f1024fe",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8ce21ede-b191-4379-86f9-75996e2a33e2"
        },
        "item": {
          "id": "13cb1ddf-4706-466e-8f83-b3180b565d2e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fc4eeb16-9007-4c74-8a37-f0082a4570e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c89cbb4-9c19-4238-ac22-31fbad3ede34",
        "cursor": {
          "ref": "17973aed-7a4b-4efa-a612-962b024910c7",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "def79b68-61ee-48d3-ba97-07c6747141eb"
        },
        "item": {
          "id": "4c89cbb4-9c19-4238-ac22-31fbad3ede34",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6c6f89e7-e9a6-4803-a752-60a9e421c9f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2922b0b4-19f0-42e8-8335-670fe6cb7c1e",
        "cursor": {
          "ref": "fe57d4a7-f676-444e-907f-7ef02db03ec7",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d39c757c-531d-4e31-92f7-9878a78fb39e"
        },
        "item": {
          "id": "2922b0b4-19f0-42e8-8335-670fe6cb7c1e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d8cc10c5-7582-455c-8830-0b3ca66736eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4bfcd2a-6f90-4658-81fe-1678e7d5e59a",
        "cursor": {
          "ref": "6edfec7a-59f8-4590-9a6c-d0a40a9fd636",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7b1beded-30e8-4339-b3b5-aa58dc57e5e9"
        },
        "item": {
          "id": "c4bfcd2a-6f90-4658-81fe-1678e7d5e59a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "de4a8b3b-95da-4fab-86b7-b3d0b216ea12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c61bc3-569d-41fd-921e-b0a46ec86c1e",
        "cursor": {
          "ref": "0c4c4600-96e5-4343-8985-609cbfa9e87c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8fe47989-a7be-4a22-b5b0-e16bfd2e8a28"
        },
        "item": {
          "id": "34c61bc3-569d-41fd-921e-b0a46ec86c1e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b8596c63-5352-4deb-85fd-533f33bc017b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b621bf45-10c7-4c61-a8ae-c79838e96be2",
        "cursor": {
          "ref": "fdeaf7de-73dc-4053-882a-6c704ba7df78",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1ad05128-acae-4ca7-ae29-80e6c70d7e16"
        },
        "item": {
          "id": "b621bf45-10c7-4c61-a8ae-c79838e96be2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "193c8e36-82b4-4040-b592-128e463578fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4149d3-e96f-40a5-98d1-768018ff3dad",
        "cursor": {
          "ref": "92aa263b-3b38-480d-950e-c4efa488e041",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "69f10e7f-97c6-44f5-8788-c21601225cd4"
        },
        "item": {
          "id": "5b4149d3-e96f-40a5-98d1-768018ff3dad",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1b8ff623-7e62-4ab3-9921-f7eb7641bb0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca2a22d-4d52-4733-ad9b-ccce2649eed2",
        "cursor": {
          "ref": "e481b818-6b8f-407a-9f24-cf0c852ac0d7",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a0f9910b-0d14-44eb-9a68-655395b7fc55"
        },
        "item": {
          "id": "bca2a22d-4d52-4733-ad9b-ccce2649eed2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2d0f3b79-9c30-42ba-83ad-6c6cfb4a72d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a13894-a7dc-4bae-8f47-5d28b0e659f9",
        "cursor": {
          "ref": "191c22e3-a3ae-4f3c-87e9-9660093c6069",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4088a5ee-6093-4e30-a31b-ff6fe77ca359"
        },
        "item": {
          "id": "77a13894-a7dc-4bae-8f47-5d28b0e659f9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "04e6e370-ff6e-46ac-a2d3-6d20d44b3d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f474d446-be7b-49c6-be93-8f0e667ad1c9",
        "cursor": {
          "ref": "a626c305-e3c9-4812-9f64-d91f1aae105d",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8868b420-65a6-4bbf-9193-8371cbb94426"
        },
        "item": {
          "id": "f474d446-be7b-49c6-be93-8f0e667ad1c9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "77865dbf-5391-4910-a4e5-6bddbab50bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b8f90b-681e-4d20-8276-71375ac35ca2",
        "cursor": {
          "ref": "4b0d535b-c884-4e4a-aa31-81d191140a92",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7b941970-e1c0-416a-a072-17ec1dfbd5d5"
        },
        "item": {
          "id": "14b8f90b-681e-4d20-8276-71375ac35ca2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b91c0642-eef6-4fa7-a0ab-7b4f6b8fbd3c",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a2cc697b-57ef-45b6-b3f1-df105bdc7c1e",
        "cursor": {
          "ref": "3855ee69-373b-4e20-a39f-33c75afa3150",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7be54182-5353-422b-9add-9b03d004f4fd"
        },
        "item": {
          "id": "a2cc697b-57ef-45b6-b3f1-df105bdc7c1e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "132e7480-d345-4ac1-ba4d-0982d0a83915",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c80d2243-956d-47eb-951f-b83ac4035a4e",
        "cursor": {
          "ref": "3c431cd0-5907-4937-845c-f6b9f37177d8",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "93430f53-2dd2-400f-a337-2fbe63b36518"
        },
        "item": {
          "id": "c80d2243-956d-47eb-951f-b83ac4035a4e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ad03139f-91c8-4aea-8b8d-a62a0d3b5e7c",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "47d33045-4495-409f-9708-0237f46b2768",
        "cursor": {
          "ref": "791c8615-a7cc-4db6-9660-2c8c7f656c9a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "75e539ce-3dc0-4bdf-ac15-8140e782a6da"
        },
        "item": {
          "id": "47d33045-4495-409f-9708-0237f46b2768",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2f2221a7-f48f-49e4-9241-5d41288bfc65",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "08a5bc22-0683-4a73-aa04-7854a3e5d403",
        "cursor": {
          "ref": "9959f523-5cd3-4a8a-8f54-27c72d1eb111",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1ea9ae5d-77de-4db2-a05b-f2b4974ab9f0"
        },
        "item": {
          "id": "08a5bc22-0683-4a73-aa04-7854a3e5d403",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c649f3f0-5b59-416a-a902-c1adb5d91181",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "58dfbab4-2c26-4db7-a0c8-de24f055ccfd",
        "cursor": {
          "ref": "3fe18968-e2ec-41ba-b88c-c968c6ddc6e6",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "81e9b2f9-86ab-45f1-ae20-217d23d8964a"
        },
        "item": {
          "id": "58dfbab4-2c26-4db7-a0c8-de24f055ccfd",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "edb6c2d3-66bd-49b9-94c7-0043cc52754b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d09f42c-fcd3-4f65-a912-579469f08432",
        "cursor": {
          "ref": "3d63e7b8-2759-477b-94e3-3a91d28cdaee",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e38e1faa-53a4-411a-babe-e1c549b1cb20"
        },
        "item": {
          "id": "3d09f42c-fcd3-4f65-a912-579469f08432",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bdf25074-24b2-4612-825b-b87588b86d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5491b3-8cd3-4688-ad71-b9196f687929",
        "cursor": {
          "ref": "bf642e83-0c06-499e-9342-088073cd6626",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ea161532-ca43-49b7-9293-726abf1992a0"
        },
        "item": {
          "id": "4a5491b3-8cd3-4688-ad71-b9196f687929",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f0eb60d9-7362-471a-8bbe-240b94394842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31416a11-4d95-4a87-882b-c609aac98c59",
        "cursor": {
          "ref": "f0bbfe65-e0d3-4407-b3ce-ea82693b6aec",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "08616933-04cd-4e77-bebc-2079a9e0ca3c"
        },
        "item": {
          "id": "31416a11-4d95-4a87-882b-c609aac98c59",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e5be3ab1-d7ec-47a2-8c7d-84cc5a58cea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb3a282-d4dc-4836-b569-16151f6b35c5",
        "cursor": {
          "ref": "2ced66eb-91ca-4969-b038-c70970b99435",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b0e30124-9c6a-4ffb-87a9-8a0585eeebf5"
        },
        "item": {
          "id": "edb3a282-d4dc-4836-b569-16151f6b35c5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "23eb3ae8-b09a-4ee9-8e21-b94527547c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6808e9-328a-4a70-b117-593917c59438",
        "cursor": {
          "ref": "b5af4d7d-60e2-4969-bd90-556bfa613eb3",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cc490e59-a7c9-4fd4-847b-18af592954c8"
        },
        "item": {
          "id": "4b6808e9-328a-4a70-b117-593917c59438",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "acb567f8-2cbb-4e24-baab-b68f3382bd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a04a3f-d1df-456b-a35b-9680455de3d7",
        "cursor": {
          "ref": "1627c801-6f45-4bbc-b75a-d505ccf08a1e",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ef0cc1f7-00d5-430c-ba82-57a3151297fb"
        },
        "item": {
          "id": "70a04a3f-d1df-456b-a35b-9680455de3d7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "19934d4f-24c7-4ea3-9723-df29f7807ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261188a5-f579-4efd-bb45-f246cf0456fc",
        "cursor": {
          "ref": "54fdc03c-51f2-4ede-83df-97c702afe991",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "25fe78f7-1814-4d3f-8f49-d634fbd6f599"
        },
        "item": {
          "id": "261188a5-f579-4efd-bb45-f246cf0456fc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "865b5c00-4193-4f60-8468-a1ee2e38dfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72904080-9a9f-4254-8e75-c8d6be47bb43",
        "cursor": {
          "ref": "790eabb3-1aeb-4e6f-b31b-63892cf4cddb",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a36a4e24-c6ea-4f41-bd9b-8fc96a509e14"
        },
        "item": {
          "id": "72904080-9a9f-4254-8e75-c8d6be47bb43",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5e5d6890-4451-441a-b4eb-3ca0675861ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6a30d5-0747-452e-896b-d82844ca7a6e",
        "cursor": {
          "ref": "0d9bc3e0-9801-4d86-8c3f-8098ef5e4110",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "049d4067-5566-4edb-9ff2-bdd15a1bec7e"
        },
        "item": {
          "id": "ee6a30d5-0747-452e-896b-d82844ca7a6e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "48b89b6f-093a-4e5a-b8a2-0f5552f948c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc0bd5e-d2ee-4db8-a4ae-f33f3dc7088f",
        "cursor": {
          "ref": "c845d2b9-4d95-4404-b35c-8a52cf2b692b",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ce5b0955-b46d-4d98-958c-51506ae8026b"
        },
        "item": {
          "id": "7fc0bd5e-d2ee-4db8-a4ae-f33f3dc7088f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7dbd6734-f409-4fcb-a12b-1681a054eb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88a04b7-d4b3-4a58-9f95-618289bf424b",
        "cursor": {
          "ref": "90432456-2cf9-4972-94db-896b5bffbae9",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "6ef4bd8a-d725-4672-887f-82e031e90dea"
        },
        "item": {
          "id": "c88a04b7-d4b3-4a58-9f95-618289bf424b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "73a7a884-18ad-462f-9d83-7537c27203ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38053987-8989-4ba8-8ffd-7abed1e9a0ee",
        "cursor": {
          "ref": "27849688-1524-4e35-8ae9-3a3e1d14b1d2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a8bdb39c-9f3a-4ff5-a337-34ae915e8177"
        },
        "item": {
          "id": "38053987-8989-4ba8-8ffd-7abed1e9a0ee",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "59e8ebeb-8c42-49e0-9fb2-76bfcb800796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df674b3-81b8-45ee-8b02-7b3c59f44e3c",
        "cursor": {
          "ref": "7210d709-14ac-4774-91e1-d186b6533bf5",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0f9df91b-79b0-492b-a1bf-4d4c6af2bb9f"
        },
        "item": {
          "id": "0df674b3-81b8-45ee-8b02-7b3c59f44e3c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ba9a4db9-0503-4563-aaa2-5dab2aca9d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38bab8e5-0fc3-4c74-b613-ee6034f71601",
        "cursor": {
          "ref": "1590129b-360e-4bc4-8399-ba608e698725",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ccb01c70-bde2-4b42-a3f8-2115364994d6"
        },
        "item": {
          "id": "38bab8e5-0fc3-4c74-b613-ee6034f71601",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8fe6ce8b-0635-459c-9c16-252791afff56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d43253-c0fa-49aa-94cb-b422c32b91b4",
        "cursor": {
          "ref": "494db0be-a06e-4567-a36a-95f8f5af6dc2",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "3f0291bc-f682-4b46-8e08-bd3a92a0a94d"
        },
        "item": {
          "id": "d7d43253-c0fa-49aa-94cb-b422c32b91b4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4f1ab62c-ec44-4368-b2ce-c5a0c46bb4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa03efdb-3fde-41b6-a3a8-5ff58507e085",
        "cursor": {
          "ref": "4605f020-5514-4a6d-912e-b2f8e14a3a92",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "d31f3515-bde1-45c4-82f7-dcb843914735"
        },
        "item": {
          "id": "aa03efdb-3fde-41b6-a3a8-5ff58507e085",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0ee62e8f-9d26-4cd6-96a1-8d3aa4456411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17ffcf9-d479-436b-bfec-a25deb79f200",
        "cursor": {
          "ref": "4d5d173b-a809-4ee0-92d6-e5621e88c6ca",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e60b4407-989e-4523-a4d1-61ef28f9e89b"
        },
        "item": {
          "id": "a17ffcf9-d479-436b-bfec-a25deb79f200",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b43cbbd3-bf65-42ef-97b6-c1073da8a59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb09c6b-4b17-4811-ad78-b1f50cfb7e10",
        "cursor": {
          "ref": "67611862-a51f-40b0-b882-fb69cddfee18",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "86736d2e-6201-473c-9e7d-5c81ba275873"
        },
        "item": {
          "id": "ebb09c6b-4b17-4811-ad78-b1f50cfb7e10",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7e115a1a-ea92-4072-b9bc-d89976ffc6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5451ad68-efa1-431e-8584-5aedc50a8bad",
        "cursor": {
          "ref": "4130f17a-1390-4625-b505-7743f10c33f3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4e159e94-4518-4930-b46b-04e05103c95a"
        },
        "item": {
          "id": "5451ad68-efa1-431e-8584-5aedc50a8bad",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1434e30f-cde5-4307-b06d-7e418b09402a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99e49e7-d679-48fc-9dd1-fd05d2975c4b",
        "cursor": {
          "ref": "34160ac6-431b-4c7a-8da7-7dfefa88fdc5",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c03a1c9f-6768-46da-82bf-89c73708daab"
        },
        "item": {
          "id": "d99e49e7-d679-48fc-9dd1-fd05d2975c4b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "aea7f6e1-2100-44f3-a4b1-5b98787136b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64bffcb8-de14-4479-8bbc-c90a038da026",
        "cursor": {
          "ref": "9e9e44ac-e7cd-4cb3-95e2-a01add4111c4",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "64d9a781-5f52-40dd-aba9-c0ff03676910"
        },
        "item": {
          "id": "64bffcb8-de14-4479-8bbc-c90a038da026",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7dca72a6-b681-4eb1-aee5-febbb7b03cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab7ef64-7ca1-4982-9a16-c01892588adb",
        "cursor": {
          "ref": "e78385f3-1c8a-46d4-96aa-d159afcc4cbe",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "26e2a4f9-dc9b-4451-aec5-5e99bc3f519c"
        },
        "item": {
          "id": "dab7ef64-7ca1-4982-9a16-c01892588adb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f567dd34-8e89-450b-96ba-61553968b1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de19a0fe-7390-42c0-ba39-1d770b7ed11f",
        "cursor": {
          "ref": "e6ead2b5-fe35-4a27-9891-0f08272c96ae",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "11aa89b8-b1da-41bd-9631-90ece1024488"
        },
        "item": {
          "id": "de19a0fe-7390-42c0-ba39-1d770b7ed11f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b4c1cb26-9357-4b8f-b0c1-c8f2d40253cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f09c95a-9a81-4a87-a80f-49a86626cbe0",
        "cursor": {
          "ref": "58a032b4-bbb5-469d-8737-b8dec44a6ad6",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "58d3f73a-8c07-43ec-ac43-6379f9d508f2"
        },
        "item": {
          "id": "7f09c95a-9a81-4a87-a80f-49a86626cbe0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "684fe74f-5cec-451a-a12e-66d261c5a460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df456100-aec2-4bc2-a7cd-a2ccc05b509b",
        "cursor": {
          "ref": "c16fc188-7b5b-4d4a-bf8c-5cef6a2cac39",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e321c0eb-8dc9-43f0-91d5-7116be3cc77e"
        },
        "item": {
          "id": "df456100-aec2-4bc2-a7cd-a2ccc05b509b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9e01a639-1955-488f-9e78-f1abceabe507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff26fc8-c78a-4d00-adc6-40bce7f6ddcf",
        "cursor": {
          "ref": "1c8cd877-8931-4d4b-ac52-16f0ef53227d",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "062845ac-4efd-4c22-b10a-250a65982580"
        },
        "item": {
          "id": "8ff26fc8-c78a-4d00-adc6-40bce7f6ddcf",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f11c4c11-e819-4ea8-a0b3-63df49746a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a767ae26-f62b-489b-ba0a-0df4fa621acb",
        "cursor": {
          "ref": "8f37ebc1-2a51-464d-ba19-f540b8d699d1",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "0427873d-3268-4fda-8d88-1c8dfd0d4adf"
        },
        "item": {
          "id": "a767ae26-f62b-489b-ba0a-0df4fa621acb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e1a0346e-94ea-4a67-87b2-a3ca4887f8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2428ab21-8a0c-4e8b-b0b4-d4dedeeb733c",
        "cursor": {
          "ref": "91eadd26-5bf1-4924-99bb-2d24623dcce5",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6871031e-d02c-402a-ace4-8dc25f460da0"
        },
        "item": {
          "id": "2428ab21-8a0c-4e8b-b0b4-d4dedeeb733c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "533c5f4e-822a-4c6a-986e-efa623eaa578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9d8a01-d47d-4b05-b5f4-e605f6af659b",
        "cursor": {
          "ref": "d392d5f2-17f2-4dba-8a50-5959e5a60da4",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "b1122b66-dafb-47b7-8471-20a8494f76c2"
        },
        "item": {
          "id": "5d9d8a01-d47d-4b05-b5f4-e605f6af659b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c2d82de7-49b9-4ecc-8c3c-e11b1ccdd0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465a0edc-0a83-465a-b66d-dbe99e929659",
        "cursor": {
          "ref": "c20ac2c0-33ef-44c2-8f96-36b7aaf5d8fd",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6964922c-236a-4937-8a54-1c21f76aa0bd"
        },
        "item": {
          "id": "465a0edc-0a83-465a-b66d-dbe99e929659",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "07d0541e-0596-4308-bdeb-35b07f0c04c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908d16b7-ee37-4c0f-8f4b-24b642a3e76e",
        "cursor": {
          "ref": "ba0b5b22-44f3-4770-b406-87bc2cc92e75",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "728319ec-ef19-4213-b57e-4164562cc613"
        },
        "item": {
          "id": "908d16b7-ee37-4c0f-8f4b-24b642a3e76e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "677391c7-19b1-4049-b52a-461faaa14c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c6c953-477d-4cd0-88f1-883e7f8ffcb9",
        "cursor": {
          "ref": "2239b3d9-f4cf-4153-9db0-ee0f8f0f9256",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d53576a2-3fee-429f-b7ab-3b6265e61159"
        },
        "item": {
          "id": "b8c6c953-477d-4cd0-88f1-883e7f8ffcb9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1de54b6d-4fee-4c4e-b751-4f997a79ca65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f78079-9c16-4d96-835a-0a31fa26481d",
        "cursor": {
          "ref": "81008547-ca90-48da-8d76-0c881eef6c5e",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "4b5a34d8-b8fa-4d39-a51f-de7855716697"
        },
        "item": {
          "id": "a0f78079-9c16-4d96-835a-0a31fa26481d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3260e493-c542-4125-ae53-4ae67b917ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e07f0e5-a466-4ade-865b-1f2a0c449584",
        "cursor": {
          "ref": "ba123170-3a09-4e71-b9bf-5177fba1b72c",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d173d6f0-afe7-4c38-bac5-ffba7d594ea5"
        },
        "item": {
          "id": "5e07f0e5-a466-4ade-865b-1f2a0c449584",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "693ac322-86d3-40da-ba83-0b44775f6887",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f790c2-8e2a-4ef4-9f13-0b861cdf7b70",
        "cursor": {
          "ref": "45bb55aa-ffec-4996-8ca8-ad1ec549142d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7367b6e1-8cd9-406e-9eef-c1b3d0544a97"
        },
        "item": {
          "id": "49f790c2-8e2a-4ef4-9f13-0b861cdf7b70",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6e15e3cb-c007-46f2-8779-5caf8bbf6298",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "bbc147de-052d-4cc3-ad45-6e08e5fd6f0b",
        "cursor": {
          "ref": "61d9df6a-7fee-4e41-b466-0a2c64677b3d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4f498d77-795d-4d9f-aa76-2f5a6f2ac013"
        },
        "item": {
          "id": "bbc147de-052d-4cc3-ad45-6e08e5fd6f0b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "53221b27-f614-4058-b18b-87b55dae6f9e",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eab7672-2ec6-4913-8fde-c2665b62c98c",
        "cursor": {
          "ref": "5cbd15cd-9d28-4b9d-b39c-7afa9a7dbf7f",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e7bd2b45-dc00-40b5-a9f4-2518ccc27f56"
        },
        "item": {
          "id": "3eab7672-2ec6-4913-8fde-c2665b62c98c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6bd20f9a-8aeb-49a2-a5eb-46ae921edfe3",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90b91b8-4a49-4949-bc28-69310e38bd43",
        "cursor": {
          "ref": "03c8ca03-a14a-4e9a-9a0b-924d98a93e78",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d5c761f8-f347-45f6-935a-e9222ff54c20"
        },
        "item": {
          "id": "c90b91b8-4a49-4949-bc28-69310e38bd43",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e06cf1e2-0069-403b-89db-639d9b7271b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90b91b8-4a49-4949-bc28-69310e38bd43",
        "cursor": {
          "ref": "03c8ca03-a14a-4e9a-9a0b-924d98a93e78",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d5c761f8-f347-45f6-935a-e9222ff54c20"
        },
        "item": {
          "id": "c90b91b8-4a49-4949-bc28-69310e38bd43",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e06cf1e2-0069-403b-89db-639d9b7271b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0708cc1d-e0b4-4e02-83c9-c2e36c453d63",
        "cursor": {
          "ref": "4dc0c0ee-1856-4b4d-a6ea-ab40eb232719",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "2b3d51ec-148e-48a2-bfd2-14108fc7964c"
        },
        "item": {
          "id": "0708cc1d-e0b4-4e02-83c9-c2e36c453d63",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c9e3b347-cecf-4556-989b-d90d89097188",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d7be00-2d3a-4f97-8ec8-e1ece9cd9bd0",
        "cursor": {
          "ref": "41d9addf-756e-431c-9209-5e193664eb9e",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "d813b0ae-1693-4335-bbb2-da37dcd815c9"
        },
        "item": {
          "id": "57d7be00-2d3a-4f97-8ec8-e1ece9cd9bd0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "93b0925c-cc42-4907-bde6-495fa2d39a96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}