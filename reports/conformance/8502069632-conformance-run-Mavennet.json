{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "33f3475b-efcb-43db-80b9-404c9f080efb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "70877ccb-5200-4643-9c5e-39c89c3a1528",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ceb3e31e-783a-4318-8080-66615327792f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "deb75b2d-15b2-4e2b-ae1e-bec5953c9718"
                }
              }
            ]
          },
          {
            "id": "f9bbc7b2-9aae-4e83-8304-17e0a63e6fda",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6a02c90a-8cf7-484f-a041-6294d73451c8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e4be6bdb-2205-4f8f-87b0-3633996b9580"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "647be5c1-9bd5-4262-beb8-ae5b68b6ab68",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d78a5a7d-3a4e-4bfa-98cc-af189eb604c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "811e6401-01d1-4265-adab-83f83d85eb94",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9795edab-dd65-4312-8298-2ea5ad8831ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ecd5bc40-03c5-48b6-aac7-bde5eb548648"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96ee2635-211d-4308-ad74-e6bd27ecbbf8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "05840770-634f-4bb3-8a8c-f6acdba15f22"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7af007b-9d49-468d-b743-9a33fca82d41",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca57cca1-74cc-4446-b48d-5cfc1997df3b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21ee268b-29bc-476a-93e2-6cff5d49ad93",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "90d6601d-67c5-4312-ad91-cd0527b08afd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ac06c2e-25b2-4161-8496-2e40ae93e28c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4fe6b564-6287-4f03-92b6-8363d0451db4"
            }
          }
        ]
      },
      {
        "id": "db65eafe-a502-4e9c-a725-3c64f53a2602",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "27ed9f8c-e0e6-4eae-a95c-46d6d51c3f3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1f223b6-b49b-4238-8b90-d14bc04818e4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "23922c7b-44c9-4481-aa57-2f4f6e0b375b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da892ac4-035c-4f14-927d-c125102a1a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ede6f53-6112-422e-8bb1-39a9d5595670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b137927-79e2-43aa-8585-00e54cce4fed",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01626be-a9ca-4d86-8c04-6d287ebb9394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7da0c87-1a69-43c0-9e84-396ee4cfebbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041237dd-799e-498a-ac2c-51126e0c504c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff97d6a-f1e0-4c0b-bf32-f3b0d345e13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6384485e-7ce2-485e-82a0-3b21f6ac782e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "72722542-0711-435a-9967-60777a37a905",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "332d17ef-02b3-46e7-b0b1-c7c821956721",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af9ea0e-6c6b-4e72-a1e2-030cd7bad72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "002e7a9d-f2ca-4be8-bca7-6f286b870bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f29125d-a643-47ca-9a31-b142941d9ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce421e72-1c38-425b-bf9e-52458e825753"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "995f6a48-3612-4db3-b80d-0a78865b9afe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "477ee496-5f13-422d-bfe5-9761e0d23023",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28385efd-2e79-412a-9cce-ec07f46dd18e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5b73d429-52f2-4cf2-936f-0ef0949b7ff3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d98bda51-99ba-4af5-a75c-3df3e60ac76d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "0b2dc143-737b-426d-8857-363b63f47b40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cfdf9c5-7b49-4c8d-9af3-20e408309f40",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b6b0fc7-32db-4187-8f9d-77975b117efa"
            }
          }
        ]
      },
      {
        "id": "7fa2e3e3-e0b5-4f47-a407-d7bfebb65ded",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0354f6c7-c304-4747-bfb3-5def684d1940",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73871078-ea05-4cd1-a62d-263454cc4930",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7410d028-dfd6-4103-958f-09e5ca0c5ce4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6b3076-154d-4d31-a9cb-4434ce80e02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e0cb4a-d30a-446a-9532-5e04c8b0d56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f86d215-bf3b-4295-9f6b-73ab15a7f3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e422563-a93e-4790-a4b1-6485cf70593b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19fe8ba-917e-47ee-9ea0-121bcd7515ff",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802cd15c-fa6c-4e89-8dab-3fc3ab9fb298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d743b7-effb-4924-b324-6e7e1351f64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f104778c-6d7c-496b-a270-db388634a4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b09f7d51-6dea-499d-b45f-1228475d1048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d9ff18-71d0-4ec3-9978-5b53f34bba99",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8ee076-5acd-480b-aa12-686e405ebf55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf03146-1788-4f10-a5fb-a3537bb2f193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e087b4c3-759e-419b-96f2-ed28401b20e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f142dcc8-40f7-49e0-8da9-ce54b39058ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5985a1a4-f64d-480d-99d3-741a0306daa9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85195689-9dfc-43a8-8af5-5cc14c135c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c978bc3e-3d3d-482e-bb59-bfcea27f4290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c4add5-08a4-4e89-acb8-3934fb212e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f36e0e4-fbda-4174-81c9-a2ad20ad66a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadc1c3a-e149-4b00-b084-de50eb2587f0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de6f0d7-d849-49a1-888d-239f06fd7783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4121e1c9-6d4a-4ccd-a614-57b5157ad1bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8af2582-f496-4ee5-9e55-2e84e4df4a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "938a9420-7b9e-45cf-bc1b-1e45cffeaab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f6f7ed-5163-46e7-a141-3c828621275a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f97088b-4258-448b-b3fa-943cd24d07c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8cbdb3-32ce-4e1a-a3e7-d197978e3e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63cfee1-4c04-4e61-8e7c-962896ddf59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0f42efc-d871-4377-8dc2-aae630d16027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae3efc1-9eb0-4f65-b6ac-824129e90322",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e0073a-18c3-44ce-b5a8-8f80de8d0ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b33340-54d4-4699-8f1c-821e773b25d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96a85e9-11fd-4f7d-a925-fb0aa1be8f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1337816d-1c06-4fde-8f13-34337b2600b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c26862f-b25c-43ff-b460-a659b95dec6c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace2c0e2-01dd-4e40-a143-ceb44e15cec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "897f24cf-3f5b-405c-8697-79aa1b254ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4ebdac-748f-4272-b08e-b78fe8363090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0bc89c9-a2a2-4241-b908-50a7d2962ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62de6fc8-5765-4161-b00b-3aaafe61a7ae",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8fcc36-4369-45f7-bb3c-694568f1eeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d841cc78-06d0-4ddd-acfe-b799882b079e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2126e6a-270a-4f06-bf5c-efe3bb5a8cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "192a3f8c-28bc-4091-8a10-d8a0a86eef70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a659b4e4-b757-4829-ad87-5e9cdc5230b6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac8ac26-f2f7-4fc2-b440-d7f9e13f8ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17af5af7-9ce4-49fb-9809-25d1c580f6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436141ba-1e63-4a81-81b9-ddba4379e86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8ed531f-d73a-4a19-bdb6-e3a2215b76d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18af095c-6e3f-4ebb-868a-71b8c5da99f9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f16d121-1c54-457f-a819-0496e20adedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "792f0993-0818-4a79-a45b-ef3d37f94d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae867779-a0a6-4375-8b83-e1a3942427ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "876376db-7248-4beb-a827-9ff46265ab6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82e75c1-665f-4230-bf38-4d32c8ea89d1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17bfff1-29f2-47bf-8e1a-f5f7aff5c9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d64719-1a77-40e2-ad5f-185bc9f6bb5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5596e9bf-41a7-4fe5-8fee-3a8d42400287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63cd993a-9731-478b-9a20-79f1ead726f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8d4f9b-6d5d-4535-afb2-4a15075ac2f4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2705a0b0-93e7-475d-85f4-63c604606c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92db06db-019b-4f00-afcc-1a838f6d36a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef22e5e-3121-4ea9-b869-ef6b64f3aa54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "829d32cf-34d9-4830-b1e4-53cce2f05c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322583bb-77e2-4552-97f0-30622c463a7f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3f4b87-01b9-4eab-8744-700f81d30943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ef6857-47ca-4400-a995-eba4b61310d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4ad169-575e-4b9c-8e17-17f12ef1f64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07eb9ebb-52d0-4c0d-b854-bcda137877f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b5e0d0-933b-41d4-8e49-4eb3c138f144",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5573419-46b0-4e75-a941-ce18832d1440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95a00d3-8281-4a75-9fe7-47b3ae3a775b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55c249f-00bc-4ef2-85be-0a4f2a155c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1aa414c0-5eed-485b-b0a5-e4771f11d3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f103848-b63a-4623-a0ae-2058def7b1ad",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb945a84-7b9b-4ea4-82e6-f75a855c5f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43460160-1e4a-47b9-9d7d-eb28be1f2eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910155b0-ca06-4e97-89a9-6f132c755191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8acf901-4c1e-4c70-8b09-e3bc0a0a2e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb7c847-16d2-4e18-84fe-28677b483b30",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97d2cec-6601-452f-8523-f48311ef1bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45bc777b-a3c8-455f-b1dd-51425d66a7cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb89050-2c89-4128-98bb-44487e5ec97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cf870c8-205a-4c9e-8a26-54fea722780d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4205654-fc62-4c4f-b61d-20d359e1279c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a475c5-1a6d-4c3e-b43a-fb6f34ec8818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a8283c-520c-4759-81eb-8a2ceab6d92e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2c733c-c294-4c49-8296-af13164835eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef66962-e9f4-481f-be57-189e290b2370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb2c7fe-a9fd-48ad-837b-7b223a869b2a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe72ecd0-6cf2-4bcd-9409-26333b372f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102df16f-254a-4797-8795-c1ff5f5482e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4495aed5-dbb2-42a7-aa96-bd2f9bb7c13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c19b56b9-e32f-42ee-8161-2c3e2f7b5dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab51486-2f15-44fa-8812-af0860c80595",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b929c3e-53b7-456d-9918-52446a964abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3826eea5-38a4-4704-90f9-237684865d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b710c990-eecd-48b0-886e-cdc31b424e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f09a710c-6f89-45b1-98b0-61f66bb51776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91df8d14-7510-4a88-b2ea-961b97194813",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52159924-7239-4d47-9ad9-697ee99af0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681f4d84-f5ff-4fab-81e5-c99d67a3eba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb45487c-c395-44bf-ad53-65a423c1fdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3412b78e-372e-4422-8dd7-5fd4490d4cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce36ff87-fd94-4133-95bd-694d69e0a0f0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e423a487-9eaf-4ebb-bfd1-baaa03bba871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da9b487-b27a-4b41-a765-354b9c09e063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d70403-19c7-4ffa-9949-80ff0570a24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "18c700c3-a163-4b7a-a77e-49207844a81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30800e55-575c-4692-8c12-ce77efa41b8a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a9a09d-50d5-4cb8-a2c0-0a0d429f458a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba040afa-23d8-455d-80b4-1aef2bc1546c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7232ab65-fdf1-48f3-bdef-1cf6edd4a25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b76e81-fd7d-4d74-98ac-0675a3796217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d1f416-9d25-40a3-b74b-7cdb224523e0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d28e91b-4b8c-450e-a1ea-51cdb3c69a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc658896-ac94-4c96-b54b-7b5d845e8719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9589b84e-8b38-41fb-9e2c-0c4a6c52e54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "076e65e5-8308-4f47-8ec9-93ff5cc8104d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e233b9ef-9f14-4a52-88f4-6f3aaf8e288c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38d19ed-da58-47af-8f5a-e105a4cd9050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5435a155-de0b-4ad8-99ca-2aeb91760548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0103b1-cd82-4dd1-bd5b-d4e4581fe6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "46ccc52b-6652-49dd-8f0d-77edacaedbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e06b108-50cf-40bc-8ad4-421486571f5a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b4c107-621b-486a-be3c-005331fdd389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9e9ed9-536b-4b9c-9b47-e4e016b38088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d056bc6f-936e-42a8-b6c8-7a3cecd4f8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16f6998e-deeb-4c26-8715-5e47a43e7a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab31cb1c-cc14-4a40-a3d3-b77edaeb547d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25eb9d91-2848-47c2-b939-99e2085c7d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881d1845-c73b-4337-8ac8-b0e17dfa0f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8b4a05-f91b-4756-9180-195363c6d4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3658ab16-8465-44b5-881f-aad64a49571b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6edd96-5df8-4cb4-8ac5-c3a4dc44b750",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ccd3b9d-392a-4c00-ba9f-6c9a5b74989b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f86986e2-76c6-45ee-93af-aa354ceeda02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d41150-187c-4c8e-a474-decfcf1c6fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "34375cd2-b0cd-4ca6-9e26-9372e1462f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbf6beb-e45f-42de-9b2f-def9be613fed",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b27ef8a-0f3f-49e6-b89f-ceac4d51f4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fefa1850-907c-42c4-b1d9-ea7e8eed1a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6347db2-53c4-4dba-a346-7e84a64aa32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4dfe662-f1c1-4231-9542-eca4eaab86a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00145c46-169e-4855-bb05-99599a7dc692",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0770e92a-8890-47f4-a75b-b3e3849b0016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f91973-14e1-452a-93a0-d1ae367f36ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4a7568-c1e3-4295-b084-9b9d82d3c911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1c25b1-f2c8-463e-a5fc-9d6af1ba4f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8827b54d-3ca4-417c-b43e-6941154e532b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107af4c1-c6d1-4adc-afe9-c3c9bbdf5c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75bf874f-9fff-4cb8-bcfd-47d494ef5cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fadfd9-10cf-4a86-9926-93b431d1b592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2be7a0-51c1-48cd-adb1-6d4370860306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065233ff-af17-4b6b-a037-12d05d482201",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b8927a-e063-4f2f-aad6-a525f4e0c404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e69cad-7d58-4419-8c05-3a5e7e923c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0218aec4-7a81-4fbc-a9c4-a59dc5ea285f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b706bb1-ee78-4101-97d0-328cba7bc7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932a833f-0731-426d-9f69-7f8e4ff694b3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a32144-ded5-4ba0-a3ee-ca6e4a9a5bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d3b244-1e3a-4209-8964-493acd0ee24b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb993fa-c053-469d-acd2-d233eb9bd140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b070a7-48f2-44fc-a605-aecff0f28259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a74aef-b04f-4bec-87f1-3f24b92528b3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906ade18-088c-4f35-98b0-64ffc9f06d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf757c14-3182-4049-b496-1f01286ae223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cffec3f-f805-465e-81b6-1f2de759cbbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a65c16f0-bc6a-4ab0-9794-486dc8b92e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfcfecf-0805-4d81-85f3-873f8d47e990",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4af6a0-ecd5-4e58-8dc5-f6c6ff9d6e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "293684c8-b7c8-403c-80ca-dad86beb52f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47bb2f9-72fb-47b8-bea5-48394f801ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "56a36be7-2dd6-4473-a7f0-5376b4e50ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5c0f8b-1581-45a8-8b05-c3e772747bda",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d4222c-7f86-4908-b3d7-f32a5ed5490c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37ef71f7-da7d-4033-ba16-53641b4f549a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bdcc4f-a3cb-4232-80f2-54b132d297a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e6c276-c773-4ce6-a86d-21155fc6aa68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd820a0-5c62-4b77-8b42-8247165a4594",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74ea345-ae6f-4946-9d9a-f27a42cea710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53baf8e2-abc9-4f40-b185-f06594bc3971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8f14c0-f1e3-47dc-a344-704e2fb8741f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6510ac38-bf3c-4d64-8ead-6bd913162374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93915125-73a0-4ffc-a62c-3b8b50aa1aba",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1ed424-5a55-4879-9836-d625b720eca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0f6620-a251-48ec-b3a3-e65baafd97df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672c9719-830f-4647-82fd-ce5e63b8fb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc2b4cd-22f4-48a5-ab03-2f38905dc162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b289f6ed-f2a8-4ef8-b22c-5b497b76149e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d8a5f7-5ad5-41d2-8b89-eb26c0d29b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ff1f2e-5e79-4f3e-8f2e-fa1e4c8eddfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b33ac71-646c-4dbe-b96c-91d05abed086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "69a417c2-4fb0-48ef-be6f-326b275b5c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a85b974-1d2d-422b-a977-573c93dc8838",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387543c7-ca09-4f63-b1ba-719bdaf0029c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1bb373d-7ea2-4b2f-a79a-9e8271c79097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76ca21f-e8c5-4951-987f-48b38eff17c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c16563f0-57ce-4a6c-9f9f-f35d5cc80574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3d8d10-f168-4de0-a75c-8d32d33ab154",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85201b1b-a0ab-4e82-9912-3082c8831da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d6cf536-4035-45ce-9591-0ef7b9bc8c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e95035-e212-42ea-b591-eeb579793684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0258c64-1e7b-42ec-ae7c-19b183e5eadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8def36c9-463a-4437-95d6-b7c31169d989",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2afe88-542d-4cc6-8491-a6dd0b59ba9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4fdeb9-9334-4c06-a37d-a5aa421d694c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdccde3-83a9-404d-b6c7-7376309849a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c3052171-5574-4490-931a-4d3356c68dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f9fda0-d643-473d-b1ca-882835591353",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf09f303-e6ce-4abe-95b1-251559db4263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5c35ef-d306-448b-b79b-2d26a7594a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4164963-d4c6-4486-a5be-dbf94fb47087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4692661a-e064-4a4c-ba78-8118fc005ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fc4fc8-e807-44f3-8d37-09164f138c7b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87175f1-d83c-4e43-b18e-ed24ba602130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc0e2b9-8f84-4e3a-b68a-89de24f62da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c403b3-eb16-433e-b168-78a6453e59af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e358c6a-d601-4f97-86b8-cb31788cb8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd860986-4c6f-46b3-bf8a-282f1db1088d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f793b8f-7809-406a-9fc4-6126b5b10e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b141548-0b1d-4699-89a7-e24e86a2a7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f91d45-ab61-4e40-a67d-e7dd6d100a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc94c74b-48f2-4853-bc8c-d8a8c4f07ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090717bb-c80b-4252-8828-5206d970a7fa",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4485dc-38f5-435f-8b2c-b5af924e61cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61df3db7-f7cf-4138-9f22-ff3d2442650b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7a7d96-48b7-4f73-91d4-4a3e6caea991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b955ac65-3a00-4cd0-ac07-155fbb8b90a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb264ef-9f93-4e08-bd30-5355d3215f11",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740550d0-6696-4df5-a212-d65a8a45b1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a218d1-1a4f-4a5a-b331-796c2de40432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8db4be6-438e-48f0-b8c2-989dd832b4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cca2068a-605f-4699-a5e6-207f75a892c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710d31d2-0e3f-4922-9983-65dbfb6859ff",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aaa412e-ef1c-4940-a63b-50bf6117ee2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc846d7-7bb3-4918-935e-a83485966efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fddcb6-61fa-4aa4-b2a6-c8417a479dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61c8650d-5559-4c2c-b65e-6d7c699c5331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05ad22e-eedc-4817-9fb6-527666f78206",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b1b427-3c66-4f5d-b3f9-8b3cec7ce036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ea9ea5-28c8-4936-aba2-981a6d835c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6613a62-6f2d-4351-9a94-1d8e2e1a3765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36b51e4b-6cfc-4d3c-894b-2ffa517da9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6718d93-2156-450f-97d8-4d81c9302871",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2ad086-35e7-4eb4-bc6f-4a8fc14a680d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f47b8c2-8df7-4854-9cc0-c78893ef2c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5fe09a-7663-40c6-94df-96af8726d8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93312fae-07ab-4016-ab83-25a2eaf31f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9ead27-5d6f-4312-9ea7-3964d2f3e1de",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9a13d0-5be7-45f1-a059-0314caf38e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02484266-2589-43ce-b1f4-f446696ec71b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b2c6c5-8ca8-431e-b28b-54a84740cc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d178bda4-29cd-4b8c-afbc-aab25ab3d60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e763ca6-f77a-4544-bc92-df8d069e76a7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aed5d02-9740-4fb3-81e2-26139616ad60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8d4329-11d3-4b47-a57a-e77823d51c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67939b98-f61c-40fb-acd8-7897a3e630a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "56315377-8e8f-4c70-998b-9cca518b67bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5bafa2-9e79-40d9-a8cb-859201ffe1fb",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bef61e-5819-43e2-8036-8125f26dd1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b94a3f0-ceeb-466b-a98b-abf02281c4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1ad408-dad7-4c92-a722-c9fffd6af5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "434ac1e8-0f71-421a-a9c1-e80f2ea1b80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f8a536-e810-4f30-a7a0-81e37dcd4c23",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5d4955-2b34-4704-9120-d0a361928508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77ded84-f844-478f-8dc2-5df1f3b8d549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5e56c7-5dff-4dff-954a-397a70e10443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6abae8e-01fc-4948-8c58-6d0995d3e5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3ff711-59fe-4d41-b02b-d32e75580989",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b11f12-0861-4cbe-8f6e-3d4f5928c499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72ff442-d26d-4bd6-8ec6-57740f0d773c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e3d81a-a86b-45f5-ab45-17b74ce40a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "028eddb2-2a44-499c-80bd-93ed612ee13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adc13af-4aad-4882-975d-a8b377a745b4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3779284a-163e-4e25-a28f-d57abf7de93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0194ea33-be90-46ea-ac79-e3e37745f849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b4512a-1183-454f-8d3e-9d2f6369dbec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1d721bd7-a3d3-449a-aeb4-fc03d4dea26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a213cfa-ec22-4180-b5ee-550c6d496889",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c722bc63-07f4-4462-beb3-b925fd4bc27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc068090-620c-49fa-9939-8f6e16540aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb64823-2dc1-4a9f-ae24-09ff7dccbdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c79b373-ea47-4d5a-b36e-30350de8a2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730c409d-d4b9-4637-90c1-175185464caa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33314e7b-4e98-46a4-9b1b-7482954d459f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0047bea5-f5f8-465e-b33d-b45833f8a2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16c28a0-815c-418e-90a4-03b85fda9aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad97671-d552-48c2-83d2-756a283cdeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fdf0b3-e629-4c24-9c66-56c0792d700a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc84c30a-bc09-4e20-9e87-da5ba033a176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799a0d6e-9fcf-4b09-b738-a3bcf3a19ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa14d3d-381b-4d54-b957-3316d9833b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3959fd1-a8e8-4d8b-8688-31a7ab88d7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba8f742-4bba-4c09-8ed2-78de8872ab4c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5dcd90-3c92-4f5c-893d-af9d5a2f18e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed84e2f0-03e7-4b9c-a774-5bd55b10a67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faff22b7-326f-4751-8fd9-6a2799946ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "54d6f804-dda9-42ee-b69d-4532eae829b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910b09a6-5fc1-48ab-9d8b-f6b9a2bcfb94",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df569eab-6a90-45ca-89ea-130bd590dfb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81ea4b1-ca0a-4b97-81b1-f1d919f706eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0e04c6-9377-432a-9306-826c8f717f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "71f74335-70c0-425c-a692-b4f4bf614c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bfc4028-ba08-4f2b-a078-fb951fec7d61",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01b21bb-d67d-4c0b-a325-8c820de31390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af344b4-e63e-4ca3-b027-ed1d052188b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902c7b58-5280-40df-8940-e7bdf90c68d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "469ca715-14a1-4063-ad5a-08b4c82de436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ef62e2-942f-4fc8-8197-3808964c1b9d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa7c0b3-adfb-49f8-a50a-b8d2e92d0941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f951193c-86e2-4017-8bb6-fa3cb4aed4d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edc1017-f6eb-493b-a7ba-71eccc96022f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd952b7-8885-4684-be91-13bd1832f020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aedb6dc-5736-4e2c-96ff-1cb87a7c3536",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b948fc-8047-4890-90cb-4cf739db9794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a524baf-9354-4851-9e4a-bab35b174099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9f374d-ad9e-4848-a861-6659e235305f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55f97b7b-e8c3-47b8-92a5-3dd450ebb069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc438835-5ac8-4760-b4b6-838bc0466fc9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e32ce0-16ff-448c-8be6-68fba70a25e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa983a91-867f-472c-8477-3a643f2129b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32832910-41e6-4666-9920-e5b92b975073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9358ac09-30cb-4e83-ae63-446cf09219b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc5ef91-e977-4eb3-8c59-0c953b501855",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974cdd3d-db13-4cde-bfb4-ec8311ab42b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681eeee9-e83c-4b4c-a544-3ce5968b634e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdeb30e-63d0-4465-9a2f-5f1266bb1a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45001e1a-50bc-4b50-bd32-f93c47a414d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bce7899-c465-4d6d-9ebe-7cabca83f52f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d3e53a-6fa8-4224-be90-a5a8ad334f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf334ef0-37c7-44af-90c4-c7a7c8d20d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce93cdc-549e-46be-8823-052e583c0fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4856fb65-7450-4b8e-b656-184f19a4e8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6475f05-b4a1-4391-a550-15084298ee78",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48dea0d-6c90-4a3f-a3b0-ade21872a401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d52bef6-e73c-47ee-b594-0cee09674064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e62478-93b2-4431-b28a-a42a7eb2a424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "796fd4fa-a87f-43bb-98b8-fd85ebd8d90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59bd41c-b9f5-46e9-a5ff-8ee40bb7013f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3908d73f-6e9e-456f-b32d-277c4999fd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5fb724-4e60-4c9d-8d92-b995881c0166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7cbc315-2041-4e02-9a96-2898c12315ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d65dc6-5543-4574-a563-4c4bb264461d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33779ec1-4ada-4128-8274-6cddf6be0634",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4ed723-4d6f-4da0-9a71-2559b0b3bdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb74fc20-dc18-4921-91dc-3a71fc3045ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e259ad-a01d-47f2-8825-99f439879c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3516184f-fea0-4463-80fb-e30274599803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48c455f-a4e9-4b75-a0b9-35e8c8dca7f5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8443d41-8a44-4806-b9de-dcc8100b6a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77fe9032-e3a5-41c6-9ae6-4768a23fec80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403a5d13-5c85-4a75-a6b6-530970bc37f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24a0117c-0399-474f-bf91-9b5d7c228cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df070434-7952-4b7a-b35b-6888f9675a14",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc43aa9-e5d2-4f01-8adb-38a805724ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4214ff-7273-487e-95b5-48f2aebc3e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5656ca91-c150-468d-ab19-444f6562fdbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0f4959-331e-4854-b96d-c9ac15e97d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfe22c6-9b2a-49f3-88ad-f6a5bdd992d5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9f39f5-f3f5-48fb-bd2d-b0697ed86c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f792cb-95a2-4513-b9e5-6a1f64722076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50786750-de4e-4edc-a912-8234c44ea4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6fa431-0fa9-47a5-a4f3-62ec0eb6388b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9b6e15-20b0-4cd9-b6da-ee927017ed98",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96df3bb9-8db4-419b-bef9-ae6fd852cf39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52e8b10-71ac-43bb-839b-d0351928b37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8beda57-9596-4a3d-b993-49695f644561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2a54ed-b96b-4c65-940b-674103160c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7e4613-2f4d-4a1f-b7b9-83e54647b6f9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c66a5f1-b6ae-4483-b5c9-183a0f1aa1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fdbae07-342f-409a-b63f-b12fb5a6a6e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0604e2fa-514d-4f7e-af6a-aa5550fe01b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "61bf33c4-d5f9-46a0-9d36-499cbcbb84ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16dc8a48-cbf2-47da-af62-717ee141a990",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53327916-94a6-4698-ad16-0bc1472acd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "405c6c90-12f9-4de5-ace6-4c2a92bc351d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5bf3a3-8674-4691-ac90-f721ea17009c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df7638aa-da27-484c-a68f-4dc0785795a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19180a46-495d-4c91-93e4-724f08976d38",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14043326-5ee0-484c-96dd-ffabddd54399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80cf951-5f29-4084-a591-a0a41146abfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71694ab8-3e7c-4278-afdf-bf5ed3eeec53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa50416-faf4-4e74-8ee4-d7cf631347ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c33339-6a45-41e4-9fd7-6d9fae88c061",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97a582d-70d8-44e7-8d0d-3ecccfc122fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc490334-4518-4175-bb1d-5616539ef276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2ddedb-95ad-4f1f-96b2-86d32d1aba53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47c7419e-9c07-4de0-b166-2f80ccad9548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5ea203-9c04-4eff-af06-228ed7c89770",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8b1971-ffb8-4c52-8305-ddd91f7f0c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377aa056-dc28-4041-96ff-7e7346e2bc5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6a4b4c-275e-41e2-b00e-210639c6a9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc78a26b-03f0-4569-877f-7e31b43f9411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b801df47-8f9a-4276-a61c-054ae78fca0a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0352823-ea54-4130-9278-aeabd62306a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd455b37-9667-42d9-94c5-a811275712cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a65815b-2708-45ef-b94a-5457c6583874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de06ccb1-8973-4721-aa77-0d015230dc86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b93752-070a-4f2e-b958-c89305454120",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de6331d-7dfd-4939-bde3-a167b6135299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad1e09e-e502-4de7-abb2-ce0a8fa571c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d445bbc-d4f1-4bf6-8973-bd39cb53eb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1762bb4-cc13-40fd-bcaf-5bf5cc68458c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff76577b-d256-46db-9622-f37a819c5ab5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beed3b28-57ac-4971-93a8-19cbe3886760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9310b3ef-76dd-4643-858f-1d9f99a209e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b22fe4-f674-4844-9d0c-f2334b9c5db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8353c76-04f6-4daa-9042-07e81ae8b6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc0664d-2112-48fa-ada8-b28d63bf553b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f66907-6e92-4413-9cb7-3cf8cb929bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6017ad6a-7642-481e-a58c-b5f38d2c2e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f8abdd-7c17-41dd-b628-418d31acdecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6483c266-24f5-4961-baa1-df0f3d43c9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4292f7e2-de04-4abc-90cd-096386b05ac6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31053671-add4-42b3-a0b6-cb91ea3f40f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231e026a-dad4-4f28-baba-7ca4e129fcad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf57c630-17b9-459f-a334-f1b110a15196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19943a9a-0475-469a-90bc-46e7612528ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7de25e-4975-4b08-9d0d-908c70840aa1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3227d70c-2851-4b41-8af6-09799e2d5e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e184afc4-9313-45ab-ae17-c94bc6cdadf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4a94bd-6e13-4ed1-aeae-d5e5fb8669b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f0df7e-7e2e-440d-8cda-719a8a5976fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845c1481-c4e5-460c-9a2b-bef3d4173601",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4185d73-4f12-44ce-a1a4-6f74faf20ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07fb3bc2-88f3-47e6-a715-f3d9a0ff4469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54f0550-69be-4d9e-8fc9-1b95d11dff69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "afb5df15-f6ad-4e71-ac6b-4b219c861500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902baab2-9258-4504-bc43-6e43f7bbedef",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6494df28-0c49-498c-8ee2-56f463405034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f573bb-4b1a-44e1-96f5-34ff475a2bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cff5fec-cf84-4d48-aeb8-2a3a141fb5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d352f7ab-12bf-4412-9700-f2b7534f888c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e62315-89ca-470a-b412-d286357839c3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024ed99d-c90d-4fb6-bb34-90cdfd4c93e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1fe9a3d-2b64-4d1b-9f2f-6ff186ee37a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50ff733-7757-4f51-ad59-4cce2b35b214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "44244a54-651c-46fe-929f-f51d27c6092e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b46a214-06f9-4b23-9d18-08819b6b6fcd",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb9f06d-b7ae-43a2-b59e-3ba8a09dd69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26764b82-a8fc-4bd6-b6d7-cdd029ca1897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda2add3-591b-4747-b144-1478fd965ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb77e683-8867-4ba2-8024-0b43075aabc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb115d1c-f00e-4552-9a5e-e9fbe11a8a15",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1d713b-a3e4-427b-8d85-197c3390439a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a0d5227-9b74-44d1-adc0-82aa712c892d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c9bc3a-35e3-47dd-b0ea-0acca1026874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "63e69583-49e5-4b15-b904-bfd3e316ecd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "addda151-9e2a-420c-b69e-3872b914cb5a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551f1554-6070-4c40-aa56-d4b53c60f624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6c00b7-56e5-45ee-ba3f-2ee516175793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbc3628-3fbd-46a3-9398-c728fb5ba434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b634f012-cbd0-46cf-8e88-39899e9742f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4646f001-8a1f-4840-be58-e3d124a92122",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099b6a1f-5f92-4e66-9f0e-fb96e76342ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d0b8a991-2e87-4ef4-a58a-c3b3d5c8f70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e4ed07-144e-4fb4-ab94-8432441e3198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "23e130cb-5fd6-448a-9d68-6ce74bb7d170"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b15126d1-a887-469c-9af9-5d7dae381a91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e89296b-4874-4926-93de-b6e71d9857ad",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d81d8d-e5da-4206-832f-eb43555f1abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c554178-ee84-484c-91da-7bf1e98a7606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5beecf20-d06c-4292-bc7d-4a7b51d3fb3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10dd20bd-69c7-416b-9d41-bb0cceb057b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "381444bd-23d2-4302-a746-98060c6a8e64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a784a85b-30d6-462d-91c2-8b404295083c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d1079c3-fd3a-437d-b4bf-cfab4b8348e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cffcf0f-72e9-441b-ab73-8e32fc7f1d1a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "248a1a9a-1aa1-401a-a8cd-e5057db7066d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dacddb60-05e0-4125-b219-0b98c60c29f8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "14e42af0-36b8-4ca3-a38b-90aca3881230",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d03fdc8c-ce55-4bc8-b006-2784205361ca"
                }
              }
            ]
          },
          {
            "id": "015bb249-058f-468b-875b-296c22b07d83",
            "name": "Positive Testing",
            "item": [
              {
                "id": "454e0165-1eca-4d88-aa70-99ad1b07082e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "8b8d7f76-ef4f-43a8-b934-7b7f832343fa",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a0528c-b83e-40cb-80e8-ddb3f8187715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e0eecda7-0bf7-4a2f-85f6-d6cb236b0336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f807d42-cdec-4382-91de-cb7bc3df2a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3f0f93-ba14-406d-8ce6-314eb2bedd26"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3f34f1bc-f895-40c7-b4da-5951865a0b28",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4413ebc6-8993-4deb-95b6-777f3ff54d5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25cc4abf-b086-4161-a4bf-ed516b3dde45"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1dbe6e6-2b17-4c89-af5a-321836551b3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a46c4c0b-5f38-4471-b58d-d717df66e946"
                    }
                  }
                ]
              },
              {
                "id": "44630fcc-fb5c-451f-9687-d77a9b5667b2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a89b4c5-f93c-45c2-8696-82116b9246a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c8367d7-21a6-4545-b272-2dd6185fa632"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97aaeea9-5a90-49fe-bfe4-04cc63e15d36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "994a4d9b-fcd0-416b-86ae-18c78dd66080"
                    }
                  }
                ]
              },
              {
                "id": "264bd41f-0211-4908-863c-abf00f4d6fbd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0403710c-65ba-41ee-9b52-7632525af5a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d5faa44-65b0-4197-bc6d-70eb0e83d665"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c033ab7-5004-4722-8748-4b51faa36d26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a83b51e8-b262-46c9-8d13-7dc8bbc248ca"
                    }
                  }
                ]
              },
              {
                "id": "406a766e-953b-4db1-9909-aa097858e470",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68e55aa0-10f3-41ff-b9c9-de2fb9269393",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "479bf5a1-83b1-485b-8c24-10f4edc5496d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2816841-8107-4030-b9c1-13f294b5f7a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dd327078-0544-471a-bd21-9d6ad6d334c0"
                    }
                  }
                ]
              },
              {
                "id": "edfe26b2-8a99-42a3-bdb2-68548ec77754",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "622aa45c-734a-4338-be35-a016d9bac004",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c878647b-242e-443f-872a-84e773e81703"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5a66946-3be9-4d42-9a9c-ec88395d768e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9601081c-5533-4ef5-b4f2-fcc55657fb6e"
                    }
                  }
                ]
              },
              {
                "id": "7ec13fdf-09a3-440b-b58d-7ceee1bb2d90",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a0c2542-256e-4bc4-aefe-7b31691b7256",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7ee72ac9-5052-4131-a7e0-40e04ac63efe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7e59c4b-4f81-4632-a218-b04c3cc72d56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa151c20-856f-4ec9-871a-8327a4aaa32a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5aaa8e90-a34d-4695-8605-b189759e9fa6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "839aa322-f8aa-472c-9b9d-6aef6fd7a1d4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a1186bc9-d5ba-44f0-9a5e-43586083cb5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9672612f-2d88-48fe-b1ae-7f5519f9f9bc"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "123efb72-8b4d-4073-ab86-2bed9de6faca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "74a76bd1-9e1f-4328-b407-f4e3236caaec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38422ca7-ad1d-4b5c-a94d-8b4133958192",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "648bd300-72ed-46e0-8fa5-79c42528ee21"
            }
          }
        ]
      },
      {
        "id": "3ab64dbe-5ff8-4a50-84b6-effda2efd32f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5398ed03-4e23-4c01-87c0-ae8f7cc22c9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "624e98de-fa46-4d29-9cd6-9b3a55b610cd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "64edc6b2-a0b4-44df-934d-dc5e546db6a0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2e9a4c-a52e-48f5-b4e0-c6af2b202210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f928c9-3d4d-4247-b631-284aba7c4031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b1bd32-d286-4b6e-815c-c9b4211fb50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c7ced82-5534-4d0b-8413-9d7b1d55b538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46010148-327c-4d92-931c-d2557bc95e18",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c786ea-7ab2-4215-bfcf-c89afec8c79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bdf9b32-bedd-446a-9417-19427c41d002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5a5d17-aa9a-4399-9556-b4d5002766f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf016395-789e-466a-a1c4-f057e3733400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a3beeb-076c-4bf4-9bbf-794ec9bb685d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36aee6a-66b7-41ac-aeef-2644b0ed49d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419f4519-69f2-4a65-b899-3e8e8c00438f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b240a04-bd73-4862-bc2e-557eb682442f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff5ba506-1970-44f8-906b-a8867b1f45c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3678c652-d7c1-4116-9c4c-28d01d4340fc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12110f4a-2b24-44ef-a77a-026fc9ecb2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5877e978-10ba-4a43-8245-3c618fd3fdfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ae1feb-1042-42cf-a581-dba8f4291831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00afe12f-2760-48d7-9b19-414c996b06bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f76ee25-8d00-4cf3-ad63-cd451a701207",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e28f87b-2e19-48c6-8f1f-0f382286c7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6178622b-3c86-40d9-91ea-7001ea379935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d1e3cd-a204-4a2e-bcf3-98f814ba151b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa14eb2-db11-46e9-b688-79024e586848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9f7609-1259-4b75-b5c7-c060884ae9e4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ace20de-25f5-4115-8bf7-a93366600131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb57b253-ad24-4756-bc31-eedd44de0828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5804d1b1-f9a0-4212-afae-e4dab1b74399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6132aee-8913-44f9-9ef6-02cda27b4c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43eb5e12-0582-4fa6-bf3d-a4cb27d0f4d5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b58d1bc-7020-48cb-a7ba-690353d4b786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "243a9d57-72b6-49f2-8116-b10f0a65e845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2dad22-cf22-4486-a890-80130b98ec2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "100ad0cb-35ca-4914-bd5f-0f96fc5c500f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a7be2d-73f1-4f4a-8116-9de9632c32e1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1157158c-cb15-4b9f-8420-562a38d14569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d621deef-bea4-4905-807d-d56576a67eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9680f5-793b-4f56-843f-8b55ddf8afdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59b5b05c-aaf8-4d84-bf25-19f3b57ca311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84851041-4605-46a6-a7b9-13301e221b57",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66b67e1-53cf-4907-aa3e-16f5a66b1dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c400df8f-960b-49ee-a969-7a9fbb5bc641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4dae98-b0f3-478b-9673-b049f7f92915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f693e44a-b2e6-4160-bce7-bccfabebecba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa42d23-4ba4-4cdb-bdd8-971f189fb552",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de9f542-9e08-431c-bc02-a5ca030a5513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523e7115-df88-4589-acc2-f73972a5d303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efd8fc9-2139-40c8-ad17-7256808beee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27af7f2a-1c1f-4890-9a6f-93d21a350523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75dfafb7-98f1-444f-babc-49857f0ee074",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a867e1be-408e-4f48-abed-8e5972806598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e79c571-a248-4783-b8fb-c432e7e787b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232161f9-c765-4c2a-a18d-ce2a838dfe18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e69974-10bb-4793-8662-611c11fb76cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd088416-687e-4be6-9ad9-c2cc3438d637",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd331b3-c9bc-4131-8c92-3cecbff26602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75ac055-9af7-4017-ad60-387865fca531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be907d7f-cb8d-4414-afc1-de46a32a41ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3047e140-cf48-4ea5-9b65-725b1efc133b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5f155b-42ae-4462-8496-c481c123031c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02abe48-b336-485c-b117-65d0718805f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c74cf98e-e064-4eaa-8350-759e76b6a939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308b4eba-47aa-4ca7-bfc4-771e9f88d3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca13363-b056-4c29-b42b-4b151c85b49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54590de3-12e8-4c6a-8047-df07f6850731",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbea3166-06c0-4c05-8a2f-5926773d67f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf0a901-f752-4fdf-b6f1-58c921861fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be03cd6e-be75-4efe-b99f-a8ef8ae31928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0694c3de-2351-4e6f-b000-6869e45165b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92eb8253-cb60-42a4-a76f-4709ad23de86",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c373f1cc-fbd4-4871-bcf8-436e532d2d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62597c8-31db-43f7-a91e-f0b068f6ea30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b24edd-3616-4af0-a01c-1cdf26a9a09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f5f674-33f1-49b7-97c5-c94ea72295c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3fa944-2d78-4d26-a9a9-2e248ff199ac",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ceb239-b1b8-46a2-85bf-8be3fce18cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2c8dfc-3fb7-4891-b0b5-f1b1c2d5edd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e99d64-4cfd-48cd-891e-bfff4144974a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8c374c-e042-451a-80fe-b8b263087ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35424a6-d150-4dc0-845a-db5e283999e7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5feab0d-0069-4fac-bf4e-0980eceb77cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dcdc1b2-6518-4f84-85e4-1eb3c2ac10d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad2f528-4329-4b79-af25-59cf7c5d9bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c78e20-b188-430e-bbd7-eae2bd831c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5419df86-95fa-472e-a280-ee0d719ce881",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e3aa27-9d53-4110-958e-3ac41f701f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad669fe-f146-432f-a016-e3f88db98d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee74200-5d88-4611-8388-a1552a8a5902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1aa527e-f71d-4d9d-a192-78b823e3485f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da38b66-c264-4a37-901d-ef2d7ee8790d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb992ce-c4a1-4d59-842d-03dbe6796b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03e8487-f3f2-427f-acd1-e6f1af7b9ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7aadd1-7eea-45cc-8efb-c6fe33bc24e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4994ed91-dfcc-43bb-b8b7-539dd2c851d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f04eb3c-7d41-4a47-9dd9-de60d7d31e18",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085fdb92-f141-4b19-9829-4f43537b0369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc462488-79bd-4d22-ab79-f9337f69d262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906b71cb-4a26-4966-a5fb-e20f16f93745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "854b2ad4-b434-4ca0-bcb0-2e3f86a774af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcc64a8-c7c2-4a40-b689-707960bb12f6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efacf5e-ddcf-4241-b002-964f907159df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad1b42f2-1c52-489e-9402-1c1d737a82d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab7a1bd-0728-4447-af5f-745cacab7fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c9305c0-ae5b-4928-bfe4-4e9295956efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44acf20-c129-4213-907a-53af28aec721",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1417c54f-aa96-40e2-9c43-e52feae686bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904ef241-7919-4814-bbe8-eb80e23f4577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be44f7a-0ba2-423e-986f-352b79193c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79d97adc-b026-444c-b7ad-c6c60ebe363a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b77b31-de74-4c6b-941b-f91fb94fa0fd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c28cca-d27a-4dd1-8ee7-fbc8e9a2cba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a406ac-9b87-4eaa-93bc-eba6f3a7a051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada4142a-018b-4a2a-a818-c6927d6a7b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af1be4b0-2a03-49fd-82ea-83593594f414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b582d8be-9690-486f-9d4d-f234e750887c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0e0e2c-60e3-438e-ae38-5b576dfe8882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89970848-dc68-4e43-8fca-73955627c0ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24dafdf8-15cb-4d3b-a825-cc53a5022e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a52c1255-e4aa-4029-90b8-81f74da0c00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f921ed60-46a1-4ef6-ae95-00af1ba41ad5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b92c7c3-e4fe-4792-8fe1-f3e6ada0d126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa160c2-a8eb-4ecd-8df2-f2009611cb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3039b220-545f-4ec1-a6e1-bf0a4c512e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fff3be7-d7bd-4ad9-9022-4c0cd0820840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aac5d6e-fdd6-4953-84ba-faaf2f8b50e1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb1ecf9-4a58-4fa5-94aa-bf27933268db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecb1235-4302-480e-865b-77e443c0e609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce12416d-c9a6-45b3-98d0-527457e6edba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf8150c-4210-4e69-bc39-d6aa8cbf6dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50aca99-cac8-43c2-b38b-217cfba54c8a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fabcbc-c14b-4043-9dda-57fb9c67ecce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ae7b97-9208-427f-960d-1e99f9a9e456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d427b2a1-ff27-4b29-bb4c-a91bc85c8239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89a08e5e-ea74-44a2-9bfa-97f1ffeb6fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f26dcf-52a8-428e-af6f-5b438336ac88",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6349e16c-ecd3-4e79-a113-e7e9d878df31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fc2c41-254a-4251-b8ff-400f1eda835c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a5a3af-8ec5-404a-a927-e71e99b3bd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bccf47a-9141-4687-b34b-9c01effc8d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da897cb3-df05-4043-9c13-ada4abd55c1a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b137934-d45f-4d9b-ab8b-f8c205164233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4e4ae3-5fa9-4382-adfb-46b39f0ecd24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4ee745-378e-44e8-893b-222c7b2fd120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63137dce-1ac9-441e-a9f5-2aa85d6d2eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e413c44a-9a3f-4220-8332-89844559d29a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e52f46e-f459-4dc1-a936-34dccce707d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222eeca6-fee7-497b-b418-6560f1c5414e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9ec1a5-5c02-46d9-9f96-0c4118407f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e97a83d3-eff6-4736-85e7-8f0bec66492a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59ded19-0a59-435a-9d79-9d33e4f3eb12",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596df1d3-96c8-4eef-9d34-c4a8608fe56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754dcfbe-a8aa-46c7-8083-9f3077fa8719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a76f81-9ff6-4471-9e0a-234d5e86e21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d70fef6b-66d4-4ff8-880b-bc2cb2d00644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf18de8-2f34-4643-baa4-cfc98bfc4180",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b489f34-7f68-49a9-92d7-f1a7731e211e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0f0867-9b9e-4906-acfc-5c480d15e9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78086e3-dcb5-4daa-a7f8-daf166c9fc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97878017-4ced-4c64-8803-5ec9b52f4c62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "29c41ba2-dad7-4a36-aea0-e54e94349c21",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bbd3f705-0d7a-49f3-aa55-35ea64981b90",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801e9026-ef20-48bf-b8bc-2efb880dcb64",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f56310bb-edd2-4861-bdbb-24b19350b56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c2c52f-d272-49fa-a904-746f3991fa4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed3f4067-ffd6-4164-827e-35704f995bc6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82828e2c-e840-452e-8f76-55e6044691cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "836d7e77-7de8-4a98-a7cf-acf2959d583a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8c6775b-8a13-4729-a82d-34f4283766da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "399bb093-f40a-4d54-8fad-b4f846850795"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36604688-2317-43f9-8eb0-a4e4bca4f8a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "19c934a1-2fb8-4b50-968f-e03c84b1d416"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67c7666f-2a68-4612-b3b6-96242c9a5378",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9a1c64d-412c-4257-a028-e1954f54743e"
            }
          }
        ]
      },
      {
        "id": "73039141-947b-46e9-8b3b-1e3a8b5d7c0f",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "0a6f5940-15bd-4e84-b6f3-7aa97dd72c06",
            "name": "Negative Testing",
            "item": [
              {
                "id": "688fe209-03c5-4f29-b20e-d48859787d8e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dac499ee-df38-40c3-9230-a697270eb2d8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c575148a-4c0b-4e0e-a1cb-1aeea32ee03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fcd0195-477e-44ba-acf5-a15247ff75b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4822fd92-5cf7-4cab-8184-4184794f1cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c988ed3-31b6-4d1d-a213-80adc9315884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d168ff61-fa1c-41e3-a430-3bbdd1c77f62",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3369f34-8a89-4795-bac4-c4e9cc80d7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92ef519-a35c-4460-b523-82b7d077cbdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4742b997-3c61-4f9b-9a24-695a4a9605e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "45b4ad74-fa72-45a7-8f48-f6206a810ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dd427a-dc8e-4cf5-ab25-42c58266c1fb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36aa335-e492-480d-9088-5bcccbe737f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bebc23-4826-4e23-a1b6-9b61568534de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ff6905-8a89-4f92-864d-bff20d7df1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e64091b-c941-444c-acdf-b6ce3f951a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b509dfcf-f63d-4232-87f8-fbe27edd7e34",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da57da03-31de-4eef-8c66-dba2ad4f0465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f105660-ca2c-4b5b-a305-a0ef3a0a56a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406fd738-ac92-402e-9788-e8c26d75641d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea40a7be-55be-4819-8885-03c3717e4319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426c1e8b-e524-4f42-9444-f8385a803229",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341f359a-513a-45de-9e3b-9d97da4a1b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7742b8f1-9295-4b3d-8fb9-137b99c138a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d928056-3ef7-4460-a510-733cafc71929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4fcc67-4b28-4f8e-ba28-7ac98f5f0c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419202be-d24a-4d5e-8f1b-918849e56cc9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e263f1-90d2-48a3-9a1c-d9fbdbca4ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a22b09d-bb65-4ebb-bc6f-fb68d705a45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0041b4aa-06ef-458c-b349-7b915c466753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6342564d-8dba-48ff-8862-13e82daeb6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621bab39-0dc4-42d2-8a4a-ed3767f9e76d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dfa3f9-2370-4144-ba94-16a249bc965c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b9f163-baee-4232-81b1-26634d727b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b4431d-c440-4d69-8d39-b7b4d373ba18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7f2cf3-ec31-4b97-b20b-4eef5b724c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66094416-2940-42f5-b553-9583380ca810",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4cea4e-57fb-47b2-8891-57c844d15ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60d25ad-c388-45aa-86cd-1acdcf3dd8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6264fb0-dde9-40d9-afc2-2458960d59a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e348b735-b223-49b4-a9d8-75552de03a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fb1a15-d7fd-4421-a4df-1bd810903c83",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3649cdd5-07a5-4ef6-883c-ba1af063a6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6885afe-35ba-4fff-b1c9-5a7f47d404e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576ace98-67ac-4375-8b6e-8293e351e2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a93b1e89-f04e-4416-b66a-b3611b248ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0813d04-9e09-45a5-815f-dcc04b6aff4b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817a5140-72bd-457d-951c-f135eaf2949e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7670a4-7bb9-4653-9e06-0d8f6b72c57b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875b3a27-64d9-416a-8085-e61be2303a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf2f582-7b87-4d6f-92d0-92ebb505d98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02967cd1-14b4-4c83-9e38-ee02a879e9c2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a764e69-80f6-4311-a2bd-8a598f2ecae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adaee386-d058-4997-9337-cb2126e226b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b781131-f15f-4452-bff8-040c621be08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "56b7edce-7723-4d5f-93d7-2fec2dc1fed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7269caa-d800-4dfd-967a-61bcb5ed5f89",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4095b3f0-8e33-4a64-9efb-3f9a5a871db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1502beb-f5d1-41d3-8d5f-722a06bde1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80480b04-e047-4945-99ff-e84beebb15e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f69e5bf0-325c-4168-a5ad-ab05f86e5a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6aa43a-64d1-4f60-8959-cbedf8a1f09c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad1bf1f-1868-4674-b2c0-8fa240ad2c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e84983-7a2b-483e-94db-a8b6ab6de85c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44431ee5-954d-47c7-bf38-dd9a45cefb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "975780eb-a87f-4dd1-a127-e77c0ee8d99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20eaef4b-c472-4032-9f3a-eea157512262",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecf3bc0-2212-492d-9bc3-6ac8b38c2488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf109799-ddeb-4087-a72e-e36f97d59f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef3eb8a-b3ea-4b7e-b01d-2e9620dc1583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa679e97-c9a0-40b9-9884-2a8a2e59d700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e79d142-e89e-433e-b9d4-916d1e968f75",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e178f139-6a54-4594-8721-f0dc0304bd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ec25b8-f185-4698-981c-9304847f1496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86626232-09bb-4aef-8e9e-4b5db9c3ab5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "adbde68b-08d6-431a-828f-a795605762b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166b28fd-b396-4bd0-9e78-2b00b268607a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a79acb-2645-4ad8-a955-b8ca241d7b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf6b2ff-4bc1-41ca-9199-b5fd7327f850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a16cc2-db36-4d2a-861c-5188f3b21eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e12b2bcc-54b5-42ed-9733-8f8ce8d2409e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317966ba-1bec-4ffa-bc40-6798a55edd2a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f44c5b6-f00f-43c0-98d3-120712044d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63a6984-81c8-40d7-b41f-d806b3635016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a97e98-087d-4f4a-861f-f326ed3512ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dab81c74-a039-4ce0-8182-b888b40fdf9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a3da4f-9270-4e5e-aa18-49205afe32eb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a9cfba-4327-48ca-9600-8d030a591c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20aef44e-cf7a-4477-a13d-7d8f2d5b3f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d2ca74-ee20-45bc-9eea-af6a40ab8dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "910b2074-b861-481f-8b02-2dd03184f556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35c4e12-9870-4c7f-b385-3b4b23a8e293",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62686920-e46f-4a19-9d7c-40e70bc57520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c089127-d2a0-4f0a-9417-37c2292a3834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44407fb-c88a-4586-abae-0dde059b3b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1f5540-9f67-4ce3-b56a-3992c6d69359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19af7f80-9478-4582-bf0d-ebb6b9433154",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffd7736-7904-4f1c-869c-873ee5608ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1bbddab-b774-4c49-852c-742ab50857c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e18f34-c399-4747-9939-97931580669e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e16b9d70-9eea-428d-94fd-91e678198041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5301e338-a8c4-4a6e-a10f-7e3eb2bc3a5c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34562698-db9f-402c-b6b0-fc4b780d99c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45eca8c8-d1cf-4c13-9451-42a643c0ea8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66b51f5-e49e-487e-a038-6cb015b64c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b59984aa-92bc-47e4-a8e7-1d83ebc72ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626d4ef1-af2c-4d32-93ba-86703871519f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f62332c-b0e5-4064-9025-454141594fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8435edd-9f40-478d-a148-0aadc7ec388a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1c6e68-6cc6-4df9-b153-670eb9657cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceeb3198-ac14-4c61-9dbf-47c3183498cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd95794e-b9be-4e57-b31b-bd3ac967153b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f94ee9-6f34-46ef-b38e-5deb53853150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23f4e376-6a20-484b-84ba-1bc992c3aba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f701338c-10c9-445b-a6d6-45f7fa40d6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e4e8081-e71b-424f-8292-bd344977640c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1984736d-3925-4a51-86a1-e675cf7d89aa",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e6744f-8fc2-497d-bf61-3fe40ba44fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1668b8a-310e-4468-a61b-658767186e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b7c2fe-f9c1-4e95-b2de-7058c841831f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f96b869-9e0b-45b0-b750-a0af5498b853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37461c91-4a49-4ba4-932d-7dc1879cddd8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b5ae6a-7a3a-4779-ac1e-1cf95dd3bf6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a96d5e6-abba-4bad-99d7-4608c6b18aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078fe414-6f33-4b40-a727-26e9cdf4013f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5ccc01-9075-4213-a4f7-7bc5727f2d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a214903-ed36-4056-8e73-54e9b3a742c6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5889de4d-72ee-4cce-8de5-09cde410bbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f82d7e-29cc-4aba-83a6-342eb5880499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e0fdb3-d58b-4f83-840e-8944328737e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1bfffb1-95a1-43c2-bb69-1d14398eec44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bf6856-d4ad-47d8-98eb-89187927d4b1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d5f81c-bbb4-4488-b05b-dcde12e8ffa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e6b031-a7c5-4035-adef-5eacee60e418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6493a2ec-2895-4d2a-a31a-92745908bb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f272140-f912-4e5a-b2ef-15dbc59c42ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c49f28-66b4-4af9-810a-8f814145d571",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a36496a-e946-4235-ae53-d31ef25886c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dec4887-5507-4ba9-9d3d-7094d2d6e92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cb9fa5-d914-4d5f-99ae-ba5081639263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28dee970-e7a3-41a0-a2b0-e28d8300a543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe8fa94-0b30-4eb3-a674-3d06d7d785b5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20c46fc-18bf-45d0-8299-b9fee2bef7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e1c916-c275-49cd-9254-cffdcd610a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379be0f0-5936-49d2-a4ec-e838b0ae3bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e170c35-e9c0-4a8c-b685-754aa2f989db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912ef28e-351e-4040-8ea2-f9f7e140eb0c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e2a997-548f-4f4e-a88e-91c8fc1c40a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ca4b13-1e08-4ad4-a7c9-4f9b2ac0feec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed43bcf-d870-4ad6-a3a5-99e8bd444792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1cd7bc-8a39-4f72-93dc-17fe9b0dc5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e3b699-4d38-44a2-9f9f-0ecf54fc3f81",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9c3da6-45f2-4b7c-9a86-a9137b63f464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddfaabd3-a24b-45d4-bbcb-4fe24bfc9a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02308f9c-5ac5-44e4-ab51-48bf41a047ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcddebbe-70de-4099-ab33-9aa74778ae3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99beaabc-5d57-4774-a076-d0429fad3253",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158b34e9-fe5c-47d9-828c-6f7125e9dc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde94077-91c1-4d04-ba3f-079253356e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da89e71-8f67-4c37-8b91-75ac7bbbcd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29a28970-453f-4cba-9628-5bbf8827488f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5473349-3f58-4a54-b98e-3b22f8b681f4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32db42c6-b87b-4f9d-89f2-2879697d0948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57eb268d-c64c-42f4-a738-ca7ca27bf6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3be80af-9516-4b37-956a-482d3718a013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3c0926-ae8e-4de5-889e-d6faa215483d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d38fcb0c-745c-4d2a-837e-af7fc4b805a5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b91480-b60e-4b1a-9217-9d081c727cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da1e206-6442-4542-8637-02c6550dd993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009d74ec-382a-4980-b26a-f50536c10c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f60b4e-2440-43e5-bfc3-65cc623f988c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f599a81-0bad-489c-9281-4a83d74ed5b9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88fcbc0-0e3d-448d-90c3-56ecdb77ffb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd752c5-54f8-47df-866b-3784ae25ae05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3085584-ba52-48fb-9ce1-11cbfac7c332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64120aee-6bbd-4584-adb6-96a4087a367f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06570af7-9f0b-4847-87b1-c5aa5372d9f1",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21137581-e2ff-4dde-9de0-4f9627c04cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338d108c-abf2-42f7-ad97-0ff88131fa1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c34e726-7f0d-471b-864b-1339043b46c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c99b7fbb-5574-4737-a864-e237a8b3538a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4449be5e-d0e1-4efa-8681-f916415d8d97",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9178ee6e-2456-46d8-aa17-745f2d3a05d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba85340-ef7a-46e4-aafd-8ab92bea8591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3b5bfc-e948-4845-87b7-a1af0efbdef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f97ab5af-85da-4d48-ac82-e3d871061811"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dcbc0ea6-e38d-4ebe-8076-7053cc318ab4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "795f9aa3-a347-4b84-8795-51a9bb5d119e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62560786-6edf-4469-934d-a5f3688a31c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ca808190-b67b-48a0-b572-908e185d2205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d344008-9ef8-4570-90fe-d6622cfeec94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7247e3fb-96b8-4aea-b203-2298165ba9f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d97042ff-6e64-4ee1-ae98-436936ccde46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67b61741-16e6-4366-be31-31c87fbb4989"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19f26b6d-6952-4641-ad23-a8f16e174a31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0be881df-ac04-4fa5-8ba1-1f802088d4cb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb6598d4-f5ab-47c4-ad63-a2043c3a9b89",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "434d291e-f09c-416a-957f-205be9ebd946"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f386e88-4108-41e5-b6a8-60459cc0775c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3c98f31-8cd0-4b7b-8adf-c16e8c0f78c7"
            }
          }
        ]
      },
      {
        "id": "8d18e3ff-d7c2-491c-9a19-b0d4aa008d50",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "37bbc9a2-7c82-4675-8a7a-104139b0ca69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4d46216-5970-42fd-bddf-306909ed2e66",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d1af90b8-72c5-4ad1-b6b5-5667e636fdc3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64243c40-f9a8-4223-955f-3c660d3ce9f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f96627d-822e-4eee-8b7f-c346fbab094e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffeba7d2-e8d3-449f-9ba2-cacdb689e56b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0ec1b9-3b12-42ec-8d96-fec0f033b559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d00fac-589d-4eab-b9b1-5d4c3593b546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ca6df0-12b0-412a-a904-b5249253a20f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e003b4-4997-47a0-9aae-0a87de16b993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef24e83-670e-4e5b-a4cc-b8a43f70c40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fec856-6732-4742-85df-e601660197a3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c181d5-1a14-4a9c-aec7-ad0945638109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7271b71-afb5-4197-a99b-444f952c04c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc060eb4-fccc-4d15-943c-b99b64fa81c1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a503b22f-e753-4a4a-82b4-1854b2645aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47fb06f3-b712-461c-a1fa-764d9fd1fc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1314eb-b993-45d5-b9ca-cb26fb299e1b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6e9f7d-0437-403b-b50a-73ab0e8bc130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3627836-cadc-4239-9d46-4074bea56e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2aa5b0f-6544-4368-a435-ec5d0060ecb4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38fa63c-d8d8-4994-93ca-1b50a98c4e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c46811-770b-49c3-a763-aa542f6b551f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d75e48d-3eb5-4da3-b59b-46815345dd86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d64f90-2ab7-4330-b7a5-7713552f68f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e9f524-ec31-49f9-b7a6-b455a04007e9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74c93c2-9ba5-4332-8bff-8c7ca7c1ef67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39637b1b-822b-4aba-b103-721cb24562ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4c4478-fe66-4f9c-8f91-d80f4836445b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7cd0f1e-6889-4199-be8c-e0fcecc87955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eec8fbc-1c2a-46e8-860f-5a220de09e7b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303e5711-fb95-4265-a3d8-d655e2943851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4df0c0df-2cfa-4f63-abae-77d29d605082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aed80a2-4397-4d1f-bac6-b777fa231083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9ac5c2-c681-4705-a231-e19c6e5ab77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77541530-b1a6-49bb-b4a0-5fc4400108d8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8cd965-f8ae-4e0f-b351-028470254bb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26882858-19cf-4843-a650-5f85b5bfe90f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9d03fe-6ad3-436a-a957-8f8d78cb0d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1bbb607-9487-4f82-887f-38888ec05276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0d1701-6514-4862-8a0b-996972408375",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516a91bb-bc31-4f9c-8ddf-39bcb88ddcd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb36087f-1eca-4fcb-99c5-21e42454d404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d80ad1-5a27-4892-89b8-c0bfb90599a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6668108b-c981-43f0-bd30-da4c8a13cb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1d7a1e-1f29-429d-b1c2-f7ade6092d15",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad8df9b-3b7d-4674-8574-255ab12c39ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c1fc27-a945-4cbe-a594-12a17993c67f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8319be-b539-4b4b-ba87-c2587574a905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19799297-43ed-4af7-9b31-789b2f2f3a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75ee355-22ce-4695-a6f5-2e300811512e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c19c02-9501-4996-a1d8-85387808f9d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd4aa9b1-0566-4dca-9146-67ef150b5d89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a87784-2437-4154-96ad-611d35ccaa7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b055cb6b-0ed3-4e90-b22a-22c293e13343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad33245-9054-44e2-b3cd-5abac62beebc",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd2f968-2e77-44eb-8f2c-672a24d94868",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c9c7fea-48ee-4ad5-b195-cbc8ee39b0fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9bb3fe-bd63-4516-b496-616d374c2d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53b8778-41a9-4090-853c-af82870989ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04174a40-1769-4051-876c-8f4772052bcf",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4815e68-cddc-40a7-891f-b434e7939798",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45ef067b-819b-48c8-8bbb-fa4c02b67941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec02dbb4-8376-4c42-8b5e-cfb22be4eaef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63406a03-1ba8-48cc-b510-c0f9428495c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ab4dc2-f29d-467f-a058-24ac9c2fa55a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89d2ba6-a670-488b-9913-6404341eb7f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c230b57-8b63-4f1f-b87b-0168516cd2de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c42b9bb-91d8-49f6-841b-3f2dd5c3eda3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f09b5f-d1ed-474d-aa23-080698962f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1777f6-e818-487e-9a34-6de58b24e861",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c165b8-019f-42c2-a620-4480d191a9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1fbb290-1b38-4497-aa05-81db5d6197b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebbcfd8-c6bf-4f34-881a-f37b2c9aec0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dadb21e-9b38-43e5-84d6-a1f7a5a3b79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9c0c08-63b9-4399-9265-aab64d2c61a8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e16863e-b96e-4cd6-9ab3-2aff6f2e675e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021ee935-e363-413a-941d-fad8a05fd7a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78aa953-75cd-4e7d-9f07-6f384998c0a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d70dac-0a05-48b3-b872-6cab94688466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ee1c2f-e460-4269-b1d9-d70750c09ead",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4d675e-8750-453b-ac35-36ec62ca22de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ec3c0b-003c-47d8-b253-b528c6349323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8850dc20-7788-4573-89d3-927e69b3f38e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52578b4-b466-4f95-b477-1ffd6fb87d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04cdb10-d338-4ecd-90a9-a6081d81c018",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e744ba7-7741-4e01-a929-edfebebe906a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6403bf97-e92d-4080-b61e-81976be497f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93548e30-8259-4bf0-bdb2-bdda04c71f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7c58ca-a481-4427-b45b-10e35743af7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775e8950-46ad-4b7a-b288-7625eac16456",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a780a7d3-1b3b-446f-a83a-dbaeea26354a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca51b74c-f07b-4699-81f2-0c27e50f1b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae67002-477d-4196-8000-991f880614d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9577e551-04d1-42f9-9fc8-b87b89f156b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bad0e47-06dc-49a4-a9eb-6c30e418718f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee030d2d-7f8f-46cb-b59b-8040d5089527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0fc325a-b048-40f5-8686-f9e15bcdec69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e098c68-9130-4c04-9fd4-d564f427af22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94af06ac-c1f2-4306-b87a-473d3538c214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698e5bf9-97a5-47d4-95bf-7f3319ed043b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2477f0cc-8d20-41c7-a949-4d8eb21e11e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708498fd-c04f-46c9-91b9-2402673be01a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456b6f7f-a563-454e-a1f6-edbef3b56292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca7342b3-1209-4cf2-b5b7-2127166c371d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ee8c5e-2968-4434-a1f2-31c98ccab315",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ed5be0-4de1-41fc-94e3-e3ad20f0dca5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "763eafd2-e472-41be-988b-be28aef24117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574451c2-e3ed-4d55-ada4-c85cdb35baee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357d9613-2bf1-45f0-a228-2129f5710793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917c6485-2eea-43ec-af55-7892670839ca",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2c5738-d369-41ce-99af-5aa54ff0cea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2c8e3fd-edf2-4eb4-b44f-ca5644319003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f934c156-1294-4d4a-a198-ca76b236152e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5f9318-53e6-4abd-b112-c9ee3bd18183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286b83de-f312-47e3-81bd-09d775cbfb64",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df216f2b-3ea7-4e88-82a4-0caa23743c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1010ebc-fd49-4c00-a5f6-136717c65656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43be23e9-3799-4284-a7fc-c930f24ac96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb1b837-030e-4186-8da4-5d62f01e7ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8636cb89-f193-4564-a9de-983b7fad7d4f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101601e2-df75-44a2-ae56-387b158712af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66dc9770-66bd-41cd-940a-e9f34344f496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028fb502-247b-4f15-b18d-1cafa668640c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb763d7-161c-43de-9c68-a1030a94ecb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d786b9-343d-48a5-bb72-84b580ce479d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bc9c19-8b44-4eb1-99a3-79582502da7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55812bd4-a87e-45f7-a38f-1a0bc0764d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450c65ee-42ea-4539-abe9-686103ec652c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8060501-cf92-44c6-b152-123de75c7914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5432747f-0c62-4431-9c2b-54ef9b574cec",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcb31fe-925a-4179-9135-01a15b4a3bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6502e42-0b91-4352-b6d5-8de3048a462b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc156e4-1ebf-4b69-b4f1-4f63e48f4fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a3ce5c-9e99-4ee5-9044-ed940631644d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e40576-6c3c-44ed-87b9-596c75ea564a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcbb47f-dc8e-4f22-8049-8a49157e9fb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ad70aca-7f9d-4149-9882-480edfd5e03e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0b250a-b7b2-4c51-a9eb-a5641d017f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc44137-1ea6-43d1-9925-31ed7ea2db57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccf8d31-70c3-43d1-899b-f35d519861a6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e3cf47-a503-404e-a9f0-e38448f11322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db3502c1-10da-4cb1-a53b-05ad51d321af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9edc34-2618-4e58-9565-37d01d23b3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f7ba0a-86f1-48a8-b964-0e93ffec197b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fb55ee-a79c-49f8-ac88-331f6966fa15",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81011cd-574b-4c2d-a0ce-d54418267451",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "811f30af-daf4-49f3-b421-17bd9dc9ae11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1588205-f464-4b4c-8639-ce2bac52e66d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2eec3a3-f570-447c-8eff-3fa35034edab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79241d4-f68a-4912-9176-68ef78ca05b6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4a2a83-dd7f-4741-90e4-5abe51f839ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "352f0b98-30a6-41af-b129-100b97224c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfeb6d1a-aa4c-44c8-a2b0-797a2e3c9248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45bc5ec5-0d05-4492-9f8f-354cad9aee6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534a8c80-4e5a-4faf-b8be-6ecaaf0e370f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cebfd39-1a9b-4673-bb6a-e8ed36f52dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff5e8838-a6a1-43a9-9db9-d03c8c3ad704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209ad064-a205-415f-92cc-23dd88cdb6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bfa82ae-90f3-4b94-9c8e-b2d1f5146d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271cb0e1-5ff4-4315-8cc1-edd545242247",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa63ffb-75c7-4b9d-a094-531e886bf742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcc9b7f-0def-4eef-97c1-98e1e8ffffd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "264e0e7f-a154-438a-ba8f-4342949158d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fdca2ec-8acb-44f0-ad6e-cec39facb5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a3357c-4473-4051-9bce-03ff00cb8cfd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20595a60-cae6-4ebd-842a-5feb1f1bd675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171606d7-e04e-46ea-9032-427719f1fd1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56dbf42-367a-4c61-b9f4-d2ffa3717b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6496a344-6569-4a8b-8ec6-7db7e2275509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65668b33-8ff0-464c-b228-7f5036b0673e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e46568-aa6c-42cb-a61c-ab3a7af427e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83da502e-64bf-461b-a210-afb340f2b12a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484c2de5-62e7-41ab-b236-81d817fbf039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfd6269-0768-45cb-a372-4ad1b9d17a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b880110-3e7a-45e0-8086-f1f8795720c5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c67e84-8313-4279-a401-1f6c3a691270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5f07d8-6a40-486d-b689-5440813a23ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f7ff61-9346-46f5-b5f6-0aafa3152533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad47e73-1d4c-458f-b8bb-b0228fd33082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66eba252-2dca-4914-910c-b3b09994bd37",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0004caee-dac8-4e6c-9227-cbb528edcce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e88958-4fd8-4ed8-b959-0ca98bd24b71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e002e2-7002-414b-984b-8bdc87786aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e5c8cc-c955-436c-9c17-845868ed57be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55169d97-a378-4a0b-bca0-ec4f77576e40",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d3da48-32e0-47b4-bd30-5d1a5c07820a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276e224b-8ac7-43ae-bde5-3ab418693b7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7526ae-0636-44c2-92c9-b585ee257c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5408be5c-3a27-46af-92dd-0cc9251a1d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b31667-5756-42f7-8bfb-2d7032ad7d87",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badd2205-26d6-4d50-b4d3-a87223993092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c61c190-efaa-4b37-956b-6a282b65ec38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3376d1b1-f131-4f9a-9395-79bf1dcff437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10341de8-a4c3-4c41-b1aa-9e2398de0d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69058262-5ced-466e-8468-97bbdcb20698",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9ea7f2-c45d-438e-871f-327777f6a787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f2d9b4a-7283-4c46-9556-91eda8e173c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8486d70b-c426-4006-8f31-c1800c3af3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca2b8161-1d91-4d97-aff3-8c4001ec268f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77fd9d3-7255-41b0-bb45-a4f5b1c688a3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf15fcc-14a5-4520-a078-0ec5d78aa3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6bdd38-9565-4016-b2c7-93f68f52bdec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6caa797-88cf-4a51-8149-0e4dc8823aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5aa28b-294d-4faa-9ded-2a7f97d90b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978d99af-a181-4596-bddb-1bbaf9ec01f8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab951139-c7ac-4605-a060-2023b99ab4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "051e8f09-8c17-4bdf-92c0-b070ab950898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a3749c-a6ef-4eed-b927-80e688ed6d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd379a4e-a6dc-4801-8cd9-1c723cd90168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e7e1c4-d2ae-4666-bc17-fad31e1031d7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9209f5-962b-4f7b-a9fd-1259df4c84b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b933add-437c-4364-b99f-f4b9f5e187cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "976295a8-de6e-46ef-9988-ed43a6c4a80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2984fb51-db93-434e-aa17-4ed3210b2f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507692eb-9aed-4657-bd7a-5ffe95e55e00",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e5291d-5772-44ab-be9b-f173ee90db67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df439e5-a012-4007-9ec9-76924038b81e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75f1ac1-eaff-42d4-ba67-f652cdc18058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6ddc9a-1921-4f8c-a614-f8c0d5a4613e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6074546-c499-4354-a8fa-1445b74b6a3b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4896b3-6a40-4992-82ba-f33482be6bc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a8e27f-937c-4c4e-91fc-6b4b9854e217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5972d54-e66c-43bc-b716-32a10ee6ea0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5414c7c8-fc16-428e-a920-1d63a84a4c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2375a67-ec6a-4ed4-a025-7accd194a348",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f8e9d8-a1f9-49aa-945b-1d81de724420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7128843c-6b36-4ea9-84ee-cc30aabb77a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16e6171-43c8-439c-a30e-dd362e11e5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d043c6-a22a-4fe8-959f-abe60e16e541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90f7917-066b-456b-a04b-bf26327d1fa6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d05f42-566d-4c05-9bf8-636141523808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff6ab80-1bea-45b1-b972-53b8b4c88409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51922c7d-5e55-4db8-9fec-e6107b93ca31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b91fb22-f454-42af-bd11-0667277a3ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0b75d2-e7a2-4410-9d8e-972deb45cf1e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8ee665-e972-4ace-8c80-f144b5323c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "263e93d8-cadc-49c1-97a3-b6637cfa1380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b066caf8-384c-46b6-8dc3-434856bf35e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51435f5d-ebf9-4f35-b597-bff3da4814be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466c637b-7839-49d4-8372-021343e0b28a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb04f24-9f9c-4a20-86cd-64a4d7de5cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7363162d-e9cf-4e00-8adb-4a2a58708740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd344216-a498-409c-a623-e19fd7c337db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8434eb-60b3-4b2b-bdcb-bfe7ea49d299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f1c490-55c8-4f2c-830b-7407fa46ab40",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a2aad1-3c44-4a2c-b3ea-eae11591d0df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14451a92-99c8-4ed4-bd3b-5fed3931bb52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebb8f37-bf38-4b8b-b9a2-f2b2ea3859f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07001b16-0f21-49a9-8a68-3104505c898a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06a07d4-6844-4b9f-98e3-62264df944fd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aba00a1-bfed-4570-a40f-900338d559c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f8f4c0-a1d2-40fc-a4c5-b80a035dd68b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "584cf088-0263-42e3-8bf9-91b7f5f50c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925d1b7f-ec3c-4586-a46b-cb63149093e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe438020-110b-4eb2-8d3b-59722da8f558",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48521f38-6bad-42ef-9c62-3058b297ab5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f12848-aaad-47db-900f-17bc21109788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "215b7c1e-9dc2-4c98-b9c3-2bbdb67e577c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f0a70f-7ee1-4296-94f2-2fef234c97fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579ec58c-56ff-400d-954b-3519243268e0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e7d28e-6b14-4804-8a74-1647e1250e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08d7ba2-588c-47e0-bb8b-ab6efe234052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "552a6c6d-01af-43a5-ac6e-3ba55e36ab2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ea65fd-cedd-4857-9a7a-9290752094d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cf0281-491d-40e5-801f-3de60e592492",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6430769-7d66-4e1c-a343-e40df17a09e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8bacf5-ceff-4606-ac5f-70d85ca7580f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d4ef81-0b82-4807-bcdf-c18fa65260a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece36aa4-3ad8-4bad-9daa-d1cead9ec859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6a29d1-be0b-4705-a366-0f90e86fcad5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0edfea2-9a2c-41d1-bd6f-ec88f0b0c950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62d6979-7600-4b2b-bbf3-d5c17a7b5c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88d6ec9-a76d-46e3-9adc-a4321c5e7053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0989d46-2a62-4da8-8057-53927290596b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2528ddd-faa2-4305-a257-564a214748d3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d6299e-1965-4f85-b851-ff8c451bd16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7d2542-d085-4bb2-9d3a-e591bab24270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13be5b68-b59c-4823-bc91-397e20e0e40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a71b57-6226-4ffd-bacd-9203d929878f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9a68c0-03b0-47a6-87f9-42ca33ada8e9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a7a8d2-b4e4-4a3e-833c-0daea178f539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be67432b-993a-4996-9a89-394472ce8017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "138b3ecd-429e-477d-aceb-917523f360ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60d55c3-5110-486b-8811-741cbfb1f02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf531058-7852-493e-9e12-9ac764624c1c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2d77f0-2ee4-4c6c-a94a-f4c8ad1da805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adb6167c-b4f3-4af7-a968-cf26868597a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23380c0-7908-477f-a9e0-a0cc133469ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6be1c7e-6743-4e5b-8df8-fd9d9a9fe116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8b1e54-9102-43e6-afdf-dfac4b994400",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f632d4db-5af0-46d7-97e3-7a60dffafea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425ac715-8e3e-4730-99b8-ef823bda5b57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de137a35-6254-4230-a99f-7f4aaef78bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ee340b-ce23-476a-8836-985337429dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a60a2c-c011-42f0-81d2-d8ad2d977c04",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af42c3e-84f7-4ce5-a38e-2c92c874b3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6657661d-4912-4779-8816-d715d354ffc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf127c7-a359-4017-9918-d4d2c54e1d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f41a2ad1-cf2d-4c4e-8d7c-dfb9e319eada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c92032-3ed8-439c-b59b-581e942e5cdc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e322409-1aad-4640-961c-037e706bd435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e4abe0-4e19-495d-8515-0b754da83750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07799bf0-4d56-4de4-b583-dfd26596c37e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efaee44-0214-438e-beac-93e7c1cbe190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547f80d8-5a6b-4b72-9292-2566c49e296a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34759d0-27af-461f-8170-0b646c8a67ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e44ac0-59bf-4bdb-847b-d9ed911d869d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "681c011d-65f3-49a3-a995-6afaafcd134b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebf5785b-623a-4c2f-b147-22eb228be6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9224a0-a83b-42cd-b540-fa171a14d1c7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cbeae0-e605-4a92-b03f-48bfff3f6633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97fedd29-a3bc-4455-b678-07bebf5482ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "958b5ba1-74fe-46a6-b3ff-886da44366f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0041d538-9c65-45d1-9cc5-32f429c186e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48eb029-8136-4659-a3e2-40aaa3bc9039",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a1d704-0cee-4003-b27e-296eb930312a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb795b4f-7679-423c-a3a6-32b1ab5a7567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eeb3819-bf7f-4709-a6da-970e85299d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71cd1c0f-22e4-4681-bede-bf598d6f179d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d21397-fcb1-4f29-a3e6-be9906e3f5e2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f610ac-5398-4546-906f-3e13d77d2c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12117c69-accd-462f-838e-30d23700f7c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "badfb91f-4645-4df9-8bc6-bf3df158c526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98492071-9517-4003-8ac9-f47ac3f075d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1324555d-4761-4429-a778-b7ed6c88df54",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0a99c9-edef-473a-94d9-3f51e1440f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5ad263d-b79c-4031-b431-bc75b981f087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0432fbd0-20b8-43af-92cd-ef9469626c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b727f0b2-ea03-4692-a2b3-11d60cb9295e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b700b06-f5b4-42e3-80c2-7a5974b64334",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a332d28-bcd0-4bc6-94f8-38ce9081529d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "126e8ab4-e616-4130-b2bc-0df09a503948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e95337-df24-4932-a280-504780650ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5032e0e3-96df-4913-acfd-fe3b805d4514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916c93f6-ad65-49d5-953e-54d63f359c72",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9afc9259-a571-4c7d-b995-fa4fbddb259d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe6b94c0-ca2d-4c35-b2b2-9ee62157cbf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c022bc88-46c7-414a-bd3b-047c0ae09ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b4be27-3fec-4d31-b4ee-06f6567cabd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b38d03-04c0-41d4-9ac3-1a6df466e59a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d322d236-f5a6-4ea5-a6ad-018c7a8be426",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1f7686e-3304-417d-8a7e-91975c7e5d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ebce0c-8110-4730-844a-310c0e3015a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823de2ca-53dc-4849-9f5e-ab08eeebd135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cf1573-dfae-49a4-8427-551cae0af882",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944d16c0-5abc-42b6-94bd-f5ffdc730984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86066428-f7da-46c2-a194-b4651b01f4a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ab3cc5-0091-4252-a299-ca807540e583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b434d5b-f86f-4319-b518-473594f2096a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654b34ca-406e-47ce-af61-ec1c43b75d59",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb0e33c-d7e7-4d3a-b581-110ca464478f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f159bd29-ab05-41df-aaeb-04d6eb1096a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76757d2a-02ec-4f12-b133-d284b111277d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "745cb198-58c7-49a1-aeba-ef2fafc6d0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94475f5f-1c30-47e9-a486-24ad1b229eca",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29bfb35-66a8-43c4-bc36-25faba5a162a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d24e0250-75ab-432e-9647-3524e1731959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9563300-0372-4bf6-809f-7ece6ddd1cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1d967a-a4e8-4fd1-98d2-839a147dc500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b68c13-0fc0-4776-9fe1-98414bfc08bb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fd942a-7117-486d-8dc0-4ea19a7ced93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71f92d3f-df1c-4168-a663-32834a4f9481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e599f0-4e06-4d85-a355-b0c71d92e9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c40750e-5268-49e2-89f5-334a74fc6c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221108f6-a3ab-40c5-9f90-d673803a9bc9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621a6e1b-2c52-4669-9a9c-556abb51acd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f45eea-01f2-4e7d-8745-c211ec16d15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "990ae3e2-99f2-48f1-b108-577f7d8ce4f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba4d781-3f37-422a-b425-578bc857a3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f45526-48dc-442c-b18f-77662d39e976",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca13de4-4297-4f88-8087-90eaf7d8873f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6be0a1db-2f08-4726-834b-2638938e0102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d85811-b382-43d1-8939-45efa5a16d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23328fd4-daaa-4f7e-b3d3-92f9f161a022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a414ef79-ed7f-47d5-8e84-091dd8151e09",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e054be24-5f83-436c-8060-dab3d65cdf04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f0c712c-554f-42ae-9245-0c1f22992846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "516c576f-c12e-4f9c-9ce3-6bb7939b5fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12fc2729-a32b-4246-ac0e-30c40b48b209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191f03ba-6ac7-45ec-9677-ccd89041600f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a74c48-d000-4c35-b259-9d25a11e4556",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b65a57c-d51a-43f6-89d3-331aec014b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1926a90-7b0d-490b-80ab-affc0f0c7b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "417bf121-9022-450c-a648-dd5ec81e7bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71bdb67-17dd-429d-b8ea-d8e64e6b67a3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4028f076-7069-401a-8707-8e8bbedb956a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23768611-ff6c-4b74-9be4-156b12eda098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff71b934-e19c-4ede-95ac-0a2ef0ca6ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285a164f-7e84-4d9f-8e25-fbb0063eb345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637c46ce-fe14-4343-90db-f4f4946d2649",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7051a2b6-b1a2-4ef7-82fe-09e0a5d8c074",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f35d0771-df69-45e3-976a-faf758f8814e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ebd844-2ece-4c8e-87bf-10b5c1c6427f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b66203b-5906-43e5-8dfd-be591ff25f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355a8ade-e55a-41fc-99a4-6b997092d6e9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c50ba6-7010-4fdb-b46a-d58326a60c37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e223dfe0-596a-4980-b88f-2c72eca464c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b890aa-6f01-40d4-bacf-ab853e7fbb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80533c09-c478-42ac-84cb-d51b228411f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcb9d27-3e32-46b5-a0cc-120a34da5b10",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe94a92-a03a-457f-9291-77aa0387e684",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b29aafd6-db81-49ba-b311-7e2e11cb9ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53057ec8-c9e6-4bc5-bcf8-74bf78726351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702910b8-24e9-4ea4-9db7-d4cb2bf14610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e142257-a4df-441c-8397-6dfcce312847",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a864d48-23b7-45ad-8051-15da89da22c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3726aea-f350-4997-9d2b-04e8ee43f477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd671fdd-6786-4f5a-9d63-31c715255cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0076d3-32b7-4c07-a1db-2c0a2cfaf8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6db801-07c0-4824-8e6d-4f98158b8fed",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5ef9f4-fff6-4283-aa59-218bef8c0614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "378f60e5-3781-4156-8184-41f3d154f9cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "312d0524-5de0-4f48-afa3-06e3dd963671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6242fe-ae1a-4648-8796-e98000d1a42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d28e38-ba60-4689-82f4-e3cf5f430b59",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632c19ce-0245-4ea9-afd4-d9c3efd9ad0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d083baf-3f6b-4143-af0a-0f6f3c73806f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24408d4-0771-4f2a-b04c-eff676070f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d29b897-e923-40b7-b7aa-b1e0ccb9b9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1197a2c2-866d-49ba-94cf-3f93521b0978",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1987484-1361-4c20-b099-d432dea6022e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9bec498-716e-4f72-802d-77e5b1619fdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58e8389-d1b7-4f5a-9204-345ff6b3e6f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18730604-3adb-40b2-a6b2-526f7901defd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9e7261-6c5e-45d5-a137-1878f3fe6e4d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c1a39a-d886-4228-be32-981c98de8522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee0f8976-42fa-480a-99f8-98b9eeab0a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "808acc52-eecd-47a9-85c4-010a6710dd32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb18d68e-7401-44e9-a5f6-b003f7ba5ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9d508f-266b-442c-b348-4a042fb1690e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fabfaa-d561-4c97-bda7-cab6b0ae1f64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae24caed-8c8e-4ad0-9bd4-9419b726a9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dbeb80-a0e7-4f9e-8608-2953cf281aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c29692-e32d-4900-9c3c-2d4aa6980231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb26e357-edb1-43ae-9b19-9956c4999349",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798c0dfb-c46a-4fc0-835a-c4f430ff3f8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50e26c6c-b8ed-4627-9e76-7b4d9a5c0fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc0bab1-a995-4771-aef0-a6e6bdae6f96",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c76830-495a-4647-9aff-595d396b4abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcbab133-1105-4ce1-a8de-e773031bbdda",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8ec253-41b6-4dec-afe6-17f6b4fbcc83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf093fe-0327-4ab3-b41d-48fb406854ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ec5edd-7916-495c-b197-c3c3419d01c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9b5a78-a47d-4822-99f5-faef5f21cd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3fa636-16f1-46c6-af68-450d91967c2a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189baa7d-d4c2-4359-9912-ebe987641e0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a89d7ff-fecc-47cc-87ed-90b9ff52bb95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd125967-f0de-468b-aa60-7b1c4a0635cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137b2bd1-2356-41a9-a841-59f4b272d0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9df2809-88c2-493d-afa6-6ff8c7146f19",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add0c695-907b-42c3-b193-8b01ba8eefe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3c93b66-a5f9-494c-92c5-e2a88691de76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79ba6d5-7fda-496f-8369-eabdc5e5d69c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1a7d65-6ed4-4c7d-b87d-f1340f1cb8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffc4153-8aea-4bb1-bb2d-6ff22e808639",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09698240-9eb3-4bd7-b41b-ef521df3ba9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb79e1e-f0aa-4b40-b7d2-91366c7aacfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ab09ed-39cd-4e4a-8983-ad13a4ecb2f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a74ecf1e-df78-46fe-abdd-82a29ed8211f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0f1f3c-9510-4f9d-9fae-a2037ca96e5f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb79ec9-5ff4-4c42-8efb-8c340f6b0331",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d486d7f1-34a4-40b6-898e-e1cba8211496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "980ad5cb-cdd4-4a7a-a704-326b0ecb0068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "062961a5-8f29-4505-8f86-77073953b78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885b9240-8677-4533-bbe5-e93925dfa5da",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bed66b9-eac1-4c4c-a433-39a3684757f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3454a61-b783-4221-a12b-64e6199f65fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56deb7c1-4411-4fcf-b78c-fd512dfb8082",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b65c5d6-bb93-4931-bf8b-028232113df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477a4dfb-3dcd-4165-84b0-31aa4a730065",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591618dc-dfc4-48a1-82fe-92a03701b930",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ea1e744-c251-4678-8cf1-bb80462d4041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e147b2b-f7b6-44f5-9ab0-62e81b429b06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87d80e0-18aa-4fb9-82f4-b23af8dd4ffe"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14ff6ffe-0e2e-4a21-ba64-d6b358bfa053",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c1db5ef-322a-4de5-a299-ce93d71bbb98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c115d776-399b-4339-b6b7-b060dd1cd1cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b95815d5-04f7-4aae-a93d-756a2a37607a"
                    }
                  }
                ]
              },
              {
                "id": "228c32e9-8ab3-44af-9db4-130bd7344161",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9ad55a4-e462-473e-8996-4136feeb302e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889ece83-8497-4a0f-9c29-daec5617acdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7899cd50-7888-4179-bc9a-5dc0ac7edb5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ce047b-b079-426b-9bfa-755a03c8a0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdbcf660-e919-4f14-b16c-6390a3acd6ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "939f052a-deb3-4e23-be26-9f7f149d5ead",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b2fa91e-56b9-4551-a90a-414a834c9ee3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "544c0f6b-f2d7-4df8-935c-de1ae248945f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf3d6468-c725-4ba1-89aa-1e66e4b26187"
                    }
                  }
                ]
              },
              {
                "id": "b80654c2-738b-4d6c-b80c-5ec69e636d99",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b9b7e8df-b588-4d9e-8fba-48d6752e3bd2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8060dbbb-1f4f-4589-858d-67cd64091d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2fe361be-a02f-443f-be08-24096da94e2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ffa00a-54ad-4bbe-8317-63d8d8683ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0618f54a-a664-4f86-96d2-6b30a955f798"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eeacd3aa-cb65-41cd-a523-b9b60b98a8b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "edcb6bee-335a-46c4-bd0e-ceac8484382b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03c6e96f-9378-4e3d-9cd0-dec8f6a5e206",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1a2bb88e-85e8-417b-8a3b-a169185861ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2a0072b-9f21-4720-b06d-207e85e82901",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3afb626d-5c13-4288-9793-2b13077d106b"
                    }
                  }
                ]
              },
              {
                "id": "de0d8aa3-f94a-451f-92c4-3fae3aadba86",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60ad8f30-1ae4-47f0-a560-bbe1cd8a3150",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ae3a79f6-ee99-4f60-90a5-c7b849b4f471"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a9e9731-e86c-44f9-aed0-8b2b84bbf045",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c0b0a6f-e714-431f-9797-5f1a03a63afa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6783adb4-6290-4fc6-ab45-abff586b4669",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4d623f6d-4853-47be-9c69-91aeb686c8e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80fbc8ca-d7e5-4393-8c3f-1c76e18ee96d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2817dea4-9ec3-43d7-876d-357b17a5a835"
            }
          }
        ]
      },
      {
        "id": "a8f30391-64f1-4477-8fc5-837237d03ddd",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "99f1e579-4c17-483c-be10-87bc0309d5e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74a26c52-d9ea-4ccb-8417-b1d5de3316c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d857d581-c71a-4c06-981b-6f143a6bae5d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5c1d71-3672-43ce-a3fa-6498e2ff624f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bc887b32-ae5a-471e-bdd1-2863bfcb367e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04213869-993b-4f1d-a105-7f05e8ec48fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f5e2c13-d82b-4800-b749-5c8367094eb4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bde5d48-5016-4fcd-baa4-fe67520758eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92eca19f-e9a0-4d5d-83dd-5c3bc9ed25a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89a8069b-2123-412d-a178-136566c75f4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bd191c8-dc5d-46dc-a879-bc16c1821e1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09c7cee2-21cb-472d-8095-4106fa2eaeb9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ee24104d-c884-4467-b5e1-d18ed81ea839"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97fef116-a8b2-4e3c-9da3-cf8088f477db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b93d1bf7-421b-436c-b073-9ee3f7ab5a02"
            }
          }
        ]
      },
      {
        "id": "9a45278f-0ad6-4326-b817-5975379611a5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d2edb9b2-7b06-46dd-a962-c45353fda1b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0847497d-88ae-4d47-acc9-2d241de3fb2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5069271-d4fd-453d-9b35-e88b5dbbc5f7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b2640e-24e6-403b-b78a-a0e729beac55",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f98321d8-6cc6-45ec-a2db-e5fc71451563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5822815-2033-43c7-9407-aa26f54ffa88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a65ed0e-3551-4324-86da-6dfa01340eed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "238ffd97-8a4d-4c94-89f1-4669102b42ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e095a06d-df7d-43cf-a08b-ccdc363c82b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8d0e166-d4a0-4331-b77a-83b1368c872f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b969912c-f23a-4384-be8e-e81d9253dcee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6bb8bfb1-b415-4104-889c-a7db77cf52a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b72bf8f7-e879-42ad-b5c5-6733dcc851b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1787ab8d-4f6a-44e2-b52f-b13656e961e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c465d330-d8c2-44ba-8be3-c4d49cbda679"
            }
          }
        ]
      },
      {
        "id": "df701fbd-ba89-44c4-b642-a749fdc8761b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "541ba2a0-2d26-4d57-b1db-7d305b300ae3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "586734b6-69d1-4afb-93fa-087f46876322",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b865dbd8-c73e-47c6-9762-2e393ee03c51",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269ae413-02e2-406e-b964-6c820ed1f5a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0113d41d-b657-40fb-b6a1-5cbb768a752a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a267f0-a9c6-4b05-9d49-c7e9f45152df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5462275c-bf1d-48c4-a016-e1678b3d67fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0481e11-887e-455b-8144-63f818fa3eb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f568e2fa-2089-4e1f-9ced-390e5037d553"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f712a61a-2201-4429-87b5-e2d57f2b05d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ed98df1-a146-4b62-a42b-56dc00d17c64"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7cdcc5d-75c0-4953-bc70-f11a24aec159",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a9424fda-62d4-422e-8a55-9a1067b757fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3d0f22c-a416-45a6-be81-d04f0a362e5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65bab3a7-d842-4f6b-85eb-64c9c97a40ca"
            }
          }
        ]
      },
      {
        "id": "fef26aed-6ae6-4e23-a9b7-2a8788807834",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e508108-0091-4fe3-9cbb-06985deb16cc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11d0a27e-38a6-4508-bd4e-be4839d2873e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d72b3965-1a3a-427e-b326-dbccdca99021",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73c717a2-37f5-4f64-a081-883c901b9b8d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc055434-c325-493e-a2b5-f4b6361f1f9c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 51.03508771929824,
      "responseMin": 9,
      "responseMax": 659,
      "responseSd": 59.340399218224576,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711931922160,
      "completed": 1711931946574
    },
    "executions": [
      {
        "id": "70877ccb-5200-4643-9c5e-39c89c3a1528",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ad8bffb1-cc4e-4474-9f31-959904e6a6d8",
          "httpRequestId": "7536e80c-1f70-420f-a9c4-4187d9618d56"
        },
        "item": {
          "id": "70877ccb-5200-4643-9c5e-39c89c3a1528",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "36870744-59b2-4d07-8c0a-ecd2a0f0029a",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 0
        }
      },
      {
        "id": "f9bbc7b2-9aae-4e83-8304-17e0a63e6fda",
        "cursor": {
          "ref": "1467d588-f1ab-4ffd-9af6-18ceb3d54733",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0443c524-e544-404d-8bd7-f89c3665a05b"
        },
        "item": {
          "id": "f9bbc7b2-9aae-4e83-8304-17e0a63e6fda",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "96a20993-5360-440a-9c0e-643005852c68",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "811e6401-01d1-4265-adab-83f83d85eb94",
        "cursor": {
          "ref": "57255c65-c3b6-4f89-bef7-cf942eed4ade",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2e9d7503-cd55-4907-9679-839817a4e7df"
        },
        "item": {
          "id": "811e6401-01d1-4265-adab-83f83d85eb94",
          "name": "did_json"
        },
        "response": {
          "id": "2a68c41a-fc31-4c2f-aa2b-52aef92f4766",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23922c7b-44c9-4481-aa57-2f4f6e0b375b",
        "cursor": {
          "ref": "bdb760a5-b639-4c64-a71f-945e6b4cf8fb",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70cb6aee-ba87-4ec8-8143-3059f809d85b"
        },
        "item": {
          "id": "23922c7b-44c9-4481-aa57-2f4f6e0b375b",
          "name": "did:invalid"
        },
        "response": {
          "id": "a12a512a-33ab-4c0a-9f68-4c5a68371004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23922c7b-44c9-4481-aa57-2f4f6e0b375b",
        "cursor": {
          "ref": "bdb760a5-b639-4c64-a71f-945e6b4cf8fb",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70cb6aee-ba87-4ec8-8143-3059f809d85b"
        },
        "item": {
          "id": "23922c7b-44c9-4481-aa57-2f4f6e0b375b",
          "name": "did:invalid"
        },
        "response": {
          "id": "a12a512a-33ab-4c0a-9f68-4c5a68371004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b137927-79e2-43aa-8585-00e54cce4fed",
        "cursor": {
          "ref": "4d0e9681-5afb-4313-a811-806f57681b9a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e6ff6296-92eb-46ae-a0eb-e9e7e4c43559"
        },
        "item": {
          "id": "9b137927-79e2-43aa-8585-00e54cce4fed",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5d0a3f9a-046c-4d4d-b2ec-f1e1cf0b01ed",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041237dd-799e-498a-ac2c-51126e0c504c",
        "cursor": {
          "ref": "6267579f-6804-498c-93bb-8fe388664016",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1de7eb97-dd86-4809-b40c-67975df5596e"
        },
        "item": {
          "id": "041237dd-799e-498a-ac2c-51126e0c504c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6b56c73c-27d0-4439-9786-2590f4af850a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332d17ef-02b3-46e7-b0b1-c7c821956721",
        "cursor": {
          "ref": "1f5610eb-c2d2-4e75-b037-7b1921474ab0",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "62891636-ef51-4412-b4ca-14f8e7f5bd24"
        },
        "item": {
          "id": "332d17ef-02b3-46e7-b0b1-c7c821956721",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "95125de3-8c26-40b2-807b-8557c4e5716b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477ee496-5f13-422d-bfe5-9761e0d23023",
        "cursor": {
          "ref": "30c40f7a-6dd0-47b8-a633-f50d21263497",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "09233ce0-1ea6-4458-b9ab-9b5f6f9deca3"
        },
        "item": {
          "id": "477ee496-5f13-422d-bfe5-9761e0d23023",
          "name": "identifiers"
        },
        "response": {
          "id": "51c0c6e4-93f7-4d7a-bc92-951e30ce427b",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7410d028-dfd6-4103-958f-09e5ca0c5ce4",
        "cursor": {
          "ref": "ee79d9d7-d0e7-4dd7-ae3e-07956f6576e9",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4acbb886-df24-4340-9a5a-5dce9c1f4915"
        },
        "item": {
          "id": "7410d028-dfd6-4103-958f-09e5ca0c5ce4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e1a45019-2e1a-4d23-bd9b-1570b0324043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19fe8ba-917e-47ee-9ea0-121bcd7515ff",
        "cursor": {
          "ref": "a11971b1-3848-4f05-bff8-786aa029ffb2",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4364f3fb-d41a-44d8-8c8e-f368e7f343da"
        },
        "item": {
          "id": "b19fe8ba-917e-47ee-9ea0-121bcd7515ff",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9dbc41eb-465c-4645-98d0-f3ba8517c74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d9ff18-71d0-4ec3-9978-5b53f34bba99",
        "cursor": {
          "ref": "45d90e0a-ef1c-413f-891f-ec1271f520e9",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ef7afb24-8d9c-4af3-a3e2-f313e24e7c11"
        },
        "item": {
          "id": "f0d9ff18-71d0-4ec3-9978-5b53f34bba99",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9290927e-fa90-4928-98e0-295b8a8c6800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5985a1a4-f64d-480d-99d3-741a0306daa9",
        "cursor": {
          "ref": "8e153fbd-5a43-43d4-97bd-24a634e8880b",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "eb650d1f-9577-40c3-9d32-673c6b757228"
        },
        "item": {
          "id": "5985a1a4-f64d-480d-99d3-741a0306daa9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "881d693f-9dc9-4ecd-8c5a-ad785364240d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadc1c3a-e149-4b00-b084-de50eb2587f0",
        "cursor": {
          "ref": "66709f51-44c4-4998-bcc6-4fdb1fe6f2ad",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "94455831-2950-45b4-ba2e-72f70fea543b"
        },
        "item": {
          "id": "eadc1c3a-e149-4b00-b084-de50eb2587f0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1c7992a7-83dc-4a58-b188-1739dcf924a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f6f7ed-5163-46e7-a141-3c828621275a",
        "cursor": {
          "ref": "eaacba99-6094-4165-96f9-e0bd033ebadc",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f8b6ecc3-e0ab-4efe-97a7-456833159f1c"
        },
        "item": {
          "id": "b5f6f7ed-5163-46e7-a141-3c828621275a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "832f8dcc-11ef-4c2e-b15e-88a8863ca286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae3efc1-9eb0-4f65-b6ac-824129e90322",
        "cursor": {
          "ref": "52cd7ac6-dbe5-49e8-aae0-28ec00d87e72",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ceebb146-7bb2-4d66-8ce9-4120e009145d"
        },
        "item": {
          "id": "aae3efc1-9eb0-4f65-b6ac-824129e90322",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9f8f5ca4-c70d-4ac7-87bd-103cbe4bda37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c26862f-b25c-43ff-b460-a659b95dec6c",
        "cursor": {
          "ref": "101d2f25-85ea-494e-9311-80016eb35631",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0a626f1b-74d6-4ad9-b3e5-5229ecb11840"
        },
        "item": {
          "id": "8c26862f-b25c-43ff-b460-a659b95dec6c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c5f001b3-1782-40b7-90f4-2dce575068dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62de6fc8-5765-4161-b00b-3aaafe61a7ae",
        "cursor": {
          "ref": "6cd73c10-d579-4870-b3df-556313735391",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8b6d47b9-9ce3-4571-b1c1-fe098e8db4f5"
        },
        "item": {
          "id": "62de6fc8-5765-4161-b00b-3aaafe61a7ae",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f02560f0-4aa2-4a8b-8245-c744f5176e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a659b4e4-b757-4829-ad87-5e9cdc5230b6",
        "cursor": {
          "ref": "dc5c5ca7-30a8-4660-bbc8-4d51e66dc0d9",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3404548a-f7ef-40c6-9657-2efe6fab0e9e"
        },
        "item": {
          "id": "a659b4e4-b757-4829-ad87-5e9cdc5230b6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2c9fe55a-8c35-40d1-a3c9-ba90634175d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18af095c-6e3f-4ebb-868a-71b8c5da99f9",
        "cursor": {
          "ref": "c7b77c88-6465-48f0-a149-7eac05a9dfcb",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5afe0849-dd0c-4055-9b94-e749d1036a86"
        },
        "item": {
          "id": "18af095c-6e3f-4ebb-868a-71b8c5da99f9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b230cfdb-0e7a-48cb-9f92-73f1c4fd0f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82e75c1-665f-4230-bf38-4d32c8ea89d1",
        "cursor": {
          "ref": "8a042d27-e784-4261-b3dd-a38a047692f6",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "218c7221-413c-451b-b555-29875f4e74f4"
        },
        "item": {
          "id": "a82e75c1-665f-4230-bf38-4d32c8ea89d1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "014d11c7-5155-46c5-bf07-fee5fd4f0d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8d4f9b-6d5d-4535-afb2-4a15075ac2f4",
        "cursor": {
          "ref": "8a84bb47-9a64-4b89-82c7-0045f1a7ba4e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cf4d8f7a-44ec-4147-ae63-fb7f6dd2b297"
        },
        "item": {
          "id": "9e8d4f9b-6d5d-4535-afb2-4a15075ac2f4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "587ddb9a-af24-4d07-a8ed-cd03c4a623de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322583bb-77e2-4552-97f0-30622c463a7f",
        "cursor": {
          "ref": "57a29af9-5231-4d1d-8058-6a5cec7d7c37",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1e11f11a-6394-403b-89a1-3365b3dbcadc"
        },
        "item": {
          "id": "322583bb-77e2-4552-97f0-30622c463a7f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "80ca7776-1cf6-47aa-bf21-63eb18cc0b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b5e0d0-933b-41d4-8e49-4eb3c138f144",
        "cursor": {
          "ref": "5adfa892-2872-4b9a-92b8-b6a052b07add",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "033d7679-1b75-429a-bb66-8d35a666c511"
        },
        "item": {
          "id": "45b5e0d0-933b-41d4-8e49-4eb3c138f144",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cffbdfc3-3fc6-465e-a92f-4b943923ceed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f103848-b63a-4623-a0ae-2058def7b1ad",
        "cursor": {
          "ref": "03af5053-7882-4bdd-aecd-3fccfe912362",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1488467b-bc75-4fbb-8322-f314bc178073"
        },
        "item": {
          "id": "9f103848-b63a-4623-a0ae-2058def7b1ad",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "775fbc19-d1f1-48f6-8433-29f5b0f26750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb7c847-16d2-4e18-84fe-28677b483b30",
        "cursor": {
          "ref": "4fcf664f-feb2-4c76-b1f5-2f452132bfa1",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d9d5a3b3-cf53-41a0-a491-204c5261d276"
        },
        "item": {
          "id": "8fb7c847-16d2-4e18-84fe-28677b483b30",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0fb2c590-a928-4229-b99b-b47e4f04c5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4205654-fc62-4c4f-b61d-20d359e1279c",
        "cursor": {
          "ref": "7407d77f-19ae-4e55-b06d-9363eb19db5c",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "55065933-2315-472c-b6cc-447d24d975ae"
        },
        "item": {
          "id": "f4205654-fc62-4c4f-b61d-20d359e1279c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "62538b25-4332-4a6f-ba1e-2fee62fbde4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb2c7fe-a9fd-48ad-837b-7b223a869b2a",
        "cursor": {
          "ref": "77f48226-446a-4c07-a29a-b45056f8df20",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ba93f8ee-0f42-43f7-8dee-8905f9550728"
        },
        "item": {
          "id": "aeb2c7fe-a9fd-48ad-837b-7b223a869b2a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "30832792-63ef-4da9-a227-a372f6b3cdb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab51486-2f15-44fa-8812-af0860c80595",
        "cursor": {
          "ref": "6f64d5cd-0bc5-4ed7-a7ed-730308d6fa47",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "aa80c55e-25c1-4ecf-bfe9-34b3f04c170f"
        },
        "item": {
          "id": "bab51486-2f15-44fa-8812-af0860c80595",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "af40d5f8-fe0c-4381-81c2-1ce72e6e449c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91df8d14-7510-4a88-b2ea-961b97194813",
        "cursor": {
          "ref": "b343978a-b7e3-4042-a2f3-a4385f9699d5",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5881d4f2-9ba8-4812-92bc-0aa460c979ac"
        },
        "item": {
          "id": "91df8d14-7510-4a88-b2ea-961b97194813",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c45e3c0f-bfe1-425f-8d46-8977f7cad52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce36ff87-fd94-4133-95bd-694d69e0a0f0",
        "cursor": {
          "ref": "5fba12a2-380a-4b09-a2b2-128e7cd15681",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d62295f8-c34e-4adf-93df-31282d3b52ce"
        },
        "item": {
          "id": "ce36ff87-fd94-4133-95bd-694d69e0a0f0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3ac9dfca-ac5c-48df-80d1-4e33e70fd80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30800e55-575c-4692-8c12-ce77efa41b8a",
        "cursor": {
          "ref": "2a4a9216-5d6b-45d8-a277-77017b676ef3",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "825db1ce-e92a-4b29-8e06-9350c60806a9"
        },
        "item": {
          "id": "30800e55-575c-4692-8c12-ce77efa41b8a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "022df225-6605-4cde-b8f5-62e22e89d947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d1f416-9d25-40a3-b74b-7cdb224523e0",
        "cursor": {
          "ref": "9f6dbd2a-4f58-454c-8d47-58f09ec1ed4f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7a5f3cf7-a61d-4716-be68-377d1189cbc6"
        },
        "item": {
          "id": "92d1f416-9d25-40a3-b74b-7cdb224523e0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "243a9f62-fd6d-4944-b19d-e637313ef97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e233b9ef-9f14-4a52-88f4-6f3aaf8e288c",
        "cursor": {
          "ref": "a1518b3d-565c-406e-8151-e7a6694886f4",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a5018223-c3c9-4a36-bdb7-6bce9767fa78"
        },
        "item": {
          "id": "e233b9ef-9f14-4a52-88f4-6f3aaf8e288c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5b3b4fa5-940e-4b91-80b3-d2ffa3a1bb43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e06b108-50cf-40bc-8ad4-421486571f5a",
        "cursor": {
          "ref": "7410a592-42e5-486f-b474-7a17b0e1a84c",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8dae6e24-3b50-4962-ac8f-ceb8d8d6fb2b"
        },
        "item": {
          "id": "2e06b108-50cf-40bc-8ad4-421486571f5a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9195b638-d696-4774-bd97-07ecc9176814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab31cb1c-cc14-4a40-a3d3-b77edaeb547d",
        "cursor": {
          "ref": "9ec1a8d8-a9d9-4b27-a7c4-0cce24119364",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8a751153-7793-420a-b578-f2c81b7135aa"
        },
        "item": {
          "id": "ab31cb1c-cc14-4a40-a3d3-b77edaeb547d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a767248b-1d4d-4943-a1a1-bc12174390ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6edd96-5df8-4cb4-8ac5-c3a4dc44b750",
        "cursor": {
          "ref": "881a9110-6021-4155-adf1-13765b688481",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5f32b541-d182-4567-81c5-14f8c48ee5fb"
        },
        "item": {
          "id": "ed6edd96-5df8-4cb4-8ac5-c3a4dc44b750",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "641cb30b-bab5-4fa2-b589-42d79a976f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbf6beb-e45f-42de-9b2f-def9be613fed",
        "cursor": {
          "ref": "d64b33e8-c88f-410b-b46d-4c38bc0b0d87",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "106aa4c4-c125-4eb1-b3cb-290b05738a36"
        },
        "item": {
          "id": "1cbf6beb-e45f-42de-9b2f-def9be613fed",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "21dae88a-d2e3-49c1-bfd3-0b549da525b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00145c46-169e-4855-bb05-99599a7dc692",
        "cursor": {
          "ref": "5dfd28e5-cdd4-4f11-b5ed-b74fd1eef5e3",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "abde28c4-0744-4ad1-8db6-d849aaa0f139"
        },
        "item": {
          "id": "00145c46-169e-4855-bb05-99599a7dc692",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7bf0c347-f6b8-4d7d-80eb-ef8776e84035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8827b54d-3ca4-417c-b43e-6941154e532b",
        "cursor": {
          "ref": "917e7a6b-cb50-4701-bd41-5206465eb665",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "32dcf277-2f2c-4ca5-a9de-1500b451658d"
        },
        "item": {
          "id": "8827b54d-3ca4-417c-b43e-6941154e532b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a11ffe88-b8e9-4394-a628-93c499d28200",
          "status": "Created",
          "code": 201,
          "responseTime": 659,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "065233ff-af17-4b6b-a037-12d05d482201",
        "cursor": {
          "ref": "ad5523df-0d69-4f9a-b4ca-f2dbf9144871",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2ab6dd66-d41a-4398-834b-126988a69f82"
        },
        "item": {
          "id": "065233ff-af17-4b6b-a037-12d05d482201",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ef72c625-0a7c-4623-9c4a-0853877def74",
          "status": "Created",
          "code": 201,
          "responseTime": 195,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "932a833f-0731-426d-9f69-7f8e4ff694b3",
        "cursor": {
          "ref": "a836d14f-8bb5-454b-a407-dad2e759a75d",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d0463e26-de17-4205-9814-b8bb899662c0"
        },
        "item": {
          "id": "932a833f-0731-426d-9f69-7f8e4ff694b3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b770d086-1f79-4720-8d36-8373831017bc",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "06a74aef-b04f-4bec-87f1-3f24b92528b3",
        "cursor": {
          "ref": "3dc896ee-90db-4229-92ae-11367ba16a18",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9f9b24ee-ae8b-44ff-a446-ebeb6f957604"
        },
        "item": {
          "id": "06a74aef-b04f-4bec-87f1-3f24b92528b3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "65475975-1608-4ced-9023-78b2d8a38e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfcfecf-0805-4d81-85f3-873f8d47e990",
        "cursor": {
          "ref": "2f64dfcb-7ab6-4321-bab8-c19ea8897c15",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cde6e4ae-63e1-4139-a13c-59a740cda4eb"
        },
        "item": {
          "id": "8cfcfecf-0805-4d81-85f3-873f8d47e990",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3e884491-76af-4067-b8ad-2fa398629d3a",
          "status": "Created",
          "code": 201,
          "responseTime": 200,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9b5c0f8b-1581-45a8-8b05-c3e772747bda",
        "cursor": {
          "ref": "efb043d0-61fa-42fd-b529-656852b6595b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "84218390-e71f-4428-a5e8-3ac92b2b03e5"
        },
        "item": {
          "id": "9b5c0f8b-1581-45a8-8b05-c3e772747bda",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1455e96a-3512-46c4-b01b-980cb21c295b",
          "status": "Created",
          "code": 201,
          "responseTime": 209,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6bd820a0-5c62-4b77-8b42-8247165a4594",
        "cursor": {
          "ref": "f32f4705-f8d6-4fed-a0ec-f95041a21b15",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4fb34d69-49c7-495d-8826-98e3422b992f"
        },
        "item": {
          "id": "6bd820a0-5c62-4b77-8b42-8247165a4594",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cc5f1d17-f9da-47f1-aeff-283373492f23",
          "status": "Created",
          "code": 201,
          "responseTime": 186,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "93915125-73a0-4ffc-a62c-3b8b50aa1aba",
        "cursor": {
          "ref": "a4af8742-ac72-49c0-9468-1a0b08e3efa6",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cf8f3369-4265-428c-b7b0-bfcfa0f45a15"
        },
        "item": {
          "id": "93915125-73a0-4ffc-a62c-3b8b50aa1aba",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "159e87a7-ffca-4441-add7-2f5eec5dafe7",
          "status": "Created",
          "code": 201,
          "responseTime": 201,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b289f6ed-f2a8-4ef8-b22c-5b497b76149e",
        "cursor": {
          "ref": "7460ad88-dbff-474e-9134-4dc846e2303a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "051c713e-1409-41a8-84b1-734835befdb2"
        },
        "item": {
          "id": "b289f6ed-f2a8-4ef8-b22c-5b497b76149e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f426b35a-326c-480b-94f7-237e3e130d55",
          "status": "Created",
          "code": 201,
          "responseTime": 200,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1a85b974-1d2d-422b-a977-573c93dc8838",
        "cursor": {
          "ref": "0e4d6a08-c73f-4cd9-9acb-70303c426b78",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3b4bc76c-fc03-4864-9333-31e3d9f25eac"
        },
        "item": {
          "id": "1a85b974-1d2d-422b-a977-573c93dc8838",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dadcc2bf-9978-427b-9a9d-431d2d627fe8",
          "status": "Created",
          "code": 201,
          "responseTime": 199,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7f3d8d10-f168-4de0-a75c-8d32d33ab154",
        "cursor": {
          "ref": "8a6bfeb2-a99c-40de-8321-c749732a5805",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "09a82e7e-c842-49d7-bcc1-cb4d0a2583ce"
        },
        "item": {
          "id": "7f3d8d10-f168-4de0-a75c-8d32d33ab154",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bde7170e-6d58-4be1-9067-1d2b18b45d92",
          "status": "Created",
          "code": 201,
          "responseTime": 199,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8def36c9-463a-4437-95d6-b7c31169d989",
        "cursor": {
          "ref": "0cf769ab-4d1a-49b1-bcbf-3a5e36eb2603",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "363c7200-d32f-430c-b53f-f72bef12e819"
        },
        "item": {
          "id": "8def36c9-463a-4437-95d6-b7c31169d989",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b3d19d62-b7a2-4c83-9f27-3cc140259caa",
          "status": "Created",
          "code": 201,
          "responseTime": 181,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d9f9fda0-d643-473d-b1ca-882835591353",
        "cursor": {
          "ref": "575cf12b-e48f-4bb7-accf-e8c881c87ef1",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b0a2e02f-7146-44f2-aecb-94e85eaa39dd"
        },
        "item": {
          "id": "d9f9fda0-d643-473d-b1ca-882835591353",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b901be76-8240-494d-886f-08b432e9e73d",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "76fc4fc8-e807-44f3-8d37-09164f138c7b",
        "cursor": {
          "ref": "f926c026-3b91-4493-a6a2-7a05a5fde943",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b91b4474-bbb1-4657-818b-dd9b29190342"
        },
        "item": {
          "id": "76fc4fc8-e807-44f3-8d37-09164f138c7b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c8a6da0c-23d7-43d6-8766-482c7abd7f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd860986-4c6f-46b3-bf8a-282f1db1088d",
        "cursor": {
          "ref": "876a1f69-106b-428a-8ed9-20798bd2be08",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "263f29c2-13b6-4c1e-9c6f-47b8ee5c0f3d"
        },
        "item": {
          "id": "fd860986-4c6f-46b3-bf8a-282f1db1088d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f20c6a1e-7b23-46df-a4f2-c6c5014c39a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090717bb-c80b-4252-8828-5206d970a7fa",
        "cursor": {
          "ref": "d7ef572a-056b-497e-87bd-16f58b819ec2",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f9e4bd64-2011-4889-b258-ff1a5321c0a5"
        },
        "item": {
          "id": "090717bb-c80b-4252-8828-5206d970a7fa",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "84c59c6b-699b-4df3-9012-817f2c902d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb264ef-9f93-4e08-bd30-5355d3215f11",
        "cursor": {
          "ref": "b5d9d3f4-269e-479a-a2ee-9c387448f7c3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "13e7556b-4bfc-431c-b305-e2e255d04771"
        },
        "item": {
          "id": "2fb264ef-9f93-4e08-bd30-5355d3215f11",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "310373e7-5e42-49a0-b766-be2c8762ddac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710d31d2-0e3f-4922-9983-65dbfb6859ff",
        "cursor": {
          "ref": "59dfdc8d-0cdd-4e32-80cd-fa06548ff332",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "77b59805-a1d6-4692-a0b7-9cacc72f36df"
        },
        "item": {
          "id": "710d31d2-0e3f-4922-9983-65dbfb6859ff",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a68553bd-8b2f-42ab-8368-0b884c5e7a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05ad22e-eedc-4817-9fb6-527666f78206",
        "cursor": {
          "ref": "1277abe6-ff84-46fb-b6fd-83af467112bd",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5150bf5d-33db-4a86-9ed2-93d588a94bd7"
        },
        "item": {
          "id": "b05ad22e-eedc-4817-9fb6-527666f78206",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6d65fa99-9498-4cef-afc3-e543883df308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6718d93-2156-450f-97d8-4d81c9302871",
        "cursor": {
          "ref": "26bbc927-c9ee-48bf-9fcf-61b664fe882f",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2889b76a-d0c0-4242-8787-9f8c0a9d361a"
        },
        "item": {
          "id": "b6718d93-2156-450f-97d8-4d81c9302871",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7e8c3abc-8733-49be-b5fc-f857e4b0edf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9ead27-5d6f-4312-9ea7-3964d2f3e1de",
        "cursor": {
          "ref": "c6bff52e-3192-4857-8814-b0edf7e255bc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4c489083-1959-434d-824a-099100590d19"
        },
        "item": {
          "id": "4b9ead27-5d6f-4312-9ea7-3964d2f3e1de",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4e4f1d6f-aa02-4bb2-ab43-d78afc2bbeac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e763ca6-f77a-4544-bc92-df8d069e76a7",
        "cursor": {
          "ref": "6c688147-825f-4393-9317-b77e2ff1b6d2",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8b7c9188-808c-4edc-bb8d-e4fdf49c2fd3"
        },
        "item": {
          "id": "3e763ca6-f77a-4544-bc92-df8d069e76a7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "786340ac-bf74-473c-aa94-36d7b01fb43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5bafa2-9e79-40d9-a8cb-859201ffe1fb",
        "cursor": {
          "ref": "e8526a24-e905-4ecf-9255-c82a59a3691f",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ca3d6b7f-31c2-45f4-9bad-d6d3114a8c36"
        },
        "item": {
          "id": "ff5bafa2-9e79-40d9-a8cb-859201ffe1fb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "386f936f-e81d-45a6-acd8-a40370cc976d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f8a536-e810-4f30-a7a0-81e37dcd4c23",
        "cursor": {
          "ref": "c19375d4-0103-4b48-a383-cc2fe0a7dd2a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0e073107-dfd2-4e37-ba05-8c29b70a7e6e"
        },
        "item": {
          "id": "d2f8a536-e810-4f30-a7a0-81e37dcd4c23",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7918a5f6-35de-455f-928b-466657140f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3ff711-59fe-4d41-b02b-d32e75580989",
        "cursor": {
          "ref": "6a11cbf5-c514-4215-a206-0e628c2593b8",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ae029838-136b-4a0b-987f-12ebcebb619d"
        },
        "item": {
          "id": "0b3ff711-59fe-4d41-b02b-d32e75580989",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "86cdcbd4-6890-4e9e-a5de-0e8974c81a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adc13af-4aad-4882-975d-a8b377a745b4",
        "cursor": {
          "ref": "db736ed8-e734-4970-9e81-84fc42eee491",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5abd6ec8-4462-4e29-8845-e4bc2cb15352"
        },
        "item": {
          "id": "0adc13af-4aad-4882-975d-a8b377a745b4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8d538b69-4ff2-4fbf-97f1-2d703a205da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a213cfa-ec22-4180-b5ee-550c6d496889",
        "cursor": {
          "ref": "dee501c2-ad8e-41ab-86c7-fd5de51b7536",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d68cf2da-0d7f-46c7-8b0c-6c8ba49504dc"
        },
        "item": {
          "id": "2a213cfa-ec22-4180-b5ee-550c6d496889",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "bed9ff65-0b85-426c-89dc-0ed2bd122a8b",
          "status": "Created",
          "code": 201,
          "responseTime": 191,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "730c409d-d4b9-4637-90c1-175185464caa",
        "cursor": {
          "ref": "60c2cbfe-3f06-4e31-bd64-cb319339cd03",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "aa108e65-f4ee-414d-95f6-13de977ddabf"
        },
        "item": {
          "id": "730c409d-d4b9-4637-90c1-175185464caa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6eac58b9-c27c-4815-9aa4-0e094a79ba15",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "32fdf0b3-e629-4c24-9c66-56c0792d700a",
        "cursor": {
          "ref": "1694fbae-bbf8-4dc2-9e64-0ef4d77d745d",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a2f829cf-40f4-4c62-a9cc-3cc9db98d72b"
        },
        "item": {
          "id": "32fdf0b3-e629-4c24-9c66-56c0792d700a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fef725c7-92d5-43bf-8732-2014c7af856c",
          "status": "Created",
          "code": 201,
          "responseTime": 190,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6ba8f742-4bba-4c09-8ed2-78de8872ab4c",
        "cursor": {
          "ref": "5634dbe2-2b78-4c71-80ff-6318c4d89dd1",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "60c42765-1f90-491f-b1bf-c5fc5cfb5788"
        },
        "item": {
          "id": "6ba8f742-4bba-4c09-8ed2-78de8872ab4c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "96f678bf-3715-49a3-b47a-4356a3866155",
          "status": "Created",
          "code": 201,
          "responseTime": 186,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "910b09a6-5fc1-48ab-9d8b-f6b9a2bcfb94",
        "cursor": {
          "ref": "95cdf040-49d8-4942-8206-cfed10237582",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4416da5d-dfed-4511-bd20-dca6874fa6bf"
        },
        "item": {
          "id": "910b09a6-5fc1-48ab-9d8b-f6b9a2bcfb94",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1f40502f-4b0a-42b9-af72-fc6536a0c84e",
          "status": "Created",
          "code": 201,
          "responseTime": 209,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0bfc4028-ba08-4f2b-a078-fb951fec7d61",
        "cursor": {
          "ref": "c70fde22-f23c-4075-bbf8-78fc8b6a7133",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fd9d41f0-2e0e-40ed-ad0e-54ad5da04f66"
        },
        "item": {
          "id": "0bfc4028-ba08-4f2b-a078-fb951fec7d61",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5bdff709-9919-4586-8390-20349834f041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ef62e2-942f-4fc8-8197-3808964c1b9d",
        "cursor": {
          "ref": "084dd917-beb4-497a-8388-791a33fb7223",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "140c44c4-8c16-462d-ab86-624210e82dc6"
        },
        "item": {
          "id": "50ef62e2-942f-4fc8-8197-3808964c1b9d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3f2af281-f023-4005-9273-46ab27303e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aedb6dc-5736-4e2c-96ff-1cb87a7c3536",
        "cursor": {
          "ref": "8113606b-04f1-4a46-9bd2-54c14e3b17b3",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "faef14ee-83bd-4fd1-8136-90ff0e5c9c52"
        },
        "item": {
          "id": "3aedb6dc-5736-4e2c-96ff-1cb87a7c3536",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a59b0a0c-59fb-4901-a219-f0f910bce2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc438835-5ac8-4760-b4b6-838bc0466fc9",
        "cursor": {
          "ref": "2ca57d3f-2096-4bc3-b3ca-2783896c07c3",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "53ada0fc-074d-49c6-8fc1-9d7f24ecf310"
        },
        "item": {
          "id": "dc438835-5ac8-4760-b4b6-838bc0466fc9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "adcdf571-d650-47c0-98e4-53beed53a975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc5ef91-e977-4eb3-8c59-0c953b501855",
        "cursor": {
          "ref": "b181d51d-8957-41e7-8d66-759f78ec1e09",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e38fdace-6826-4a8d-aee8-b9b100155bdd"
        },
        "item": {
          "id": "5bc5ef91-e977-4eb3-8c59-0c953b501855",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "114a9272-0f88-4473-b766-ddbfdf88e030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bce7899-c465-4d6d-9ebe-7cabca83f52f",
        "cursor": {
          "ref": "920abd1a-47cd-4cf5-84d1-048b4b8ffd66",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5378b5df-f67e-4e53-8e50-9241b16ecea5"
        },
        "item": {
          "id": "5bce7899-c465-4d6d-9ebe-7cabca83f52f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fb00b4ee-b267-4ea0-adff-d315de683273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6475f05-b4a1-4391-a550-15084298ee78",
        "cursor": {
          "ref": "ae17e36e-a3a7-47d4-932b-83e4d7ecceb2",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "36d5a1b9-4412-43d1-bced-738706b02f2a"
        },
        "item": {
          "id": "c6475f05-b4a1-4391-a550-15084298ee78",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b6189dde-a2f5-4c53-8b0b-131b72213506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59bd41c-b9f5-46e9-a5ff-8ee40bb7013f",
        "cursor": {
          "ref": "ba0e632e-77b8-4c2e-be23-3ec573c73ebb",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "26416145-73e4-41d9-894e-48ccd903cd2b"
        },
        "item": {
          "id": "a59bd41c-b9f5-46e9-a5ff-8ee40bb7013f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "684bc578-9fbf-43bf-9472-6ed56a2d0354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33779ec1-4ada-4128-8274-6cddf6be0634",
        "cursor": {
          "ref": "b57a8e16-191e-438d-8e70-41cddcd95f33",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d34544f2-d617-46db-a232-4aa4a77bccf3"
        },
        "item": {
          "id": "33779ec1-4ada-4128-8274-6cddf6be0634",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c78a8429-d73a-40bf-b52e-473c4f87b6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48c455f-a4e9-4b75-a0b9-35e8c8dca7f5",
        "cursor": {
          "ref": "a1c0eaf3-58cb-4d0c-a640-e05ea58b5eae",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0f58326f-02a7-4d63-97be-95248317b1bd"
        },
        "item": {
          "id": "e48c455f-a4e9-4b75-a0b9-35e8c8dca7f5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ed67e8d7-f4a1-48f9-83fa-230112aba5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df070434-7952-4b7a-b35b-6888f9675a14",
        "cursor": {
          "ref": "d45623e7-2ff4-4444-ac5e-c4855b0d074b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a1a01bd7-07fc-4bd1-902f-cf9e7eee6a68"
        },
        "item": {
          "id": "df070434-7952-4b7a-b35b-6888f9675a14",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "57f37437-66e4-49a5-b177-4946d287d1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfe22c6-9b2a-49f3-88ad-f6a5bdd992d5",
        "cursor": {
          "ref": "a4b83a7c-a407-4db2-bbbe-b6a970e91b68",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b03f39d8-ba80-4a58-a84f-1bc524751a45"
        },
        "item": {
          "id": "4cfe22c6-9b2a-49f3-88ad-f6a5bdd992d5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f2aef841-fa43-47e3-a7ab-47a5fe2cf27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9b6e15-20b0-4cd9-b6da-ee927017ed98",
        "cursor": {
          "ref": "32496a9a-f589-4d66-b8c4-1a4814431230",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "92e4ba8f-cdb3-4df3-b7af-0f3efb47a021"
        },
        "item": {
          "id": "5d9b6e15-20b0-4cd9-b6da-ee927017ed98",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d9d87beb-bb3b-4c2a-b7b0-4888fd76773c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7e4613-2f4d-4a1f-b7b9-83e54647b6f9",
        "cursor": {
          "ref": "0cb48ce6-516e-4fa3-adc9-b4c5c35bec0c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9aa7d5c8-ac95-4004-8d8d-0ef3f8d6756f"
        },
        "item": {
          "id": "4e7e4613-2f4d-4a1f-b7b9-83e54647b6f9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "afa6fc3e-80fc-4db3-9c8d-59bbc5fdf05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16dc8a48-cbf2-47da-af62-717ee141a990",
        "cursor": {
          "ref": "a234aaf1-7288-4aa4-8e2b-edcc44d67a27",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "393e7bc9-d20d-4474-bbc3-10396b3e7053"
        },
        "item": {
          "id": "16dc8a48-cbf2-47da-af62-717ee141a990",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "43408fb4-e57e-49b4-8d46-01a1dc356d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19180a46-495d-4c91-93e4-724f08976d38",
        "cursor": {
          "ref": "d1536ccc-9e45-42ad-a4f1-1353a8a93a0a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fed9b43e-4f62-428c-a8ca-a87849b3237f"
        },
        "item": {
          "id": "19180a46-495d-4c91-93e4-724f08976d38",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b233bb1f-76e3-4038-927a-1e715e2c13fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c33339-6a45-41e4-9fd7-6d9fae88c061",
        "cursor": {
          "ref": "0f7d262d-75c9-474b-954b-62d7042e0cf9",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "516bf20f-7fd9-4772-b07f-2206ed83f6b8"
        },
        "item": {
          "id": "46c33339-6a45-41e4-9fd7-6d9fae88c061",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "045358a9-ca88-48b9-8e79-a1713c02b41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5ea203-9c04-4eff-af06-228ed7c89770",
        "cursor": {
          "ref": "d1a0c418-1382-4788-9f3c-1d6fcd8bc97e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "01f0bcb2-49f4-4170-871e-3c37802bf85e"
        },
        "item": {
          "id": "5d5ea203-9c04-4eff-af06-228ed7c89770",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c2563a16-e226-46d3-9a62-ba0e8e3f86b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b801df47-8f9a-4276-a61c-054ae78fca0a",
        "cursor": {
          "ref": "6d8fedb7-240f-40b0-a161-0f034f0551df",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1a04b672-a0b7-4da4-9a5d-701e16e14e5f"
        },
        "item": {
          "id": "b801df47-8f9a-4276-a61c-054ae78fca0a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9b44db49-b87e-4372-9176-cf8e743736c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b93752-070a-4f2e-b958-c89305454120",
        "cursor": {
          "ref": "c7261318-44ea-440a-afcc-f5c70d2b61a1",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3581eae4-228d-48ad-ad24-ed156b752e02"
        },
        "item": {
          "id": "f7b93752-070a-4f2e-b958-c89305454120",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8283f904-c8a0-43a6-b748-338d1eb107ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff76577b-d256-46db-9622-f37a819c5ab5",
        "cursor": {
          "ref": "fcce4bab-ce87-49b4-bbc8-84ffed027b49",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4697a5c8-9f6f-4491-a5ab-cce230b15c63"
        },
        "item": {
          "id": "ff76577b-d256-46db-9622-f37a819c5ab5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7125a24c-faca-4c7f-a439-af7be83ec3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc0664d-2112-48fa-ada8-b28d63bf553b",
        "cursor": {
          "ref": "9a6d9ca3-1092-4f81-962b-294784595ee2",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4d76a06e-479c-44a8-a56b-e026389a4e0b"
        },
        "item": {
          "id": "5fc0664d-2112-48fa-ada8-b28d63bf553b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7ab9c9c0-d76a-4ef4-a333-aa571764f714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4292f7e2-de04-4abc-90cd-096386b05ac6",
        "cursor": {
          "ref": "bea6953b-93bf-4ba2-87d0-3cd39a669d75",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "04edb412-2e9a-42d5-9176-e05ccc2c567a"
        },
        "item": {
          "id": "4292f7e2-de04-4abc-90cd-096386b05ac6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "19ceb2fd-9d69-4039-9f79-5ee8eec4539e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7de25e-4975-4b08-9d0d-908c70840aa1",
        "cursor": {
          "ref": "c825d16e-87f2-42f3-96c7-fec3956cb87e",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a884f1d6-e380-440a-b8be-eafe18163e9c"
        },
        "item": {
          "id": "7b7de25e-4975-4b08-9d0d-908c70840aa1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a837ff65-6f92-47a8-9daa-c9515be9a422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845c1481-c4e5-460c-9a2b-bef3d4173601",
        "cursor": {
          "ref": "f91a1dc4-0599-46a4-b931-734621c30dc8",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6db90c19-85e1-4f75-956c-dd8999dfac85"
        },
        "item": {
          "id": "845c1481-c4e5-460c-9a2b-bef3d4173601",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1c3e5f38-fbe7-44d1-88f0-122117d56b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902baab2-9258-4504-bc43-6e43f7bbedef",
        "cursor": {
          "ref": "88b0f4f9-6684-4e62-9339-969464fa8f35",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "40355692-0afc-424f-85aa-2bc6ec8a291a"
        },
        "item": {
          "id": "902baab2-9258-4504-bc43-6e43f7bbedef",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c4b628dd-2f8c-4d32-854a-987212389ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e62315-89ca-470a-b412-d286357839c3",
        "cursor": {
          "ref": "eae7565d-ea9e-4208-9aad-0ae64636f994",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "74eed6b2-33ff-47c5-9a61-414add2eb2fc"
        },
        "item": {
          "id": "71e62315-89ca-470a-b412-d286357839c3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bc55da07-8ddd-4397-9925-5d7d0f41fb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b46a214-06f9-4b23-9d18-08819b6b6fcd",
        "cursor": {
          "ref": "10629349-0901-4f73-8c24-a7cb53bb119b",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a7f00c70-af47-4522-92c1-34d7b6eeeb15"
        },
        "item": {
          "id": "4b46a214-06f9-4b23-9d18-08819b6b6fcd",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "93e4d7b5-1a6a-4b49-af68-a6d84aa3b0a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb115d1c-f00e-4552-9a5e-e9fbe11a8a15",
        "cursor": {
          "ref": "ab4907b4-7174-4762-aea5-21db854db434",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "75ba29c5-c016-4c4e-a790-4afdffcc2826"
        },
        "item": {
          "id": "bb115d1c-f00e-4552-9a5e-e9fbe11a8a15",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f55ab7f8-ec47-4ce3-b168-087ad1b368fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "addda151-9e2a-420c-b69e-3872b914cb5a",
        "cursor": {
          "ref": "5c8d720c-53df-42d7-8085-d0f90db1c029",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b0d8ab82-1e8a-4cc0-b870-4d9ab057210f"
        },
        "item": {
          "id": "addda151-9e2a-420c-b69e-3872b914cb5a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e81e5e4b-61d3-4d12-a387-71f8bfd4a4d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4646f001-8a1f-4840-be58-e3d124a92122",
        "cursor": {
          "ref": "dd48527d-7232-44f5-b80e-fb5eda6817e9",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "13a87fec-e454-45e4-a143-eb7776ba164e"
        },
        "item": {
          "id": "4646f001-8a1f-4840-be58-e3d124a92122",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3f0c10f0-c24b-42d8-a5ee-30f028d11305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e89296b-4874-4926-93de-b6e71d9857ad",
        "cursor": {
          "ref": "eee65a56-a85c-444e-97e0-70627beb5b47",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "468a40bf-811c-4cf2-bb59-a28ddf8cf555"
        },
        "item": {
          "id": "2e89296b-4874-4926-93de-b6e71d9857ad",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "70e7f873-ce31-4ffd-a4c1-8710f4c670ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8d7f76-ef4f-43a8-b934-7b7f832343fa",
        "cursor": {
          "ref": "156a050d-a318-497a-9008-7aea01ccecaf",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9388f252-5fd2-4ee1-8059-fa8d82568b4b"
        },
        "item": {
          "id": "8b8d7f76-ef4f-43a8-b934-7b7f832343fa",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7eb667e7-3bde-4579-a84c-b6530b28be2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "3f34f1bc-f895-40c7-b4da-5951865a0b28",
        "cursor": {
          "ref": "ddaed3ff-38ef-43a2-80fc-58eac7a633f7",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "278adb52-3782-4ff2-b92c-123f41bfae5a"
        },
        "item": {
          "id": "3f34f1bc-f895-40c7-b4da-5951865a0b28",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7bdd6b19-7471-4805-a6d3-fd3b00e11523",
          "status": "Created",
          "code": 201,
          "responseTime": 209,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "44630fcc-fb5c-451f-9687-d77a9b5667b2",
        "cursor": {
          "ref": "0d5db4fa-4a6d-4277-8740-2a964bf921b0",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bbc1e624-af87-4f37-b059-0480720d0048"
        },
        "item": {
          "id": "44630fcc-fb5c-451f-9687-d77a9b5667b2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4c0461ec-0bd7-4a1b-ab67-e7f52fccc569",
          "status": "Created",
          "code": 201,
          "responseTime": 204,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "264bd41f-0211-4908-863c-abf00f4d6fbd",
        "cursor": {
          "ref": "194fd56e-2f99-43d0-a61a-3153f6c80a19",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ff83af72-887f-4eef-a166-7691015ca6b6"
        },
        "item": {
          "id": "264bd41f-0211-4908-863c-abf00f4d6fbd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "902f8fef-3872-4b2e-963d-ca005c6b07c9",
          "status": "Created",
          "code": 201,
          "responseTime": 191,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "406a766e-953b-4db1-9909-aa097858e470",
        "cursor": {
          "ref": "905879b0-3313-43ba-95e9-ad0f2982c754",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3ddbbfe0-5fd6-4ce9-858f-eccbda8498ef"
        },
        "item": {
          "id": "406a766e-953b-4db1-9909-aa097858e470",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9d5e1a3c-f601-499e-9380-00fe97857ec0",
          "status": "Created",
          "code": 201,
          "responseTime": 188,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfe26b2-8a99-42a3-bdb2-68548ec77754",
        "cursor": {
          "ref": "2e967ea0-1e68-4a13-abf9-7710be028576",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b022c15a-650a-403b-9de1-36bda2e21fb1"
        },
        "item": {
          "id": "edfe26b2-8a99-42a3-bdb2-68548ec77754",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b4cac2e6-dcc3-40d4-aaa9-d1d0a6f748d3",
          "status": "Created",
          "code": 201,
          "responseTime": 187,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-01T00:38:54.159Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-01T00:38:54.159Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7ec13fdf-09a3-440b-b58d-7ceee1bb2d90",
        "cursor": {
          "ref": "1103afee-0cd0-4395-ac2b-79ab8e552d68",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cff8740b-ff10-4e40-9392-10caddfcfde4"
        },
        "item": {
          "id": "7ec13fdf-09a3-440b-b58d-7ceee1bb2d90",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a9d2e98a-bab6-4e1d-827d-e3fc84d32f34",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64edc6b2-a0b4-44df-934d-dc5e546db6a0",
        "cursor": {
          "ref": "c86fe706-9066-4aed-9bd6-1dd5b3e2472f",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f5e2805b-dd70-4708-aff6-4afbe9f71e66"
        },
        "item": {
          "id": "64edc6b2-a0b4-44df-934d-dc5e546db6a0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "606e0897-2975-4e45-9f99-a8962167a0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46010148-327c-4d92-931c-d2557bc95e18",
        "cursor": {
          "ref": "5d85565c-c939-4871-99b1-d3a3199898fb",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3addade4-16a8-4dec-a281-ba38b2a05404"
        },
        "item": {
          "id": "46010148-327c-4d92-931c-d2557bc95e18",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "18c80c07-4c87-4afa-a596-15de86c4d4d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a3beeb-076c-4bf4-9bbf-794ec9bb685d",
        "cursor": {
          "ref": "c1f84336-3979-4f97-a355-b6f9968d0e2f",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bdd15b28-9e8d-4622-bb8a-fb2746e0b25c"
        },
        "item": {
          "id": "61a3beeb-076c-4bf4-9bbf-794ec9bb685d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0b4643cc-a504-49b6-a240-cff55cc0963e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3678c652-d7c1-4116-9c4c-28d01d4340fc",
        "cursor": {
          "ref": "72d1d459-1e8a-4d01-b917-943847c72891",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "41000e23-76b8-48fc-9d57-83a1127e881a"
        },
        "item": {
          "id": "3678c652-d7c1-4116-9c4c-28d01d4340fc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f089b90a-7ef1-4383-8888-4dd742b8e67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f76ee25-8d00-4cf3-ad63-cd451a701207",
        "cursor": {
          "ref": "f947abdf-00de-463f-83dd-f22314be5f1a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8b449143-98a2-4f32-b01a-4e2c49cd5ac5"
        },
        "item": {
          "id": "4f76ee25-8d00-4cf3-ad63-cd451a701207",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "87579204-3709-4782-b23d-df5d104b830c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9f7609-1259-4b75-b5c7-c060884ae9e4",
        "cursor": {
          "ref": "dc9009f3-da70-48bf-9ad2-5908a5ccafe7",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c1435ade-6caf-4dad-9b86-09a05bfeedf9"
        },
        "item": {
          "id": "ac9f7609-1259-4b75-b5c7-c060884ae9e4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b5faf693-5aee-4c79-a68b-499a218272f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43eb5e12-0582-4fa6-bf3d-a4cb27d0f4d5",
        "cursor": {
          "ref": "a7860eb4-1173-412c-a267-95b259c442c8",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ba3d7a8b-0f3c-474d-915a-f4f175cad965"
        },
        "item": {
          "id": "43eb5e12-0582-4fa6-bf3d-a4cb27d0f4d5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "afb5a532-2696-4ff9-97b9-5abb6d5e37a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a7be2d-73f1-4f4a-8116-9de9632c32e1",
        "cursor": {
          "ref": "b0c4dd44-ad14-47fe-9802-81eecd973579",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0f0c825d-fea1-4e54-a85a-2203b19c3d65"
        },
        "item": {
          "id": "94a7be2d-73f1-4f4a-8116-9de9632c32e1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fe632b95-672f-4e90-b056-d17bb07de2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84851041-4605-46a6-a7b9-13301e221b57",
        "cursor": {
          "ref": "690d9a76-e556-4844-8570-8f584c7217ae",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c62d47e2-f049-4f43-a1e6-fad47df97ff2"
        },
        "item": {
          "id": "84851041-4605-46a6-a7b9-13301e221b57",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fb4e3e53-1025-4893-a0fe-edfd32031cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa42d23-4ba4-4cdb-bdd8-971f189fb552",
        "cursor": {
          "ref": "a8caeb5a-a2d4-45bc-9d49-3d5fdb7f606a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "45be7c52-0e31-4167-add0-ece8b8b16383"
        },
        "item": {
          "id": "ffa42d23-4ba4-4cdb-bdd8-971f189fb552",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "eaee38dc-2ff5-43e5-a5a7-d5a81ab24ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75dfafb7-98f1-444f-babc-49857f0ee074",
        "cursor": {
          "ref": "37dd78bd-a2d9-4b9e-b1e7-0b9752bc5582",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "691b30a2-a3f9-46df-bc25-4dbc2c2c373c"
        },
        "item": {
          "id": "75dfafb7-98f1-444f-babc-49857f0ee074",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fcc2a5d0-9fbc-48eb-a6d8-cc88f072eb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd088416-687e-4be6-9ad9-c2cc3438d637",
        "cursor": {
          "ref": "db9cc59f-51b4-4fee-bd0a-1884359591f7",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "08620df0-87c1-4986-9833-41b4d2077e2e"
        },
        "item": {
          "id": "fd088416-687e-4be6-9ad9-c2cc3438d637",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8862825e-ac8e-4d96-8781-e22b56df61d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5f155b-42ae-4462-8496-c481c123031c",
        "cursor": {
          "ref": "2f251e3f-48af-4607-8d21-3d687027275c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f0eaff21-5d1e-432a-9e1a-ecc7cbd6d834"
        },
        "item": {
          "id": "ab5f155b-42ae-4462-8496-c481c123031c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "649328c5-3f98-4ac5-a889-42ed5115a46e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "54590de3-12e8-4c6a-8047-df07f6850731",
        "cursor": {
          "ref": "e0871156-691c-4117-8a3a-8363da5a1754",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9e468dca-4a1b-49b8-9426-450fc57746ea"
        },
        "item": {
          "id": "54590de3-12e8-4c6a-8047-df07f6850731",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "31fc4e27-962b-499b-86b0-16c25495e806",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "92eb8253-cb60-42a4-a76f-4709ad23de86",
        "cursor": {
          "ref": "f5e50680-fc85-4d7f-87a3-41689a01938b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d89d7ca6-f397-4c3e-8e21-acfacf9988c2"
        },
        "item": {
          "id": "92eb8253-cb60-42a4-a76f-4709ad23de86",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "31dab1ca-6740-4247-b234-45fa9cbe9bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3fa944-2d78-4d26-a9a9-2e248ff199ac",
        "cursor": {
          "ref": "960e3cd5-91dc-4e37-b00b-83fa9d82830c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f843120f-6356-436c-88f0-8c93e102ee7e"
        },
        "item": {
          "id": "cb3fa944-2d78-4d26-a9a9-2e248ff199ac",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "967b9be6-a171-4ac7-9889-f33a9d0de4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35424a6-d150-4dc0-845a-db5e283999e7",
        "cursor": {
          "ref": "64540032-98e7-41fd-b262-fde071ab4189",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6f049fa6-b40d-4b66-9544-588127a4a04d"
        },
        "item": {
          "id": "f35424a6-d150-4dc0-845a-db5e283999e7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d9e14211-75b8-443c-8c32-881ae36e6ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5419df86-95fa-472e-a280-ee0d719ce881",
        "cursor": {
          "ref": "0c92ce11-16c7-4264-ab1a-56594fc0179f",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "aede8a2b-203c-4deb-bc1f-ff8cfddfc98c"
        },
        "item": {
          "id": "5419df86-95fa-472e-a280-ee0d719ce881",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1537af85-c02d-464b-913f-49f941f9f1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da38b66-c264-4a37-901d-ef2d7ee8790d",
        "cursor": {
          "ref": "e23b80b2-2b3a-43a2-9e08-e07ded442e1e",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c443663e-8e06-4239-adba-60367dd4e53a"
        },
        "item": {
          "id": "5da38b66-c264-4a37-901d-ef2d7ee8790d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "125f4be7-4488-41b8-abdf-6f8d92a5c5cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f04eb3c-7d41-4a47-9dd9-de60d7d31e18",
        "cursor": {
          "ref": "c4ff0b52-6c98-4815-88ba-8719283165c0",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "12aa8893-32b7-434f-a235-fb10d3f660ab"
        },
        "item": {
          "id": "8f04eb3c-7d41-4a47-9dd9-de60d7d31e18",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9de423af-86e3-4a29-9067-6d60aa636a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afcc64a8-c7c2-4a40-b689-707960bb12f6",
        "cursor": {
          "ref": "e3af9028-d1a7-4ee8-a32f-7d46ca44777b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a3a13e13-e5b4-47ed-bb1d-b0b1ca67bada"
        },
        "item": {
          "id": "afcc64a8-c7c2-4a40-b689-707960bb12f6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "af747acb-79ea-4e74-936d-a5e7a62cf5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44acf20-c129-4213-907a-53af28aec721",
        "cursor": {
          "ref": "d94a232c-c579-4eff-ad02-08858ff3e264",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3e4d9034-cd5e-4184-a9e1-440d9f914b6d"
        },
        "item": {
          "id": "a44acf20-c129-4213-907a-53af28aec721",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fb8c97e7-bdab-4a15-93bb-7604efdeffed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b77b31-de74-4c6b-941b-f91fb94fa0fd",
        "cursor": {
          "ref": "a93033d5-3e64-4062-bb46-b89689424bd1",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b23d6b53-269a-4169-b491-e69d22f96aba"
        },
        "item": {
          "id": "d1b77b31-de74-4c6b-941b-f91fb94fa0fd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b5aa993e-6568-4147-b72c-2955e01bad29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b582d8be-9690-486f-9d4d-f234e750887c",
        "cursor": {
          "ref": "36139bde-4d4e-4426-9b9d-d797d8bf6170",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f618c9c7-751c-4120-b978-1696276a8205"
        },
        "item": {
          "id": "b582d8be-9690-486f-9d4d-f234e750887c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "85fa070d-9e0f-400b-ba53-c5424bc599c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f921ed60-46a1-4ef6-ae95-00af1ba41ad5",
        "cursor": {
          "ref": "aad6dbb8-3f89-4c79-ba9b-64b6f2ee1468",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "af1be04f-b7a3-42f9-abd2-51e8a6d9fb18"
        },
        "item": {
          "id": "f921ed60-46a1-4ef6-ae95-00af1ba41ad5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "34706fb1-0098-4fe9-af25-ed5d3d123bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aac5d6e-fdd6-4953-84ba-faaf2f8b50e1",
        "cursor": {
          "ref": "40672c42-5917-4f4b-a0e6-9e5b3e882b15",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1f29dbd5-c355-4dfa-a01a-1fb7f5bbb1e9"
        },
        "item": {
          "id": "0aac5d6e-fdd6-4953-84ba-faaf2f8b50e1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ca5e8634-a61e-4954-81d8-81a2981d747e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50aca99-cac8-43c2-b38b-217cfba54c8a",
        "cursor": {
          "ref": "1137ab49-27af-4ee0-8785-3c73c2d5fcbf",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7f45c542-60ad-42f0-ad68-3154fc09ab2d"
        },
        "item": {
          "id": "e50aca99-cac8-43c2-b38b-217cfba54c8a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "48ccdc8c-34e9-4e29-8d2c-9371eee75d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f26dcf-52a8-428e-af6f-5b438336ac88",
        "cursor": {
          "ref": "4ce8abd9-c7cd-4558-9d95-edea43c81e95",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6d608502-b1eb-4fcc-ad78-1a1ef6fa7995"
        },
        "item": {
          "id": "05f26dcf-52a8-428e-af6f-5b438336ac88",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "182db2bb-c221-446a-8086-7f5b20fdfc5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da897cb3-df05-4043-9c13-ada4abd55c1a",
        "cursor": {
          "ref": "920a2e2c-b767-4f51-9254-e2b51111b7b5",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "efb36819-22bc-4f7b-9a92-309cda6615c4"
        },
        "item": {
          "id": "da897cb3-df05-4043-9c13-ada4abd55c1a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5b494db2-5079-48fb-8f42-a033a047c384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e413c44a-9a3f-4220-8332-89844559d29a",
        "cursor": {
          "ref": "56e19614-e0d0-4552-beda-9837216c92d4",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5dfc6afa-5b1f-4e3c-ba96-26f9f4542a8f"
        },
        "item": {
          "id": "e413c44a-9a3f-4220-8332-89844559d29a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a54c9e20-bc0f-4867-bf54-d30ee6a254f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59ded19-0a59-435a-9d79-9d33e4f3eb12",
        "cursor": {
          "ref": "9c7fd210-36f5-4b9d-b6d3-40f8dad79492",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "332e2d32-69f9-46c4-9822-e11613fe6f93"
        },
        "item": {
          "id": "d59ded19-0a59-435a-9d79-9d33e4f3eb12",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "575b6d6e-9b15-481d-8e6e-402cbb4d1a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf18de8-2f34-4643-baa4-cfc98bfc4180",
        "cursor": {
          "ref": "3b8c29b5-d324-44af-a772-7ecbf5a24fee",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "87edbf0d-414a-4231-893a-e5f278c1eabb"
        },
        "item": {
          "id": "dbf18de8-2f34-4643-baa4-cfc98bfc4180",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3240bd32-6227-4abe-8f64-ebc14e47c17c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bbd3f705-0d7a-49f3-aa55-35ea64981b90",
        "cursor": {
          "ref": "24c96c5c-df14-474b-9c93-d750847e355c",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "adfd810b-43ce-4436-9663-997baea107fa"
        },
        "item": {
          "id": "bbd3f705-0d7a-49f3-aa55-35ea64981b90",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "73447e21-2503-4f90-a58d-54210fdce3db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac499ee-df38-40c3-9230-a697270eb2d8",
        "cursor": {
          "ref": "edb1c371-cd65-4896-8f3f-901587a60af8",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e3218d36-75ff-4300-8ab9-bb090a4dbd63"
        },
        "item": {
          "id": "dac499ee-df38-40c3-9230-a697270eb2d8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d835ecb5-0276-47ac-bcca-a5bc2aeb8103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d168ff61-fa1c-41e3-a430-3bbdd1c77f62",
        "cursor": {
          "ref": "7d70169b-3f5e-4185-b52f-73c2c22a1203",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "aef30399-7908-416f-9704-e4ec99649357"
        },
        "item": {
          "id": "d168ff61-fa1c-41e3-a430-3bbdd1c77f62",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ef6203b6-34bb-4e00-8ecd-5435be0e5f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84dd427a-dc8e-4cf5-ab25-42c58266c1fb",
        "cursor": {
          "ref": "bc0ede64-8c12-4826-b80c-bb6f531ac6d6",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "71ce3bf0-7e34-44df-92e4-348df073ba9b"
        },
        "item": {
          "id": "84dd427a-dc8e-4cf5-ab25-42c58266c1fb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "02a93082-06d5-476a-8c3a-2f7e08d0c6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b509dfcf-f63d-4232-87f8-fbe27edd7e34",
        "cursor": {
          "ref": "e0a32f34-7e16-4e47-8b35-a8dce327025e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "95316e7c-1ec1-44d2-a3ff-49b9451e792d"
        },
        "item": {
          "id": "b509dfcf-f63d-4232-87f8-fbe27edd7e34",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "11422403-ce98-4883-89a2-971e2ee7d915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426c1e8b-e524-4f42-9444-f8385a803229",
        "cursor": {
          "ref": "23a52ca9-d20c-436d-8d12-886499ea746f",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "664654dd-cc8d-474e-975b-b48ae153a02a"
        },
        "item": {
          "id": "426c1e8b-e524-4f42-9444-f8385a803229",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "86351e69-a7b8-4f76-8789-94de49af0e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419202be-d24a-4d5e-8f1b-918849e56cc9",
        "cursor": {
          "ref": "a433156f-6d71-4aeb-a1eb-e5b9fdd09f18",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "090e1170-6943-4cc0-a341-2e7594d46a37"
        },
        "item": {
          "id": "419202be-d24a-4d5e-8f1b-918849e56cc9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d0650bba-6a97-46ad-bf0e-48d8e8c924a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621bab39-0dc4-42d2-8a4a-ed3767f9e76d",
        "cursor": {
          "ref": "5d477939-bc38-4f13-8d79-302a41045c57",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f07537e4-4f6b-4ee2-9e95-5746e111507f"
        },
        "item": {
          "id": "621bab39-0dc4-42d2-8a4a-ed3767f9e76d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0365047e-38c5-41d0-ad87-1d991c9965e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66094416-2940-42f5-b553-9583380ca810",
        "cursor": {
          "ref": "82337175-debc-4f3a-9bc7-b1f9f0ace43a",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d14cb2a0-2766-4740-bb4a-b1d763ed345c"
        },
        "item": {
          "id": "66094416-2940-42f5-b553-9583380ca810",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bce0844c-f264-4370-892f-f6162ed80e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fb1a15-d7fd-4421-a4df-1bd810903c83",
        "cursor": {
          "ref": "250a8c2c-0725-4b3a-841a-8dbc72c84154",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1e9154a9-5a55-4cb1-b6ce-6f90dccc6988"
        },
        "item": {
          "id": "d5fb1a15-d7fd-4421-a4df-1bd810903c83",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0c6fbc8a-cba6-40ba-85e1-34d6c3d9cbd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0813d04-9e09-45a5-815f-dcc04b6aff4b",
        "cursor": {
          "ref": "93ea030f-b37a-4390-a0aa-b4a1740c0b1f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9a685c9d-d04f-4c25-a6a6-a56800ca00f8"
        },
        "item": {
          "id": "d0813d04-9e09-45a5-815f-dcc04b6aff4b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ac0032ab-13f2-4a9a-b4fa-cd31613fd62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02967cd1-14b4-4c83-9e38-ee02a879e9c2",
        "cursor": {
          "ref": "b76a7b71-08de-4f08-be8f-013b98fdb68c",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ee0a9f30-141f-45d9-9689-b8562a448680"
        },
        "item": {
          "id": "02967cd1-14b4-4c83-9e38-ee02a879e9c2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "be771d05-c540-4524-8bf2-6d7b7a3e35df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7269caa-d800-4dfd-967a-61bcb5ed5f89",
        "cursor": {
          "ref": "2bfce586-fe4a-4da2-be46-44e415c1b93e",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "20aeeb32-9d00-447b-850a-1e32ffb12091"
        },
        "item": {
          "id": "d7269caa-d800-4dfd-967a-61bcb5ed5f89",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ae7a5608-0d22-4339-bbc7-33195deacc7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6aa43a-64d1-4f60-8959-cbedf8a1f09c",
        "cursor": {
          "ref": "003dc37a-41c4-41ca-ae93-efefe5a31eae",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ad65d25a-9271-49f6-9657-8d9448d3dd19"
        },
        "item": {
          "id": "9f6aa43a-64d1-4f60-8959-cbedf8a1f09c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e8b702bd-bc14-4bab-ac5e-68f094f73c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20eaef4b-c472-4032-9f3a-eea157512262",
        "cursor": {
          "ref": "6e50b5b3-2136-41d4-9ad1-5082aa375498",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4f73fc23-e43f-4414-a2c9-6ec849ff29ab"
        },
        "item": {
          "id": "20eaef4b-c472-4032-9f3a-eea157512262",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9289bcf4-0398-44e4-8d67-d1f16aaf638f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "5e79d142-e89e-433e-b9d4-916d1e968f75",
        "cursor": {
          "ref": "887c80c8-f088-4bf9-afa9-9689c8961f3b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "14fbf798-602c-4008-a26d-bbbe6a9159f9"
        },
        "item": {
          "id": "5e79d142-e89e-433e-b9d4-916d1e968f75",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "035c7696-02c8-4b23-824f-56153495cc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166b28fd-b396-4bd0-9e78-2b00b268607a",
        "cursor": {
          "ref": "05dc824f-48d1-4e2c-af70-0d000b963193",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "228399f9-0580-4e29-b710-702f0eb691fa"
        },
        "item": {
          "id": "166b28fd-b396-4bd0-9e78-2b00b268607a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1620f305-03bb-40b4-be2e-86a0b7fe109b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317966ba-1bec-4ffa-bc40-6798a55edd2a",
        "cursor": {
          "ref": "cffdba02-f508-4a41-94f1-f77035b0b1b5",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6967564c-d35d-4147-858a-7e723e82d3d4"
        },
        "item": {
          "id": "317966ba-1bec-4ffa-bc40-6798a55edd2a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ab3e18ed-f11e-41d6-94a7-0bc83b8bb918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a3da4f-9270-4e5e-aa18-49205afe32eb",
        "cursor": {
          "ref": "5c7edda5-d4fe-4b1c-a8a0-9a272ce8c48b",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "175185f7-e4f5-45aa-a1b3-d20bdfae8c12"
        },
        "item": {
          "id": "35a3da4f-9270-4e5e-aa18-49205afe32eb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f3163cda-d15e-4cfa-9271-48da780a6a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35c4e12-9870-4c7f-b385-3b4b23a8e293",
        "cursor": {
          "ref": "588e46dc-6e7d-4c5e-895e-8ccabe5ce5e9",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "69ef9a30-dd36-402e-ac72-4f767e433f79"
        },
        "item": {
          "id": "a35c4e12-9870-4c7f-b385-3b4b23a8e293",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "18f30f40-fd12-4627-a7fe-7c7507dafecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19af7f80-9478-4582-bf0d-ebb6b9433154",
        "cursor": {
          "ref": "3c52f061-d689-4fca-9654-8dc89cea48a7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6229b7a9-4806-4c5a-a59f-3c6b8efcde69"
        },
        "item": {
          "id": "19af7f80-9478-4582-bf0d-ebb6b9433154",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "18937e62-b7f3-4fcd-b704-154d87579f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5301e338-a8c4-4a6e-a10f-7e3eb2bc3a5c",
        "cursor": {
          "ref": "01324e49-420b-40b0-82cc-d532f82910db",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "112831e0-abaa-434e-bc4c-6c257c3f28db"
        },
        "item": {
          "id": "5301e338-a8c4-4a6e-a10f-7e3eb2bc3a5c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4c1faaf9-2a19-4d8e-9536-3ae623ea5170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626d4ef1-af2c-4d32-93ba-86703871519f",
        "cursor": {
          "ref": "32027c6d-6144-41cc-b349-950be30e22c9",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1c3d93c3-7972-45d8-8c44-2b0c26bacbe6"
        },
        "item": {
          "id": "626d4ef1-af2c-4d32-93ba-86703871519f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "78ef9f41-6d5c-4f40-8f27-60929300deb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd95794e-b9be-4e57-b31b-bd3ac967153b",
        "cursor": {
          "ref": "6605945c-2ef7-42a3-929f-b27369dd6292",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "071781f5-65ac-4d05-acd4-a62d8ce46aec"
        },
        "item": {
          "id": "fd95794e-b9be-4e57-b31b-bd3ac967153b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "71d17675-3784-406c-a4fd-fb396842732f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1984736d-3925-4a51-86a1-e675cf7d89aa",
        "cursor": {
          "ref": "11d0f9cc-c4a7-4b76-aa17-6a759991e4d0",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5569a8cd-1513-4a94-86bb-b9bcb5f48310"
        },
        "item": {
          "id": "1984736d-3925-4a51-86a1-e675cf7d89aa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9497addf-6233-4ee4-ab53-e8478b670b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37461c91-4a49-4ba4-932d-7dc1879cddd8",
        "cursor": {
          "ref": "fa20789b-85f7-4f56-9e23-66dd9354a43c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8a57b79d-ceed-46ff-ae7b-2360cb6af563"
        },
        "item": {
          "id": "37461c91-4a49-4ba4-932d-7dc1879cddd8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5b540c3a-6fbb-490c-aa04-4ed2f32d7bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a214903-ed36-4056-8e73-54e9b3a742c6",
        "cursor": {
          "ref": "4b94920b-2199-4674-8a3d-3627d68970c4",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "46dc718f-0097-4bbb-af01-a11e49bc56f3"
        },
        "item": {
          "id": "8a214903-ed36-4056-8e73-54e9b3a742c6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a4299dee-6997-40a6-82c1-4cc4a5bf916a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bf6856-d4ad-47d8-98eb-89187927d4b1",
        "cursor": {
          "ref": "aea3279e-f30a-4d5d-819f-02b97ef1cfab",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4e15ae08-99cb-471e-a530-497c3d20c9d0"
        },
        "item": {
          "id": "09bf6856-d4ad-47d8-98eb-89187927d4b1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1d5dd528-4854-4f33-8893-00b4eacff690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c49f28-66b4-4af9-810a-8f814145d571",
        "cursor": {
          "ref": "202b0cf8-8082-4634-ace6-0b96d237b328",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e77682c7-1a71-4cfe-880e-a8c4c6750f04"
        },
        "item": {
          "id": "60c49f28-66b4-4af9-810a-8f814145d571",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "980f373d-38fd-43fc-9c35-d9c44c48492d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe8fa94-0b30-4eb3-a674-3d06d7d785b5",
        "cursor": {
          "ref": "a675546c-d195-405a-8a1d-15011557228d",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ba91c65e-997f-419e-a537-de34a61f7ce5"
        },
        "item": {
          "id": "dbe8fa94-0b30-4eb3-a674-3d06d7d785b5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ec514a51-087e-4be1-9792-b4bc3d5676eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912ef28e-351e-4040-8ea2-f9f7e140eb0c",
        "cursor": {
          "ref": "edc8a490-68fc-4dc8-b4d7-c9a320638d38",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d4657c81-dda4-4255-9484-d7fdd3a01a81"
        },
        "item": {
          "id": "912ef28e-351e-4040-8ea2-f9f7e140eb0c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6f59acb1-fcf2-425b-9921-c43f1d9676d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e3b699-4d38-44a2-9f9f-0ecf54fc3f81",
        "cursor": {
          "ref": "3cee29c9-14af-4718-9f13-1324151d4cc5",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8f697c90-2e85-4bbf-8990-3558335cb4d8"
        },
        "item": {
          "id": "15e3b699-4d38-44a2-9f9f-0ecf54fc3f81",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "07b560ce-b770-4534-ae38-c6ce43f002e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99beaabc-5d57-4774-a076-d0429fad3253",
        "cursor": {
          "ref": "fc579b23-881e-461a-9aa9-ef708d8a35e7",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "00f474f5-fce8-4e1b-8a4d-326d1365b603"
        },
        "item": {
          "id": "99beaabc-5d57-4774-a076-d0429fad3253",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5a88743f-d7e8-45f8-bf74-cbca5e91e189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5473349-3f58-4a54-b98e-3b22f8b681f4",
        "cursor": {
          "ref": "c8bd63ac-19a4-49c7-8f2c-93670f7f36b5",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "00ce0467-e8b8-426d-9d49-d4e8fa0c9058"
        },
        "item": {
          "id": "a5473349-3f58-4a54-b98e-3b22f8b681f4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "bdcd0e4a-ccc1-4ac3-9369-fdc25aee5a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d38fcb0c-745c-4d2a-837e-af7fc4b805a5",
        "cursor": {
          "ref": "a60e14ca-f70a-46e3-a161-4d0c11ce3a99",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "83b6fbba-2dd4-4c7c-af91-79c4afc9e4a9"
        },
        "item": {
          "id": "d38fcb0c-745c-4d2a-837e-af7fc4b805a5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "bfa429ae-1866-4a35-9302-625f5e168b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f599a81-0bad-489c-9281-4a83d74ed5b9",
        "cursor": {
          "ref": "4ff8b3de-3b93-4cca-8e60-a7ea4e0719c1",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3bb9c0a8-1db9-4e20-9c14-e53b19dec95c"
        },
        "item": {
          "id": "7f599a81-0bad-489c-9281-4a83d74ed5b9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ce9d4dc9-c1be-4451-9c21-116e8160e5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06570af7-9f0b-4847-87b1-c5aa5372d9f1",
        "cursor": {
          "ref": "b7a76bee-64a2-4332-89cf-eac12d25da7b",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "02190411-6b77-4e6f-bde9-c65201f0d15b"
        },
        "item": {
          "id": "06570af7-9f0b-4847-87b1-c5aa5372d9f1",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7859e286-7e4c-4dec-9d7b-d3393b2d2b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4449be5e-d0e1-4efa-8681-f916415d8d97",
        "cursor": {
          "ref": "1f3fb7c8-1f64-4856-a4d3-332ceaf02441",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "00d9c77f-f888-4f30-ae81-69ef3bec5105"
        },
        "item": {
          "id": "4449be5e-d0e1-4efa-8681-f916415d8d97",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "daf10153-5869-4170-80ea-7e035161ed7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795f9aa3-a347-4b84-8795-51a9bb5d119e",
        "cursor": {
          "ref": "aa0758ff-613b-464f-ba8e-0a42c027561c",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d57490dd-fa8f-4bf1-8619-5fb47049ae24"
        },
        "item": {
          "id": "795f9aa3-a347-4b84-8795-51a9bb5d119e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "15eff019-2bdc-4ab2-82b3-8980374cb2f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1af90b8-72c5-4ad1-b6b5-5667e636fdc3",
        "cursor": {
          "ref": "dbc99e75-e5fd-4560-8f30-a320a6577488",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "668255c8-17a7-44e4-a87b-3ea502e72c62"
        },
        "item": {
          "id": "d1af90b8-72c5-4ad1-b6b5-5667e636fdc3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e8fa3a0e-ccfd-41a4-820e-88ff47346ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffeba7d2-e8d3-449f-9ba2-cacdb689e56b",
        "cursor": {
          "ref": "d15ee68a-ac14-4914-9683-dccd228d8c84",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c9d006bd-9de8-4ca4-a6ed-c4324f91ebcf"
        },
        "item": {
          "id": "ffeba7d2-e8d3-449f-9ba2-cacdb689e56b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c63654ed-578f-40c8-bb6a-6df7dbcd3e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ca6df0-12b0-412a-a904-b5249253a20f",
        "cursor": {
          "ref": "2e7def0c-29d2-4292-9ca8-582c2f1a9bbc",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e9ab518f-6505-45bf-9d59-e46e2e869591"
        },
        "item": {
          "id": "83ca6df0-12b0-412a-a904-b5249253a20f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4c974241-987a-4bf3-8299-df70bc12190a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fec856-6732-4742-85df-e601660197a3",
        "cursor": {
          "ref": "fde9f3c4-8722-43c3-8481-001dea55b8d2",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7fff8fe7-e826-4911-864d-dd3528ef1882"
        },
        "item": {
          "id": "78fec856-6732-4742-85df-e601660197a3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "137e7e7b-20d9-4576-b27c-0dc5224ca574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc060eb4-fccc-4d15-943c-b99b64fa81c1",
        "cursor": {
          "ref": "2ec46221-5805-496a-a649-cef10da134b2",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3e8fbcd9-3eb8-4d33-8d15-bfd55f038dee"
        },
        "item": {
          "id": "fc060eb4-fccc-4d15-943c-b99b64fa81c1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bdb27c66-0365-4000-a7ed-fd74c07f5b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1314eb-b993-45d5-b9ca-cb26fb299e1b",
        "cursor": {
          "ref": "efba9be4-8936-4b25-9c38-b5bc2233e7c7",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0143c0cf-23b5-4ef1-a669-46d177bbbb0d"
        },
        "item": {
          "id": "ca1314eb-b993-45d5-b9ca-cb26fb299e1b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f3376233-823b-4bca-84fc-d0fc8504158c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c2aa5b0f-6544-4368-a435-ec5d0060ecb4",
        "cursor": {
          "ref": "68b77792-9c9d-4b2d-964d-48c6f5920d0b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7f050676-8fbf-40ac-a132-0fa1717ce4ad"
        },
        "item": {
          "id": "c2aa5b0f-6544-4368-a435-ec5d0060ecb4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fe4ddd84-dc29-435e-920e-c285e2399fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e9f524-ec31-49f9-b7a6-b455a04007e9",
        "cursor": {
          "ref": "140d7cc7-24e9-4465-b6d3-68ba052967db",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a1e69ab3-0069-4f71-bbf6-7ffaf4192694"
        },
        "item": {
          "id": "a0e9f524-ec31-49f9-b7a6-b455a04007e9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "480579aa-908f-4ce5-a369-8707eae434ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eec8fbc-1c2a-46e8-860f-5a220de09e7b",
        "cursor": {
          "ref": "fc2c611b-e892-4e3d-86ee-76e210fdca69",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "73c0c8f2-29c1-49fc-b5ce-eb0b7bc05a83"
        },
        "item": {
          "id": "7eec8fbc-1c2a-46e8-860f-5a220de09e7b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3ff04851-3380-4b28-9689-8ccae26d44c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77541530-b1a6-49bb-b4a0-5fc4400108d8",
        "cursor": {
          "ref": "8d826397-d9ec-4eff-b058-39a447b26b5b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6871639d-84fe-4ec6-884e-ee6190742ac5"
        },
        "item": {
          "id": "77541530-b1a6-49bb-b4a0-5fc4400108d8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9d7e44e6-0c3f-4fa3-8b46-f6221e0c3301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0d1701-6514-4862-8a0b-996972408375",
        "cursor": {
          "ref": "f9592e96-062c-4e5f-9352-0b9f3d9438dc",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d77ad696-8aa6-4cdb-84f2-ff924ada4593"
        },
        "item": {
          "id": "ee0d1701-6514-4862-8a0b-996972408375",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0307d022-1362-4303-b907-1e9a76cfc87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1d7a1e-1f29-429d-b1c2-f7ade6092d15",
        "cursor": {
          "ref": "1623c4ad-1492-4738-830c-eb4058327b07",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e4cd7ce4-6f64-406a-a97b-50e0c9eb88d1"
        },
        "item": {
          "id": "bb1d7a1e-1f29-429d-b1c2-f7ade6092d15",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a54e8ce2-bd98-44af-8f76-c66f2de85cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75ee355-22ce-4695-a6f5-2e300811512e",
        "cursor": {
          "ref": "1088324f-a12b-4860-809d-30808f180405",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "28b4e189-b283-40f0-90c7-baa2bd3bff89"
        },
        "item": {
          "id": "e75ee355-22ce-4695-a6f5-2e300811512e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d21818c4-7a3a-4068-b505-8a241c234ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad33245-9054-44e2-b3cd-5abac62beebc",
        "cursor": {
          "ref": "6c737c46-87f4-4d10-a9b0-f9b67bde14d3",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d52bb569-04d8-4fe6-967a-dfa3cc34614d"
        },
        "item": {
          "id": "0ad33245-9054-44e2-b3cd-5abac62beebc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "dbdc5257-710b-4acd-92af-7f330fcbe69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04174a40-1769-4051-876c-8f4772052bcf",
        "cursor": {
          "ref": "f3de1cca-c68d-44f5-83c9-4e4ef5783e24",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b7312c97-5942-4a38-906b-620581ea3642"
        },
        "item": {
          "id": "04174a40-1769-4051-876c-8f4772052bcf",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b08db603-5897-4386-94bc-fd39c31f9da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ab4dc2-f29d-467f-a058-24ac9c2fa55a",
        "cursor": {
          "ref": "1114298d-564e-430a-9de8-016d45000983",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "045618b6-5920-40db-87f7-de57fd473c95"
        },
        "item": {
          "id": "78ab4dc2-f29d-467f-a058-24ac9c2fa55a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e79f1aa0-a7c7-4d45-ba29-987cc6abf60c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1777f6-e818-487e-9a34-6de58b24e861",
        "cursor": {
          "ref": "dd88d806-d393-4aac-b1d5-fd591ca51f4d",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2d6c0fb6-a3d9-4eb7-b247-f693cf5c9bd7"
        },
        "item": {
          "id": "fb1777f6-e818-487e-9a34-6de58b24e861",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "deeab85a-4562-4d56-9de8-ba0e59ed83d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9c0c08-63b9-4399-9265-aab64d2c61a8",
        "cursor": {
          "ref": "f84c25fe-a819-4885-86e2-badcf100bda4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f66c0074-a6f5-41b1-b698-3fd7bc4b5912"
        },
        "item": {
          "id": "8e9c0c08-63b9-4399-9265-aab64d2c61a8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f4179be4-ab40-403c-bbc3-04441a3094ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ee1c2f-e460-4269-b1d9-d70750c09ead",
        "cursor": {
          "ref": "3de0f6d1-0f00-46bc-8bad-091463918df9",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "39e88777-5fcf-48b1-9845-5e94271997b3"
        },
        "item": {
          "id": "87ee1c2f-e460-4269-b1d9-d70750c09ead",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7ec42151-4db8-4f97-8aba-db32e99f05ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04cdb10-d338-4ecd-90a9-a6081d81c018",
        "cursor": {
          "ref": "7d516a5d-02a5-447b-91f4-732a1e6f8d59",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "999c4ba9-9591-4704-ab33-047700eb7f6f"
        },
        "item": {
          "id": "f04cdb10-d338-4ecd-90a9-a6081d81c018",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "49d7db1f-1922-42c5-9473-96f7e3dfdf60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775e8950-46ad-4b7a-b288-7625eac16456",
        "cursor": {
          "ref": "10c4e484-3a59-4cc0-a2a1-d0224492b9db",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f16009ab-8b3b-44c6-b331-18a2580aabbf"
        },
        "item": {
          "id": "775e8950-46ad-4b7a-b288-7625eac16456",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "19596429-288d-49be-adbb-c1aa2fdb9395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bad0e47-06dc-49a4-a9eb-6c30e418718f",
        "cursor": {
          "ref": "cd6c633a-e799-4ecb-ae99-6c5a905831e0",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "440ee621-8953-4aeb-8988-5105d5cb3d9b"
        },
        "item": {
          "id": "3bad0e47-06dc-49a4-a9eb-6c30e418718f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "eef762a6-09ba-4165-a2fd-38d8a326ad86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698e5bf9-97a5-47d4-95bf-7f3319ed043b",
        "cursor": {
          "ref": "cfa7b4db-ace0-4c92-8c69-6cd0e26b7682",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a3b496cc-d521-47c6-bee1-0fe6d57d1d8c"
        },
        "item": {
          "id": "698e5bf9-97a5-47d4-95bf-7f3319ed043b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c19f656a-d288-42ec-ab1b-ec0708a4060c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ee8c5e-2968-4434-a1f2-31c98ccab315",
        "cursor": {
          "ref": "84b051c5-f7a6-497f-8d4c-7e9e423aa4ae",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9690e0ee-ac6f-4421-81d2-b26b27442dee"
        },
        "item": {
          "id": "f0ee8c5e-2968-4434-a1f2-31c98ccab315",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "52582f20-0e78-4aeb-9544-7252b90a3e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917c6485-2eea-43ec-af55-7892670839ca",
        "cursor": {
          "ref": "91eb8023-9793-4433-91ff-a2fecbf2d9ff",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "77dc6785-78ce-47a9-9cd7-0d74c3fbdf85"
        },
        "item": {
          "id": "917c6485-2eea-43ec-af55-7892670839ca",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6a84f029-27fc-4f94-9be0-1d2d1ec96e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286b83de-f312-47e3-81bd-09d775cbfb64",
        "cursor": {
          "ref": "05f12631-40a7-4fdd-ae06-734b2111d81e",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0dfae720-b5ee-4fc8-aa8a-349a305901da"
        },
        "item": {
          "id": "286b83de-f312-47e3-81bd-09d775cbfb64",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6228e1f6-4f88-4607-9f24-9d4d46010914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8636cb89-f193-4564-a9de-983b7fad7d4f",
        "cursor": {
          "ref": "14e86295-b43a-42af-851d-575635b0fc4a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b0300786-99ff-407c-b53e-52dbdf66b8b6"
        },
        "item": {
          "id": "8636cb89-f193-4564-a9de-983b7fad7d4f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ef7524ab-596b-48da-b951-b2d13313b5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d786b9-343d-48a5-bb72-84b580ce479d",
        "cursor": {
          "ref": "01eacafc-6d60-4a7f-9631-c38eee560868",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3c319e50-a139-4575-9d39-44d7204b2630"
        },
        "item": {
          "id": "51d786b9-343d-48a5-bb72-84b580ce479d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4586ef7c-f853-455d-bd1c-3b1bf0c39949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5432747f-0c62-4431-9c2b-54ef9b574cec",
        "cursor": {
          "ref": "b163108f-18d3-4128-8353-246874c2fda6",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "dce0fe29-9380-4cdd-a9bc-f357de349491"
        },
        "item": {
          "id": "5432747f-0c62-4431-9c2b-54ef9b574cec",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f19e8028-ff4f-4c40-bd76-b5b0b06aba32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e40576-6c3c-44ed-87b9-596c75ea564a",
        "cursor": {
          "ref": "584ca164-1f0f-4fa3-aa5f-5bfa65982390",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "aab30bf5-f9e2-4563-9b86-2ef714df61b2"
        },
        "item": {
          "id": "75e40576-6c3c-44ed-87b9-596c75ea564a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "42ebad7a-6639-4961-bbab-d95bf93c2957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ccf8d31-70c3-43d1-899b-f35d519861a6",
        "cursor": {
          "ref": "38c86984-d086-42da-b11d-23eb1a65f465",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0a6ca513-c3ca-49d1-9929-cd261caaee7f"
        },
        "item": {
          "id": "6ccf8d31-70c3-43d1-899b-f35d519861a6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "741d1799-616d-486c-bb3e-e94a55037ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fb55ee-a79c-49f8-ac88-331f6966fa15",
        "cursor": {
          "ref": "c70af11b-19ca-4d95-8165-b3f142931c29",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "32d26ac2-5043-4526-bec6-38a5779ebf99"
        },
        "item": {
          "id": "a4fb55ee-a79c-49f8-ac88-331f6966fa15",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "38934ce6-286d-472f-9a70-50867ebf508b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79241d4-f68a-4912-9176-68ef78ca05b6",
        "cursor": {
          "ref": "2a049366-6ad2-4aba-8845-4f4518193bfa",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "26b5ec83-6c65-4a27-88aa-1ba312fac312"
        },
        "item": {
          "id": "c79241d4-f68a-4912-9176-68ef78ca05b6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2243ef3c-4eb4-4adf-92bf-a396b726ed9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534a8c80-4e5a-4faf-b8be-6ecaaf0e370f",
        "cursor": {
          "ref": "178e71d0-a2d5-4009-982d-7d37ee593578",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d56b68a0-aa7e-489c-a8a5-7dcf4605d251"
        },
        "item": {
          "id": "534a8c80-4e5a-4faf-b8be-6ecaaf0e370f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "16d9d8bf-27cc-4da6-ada5-cae69f89e636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271cb0e1-5ff4-4315-8cc1-edd545242247",
        "cursor": {
          "ref": "3280b146-36cc-4ddc-bd0a-4f83f055be00",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0966fda9-a0f9-4f15-95ff-70c583891b0d"
        },
        "item": {
          "id": "271cb0e1-5ff4-4315-8cc1-edd545242247",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "93b66a11-40cd-4434-9c3f-d092eed2500a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a3357c-4473-4051-9bce-03ff00cb8cfd",
        "cursor": {
          "ref": "199a74e4-f428-449f-96c9-26e4fbf4d93a",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9fde5c7b-3ef1-4cd2-9732-399883ddb80b"
        },
        "item": {
          "id": "82a3357c-4473-4051-9bce-03ff00cb8cfd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e924f76d-eeda-41b7-af80-e2d90cad88f7",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "65668b33-8ff0-464c-b228-7f5036b0673e",
        "cursor": {
          "ref": "d96276ae-2fb1-4c4e-90c2-93effeba069b",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c247e5bf-1b20-4d9b-9f32-dc172b2d30ca"
        },
        "item": {
          "id": "65668b33-8ff0-464c-b228-7f5036b0673e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c794caee-3f2b-4ebd-83e6-109079294659",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "1b880110-3e7a-45e0-8086-f1f8795720c5",
        "cursor": {
          "ref": "8bd94ade-c952-447b-97ef-d6f30f1dfaf2",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ca739855-43f2-4a83-91b4-1113c67d9420"
        },
        "item": {
          "id": "1b880110-3e7a-45e0-8086-f1f8795720c5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5124e77b-fa9b-4915-ace3-551c451a0ed3",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "66eba252-2dca-4914-910c-b3b09994bd37",
        "cursor": {
          "ref": "fbc67229-bbd3-4b05-8e9a-a627cba65afc",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0d868cd8-1d3b-4ce8-96a2-25ddff5ca822"
        },
        "item": {
          "id": "66eba252-2dca-4914-910c-b3b09994bd37",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8ea76edc-49da-4506-8194-b2f9673edcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55169d97-a378-4a0b-bca0-ec4f77576e40",
        "cursor": {
          "ref": "0afcc9ef-422b-4c9a-a0cf-befe76d15e3c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c5e6fc69-f990-4ee2-9bd7-a3d041e84eb7"
        },
        "item": {
          "id": "55169d97-a378-4a0b-bca0-ec4f77576e40",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "85c77fc8-c72b-4305-905d-aefdedd572e4",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "29b31667-5756-42f7-8bfb-2d7032ad7d87",
        "cursor": {
          "ref": "832a7811-d1b4-4b60-aa6f-f213c0a0dd14",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e24b0c28-0126-4938-99c6-33f8e4b68869"
        },
        "item": {
          "id": "29b31667-5756-42f7-8bfb-2d7032ad7d87",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "fa89f263-d164-4360-9bca-4a1e6a28a6bb",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "69058262-5ced-466e-8468-97bbdcb20698",
        "cursor": {
          "ref": "9d59dcba-4731-4cac-a7c2-5801273a5862",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1b2efe6b-b93f-4526-a152-4cb9aee0158c"
        },
        "item": {
          "id": "69058262-5ced-466e-8468-97bbdcb20698",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "65b90dd6-e95d-46ef-ae87-ae2dbc61be5e",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d77fd9d3-7255-41b0-bb45-a4f5b1c688a3",
        "cursor": {
          "ref": "76b764c1-5a62-4aa2-8ec3-eefadc6fddc2",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "98131957-818c-4256-91a0-815a2b1bcf7f"
        },
        "item": {
          "id": "d77fd9d3-7255-41b0-bb45-a4f5b1c688a3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d181a53c-d9df-4bda-8171-ab4787bc2620",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "978d99af-a181-4596-bddb-1bbaf9ec01f8",
        "cursor": {
          "ref": "b0cf2191-267e-4bc7-abbc-1cf94e376806",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "496d45f2-4738-4993-a68e-7ef500e5507d"
        },
        "item": {
          "id": "978d99af-a181-4596-bddb-1bbaf9ec01f8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aa6c5521-eb94-49e4-bd0e-d42a73f9c29f",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "59e7e1c4-d2ae-4666-bc17-fad31e1031d7",
        "cursor": {
          "ref": "f62644ad-3e5c-40de-b9e1-87d2b917760d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "88a9bacb-55a2-495a-bb6f-f162b0000220"
        },
        "item": {
          "id": "59e7e1c4-d2ae-4666-bc17-fad31e1031d7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a794076c-3404-4dad-9b5b-4711156bc8b7",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "507692eb-9aed-4657-bd7a-5ffe95e55e00",
        "cursor": {
          "ref": "253d13cc-a6f1-43ab-a80b-c07375ee6105",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e528d30e-bab1-413e-951f-ce08421bb403"
        },
        "item": {
          "id": "507692eb-9aed-4657-bd7a-5ffe95e55e00",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "836a8050-932f-42eb-b4d9-0dd7655a587f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6074546-c499-4354-a8fa-1445b74b6a3b",
        "cursor": {
          "ref": "304ffab0-8b69-43e7-9014-919e81df4254",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0a17fb8b-004c-4fdc-9928-979853d96c7b"
        },
        "item": {
          "id": "b6074546-c499-4354-a8fa-1445b74b6a3b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e088f357-1839-4811-bf17-3bc13d89aa33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2375a67-ec6a-4ed4-a025-7accd194a348",
        "cursor": {
          "ref": "0bde2fc7-fc13-4506-9572-be40bd9a4c2f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "466d536e-7316-4382-b8e5-e6958d521a69"
        },
        "item": {
          "id": "a2375a67-ec6a-4ed4-a025-7accd194a348",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "66398851-fbd5-41f3-9a70-fef30f8f208d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90f7917-066b-456b-a04b-bf26327d1fa6",
        "cursor": {
          "ref": "c3787fdf-a7ce-4108-91ed-1cc9a2721fa9",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f170808a-3e1e-49d1-8c9a-8e52d7f142bd"
        },
        "item": {
          "id": "f90f7917-066b-456b-a04b-bf26327d1fa6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1e108d83-99ef-4664-a384-3434ba667078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0b75d2-e7a2-4410-9d8e-972deb45cf1e",
        "cursor": {
          "ref": "9e773688-a6d0-49a0-870c-576fb7e70e24",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b2bff4bb-fe3a-42cd-bd11-9c782b8c7f96"
        },
        "item": {
          "id": "af0b75d2-e7a2-4410-9d8e-972deb45cf1e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f55ebfbd-f7ca-4c7a-92c7-6417de8431e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466c637b-7839-49d4-8372-021343e0b28a",
        "cursor": {
          "ref": "5a01a73a-0f26-4c22-8bed-c705928aa6e9",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dced550c-9a4b-4d73-843c-3dca166daf2b"
        },
        "item": {
          "id": "466c637b-7839-49d4-8372-021343e0b28a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b3e7220d-8a09-4445-867a-9a6ad4b3ed83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f1c490-55c8-4f2c-830b-7407fa46ab40",
        "cursor": {
          "ref": "91c10260-23b9-4194-b12f-fa92236e5063",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1c57139b-6d2d-4e40-bf2e-61be62caccb4"
        },
        "item": {
          "id": "92f1c490-55c8-4f2c-830b-7407fa46ab40",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7d5fe595-2d96-4459-85fa-9f05ebd2e4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06a07d4-6844-4b9f-98e3-62264df944fd",
        "cursor": {
          "ref": "e3d631d9-a908-4db3-ac9f-9f2656034725",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "69a3d931-1b48-48d9-ac76-b078237c264e"
        },
        "item": {
          "id": "d06a07d4-6844-4b9f-98e3-62264df944fd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ead23c5d-80ec-4ff1-a71b-bbf7edba5fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe438020-110b-4eb2-8d3b-59722da8f558",
        "cursor": {
          "ref": "4f40c82d-180b-4b83-b717-52299d03b9fa",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0eb600b9-f719-4d90-9f7f-ab1f189134db"
        },
        "item": {
          "id": "fe438020-110b-4eb2-8d3b-59722da8f558",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1c8f31e7-d20d-46aa-ae0c-3ec72175d60c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579ec58c-56ff-400d-954b-3519243268e0",
        "cursor": {
          "ref": "fa6c47c2-ac00-456a-8d89-bd08b6ead86a",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "17d34625-b7c2-44b3-8c5d-02a57c2c0a9e"
        },
        "item": {
          "id": "579ec58c-56ff-400d-954b-3519243268e0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e7e6511a-429a-48ac-b014-66c651b3f64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6cf0281-491d-40e5-801f-3de60e592492",
        "cursor": {
          "ref": "9797363e-ea1c-4d29-afdb-637a097d9aa6",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3390a759-08ef-4883-a4f4-9046bcac9ede"
        },
        "item": {
          "id": "d6cf0281-491d-40e5-801f-3de60e592492",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "32964eae-8357-4919-ae4f-b16e8d95befd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6a29d1-be0b-4705-a366-0f90e86fcad5",
        "cursor": {
          "ref": "4611fc51-b14b-41ef-985b-b504e278da2b",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ee8e1423-4dac-466d-94ac-c96ac1204d41"
        },
        "item": {
          "id": "8a6a29d1-be0b-4705-a366-0f90e86fcad5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7db9d3ef-f3db-44a8-8727-7d731c34e0a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2528ddd-faa2-4305-a257-564a214748d3",
        "cursor": {
          "ref": "3dc37e97-28c7-4bc7-aa1d-45f9074ab0c4",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ee8bbe77-86d8-4ed6-81e9-1e54c1e4d26f"
        },
        "item": {
          "id": "e2528ddd-faa2-4305-a257-564a214748d3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e8101128-eed8-4327-8b27-6756717d09aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9a68c0-03b0-47a6-87f9-42ca33ada8e9",
        "cursor": {
          "ref": "1f4a426d-32c2-4624-a548-296e48d94a3f",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2c0f2b04-910b-49a2-aed0-837f9cede7c5"
        },
        "item": {
          "id": "3c9a68c0-03b0-47a6-87f9-42ca33ada8e9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "38db9079-817f-4d3e-bf55-cb9b3be4cad3",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "cf531058-7852-493e-9e12-9ac764624c1c",
        "cursor": {
          "ref": "1680fe5c-9e51-4d3c-b604-e6a63888f3a0",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0ec00b26-f2dc-4203-ae12-2087cd2fe0b9"
        },
        "item": {
          "id": "cf531058-7852-493e-9e12-9ac764624c1c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5dc6b1b8-8d14-447c-bd62-81d2452f2018",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "0c8b1e54-9102-43e6-afdf-dfac4b994400",
        "cursor": {
          "ref": "dd88cffe-cd8a-43a8-86e4-42d658e241bc",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "16826dd2-48dc-4881-a04f-aa0748b53d6b"
        },
        "item": {
          "id": "0c8b1e54-9102-43e6-afdf-dfac4b994400",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f85ed019-14c3-45c3-9172-9565c39c1036",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "06a60a2c-c011-42f0-81d2-d8ad2d977c04",
        "cursor": {
          "ref": "1c0cda47-3c6b-4824-91ce-310199213c7c",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "634140c1-822f-4e07-83db-c408de379f27"
        },
        "item": {
          "id": "06a60a2c-c011-42f0-81d2-d8ad2d977c04",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f72d71d6-888d-4118-812b-8679677c942e",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "79c92032-3ed8-439c-b59b-581e942e5cdc",
        "cursor": {
          "ref": "32c1c009-8413-4a8c-89cf-cfeffaa6b221",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "540a6ae3-778e-4685-92ed-6ccd6524eef8"
        },
        "item": {
          "id": "79c92032-3ed8-439c-b59b-581e942e5cdc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7c72da1b-31b8-485f-bb3f-4a084fc45892",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "547f80d8-5a6b-4b72-9292-2566c49e296a",
        "cursor": {
          "ref": "71a4f3b1-7dcc-431c-a0e0-911d586abd79",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "73964816-a99b-4ab7-8af4-d229a8340875"
        },
        "item": {
          "id": "547f80d8-5a6b-4b72-9292-2566c49e296a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "99901b80-65fb-45cc-a5d5-5c3825e24271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9224a0-a83b-42cd-b540-fa171a14d1c7",
        "cursor": {
          "ref": "57054bbd-077b-443b-839a-30b77caf93f5",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2b824990-cd78-4552-b456-52a209555676"
        },
        "item": {
          "id": "6e9224a0-a83b-42cd-b540-fa171a14d1c7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "814b829d-5a1a-4f82-8335-39e70aeea073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48eb029-8136-4659-a3e2-40aaa3bc9039",
        "cursor": {
          "ref": "7eddff7b-149e-4541-b508-e6c559b31445",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "548779e5-934b-41e2-a58f-9cb8b416e7e7"
        },
        "item": {
          "id": "a48eb029-8136-4659-a3e2-40aaa3bc9039",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5da4f8ef-e1ca-492a-a204-4ccb5098cf49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d21397-fcb1-4f29-a3e6-be9906e3f5e2",
        "cursor": {
          "ref": "adc33263-1ccf-47f7-b568-419cf29685b1",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "91fdc2c8-7571-4204-bb1f-ef9067b4fb45"
        },
        "item": {
          "id": "c4d21397-fcb1-4f29-a3e6-be9906e3f5e2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "449454f8-654d-442a-8fda-a308e8fb1ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1324555d-4761-4429-a778-b7ed6c88df54",
        "cursor": {
          "ref": "e6431a0e-4054-4543-9f9e-b4292bc80893",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e50c035b-5c6c-422b-b18f-ae8773431320"
        },
        "item": {
          "id": "1324555d-4761-4429-a778-b7ed6c88df54",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "19a3a074-4a9f-400f-a94a-1fea27edf834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b700b06-f5b4-42e3-80c2-7a5974b64334",
        "cursor": {
          "ref": "7b3de39d-ebb1-4e5b-b56f-724470114572",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1d003809-d8bf-4f6a-b2cd-926aa1c4fa3e"
        },
        "item": {
          "id": "4b700b06-f5b4-42e3-80c2-7a5974b64334",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "42ad0f47-6396-4449-bd57-9733455fe83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916c93f6-ad65-49d5-953e-54d63f359c72",
        "cursor": {
          "ref": "f2842507-a720-42f5-947c-3710a364c88e",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "64d68b0e-9b49-4092-ad73-10e9647f1c2f"
        },
        "item": {
          "id": "916c93f6-ad65-49d5-953e-54d63f359c72",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "fc9b6469-0810-462b-81cc-6b5badc086c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b38d03-04c0-41d4-9ac3-1a6df466e59a",
        "cursor": {
          "ref": "34a1eae8-85a0-4f01-bda5-62b6ff3e4e44",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "80865228-6a33-4146-9a6d-6264c901c724"
        },
        "item": {
          "id": "99b38d03-04c0-41d4-9ac3-1a6df466e59a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d96f4c60-3474-4dcb-b04a-bfb043ebe886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cf1573-dfae-49a4-8427-551cae0af882",
        "cursor": {
          "ref": "bf75f26c-fcfe-4f79-a34c-97e60a98cbaa",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "435a6d9b-270d-4a39-b273-fd9fd79f40bc"
        },
        "item": {
          "id": "e0cf1573-dfae-49a4-8427-551cae0af882",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fd89e554-277b-471e-b1a5-25db5d9b5163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654b34ca-406e-47ce-af61-ec1c43b75d59",
        "cursor": {
          "ref": "f060f939-80a8-4c7a-8cac-76944543ffae",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0f8229c7-def3-4bf4-ac59-0f7d23f54ea7"
        },
        "item": {
          "id": "654b34ca-406e-47ce-af61-ec1c43b75d59",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6949232c-46ac-4370-bb3c-c8fdf2999114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94475f5f-1c30-47e9-a486-24ad1b229eca",
        "cursor": {
          "ref": "b7b7b37f-635a-4cb5-9314-0c35e1bb1fe1",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "43980223-92bf-4a3b-a828-87a95de2f406"
        },
        "item": {
          "id": "94475f5f-1c30-47e9-a486-24ad1b229eca",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a832f963-669d-433b-a017-aa6a415b0ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b68c13-0fc0-4776-9fe1-98414bfc08bb",
        "cursor": {
          "ref": "fcb966b7-d53a-4ed6-b7e2-8855e4ce4629",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "62795fdc-78ba-43f6-9ea9-7b996cbdb47a"
        },
        "item": {
          "id": "72b68c13-0fc0-4776-9fe1-98414bfc08bb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b7fd698c-e713-4557-aa82-f83f152538bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221108f6-a3ab-40c5-9f90-d673803a9bc9",
        "cursor": {
          "ref": "4473c135-9f38-4b63-8baf-c46c0f994237",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3a9edd4a-09ef-4437-bada-eba4310acf8b"
        },
        "item": {
          "id": "221108f6-a3ab-40c5-9f90-d673803a9bc9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4de033ff-21d1-4235-a9eb-6b760b54ad0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f45526-48dc-442c-b18f-77662d39e976",
        "cursor": {
          "ref": "a15ad1a0-057d-443b-93d6-0b3081108c8a",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "10fc5945-70c4-4592-b88e-653e7531675e"
        },
        "item": {
          "id": "d2f45526-48dc-442c-b18f-77662d39e976",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "66a7b870-c894-472f-b5d9-79b46d796b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a414ef79-ed7f-47d5-8e84-091dd8151e09",
        "cursor": {
          "ref": "2cfa9bf1-25ef-499e-831b-d5c9aed272f6",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "3534db8d-9ed0-4d14-9269-a41e0557b336"
        },
        "item": {
          "id": "a414ef79-ed7f-47d5-8e84-091dd8151e09",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5cfa1ddb-bb2c-4438-af47-96a5494f730e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191f03ba-6ac7-45ec-9677-ccd89041600f",
        "cursor": {
          "ref": "96d8314d-d110-4280-85ec-5c779f8e6d5d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c9190552-cb09-4600-86a4-1bebefd7fcda"
        },
        "item": {
          "id": "191f03ba-6ac7-45ec-9677-ccd89041600f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "22f7cd30-fb71-4c70-b6aa-d38b5456e60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71bdb67-17dd-429d-b8ea-d8e64e6b67a3",
        "cursor": {
          "ref": "da25e5de-7844-4b04-95f2-349d4a57618d",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "21403c69-11af-453c-9f13-34c5274e778b"
        },
        "item": {
          "id": "b71bdb67-17dd-429d-b8ea-d8e64e6b67a3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cbb52965-eeb8-491e-8b39-1807e7acb3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637c46ce-fe14-4343-90db-f4f4946d2649",
        "cursor": {
          "ref": "b2b6e60e-e3a4-4dee-939d-bfd095800f66",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "cc471f45-e6c4-4060-8e7f-e4859f2f9421"
        },
        "item": {
          "id": "637c46ce-fe14-4343-90db-f4f4946d2649",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bae8111e-efec-4b26-9c58-a62c51d7dd94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355a8ade-e55a-41fc-99a4-6b997092d6e9",
        "cursor": {
          "ref": "fc03aec1-962c-4c9c-a5ad-b800ac77376c",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "bd43bacd-7361-42a7-ad23-513f25b9fe7f"
        },
        "item": {
          "id": "355a8ade-e55a-41fc-99a4-6b997092d6e9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b9c9f5b8-a2c8-4373-afb7-1c427eb49305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbcb9d27-3e32-46b5-a0cc-120a34da5b10",
        "cursor": {
          "ref": "beef7948-5f03-42dd-b89b-125d15893fa2",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e678a307-8cf3-48c1-8fef-59f8a2fda377"
        },
        "item": {
          "id": "cbcb9d27-3e32-46b5-a0cc-120a34da5b10",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1f260e4f-1ac8-4fa4-b085-d6cdf32a9145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e142257-a4df-441c-8397-6dfcce312847",
        "cursor": {
          "ref": "5ed21948-77b7-443b-ac98-22daaa48b839",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "a260581d-6209-4068-b95f-7a4e538d1ff0"
        },
        "item": {
          "id": "0e142257-a4df-441c-8397-6dfcce312847",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "25eba722-2671-4b85-85a1-1988a75c0c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6db801-07c0-4824-8e6d-4f98158b8fed",
        "cursor": {
          "ref": "f6938e57-0421-4754-bacd-0ae0daccd0a1",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "377fc395-4199-4236-845d-4f1e50e8c99e"
        },
        "item": {
          "id": "1a6db801-07c0-4824-8e6d-4f98158b8fed",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7cf286a2-4318-44bb-be71-ca51b07c154b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d28e38-ba60-4689-82f4-e3cf5f430b59",
        "cursor": {
          "ref": "28bcf4d2-462f-42a1-9580-2aa03779464a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0d09838b-c172-4a8e-94d0-abc74112fd63"
        },
        "item": {
          "id": "e1d28e38-ba60-4689-82f4-e3cf5f430b59",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9add89e7-95a2-4966-9889-708a33dede75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1197a2c2-866d-49ba-94cf-3f93521b0978",
        "cursor": {
          "ref": "4e95a65e-7730-443d-9ba1-f821da6ce9b9",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ed4149ef-04c9-43f7-801f-e25e8ceaa4ed"
        },
        "item": {
          "id": "1197a2c2-866d-49ba-94cf-3f93521b0978",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a346bde1-0b14-4e96-acbc-94f0e07314db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9e7261-6c5e-45d5-a137-1878f3fe6e4d",
        "cursor": {
          "ref": "a564cfdc-2a8f-405e-83b8-bb31a4f6dca1",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "5301bc0e-232a-4521-80af-ab19bbda4465"
        },
        "item": {
          "id": "fe9e7261-6c5e-45d5-a137-1878f3fe6e4d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4072f6eb-f999-4931-8cd9-6319288639a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9d508f-266b-442c-b348-4a042fb1690e",
        "cursor": {
          "ref": "42fb9274-b4da-4bbc-8f0e-efc9c8e9cb2a",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "8f13f4a9-8e08-4dc3-9cb2-ab611025e9ef"
        },
        "item": {
          "id": "0e9d508f-266b-442c-b348-4a042fb1690e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "799ede32-b8dc-4a42-bd20-9e46b3512237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb26e357-edb1-43ae-9b19-9956c4999349",
        "cursor": {
          "ref": "deb2e304-2fd1-4014-93cc-1cc2a884b38b",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "7189998f-22d2-4fdd-ac0a-c87c5d106d52"
        },
        "item": {
          "id": "fb26e357-edb1-43ae-9b19-9956c4999349",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8f680533-5cea-4824-9e1b-d9964bbb21fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcbab133-1105-4ce1-a8de-e773031bbdda",
        "cursor": {
          "ref": "8a7827b5-0d28-4bbb-939b-18ae29d8c103",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1bc3b29f-bf44-4c9f-911e-da25630b5cde"
        },
        "item": {
          "id": "dcbab133-1105-4ce1-a8de-e773031bbdda",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d643b475-d0cf-4498-9e0d-132e1f68ef23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3fa636-16f1-46c6-af68-450d91967c2a",
        "cursor": {
          "ref": "24da1c24-0eba-45bf-b9ac-fa226645eb9c",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "9729b269-6b05-4026-a76f-5a52a5ab3df6"
        },
        "item": {
          "id": "3c3fa636-16f1-46c6-af68-450d91967c2a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "663224a8-fcd1-4f41-ac44-a5e9638eb73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9df2809-88c2-493d-afa6-6ff8c7146f19",
        "cursor": {
          "ref": "1ac0ac95-a1dc-4d67-a238-f08233228e30",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "b8b22cf5-b9ad-4568-903b-04203f0abbe1"
        },
        "item": {
          "id": "f9df2809-88c2-493d-afa6-6ff8c7146f19",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9fcde107-f8bc-45a3-85e3-51f7e0ca0af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffc4153-8aea-4bb1-bb2d-6ff22e808639",
        "cursor": {
          "ref": "a7bb17cb-9353-4aa4-999e-2addf63c871f",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "8f43a0f6-0b78-431d-8286-9424fff644a9"
        },
        "item": {
          "id": "4ffc4153-8aea-4bb1-bb2d-6ff22e808639",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "54098c15-7056-4d51-8a03-541a57a2cc79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0f1f3c-9510-4f9d-9fae-a2037ca96e5f",
        "cursor": {
          "ref": "fab71964-9c87-499e-9c64-7177d0d7d688",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2225aaac-af03-4956-9ce6-594519037468"
        },
        "item": {
          "id": "7e0f1f3c-9510-4f9d-9fae-a2037ca96e5f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9ae7ca96-85e6-4021-8e02-ab73de3c50f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885b9240-8677-4533-bbe5-e93925dfa5da",
        "cursor": {
          "ref": "02047c19-6433-48fe-b164-fada13d551d3",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6b90d1ff-9667-41d2-89e2-822f4775991c"
        },
        "item": {
          "id": "885b9240-8677-4533-bbe5-e93925dfa5da",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3a876873-2738-4291-8f7f-e84183b1fb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477a4dfb-3dcd-4165-84b0-31aa4a730065",
        "cursor": {
          "ref": "6a000c4e-b0f5-4fd4-8574-325c09cd4afb",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "707e04ef-8330-4ea0-8920-b4968aee5d5a"
        },
        "item": {
          "id": "477a4dfb-3dcd-4165-84b0-31aa4a730065",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a7d34520-fd48-459c-bd05-63f9e106ecda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ad55a4-e462-473e-8996-4136feeb302e",
        "cursor": {
          "ref": "b03884b6-b978-42d8-9d56-167c7022e618",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b006e01a-8b47-4e35-8655-25e23a5d9542"
        },
        "item": {
          "id": "d9ad55a4-e462-473e-8996-4136feeb302e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "81050c2c-7d0c-4714-b2be-7f0c64ad84f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b7e8df-b588-4d9e-8fba-48d6752e3bd2",
        "cursor": {
          "ref": "1443db08-1332-4cbd-b9b3-7c706cb32590",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "a786b356-7d85-411d-92a5-053d82ff77e1"
        },
        "item": {
          "id": "b9b7e8df-b588-4d9e-8fba-48d6752e3bd2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "870214c3-96d7-48b6-9a90-050cc1b6dcc1",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "edcb6bee-335a-46c4-bd0e-ceac8484382b",
        "cursor": {
          "ref": "cbb5d295-6f09-4875-bde8-05eb2e98056a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "a0f3a618-4000-47df-b55e-d6a47edb14f0"
        },
        "item": {
          "id": "edcb6bee-335a-46c4-bd0e-ceac8484382b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f73085e8-c48f-44b4-8836-37254c62dd4a",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0d8aa3-f94a-451f-92c4-3fae3aadba86",
        "cursor": {
          "ref": "eea17ab9-89ba-4f99-a345-aba7e86f7e58",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0e53f62a-6558-4feb-83cb-680e2636acab"
        },
        "item": {
          "id": "de0d8aa3-f94a-451f-92c4-3fae3aadba86",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f5264f09-b2da-4ec8-975e-e661072ae8f2",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d857d581-c71a-4c06-981b-6f143a6bae5d",
        "cursor": {
          "ref": "30e196eb-b827-4801-bd7c-57604ae21fa2",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b1f01ad3-a37e-48ce-9d49-2e9da9dd6614"
        },
        "item": {
          "id": "d857d581-c71a-4c06-981b-6f143a6bae5d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "541916bf-4d4f-4436-ad8e-04130bce27c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d857d581-c71a-4c06-981b-6f143a6bae5d",
        "cursor": {
          "ref": "30e196eb-b827-4801-bd7c-57604ae21fa2",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b1f01ad3-a37e-48ce-9d49-2e9da9dd6614"
        },
        "item": {
          "id": "d857d581-c71a-4c06-981b-6f143a6bae5d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "541916bf-4d4f-4436-ad8e-04130bce27c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5069271-d4fd-453d-9b35-e88b5dbbc5f7",
        "cursor": {
          "ref": "210be600-9174-4e64-bfe4-983edb0f4b4d",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "724669bf-796d-4351-910b-9a59accc8997"
        },
        "item": {
          "id": "c5069271-d4fd-453d-9b35-e88b5dbbc5f7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "042fe633-9cdf-413f-b60d-d099b51546b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b865dbd8-c73e-47c6-9762-2e393ee03c51",
        "cursor": {
          "ref": "a298cc3a-d7d7-4bae-9a60-2d4eb78bdb44",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "e43b18b6-a02b-438b-82df-5faa649dc1e8"
        },
        "item": {
          "id": "b865dbd8-c73e-47c6-9762-2e393ee03c51",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fa90f827-a771-4625-8237-debc8042fcf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}