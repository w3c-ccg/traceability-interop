{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3a7fbad6-6583-4dd6-9f06-d243185fd668",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9475fe38-26ff-4d3d-83e3-f9e46b5b9278",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b337536c-00e2-4370-819a-9baae1294351",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7d17d039-8119-46f9-ada1-b4d1fedb12bf"
                }
              }
            ]
          },
          {
            "id": "680ec939-dc76-443b-b460-de53f7e38d8e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a7c6342-490c-4cb1-867d-a791b901f792",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "defd6b8e-1e2b-4507-ae3b-1341b366642b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "70804828-ea2e-48a2-b0a1-30476ae3607c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "20e7e6ed-39fa-4e5d-aeab-2e1bc75068c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db5e3706-409d-4a8c-bb01-29874310169a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "721196ba-1a09-46f8-9c75-cf3ebd42462d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f963c812-6bfe-4db5-9dc6-1a77b457c17e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "139f6e07-4717-4f16-b1cc-f1b70ce04292",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ae77618e-f843-4669-bab6-842430107957"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "49a2fa3d-3037-4668-9028-7946da52cde1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3d8c074-6f3e-4b81-bdb7-e32b7912fe6f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "287ba902-92d9-465a-af06-8493fa68e432",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b0b797a8-c1d8-4f4c-a5aa-5e48ea4532d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35d08380-b2ee-4dec-8608-56775f08b192",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44369954-fd54-4373-822e-8e4ffcc18184"
            }
          }
        ]
      },
      {
        "id": "df004d8d-b540-4f6d-a278-dfadb949d2f8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "15230ddd-59c5-41a0-917e-bf09339e3e74",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a36c8930-7579-4da5-af62-a1e8682d82f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f2ea2658-6e69-48e2-8c7d-363a4cf887ce",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cf3777-c024-482f-838f-4f69b7395132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ceb6d353-4085-4ecd-8822-8d9d2748c893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38a6d64-da5c-405e-8793-0851b95d4cce",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4e20a8-47f1-407e-bffa-f023472e361b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f61f6b89-4ab9-4923-97c8-cfa02b97826f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e895f22c-ef5a-44c1-872d-be61356249ae",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04b7ac2-6c21-4b76-924b-4f8597b439ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "147f9b86-0ccb-4c9f-9ef2-af08c5f310c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "decc0c05-61f8-4e54-b986-c2776ad874ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7220d3d2-c6ad-4e7c-8642-44416c2f7726",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa17c55b-f04b-48fa-ba19-56893237b9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83d9e985-b176-4edc-b77d-4144a9b8bd74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfcebb3-a0ac-47cb-b336-0d60f886e4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be73d2d1-bff7-4360-8515-36308b83373e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d1a04e96-8b21-4941-af5b-426a39aea9a5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0feda48c-a882-4ebe-9c09-efc8f3e3af02",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca27955b-d367-4333-8cfc-402d5e3c0090",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b779f360-b20e-4692-a769-989653505a92"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "326b1260-edd1-4666-a3b8-b2ab72048add",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f81c482e-8a88-45c1-b7ad-052543133a23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2147f2d1-7821-41d5-a9ef-734e838116ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1dee8f2-3f17-4f84-8102-a08c5599e9e4"
            }
          }
        ]
      },
      {
        "id": "ff7eba90-9bb3-4826-8070-266bc95610d6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1b68959b-de18-4d79-b66c-ba73ba3ea64d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bfee8dd6-8a91-4b12-8e4e-ee2495472d5b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "49610df4-d898-4fb4-b260-a27aff08243e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f618d47-8811-4e47-aac4-caaab1afa737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6744b8ab-3a8d-433a-a470-61ea4056ebe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b0cb99-6f1c-40d3-a2ad-3c7de504abae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c8a8b29-05bd-46d9-9f63-19f7b033f4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614e1187-df91-4817-901d-471f329a4535",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f409a2b5-38eb-4be5-9361-447bc8d9e842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709b00c9-651d-4bc5-be9e-ca08084cc1c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fcb5cc1-37da-4930-907d-d59889c243f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b07082b-359a-4085-aa75-b3c66067941c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ddcef2-fa12-4236-9d16-bc066035b9de",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7495b38e-55c2-475a-9126-ca03af885d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7469d686-6269-4b4c-b396-0347d6324038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf84218-1869-4b28-b1f7-fcd20cde21ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d797ab3b-68e8-472d-b24c-f187e1848bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93bdd1b-14d2-4c3c-ae5e-6b4098f48898",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d724d10e-8687-47e7-bf33-9ab720b4a1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d5b21e-c6d9-4f15-9ff8-c6ed60ab0dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931a2878-7be8-4fdc-9b65-3ac203aa70de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1b1d837-fa1c-4221-81c4-89c3d57f13ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84e62d8-4de5-4325-9c14-1d081bc789f8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e591707e-4c5c-4cdd-bba6-8133e0f4f721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ebe472d-bb16-4ee0-aa4b-4772d4f4dc0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e14721f-5a4e-4fa3-8ca3-9dd8a59b2708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fa4c50b-77ac-4d93-bab0-804279018fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e17f71-aba3-4760-898c-44d97de39043",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51871b5f-4cb3-4283-b985-edacb197aeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca045cb7-008e-4f42-8989-df8db373db30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2feb41-b556-4815-992c-c1fed767a56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c58fcbfd-e020-4131-89d8-321ee191f33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e6ba81-50bc-408b-922c-a8b8ab1e4895",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66be8647-308d-4f23-9215-cb64b61b0525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a0979a-2740-4cde-bccc-320e92d5942c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ccedea-066e-4c02-8a6e-d50753d23de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3890b28-bb9d-4389-942a-cd3c08234e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860fcb2c-2f68-48e5-ac43-da0932ef74b7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeff80a6-288b-49ca-8025-c10e639ef834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190cb38b-146b-48f8-a9a1-64f1d43fc7e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ba97e8-ebec-4193-88c0-41fbbc248afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac8b745e-e415-43a9-a85e-f1c5a8535b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d78fcc8-a9d9-401f-8c54-a171e6aeeeb2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733509dc-5d99-4b16-849f-cfb0fa148bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2bc71fc-e42c-44de-9629-f4e022d6033b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01112be-105d-4d2b-bf80-b433ab78beb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2964b523-40a4-4328-a69a-2a364923f11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c98c6a-9f40-4d11-a69c-60aba9f967d5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0d549a-bddc-4e26-b508-7a6242a88313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23ce9ce-c1bf-490b-92f1-2ed517658465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e23fe15-254c-41e0-b7d4-64d9b16bc9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95dc9440-dff9-4669-885d-c11d4d25328b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403703ce-8459-4e91-8d3b-be297901950c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcf5066-c812-4e84-acfa-8f6d8d7693f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "761a0e28-1e5f-4b36-8171-e861229167b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ac4a66-0cda-4b9a-955e-91945cb6a353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85d505b0-2cbd-4cda-bf69-f218fddfa574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0cb3c8-208b-4301-9caf-4d8de8a2ca78",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4212081c-f41e-410b-aa20-ea4956594159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c6f233-4794-4db2-807f-b9fc952394a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca70847-7f60-4257-a753-c3221b2c3c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d723a64-922a-449f-bbe7-d2f54b934df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b14501-6ad2-41ff-a4f8-a9819620670a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10385fa4-f737-4334-97a5-d545af2d5b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24a9b06-8ee1-4cdb-a6e6-9a0acca64f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b26a28a-dae5-4dad-b968-7714833d52ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "069d44f5-e0b3-407b-8f45-92f74d5ecdd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1458788-100e-4e4d-a59d-6e51dfe4c776",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a2c99d-9316-48c6-bc54-c5fa3c14d78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74ae70b-aef4-4539-85cd-709bad0f1ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e8927d-9504-420e-9c10-fa9156e0f317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d99d3cdb-84b7-464b-8ff5-fb2c29479536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc3b227-fac7-4d6b-8818-290a2fccf6d2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8749b31-733d-4d14-b335-c4a129ca11b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85ae43c-e9a1-4915-9980-55cf03eedd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9f2598-5827-46ff-b67f-da2846d95c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ad9ae76-d4b9-4bfe-9b4c-689482080c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f4908c-40c2-40b6-9ef4-a4731a79e626",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635abdec-d6e1-46b6-9f73-b168d8e93072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9026f43-2eea-4978-86ba-1325aff900c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a18df7f-db19-43f9-a91a-b4f20eb7f7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "895efdcc-a48b-4fde-bcd3-a09ab4c5e1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eace5e96-ef2e-43e6-b2ad-213584759f02",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04881f0-62ac-4772-a19a-f47163da366d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9df0bb2-aabf-4dbf-b042-f12f96d1a5d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6972bce9-8e5e-4875-9d90-1bb953f9aa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0ec8f6e-e44d-401b-9a24-1085724ae6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1987392-3ba6-45e4-95ba-32dfd5a76c4d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72a2499-302d-4876-8354-ed775a580b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7259cec2-c760-4c9f-a335-5adc0dd0ed5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343157de-c0af-4ccb-87c6-1b58247795f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c01e4cc3-a673-4722-8d1f-cac84dfc353c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf095fc-18ab-4d6a-87f6-6b61985f3544",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f033b9-3ab7-48b1-b833-8ce521a33e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e48d0f-66f3-4ec4-921c-1f28ac50c302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8c3292-4484-47ad-bf4f-6cb42aab7f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ec0c3c-6f23-4e9f-a8e3-c2f20c4ac7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b9d230-617c-47ac-bd20-ddc4888db505",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f718d8-2793-45cf-ab36-37df259b6cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97498d97-014e-4615-84c1-023f0adc6385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b2d172-18ad-4251-b0f1-7a84a8a158fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6f2572-92e4-4a18-b45a-87f714ed313a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663dc61d-11f6-4972-8cbf-924575771250",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cf85df-f3cf-4b72-9bf8-fed5b6f5aaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e22daf84-9401-4073-b57e-b12f7560a791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810b0d19-33e0-4b88-8c85-67afc437a07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66a96f7b-06cc-407b-aa20-e7fbb5e667ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d070113-f56a-49ab-8ded-d2e63add7605",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e3b009-1ef6-44b2-8639-ac31117d25f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5466f8f8-10d2-44f1-8131-26da57066e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd2f2b0-e6fb-4475-acfa-d67c35fa6887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "133bbd8e-fdcc-462f-b6b9-1c14a9e3461d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d815860-fe99-4a33-b7b6-1fa844f8f577",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "648ce988-bd4e-4cd6-80bb-107b46412dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e6287da-5aaa-4363-88da-d7646bd45d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e770fa-62a0-4565-876c-c15482502050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65cf5eea-8f14-44d2-8a7e-7584478f4026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d222154-8bf1-4fff-9d02-9d66c5e9bb48",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6627fd9-8603-4b68-a465-0502c076146b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0c5ada-90a4-4f57-a8f7-8aacd3089c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1855456e-9a78-4718-85c1-e552d16ad9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4917ba87-74c7-49f6-a8e5-fb67d1dcbf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d256b34-8781-4d27-bb5d-feae3b9eb6e9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d09816-37c7-4f37-95ab-86a75287cfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb69a44-9080-4005-a3ea-3f2d83786a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f3f6e2-b47d-4bb1-8e7c-755800f09522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc34cae3-990f-469c-b093-0858af415c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089b4d61-c8f8-4428-889c-ae0229142519",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2a6cec-9024-4c76-951b-47ff1be4ac70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab43422-9ab8-40a7-80db-ded3c7f5a141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fc4094-1ddf-43cb-9d82-7c416f210706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "969b90e4-d917-42d5-a69d-0894d5aca01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778283ce-c744-4edb-a290-3c53fbaed31e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8cfe8e-1665-4ea5-ba34-fd52174c0eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105a4d8e-0a48-4337-a04b-c4e478fd667e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad703ec-a0ca-464c-81e7-0962e5aa86d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcc49713-7f5e-4535-beb4-7fff01df32c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23bf21b-6a67-4471-be76-48e30b8ce97b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3ef1d9-b674-44de-97b7-f396975f3c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c3fbc3-753d-433f-8a37-f8b26067b04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3164a0-1733-43f0-a6d0-11ab28e7b992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe75d5d7-aca1-49c2-a733-244d972e6af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d22d8a5-2518-4630-bde5-e21c05e72a79",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca804a5c-f594-49ef-9f55-35389815ec08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f535bc-4141-48b8-9603-cf98870681b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41bedc2-5942-413c-8ce8-f610543551b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db386364-b8d8-409a-87da-caa2d7bf5559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ec82b7-1a23-4919-b8a1-d035b438e0fc",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df8405a-00a3-4fa9-90af-f569ed030e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa7e2d2-a3e9-484e-a7fa-b90e0984e86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992c0b6a-2e18-485b-b4c0-3ce7e058f959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4322bff4-bf06-4a99-815b-dde0ee2c2e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be61803a-0d16-4b8a-9de9-0b1286eab840",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7f9ce1-a185-4539-ad1e-7be1df7cc33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fac5f3-608a-4966-a991-a2c7739484e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee60a27-3edc-443c-aaf6-0e504708f7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4367218-c101-4057-8d94-246c0151d786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8af201b-7f97-4562-a1be-ca8b7cae00d6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4208b7b4-1924-4272-abba-8eb63b1f25bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef2c31a-6edd-4227-938a-eda12d3c2ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcb9878-22b2-41fa-adea-f52c5ee2854c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d36a58f6-6046-4697-899b-2e35ab83ecca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a0fccc-4238-4eb6-96a5-2fa7d521adbe",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fced5d-0981-4bea-a6ec-939653882386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01b8b79f-1496-471b-a204-185c95778ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58be216e-def1-4f75-b8ea-bdfdb6a1dba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89f67957-fbda-4c6c-8dcb-5b175f8fe462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd9938d-6aed-4dd7-bff6-4ad3d757743f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ef89ed-46f6-432c-a2f7-4e7304a49d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48a3b65-dcf3-4c4f-977e-bbfba186d05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47af82c8-6793-41db-b9d2-bd12d21f96f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc6a98e-0b65-42b5-af67-8314c1f90cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454aac12-9fbe-41b4-9713-ac87152eb3ab",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b8cf65-e253-44b8-980c-f3f14574bec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a4dc1e-216a-4f41-b081-657884ba8b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ea5307-7e0d-4f89-a7f1-7c6cf900c2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e754406b-6b8c-4fca-a9ad-74a8f1e888c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761b3c6a-47b5-4552-95aa-200112921b7e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f72865-5625-4d90-bf05-390b802a7670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "952c1d9f-2757-49a6-8c1e-0ff93f3551ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48294421-7128-4b4e-a0e3-518001e49dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0fcfc03b-0f26-4daf-908d-40f065241b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172cf196-0bf1-4d99-bd1c-77ee4dc1752d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fa7c5b-969a-44a9-8389-d51f9ec42f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "368ec9b1-1bfd-46d9-99fe-c86b8c972545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de75c26-c5da-4b40-9958-b38dc6e91ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2b7a13-f616-44e7-b618-5a682ba79fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1630fa5c-a367-404b-9760-6025ec94322e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad83433-14fa-4ad0-b132-9943ae0ab694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b54998-7374-443b-b96d-2c91353fc0b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f11b29-8637-4b97-9dcf-427798474033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f02be385-8802-4ed3-8653-c91f667c847a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10052da1-9acc-41d8-b799-8dbe37d38165",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c0c2a9-e385-4bbf-900d-38c7ef4a1a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "792ed0d8-7940-4e05-b820-c32f0f2ae8bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcd9553-921e-4c78-95e4-8ed91b17b25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e193fce5-2fee-41bb-a5d1-b6c6fccd7440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f479ed82-60a0-470c-81fc-8da937f3826b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38fb743-8d15-436d-9b8e-874d97fd0c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5635a2-028c-457d-9676-fbfc7de6f2b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5e65ec-d49e-42b6-b4a9-706cf0cc270d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f24517b5-b667-4afc-baf1-6458b4adc54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2740c16b-8da0-4cad-ae34-8b6995ffeb77",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34521d15-19dc-4d30-850b-da536f7936a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fedba9-b7fb-460d-a0f0-e9667751cac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf4d977-83bd-44b3-a364-f3997fd145b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a71159-fcdb-4013-987b-93dcc891ae0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64134b3f-bdcb-40ec-8dcb-cc67c3f4db6a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab877025-b430-40a1-9163-0a14d627fff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea09831-4264-4769-9ce5-badf122f28cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdabefb4-d052-4b57-90b8-042375e88478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ec54a3-6941-4347-9b99-8d4c48b11ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdab5a72-5787-46b0-8446-ebd12ab26ac0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0c985a-3bc8-4f33-9225-38d96b644675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f219559b-1d56-4250-8948-a4f1fe9f7e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45400ab9-c37b-4332-bc28-8b7323d3d874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "61d864db-5955-4b36-a5b7-c6c5ba88187a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941210b7-7f3e-4734-822f-fc6d66534ddd",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32769890-eb10-4890-95ea-8f469881fb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e16eeb89-26fb-451b-a581-dffc76457eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0b083e-150d-4f7b-bf6f-cf30545cef0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "be22d047-5d95-4588-af03-235e4305f92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b33615-774a-4335-8115-f99cbc65f7fe",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4200b002-3ab4-4a3f-8425-97687fd1afc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9aa7c6-e2c6-469d-9c4a-4fb5c1932aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9c4d3a-5402-47d5-9f51-0c87925c8ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2b18e11-ea32-4c7e-8e99-d9b7cdd4d790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca9eecd-dc70-4590-886a-d244cfa3b609",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736a246b-cc96-4d9d-b2d4-69e5435df6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aead38ff-4916-47b5-ba89-06ae81013a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bba5b68-b351-4d18-b08c-3089e63ac37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d591e1c-8d4e-4b4f-9416-0b96d4083b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dba2811-56e0-4a57-a4ac-fd7ebbdcc033",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41ae135-1acd-4001-8069-7a02bc71f17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00feb8c8-6893-4bcb-b2dc-4f28aaadf5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28f452b-938d-4a1f-a5a4-01aa2a3d3d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d7dddd5-ba52-453f-bce6-080a53d2afd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180a5887-8c7f-48e4-872d-8339dc452665",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb836e70-f908-4556-b801-bfe00e8c9ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c3f6fe-af96-4bf0-9329-72e059babb7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22692128-4058-4673-bbe1-12a0460cc4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "723e2ea1-85e8-44e0-8ca5-2a7b7f17bb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cf5171-b678-4a40-bf85-9c9ed7a314e3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8394ab-d7c8-4ca8-a66f-5f4ded723d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3667554d-bc6b-4a14-bccf-c39ef987e9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699e9d37-ebf0-447e-a86d-bb2161ca9b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32ef4dac-b2e6-4958-8c17-8be7fd675baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31313fff-684f-42a5-90b6-387aaee95f44",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3c3aa1-bd9e-48f1-af40-86605b41eccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b848565-3419-4f18-86f3-a366bd3c659f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41af2f4-741e-488a-81bd-97bd3312f650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45333c6b-b119-4eb1-b02f-87b680694b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824fc4e9-f181-41a7-83eb-0a076cf82978",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3983bbef-c66f-45e3-9fca-2f65201df0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72441e59-e2ee-4bf5-9886-49e929a532c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c955f8c2-a685-44da-b381-7b06f156c59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa32be5-c05d-45e8-85e6-4b1ff333db5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcc5446-baaa-498a-a275-a1bf5cb8c88e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9beb184b-3940-4a26-8e2c-57c2e55b1bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22d71bf-03cc-47fe-a9ad-c025a98479ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3298810-1989-41cb-959e-1365a908bbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "051a7bc0-0c67-4d1b-8f83-03d4438654c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf22b0d-50f7-45db-a5b5-7bde8208d05c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97712cc7-6e91-4ac0-b763-e9b3e187142d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d40026-6d10-4d25-9e3b-ca9588854b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23b4002-2632-419b-9627-d922c8e50aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddba278a-f300-4184-a7b4-44ed22973529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efe1766-6b33-4666-bd73-919162f7c892",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd21484b-3a2e-4477-8c1d-f494ddf7bce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "150a6a60-b959-48a5-a1de-6a8afda41935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08dd0a61-5b9e-4ade-8fbe-8a204f9d6d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba26ab7d-2426-4b05-b1a2-cbe4ea312801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7299c1d-2854-4b48-a4ab-8c18e23cde7a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394b7770-2cf4-4f55-b3c5-192d32c87c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc583b9a-9925-48fd-9fe0-54bc7b2f9935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7268a0-031a-413f-952b-30004aab4459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3457818-04f1-4ae3-944a-912d339efcb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5606d7d-60a3-4612-9fc9-6ed153cb1e36",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06eb653-9ffb-46d6-a92f-e07be907081c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7647054-cf6f-4507-a3a6-5bae179cff41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e451402e-0128-4011-bb3e-dd2b9a47676f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8710a9-6275-44d3-9e0c-ef08e58b6c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d348fde-ae91-42b0-bbdb-4dd7bfb968ce",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e49749-68e4-4ee8-bc9a-a3995b6e43ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee281dd2-1845-4189-b0c0-7464908a930e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a087634-ed83-47b9-a198-589e435a1cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "017094f4-2bbf-4f1c-b421-e51a9f08560e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839a0cc9-27fe-4217-ba2e-0b6087efe12d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729737f0-21f7-4a04-9953-727d39a09526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60395206-37e0-43a5-a431-59d183f7b45b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498d0917-74c9-464e-8059-010b8ccd2448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e45ed434-3eeb-46f7-ace0-a644b0a92466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf51909b-b258-4986-aa88-94b3318e1980",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1e5c73-5b24-4077-bd03-b0f53292c855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37f183d-d7d0-4534-8b99-82ccbfefa2df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9f6e15-f97a-444a-8291-88c35577e482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbae2b82-9510-4328-a740-9a8b78b8be7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7aafe3-4fbe-4b62-85ad-dbb81913722c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9007d9ed-ce85-4308-942e-7eb97a91887d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365fb22a-c8a1-4cf5-8469-4d0ee68474cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378136c8-4dcd-44b9-a675-47205df66ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f570c8-65ee-44dc-9718-9b88bddef78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f46b25-4fff-4743-8a17-b18d78c8498e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a08308-3037-4633-922e-d1659a9d3e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c9c13b-515a-44cf-95ef-ed8e829f1cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f5f542-0e66-4039-a302-c44be9d02481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "de1a1b97-174d-4bd7-8436-79d8ebb688fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae8f73f-3dd2-432f-9587-2c425b01c565",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858a6bc9-4e2d-4eb3-83bb-0319fea4f9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a039071d-6271-4874-bfb8-15e40fb67c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5836b53-0c09-4e28-bfce-e9575d39903a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "056fcc24-7b75-436d-a1b7-0b1bdbc5cf5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b00e24-9034-4b96-8caf-efd62da3dad6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2fb67e-cda4-4e51-95d7-19508b078129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92cf0889-2568-4ccd-ad46-5425d94dd153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30adce22-19ba-45c3-80f7-362ba485b615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4704249c-e242-4f06-b055-1bc6b2ba8958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfa4906-f892-454e-8134-7a2366ee8971",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0802996d-356a-4913-9cf8-52f08081c0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "638b7220-bdf2-448a-b91e-78bdf57d3749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12f01b0-9ce7-45d7-b25b-0e8129a82a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c98368f-023c-4973-a791-76a94e66cb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8075decd-af00-4267-b8a9-d1fc8e03c067",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d880dbb-8a33-410d-8f89-3f0e4a486928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4012cb55-5808-4326-807d-6e30945834d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07fb92c5-7ff4-4860-9903-b334c19180d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "308af1fa-4f71-4864-b4a6-40c6a140273b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a529f69-f82a-4f29-8494-ce132ee4e4be",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e5577d-8609-4fe6-8e90-a81a4d23b76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3069da-7f29-4074-b42c-f55c0d5e7120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ef962f-ec2b-4ac4-8950-a30fab02e569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec604d65-45ab-4a9a-ac9d-0d9a4d0e87dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb25aad-66b8-48c5-958f-e0111398dae8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7836104a-2930-469e-9716-18780b279b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2905837d-5537-4f41-a8ae-ea97bebd79f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd1d4fa-b960-4d5b-b7b9-72d1cfb3adbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec23b56-4a84-4496-b029-7114675609f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038296af-3f16-401c-a280-edb3b3932f7e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb36d10-194f-438c-9fad-d4d42c40d787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cbedeea-011e-4d7b-a431-069552410b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a53893e-148c-4977-85c2-a04524d4343f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6091f448-6def-4ba8-bac6-9fd06595fa2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d7800c-8522-4959-bf8e-f0dc2ae6c42c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b678ad0-51f6-40a4-9b09-c4cca20c5962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03dc9a8b-caf8-464e-bdab-49549fda6bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3f9ba3-816b-4e84-ab6e-6a22f4e0549a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b25e5dc-2c10-434c-9a56-e927972400db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c08847-a4c5-4297-99f3-7fba7ce33b98",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2225d152-1937-4f52-9e20-0bbb0eb897bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c24b139-769b-4b5a-9a35-b8ccb0e9469f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367e4d09-340f-4ad5-9f17-1a1937ea3f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e7333ff-a82d-478c-b3d9-efa44641ef0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e63aba0-8e75-4139-83c7-9463fdab026c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37cb2c61-a6fc-493e-85de-8e0e797a6c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e09134b-e7bb-4439-ad48-97aa3ff321a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674e2050-58a3-4a93-ade9-2953ded91706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d0966b-7e5c-4732-9800-dcf919257c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a39afb5-7b73-45e4-8385-8e59ee18c1c6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed1ac22-4519-4738-9c54-a82a5bd4d830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c015d726-6fee-4391-97ae-c2e8a1884bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a538338e-c976-4558-807f-ca107f181fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "419c4c84-02ff-484e-a526-067070972324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c671e27c-e1fd-4f06-80ae-658dbfdeade5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ebe63b-7c0d-4e9f-913a-c66efb7d783d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4dbfd95-d280-4751-8d45-b7324e370534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e766082-ef53-4721-a18c-2881509af47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8a40d6-9247-4ca7-93b0-1d46580c570a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467bca3d-f7ec-4f8f-b45b-de603aa30632",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3df451-175c-41ef-b239-049b858d889d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eedc676-2fc5-4249-8769-f021d07cd1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70b50ba-4dbe-4fce-ae98-f65dc0524291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3efea10b-5b43-454c-b840-c6bb61fe7cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4d4d04-443d-4df4-b38d-77398084da35",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21946cca-4abb-4904-8a6d-d510e22766bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126212d0-61be-4eaa-b112-f1dd1fbdc789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daabaabc-fc79-4361-8d08-eb3fb5ea68b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c8f4115-96e2-40ba-84d0-08d02a925535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739702be-7910-4d98-9556-57a2311d45b4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9065863c-453a-4d79-ba4d-1d1640c7090d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0aa2be1-ca0a-415d-86d5-f24874e8ddfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fffed5-e830-46f6-8dc1-62eb992554a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2254a44-ec6d-4348-8f99-4337f13c3b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b226a6a7-41a1-4385-804a-ba44fba26856",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23c85c1-c99c-494b-8842-c5aa9c28af43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6884fc-b994-4809-8517-c079078886da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba95e7b-f421-4c08-b891-e757331dfad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85685c72-3535-40fd-a868-719f32f7ff98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8569b3-898c-4454-932c-7edd734e38e4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8aab6e-6653-4f02-8969-0302b7b64cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1fa7fb-8f4b-4c1a-8c0b-45f95adcdf5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c665f29d-50e3-4a1d-a5cc-0254204c2a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4776f11d-026d-4181-afd5-8a6eeaf6f7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafddcf4-3695-4115-89ce-e9d6cc3b2184",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ee3c7a-188b-4e7e-b24b-a23abb168943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c4337d-cb1e-48c7-b4fb-294b9df0590a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f866e8e-4bcb-468b-93e0-2f868b56d256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fcbcccb-6c31-47c2-b76d-c14d619efc42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81b32d9-df73-499b-8311-af62761dabd2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dbf7af-1d70-4fad-b049-66e348ee2002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ab42ba-13c9-4065-ba6d-3b9d0a921605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729d301b-37cc-499a-82db-0db199c4da51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72e6aa14-7629-45ea-856a-1eb0e922b854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9638d36-aafc-4731-9e58-827d071c8e81",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f609cc-8522-4655-b330-b243192af58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170e8927-7519-4089-b0bd-7546c324e2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed672a4-c361-4976-9ac8-e4f96b5a89ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "54ec894b-fcb8-4c8f-b7ea-eecf0b0c96df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65241599-24dc-4726-bb48-0ce03d21240f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2ecfc5-8af5-4cc8-8054-22be8c0893ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0519df9c-f2d8-4722-8601-6078e9a1e732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceaaf8fd-0ea1-4d4f-a4bd-625090355894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98085f7c-801d-4d2c-b8d7-ac49c6463d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8772e676-274d-4b19-9879-fc55d23c7a36",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e405937-4671-49f1-a578-49241e469d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e72785-6751-499d-97a9-29b2450a92e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2543eb-2f73-4653-a4b5-3dbd74c75a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f234ee8-8cac-4844-bc51-bf2eb6457067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72617cb6-5114-4e8b-87b1-c8d8a79a83e6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3aad2f-53bd-4d84-a0cd-eca25e8dfa0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b504e1-e384-4833-a41d-1c95a9fea8f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acdf39a-eef4-42e3-a2cd-2b8491708239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54b10644-5670-460e-aaca-c53627bd0447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8daa6c94-e483-4603-869a-3fbb292c092b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be80bcb-4695-41ef-8b2a-3fed6cc5597c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784ef021-db78-4c2a-9222-04458715f954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b873a59b-3867-4702-a7ab-dfa1bbe79fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26426529-dbef-410f-bb9b-993b7925d34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c1c880-a2f3-4285-b376-d4830d5db983",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d42c1a0-68e8-4f4b-b622-2e2de37fa31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9978e3c3-4501-4693-83e5-4922666860ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe0f4d7-01f2-4fa3-89e1-6cfca827d581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07d92093-8682-4373-bb35-fa62bfa31f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416653cc-2a67-48b5-aef9-4804602bed5b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb991d35-7715-4d3b-8fdc-137bc5df8de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c873aef4-7075-4d46-8def-1bedeb912ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6529d53b-bae7-4194-a013-721ce6159ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "596817f1-af53-47cb-97a5-e294fe096468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6342804c-2477-4652-83e4-4ff055da1108",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4abf93-4201-4070-b7e9-c5e9e8346772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8123d6c9-8390-4104-bd1b-4105db1064da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c23c4d-1f5f-4569-baaf-4e313a2e4a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd0f691-123b-48b0-9b39-966f9d6898e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5262cf5-4980-465e-b5fa-f386bea692b0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea238c9-310a-41f6-ba9c-21199ccc2344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e303aeb-4c18-43e0-aca3-4d2d8bfbde13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382a1793-b9b5-4d9c-8de1-40635453cbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d377e6ba-decd-4b36-a7e2-b45b8a3e2364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0da1300-61da-48bc-a9a1-6b02fc93ac9d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423d84d3-2867-49de-8b51-a74c41211f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca71df5-b04f-4d44-9d5c-8cc9f477be34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72c2cff-8930-4d33-8130-9d7388281a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb20d1b-f6aa-414a-9877-981fcfad6c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77ad045-55c3-4aca-af2b-0f09dd46672a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47769ebd-c0ba-4534-8ebc-1fc4c3a424de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd404174-b132-4a53-a684-6e977054e72b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241d8bee-f642-4580-a72e-0d9e455580e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "297c7aff-d14a-4d8d-b473-becac64b7d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8bb172-9ddd-4a15-8613-d9e62948243c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de0c7f3-8a42-4675-833c-132933275291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "870d732c-a584-4f0a-9dd1-60536f810bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e3fd10-1472-4377-b5ea-0a4dd809408b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac124262-64e5-4560-ab1c-a76ef43fd2fb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a69b99b9-5e18-4938-b5f5-8f91fe62ef0f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "536f4886-9aa5-424a-be2e-4574863a13da",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1046ae-81ef-43f7-b0ae-9d01e2a005ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bd93d98-f6c5-4158-b3fe-4b1a7d57516f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d4dfab-6b84-4125-a29e-69402d5723d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd1cfaa6-f305-4ce1-b038-7078acdf94de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fd1b66c-633b-47e8-af18-5f8952ba1c9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d495dc9-4c4a-4404-9ed6-3fd564cfe8d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d47e61e-410d-488a-a2e1-45ae9304d3f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19014fe2-9e4c-428d-805d-f806e275e2a5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b432d5ec-a546-488f-b391-9de88646ef7d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09711fca-b326-4e44-a96e-807cc61e8c5b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3857ad31-2da6-41cf-9927-05cf48abc634",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4cb48e57-746a-4ba1-a0fc-116b90424c36"
                }
              }
            ]
          },
          {
            "id": "3f6e6943-636f-46f9-9afb-6f377f6c2e3e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "023ea315-081d-4ea3-9dfd-7be482d5f8fb",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "76b76027-23ee-44d6-9529-985ed9852926",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2449f62b-9348-4c9a-b155-6ecaa091b3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b621f0f2-3129-4577-b95d-cdbadfbc6f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e97da5-37d0-4a22-9ef7-124f4446a2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c79083-659b-4d4a-8b88-3e8b00a0fdc8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "71d69560-cc32-4c51-8d58-211d0cfe5355",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "634fd4c6-a9b3-4410-85e4-48621973b56a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5a2a373-2fc1-4ad4-9003-190aad103516"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "412ee203-d62e-4713-a8cb-d64efd211493",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "370e7370-11e9-45fe-b878-830c1b062a0e"
                    }
                  }
                ]
              },
              {
                "id": "d0359cb0-2e8f-48e9-a182-389d716377bf",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4f4f006-102e-4d24-bab5-2261155b8545",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7d945bb-eabb-49dd-b1a6-0a38aed8f62d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ba69b8c-11f9-4f1b-a727-24f9b0afc327",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aed6e977-11f3-48d9-9319-e29340a0661f"
                    }
                  }
                ]
              },
              {
                "id": "987efe3a-3504-443f-b83c-f38dd3f3875d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8181299-cde2-41a6-9c86-34c29de4fee2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40b3b793-3399-4bdf-a5cb-a35c60ab17ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b621518-367d-4385-80ea-df56175bf724",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0cd41b8c-d485-4fe0-80cf-3fbe16fc6b85"
                    }
                  }
                ]
              },
              {
                "id": "c5e6058b-6b2a-4288-a90a-2644e77f65e2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01f33913-96ae-4583-94b4-725b0e25399a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c02a0bbb-b816-4152-bf8f-e48579eaffcf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11d68d25-927d-4d68-b30e-f43812122506",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "83e6817c-ea76-4466-8fb5-cbd1b1b21088"
                    }
                  }
                ]
              },
              {
                "id": "a5160528-9eeb-41a7-9c1a-82a5b4bd92fb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a49d5f43-38e5-4b2f-af24-9cb27bb52621",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4080cb5-d6a8-493b-a662-a4581de355ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3e03816-54fb-43f3-8f87-3579d477e7a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ceb0dd9e-9ce4-41da-ad3c-bbef7844effb"
                    }
                  }
                ]
              },
              {
                "id": "ad28b3f5-4237-4dae-ab37-0ed5d69a6b9a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ce2cbb8-29f0-45e6-826f-373f53aa6e36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7968f925-5566-4044-8c28-bfbe6d474ac0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7a5551b-5895-4022-90d1-6465c88b14d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1a248fb9-c47f-40ae-9551-e6d30d88ce95"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ad2087f7-48d0-4d03-85de-28ef64d74406",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db1e20fa-4758-4929-8815-d7bd425d6a69"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "71c2e2af-3d08-4fa6-87d2-b4aa01860e82",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c1d8d7c-17a4-4688-9b55-92c6deb14950"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49e09ce1-dd53-4aad-ad22-ea81c6b3fae9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "603f6a43-ff25-409a-8a4e-b4feacb0fe51"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb58e1b4-ce61-4ad6-b2aa-b65078eba6a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0160f7b9-d884-404e-98d8-785a6aca9e88"
            }
          }
        ]
      },
      {
        "id": "617a2a7e-a75b-4d4e-821c-9d1350600c23",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "017e38a3-8a13-4c5f-b09e-e3c8dbaff5c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30c5a91b-5580-4a3f-b8c8-ae06387d6e19",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "32895afc-421c-4198-80aa-a9fa4b95157a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1954932-f8c0-425b-9c9f-00ef8674a3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e15b8ce-dcc1-46b4-b4a8-63c1d9ebd234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9509fceb-fc9e-4ae8-bbc5-1d120435ed4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "92bd6d84-3d25-4079-9fbe-5b4da6e9af91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d893222-8dad-409e-ba4c-9178ea329a15",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db04c0c-a7b6-4e91-98ce-4cf66d32d470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed56acb-53d8-40c2-9bc8-bdd9f0198715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef374f5-c5da-4bb2-a6c9-886f869921c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "43e08534-1ecc-4c04-af41-a166adeedc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ca7ea8-b356-4372-890d-0633418a21e4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886b47ed-86ac-4cef-8a0b-6a6d89a58aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba9dd58-2728-483a-9ee3-ccd67bf57c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5099beaf-9a10-45c1-b377-67de1fd151ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50aadbbb-53ea-43f0-8941-fe8eafacc423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c944355-5462-44e2-b953-b3b9222edcfc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95afb1c1-c8aa-453e-8eee-45661dce34b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ce58f4-0943-4f0c-b9d1-31bd4df6846a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3cb2d2-14d1-44d0-8088-8efafe87e35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "286234e6-2647-46f9-ba85-a72f3be3b01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43b9587-ba4f-4e0c-8a01-eca8fc84b825",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df36755f-5405-4faf-afeb-75e8c5ffb3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a049f84-fd1b-4cdc-a9b9-9212cbec36be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d6fd5a-cdfe-4e53-a59d-e5b955a35a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18c4538b-8372-4e0e-9b85-efa9f8d902a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f906737-1b26-46f1-8186-22b34321a9ed",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c95bb2-ed7f-4d29-9d82-ceb809d70be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9570dc5-3ca8-4bd8-9aca-f4307a2f32ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b04258d-3a4b-4d07-ab0a-d61ade90849d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12087705-fc62-45ef-993b-fbc6de697fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5ac295-68a2-4e5c-adc7-134c64540856",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94024e34-7839-48e7-bb67-84fe891bec41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fc6995-81bc-4c7d-ade4-fc1f3c81d4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adfcf0b-53de-4a6a-b7a8-930faae4a946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "18dc9dfc-957b-4d53-91aa-8acd1fb1af24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c382a9-6d68-4d2a-96c0-fa625b562695",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efff0185-7721-4d9e-916c-82d9c7edfa75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8b2ef4-34b9-4f5e-a252-3e27d7ec32d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96b8710-5dee-4fc3-aa6e-ac22996ae962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bbed8bf-7861-4fdf-a603-2cad117e0cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9cf6a9-d991-4be8-b5ad-aa0f9787e8bd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952a0976-7264-4d87-a279-bbd541c26421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea8b54e-d3f9-4214-a4f0-11c2bed51bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5568823-4f88-4819-93ed-372d1d4e5da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93dc07d3-16c1-4c0c-9a57-ea21b0d17549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b13ded-8ca7-475f-a9ef-cde3674cbb4c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3018e9a5-7846-491f-a545-e9531cef52aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52240546-39f9-46e0-844e-633c7cc82259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5714249e-8054-4438-ba6f-2f0ef2a77876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "290acbb7-dba0-45bf-bc8f-024573706370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524e8b5b-cf7c-4ca1-a135-3d4e08d7c176",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b93d59-50cc-4671-b268-ca17c627c909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5540f5cc-2abc-4e61-bab8-7f68c8078e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e176b716-57ba-41b0-90fe-566da192b5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9f90a206-9793-4f2b-817e-106ab358f53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe522660-e9d5-4b86-b9c2-028c336ef724",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af1d17a-5473-4568-ad85-f57d4c548418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c82d482-ea14-4288-b356-f348bd013816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28df7876-90cc-4c6b-bd99-c54be5412e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d115439-b442-41e7-8eae-5bc6c15ff40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2d9a8b-1f2e-4716-a6ef-b5192b635386",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89282424-45ca-40e0-ba3b-65c8c40799c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7e9a5c-7b8b-464a-8b63-9359f4d80478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db539eae-bd0a-4157-887b-951398bcc6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b2879ed-eb2c-4e5d-9c53-fda9ed010af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfab8fe4-4cad-4f41-b145-867e04066062",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c163e4-ea1d-42b4-9b4c-9c7cc07b117c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b800b91-a9df-4bad-a0e8-73b96694a15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96225f0-1df3-4ed2-aedd-e9b226f96f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bda105c-45a8-449e-8416-c9adb8b2d9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe3ace3-741f-429a-b8b6-36c76d4bc254",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6213ff11-199f-4445-9fb0-dc9a2209c5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41aed8b4-9624-42e7-af45-750c31b30115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c3aa72-ddc9-4d7f-a059-3bf8e9ec3eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff9ab7f-12e1-4010-9497-92d77cea0037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5892a0-11c7-4977-a02e-c665806efdd3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667bbf8a-8b6f-45e5-ae19-38b50cfd9f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed6063c-b07a-4a69-a77f-11a9e878d243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02043ea8-56b3-46aa-b891-5226a066fcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8022ddff-ca9d-43b5-9be4-0c7809b09671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaff9af-6db9-4fff-8935-7d47d053ea16",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3fc427-e1a6-4f21-b936-7e1ab857a832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2392aa6-f67f-4909-b160-07c7b2f3275c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad2c3d4-c522-4f86-9979-2678cf12c9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "23502f01-c49f-4a3f-902b-10bfa8187687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9ff5ce-95d7-4d52-8ea3-b121183bceb0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35afdb66-59a2-4e65-ae51-b9eed3ce4cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2334ee-8238-4353-a480-22ccf075b08e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e5b3af-a7ed-4a32-a8ed-cdf1a899abce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "350cf250-7e2a-48be-9af8-8b5218ca202a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6b3731-22a0-455c-9019-49264616a65c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f884dca9-2ae1-4dbb-a059-5cbf100c3708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3552bbab-f5e2-4e37-9c51-c7a827e871ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53d4dd3-61fa-4a03-9f7d-c059f3b4ffd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf6d93f-23e8-4962-8c75-b7a0c7974c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babe0439-948f-4690-b1d8-f36c1ceac63e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7296bf96-e249-428c-b41b-3393a6c22921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ace56b-e0d0-4fa7-8466-366606c5ae9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96f86c6-c8a8-4ed4-aa6e-6a1c936e750d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23e7639b-1f91-4929-b1a2-5095db1e940e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea4328c-f5bd-408b-8acb-ffaa47e1e1a0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0601a93b-693b-4eeb-a341-beed10104fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63890f4-04b5-45f7-98d6-2c558f094011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b049570-8bfb-40e1-b16e-560a11350b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39c3d335-282c-4faf-b5e1-f7980ca501be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6500bb40-a22f-42b2-8d6a-f38dc4c528ff",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb96ac1-f919-4d14-975b-4eab28a4ca42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270dcafe-2134-495d-b410-1224ee7cd961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1edf4b0-08a4-4ef2-bbf4-023d694eee72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b85676-17ba-44af-b551-6fec7489a45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8f7216-ea28-4f0c-97b1-cd9cace796c3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069fd621-65df-4198-aebc-bcd06983c471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c17d36-1c4d-48e5-a00a-736af299cc77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1402358a-8814-4018-b0d5-0c3d3eec61d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d299c2-86f8-40bf-b6b4-868c064bbc57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac9c548-c6a2-4e0f-8750-640bd1e78da3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b69c70-52d2-48d5-bb25-ea0a6854c699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce527d2e-76ff-4a53-8f83-6ceacac25dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82fab88-0b4e-4158-81fe-24f5cde67eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db7247e-5fcc-461e-ab5c-85657f5e1923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4506a1c-b5b7-47ea-8e41-5917a532caf5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e441e230-b347-49d7-b74d-dc8eee94b97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b92d45-c611-46fd-89e5-0f32dd5b5b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41604d1-13d1-4b7e-ab9e-c8fe3292bc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab5fa5e-0497-483f-9527-f2b161af97c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de12e1d-54e1-4679-9a8e-2fc9b48f5a20",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8367c91c-4c09-45f0-977f-0dba250ae11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55e06cc-3b5e-40bc-85bb-2e6e8e87e948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681daab0-33b7-49b9-a62a-58c26e82b00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1bcebb-620b-492c-aada-547335ce760f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe259e9-99ec-475a-adbf-dcb47473f7aa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0a5c1f-99ec-446e-9c00-2499d6a4e5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda4c5cb-7f57-4b62-8d66-f6c5023ad712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3266ea-be54-4649-bffc-340f51961285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0459c76e-f0f0-4796-9e8d-3f7cdc97af21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b593e5c3-3252-4f69-98c6-871fa4fa007d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3402b7d1-d460-4ca1-aa0f-bf5bbb780d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb1d994-d3df-4ed6-bd28-b16cc984c1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a8f8e9-af4c-4bdb-9f8d-810f3914314f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57f8be1f-4560-4326-9058-87f1a09abb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca2e3c7-84c9-4cff-88f2-07a8415a747f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8476454-b858-4490-a45e-d5302b7db1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b2b65a-f724-48e9-adf0-7cf73a3e80e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61000d93-efb8-4ca8-863e-1999f2170349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d68075-90f5-4e58-8244-ce8fce8952c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7c1bb1-46fa-4f17-8c40-69c3592d76fe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1edef10-7c66-4982-afe4-e92b8e636928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ae3da2-e680-433b-958d-5a926bb94312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b3387e-7682-40d0-ab76-8d5414f5e12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff452cbd-18c3-4e78-a490-741c0e0485d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa953967-fdd0-42b1-86c8-763879eeefc2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d81f825-9f65-4012-a2e3-b22135807e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c4d505c-33b6-431e-8739-3fd0193bb8e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc4b21c-d2e6-458c-8893-b3a1d76d0807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f76130-9b1d-4efa-9abb-1e0e18705f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e58d0b0-ed6d-4985-b129-8fea3acbde44",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08eccb70-b0fc-4eb5-b669-04086e07dfe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306ec5da-8e79-436e-83a3-3abdfa8602f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f82eeb8-f0a2-413c-9b96-21de14998443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05d78b48-2a39-41d1-ac10-3b31d85c0530"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "49673899-ac90-4701-b643-e73de62bd2cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab811925-8fa5-4778-9786-3d8ef32651ce",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4555e454-0a9d-46df-9642-421d18094760",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb0783f-c16f-45db-822f-345d12a417b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513823b5-7e67-44df-89b0-4141eb093c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c5d534f-60e0-4c7e-8f98-0d6ca900255b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16fdac38-b97e-426d-ba31-8442f180417c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19c183e8-b11d-4227-84d7-311ff29dc936"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a73bcf89-fa7e-4ada-848e-47759b642c6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af1d0af8-e956-414d-b008-4f4ea67c060a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ced96685-3080-4a34-bb2d-864b1846521e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "30794214-4792-45eb-a648-e0eab4c71060"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89476975-d646-40e7-a06c-9427a0d3ef01",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4d2c72e-8207-4faf-a8e4-44c03391f005"
            }
          }
        ]
      },
      {
        "id": "07daceae-0f8e-494f-be0f-de8082f2b1d4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3ae8ad96-1878-4428-b366-09462544b939",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d9e093bf-5748-4e22-be93-b63094465427",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7063e56c-252f-4202-8068-f4e30e6cfd4e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5aafc2-e7e5-41cf-9f4a-72b2ea626f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8b2d89-81d6-4d25-aba0-46077c390510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a2bc15-dab6-4ab7-8b83-569ef09fff5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8099ab68-54e5-453b-9f26-27c9a6c692af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d807394b-62d2-41cf-a9c3-ff5b4250b243",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032bb687-d7e0-423a-a804-36670d2ace68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4759075e-f24e-4307-9be4-472f9c14dfcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb12df11-c7b2-4ba6-836b-767bb4290e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69023d77-03c1-4596-b59a-c3424b990736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4444a46-d5b1-4c32-8776-f1f0bc4ba01c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63db2b3-11de-4b86-9fb9-828d459f5b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4205e5-6708-45fb-874b-329f4191a0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6e658e-dc57-4762-8188-c0210cff9e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d72bebf6-b565-415b-8245-1230564f5a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029ac570-5381-407f-80a1-f352652e18c7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f830279b-dbdd-48dd-845c-432ab80dcac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ae55e5b-98bf-4a6c-8846-cd5d3ac8ed6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72edf89-5b52-4788-ab00-75095365fb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4afc3f49-7f52-4032-bb35-1abdcc285b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb5609c-4d3a-4955-bd2e-274d99712717",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c5df80-ad7d-409a-a92a-d2ddfec27a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69cff54-f5ae-4ab0-8543-4bb68fd9510e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bd06b9-717f-4cb5-8683-fa794bf1ba70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f025de0-6212-46b1-9a50-262a7db84c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c833f1-9931-498c-a9e8-d9ec0c7e2d1c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da32e23-f17f-4235-8f18-43bf2cd119ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed17734c-1b5f-44c0-ad68-7ecbfabfec55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7de522c-9726-4252-8248-09812665ea8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7301b38-0824-4c1d-9323-92fe8fa4b218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d744af2b-4b57-4b16-84d8-a08eea1ab96b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15723bdf-d9ff-4a3b-989b-202446c2b801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2b9973-b72a-4de7-805f-e86885baf686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9647ec-3d61-48d6-aae7-78377b418af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb0670c-57df-4f0a-86d6-d5fedf1e7444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbb21f5-8489-4f95-8080-b510f918d23a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d468a6fe-3d68-4efb-9bdd-0b25b80f57dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a645c762-92a6-4ff0-84ef-a9c00457781f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b527fee-4520-472f-9295-fcc32453e91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15b08589-ac9c-4563-88f3-597ff916ced2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce237a2f-2b6a-4507-8e4f-04d334c1ebf1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d82a51-3dda-4c9f-93ec-3eff939c1e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dfc8e76-b766-4528-a5fe-298a48182ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716d936c-b064-4f2c-b906-ecbdc1b6e32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2cd2bd-5269-45d2-b457-b4a5b5929dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2613dee1-bba7-47eb-b39c-b5b0009d3d1b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bfa8a0-926e-473f-9a67-f49f60d56162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d205eb6-2d37-4a2a-8a11-d9699e523e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11dc90f4-f2ef-4f5d-bd78-517ad7f5407f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f09f27c-03c1-45d4-b73a-fa1460bbfdda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b9d411-ed44-490a-9425-9f29e82db805",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f23fee-84ab-4abf-a29d-56ada05a1bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ad55b3-bac9-4d77-9509-1e31771714a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd16ee37-bd91-495b-8d4d-3ec929725376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "537a9c99-70fc-4f7c-8168-dc52b78fed93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edf8e7c-45ef-4bb7-8785-2b959c3cc709",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72acfa8-9956-4256-8104-8d45421858e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f947df5b-7473-4f0e-94a5-e97452fda5f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c578d1-9eaf-4103-8b3d-d17b27d32348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7215c34f-811f-47a1-ab06-bc1824943b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af61104-15d4-439e-b519-f4c20c2dfc99",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bd7561-d49f-4577-a0b4-1247de1f30cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d67bab-fbad-4161-9e89-9740072f7e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eccb46c0-5461-4f8d-960b-5769dea17e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9918ecd4-8e91-45f1-b25c-933e8911106d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f845e8-0ca4-4054-95c1-a588974a079e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e566646-26fb-481c-b142-defb7db9501b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534900d3-98f7-4467-825d-cd16906ba012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97105bc-48ae-4920-a254-1b813bd0a7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "170da21a-2496-4d03-873d-f7cfb954312a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408950de-a44b-4adf-8df0-ce38ba704447",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f26d534-bbed-47ed-aece-09ecc8f35764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6dd117-4412-44b8-a28b-44d1ae4b8ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46e11c9-fe43-4295-944a-fb490a4ac79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "afe60d58-5487-438b-9efc-d185f00108af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d401f3c0-a834-40bf-bd47-3ee0a6c77a31",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e7cac9-70f9-40e1-b0bd-84bd46dc49f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f13a45b-52f6-4293-afc8-e4cf38bbcae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293848f2-d9a1-4f31-882c-24f65e56dfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "017f5245-61ef-4297-9369-0282867a19fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e02f684-ab2f-4c97-b051-bf3291a291db",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d451b4-8e5d-4ad0-b0c6-38e03e20d1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473a793c-bea0-4678-8cbd-cd2823b404af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3540733-2570-4a86-9b43-89f6cb59459b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "20243921-eb96-4ec0-a889-f41535311074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872f7060-bf7f-4eb0-abdd-5c3960f81de5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c285323-5dbf-4f6b-a879-80cbb791fb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e016cd89-3c04-4025-8da0-0ae593b68e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c73d1d2-fe71-461a-84ba-956c3b969352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "850b5b44-2d3a-48c0-bbf9-98621264b592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75cb4fc-1c2c-4142-8233-1d829df130ed",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15e562f-ff50-4ee2-90dc-eca31ade6319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6aac813-e03c-4360-91a2-90de7dd09af6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a7a725-7402-48c1-8110-d98488fc03dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "832ce14f-a0c5-4c62-a5ff-d3e72a397fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104ca2b5-a435-48d0-9213-23b4113a2342",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cd6eb4-48df-4041-8c42-6d6085e1fd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fa5da3d-7aad-4c07-b26d-68ff1c09b0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ab4bfc-81dc-4f6f-945b-a699157e5507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "366b996e-7e5b-42db-a74a-dcb638847c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d476106-efb3-4d88-bd1f-145dafbdb653",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89af92d7-bdf9-41b2-8dc7-c89a047eb862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0e3a70-05fa-4730-8d5f-db6d86308311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c737fe7-ebc6-48ad-b929-0c292bfe5b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af0e610d-8f00-4689-a0b9-02388f3f71f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88271c5-28a9-4ec9-be0f-a49104e50225",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb088ca6-b049-44e2-b1db-5d9560189a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c5ef6c-2d55-454c-bab1-be9b5d20614e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba7749d-94a3-47d2-97a6-de3341e8ecb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92599a0e-281a-406f-993c-4d479f190c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6059a19a-012b-4a73-8bc0-a61e74a504c7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b3e230-36e2-43ae-96cc-db92425cbb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82f1c60-019d-4146-a43c-8c04250ee8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6905fcf8-3a2f-408d-ab11-69b14d0e1b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1b326e-412d-4087-8101-c106bff227d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7a9e61-ecd6-4156-a69a-e71851be69d7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d422c3b5-6fee-4829-93c3-f244175f1195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4177c6-f5f0-4815-968c-83d4e51d7c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c26f01-50a9-4fca-bf1d-1658bd41d50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae98ea67-e082-44d6-b5b2-23c182c004d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0df833c-0703-4ae2-a0f4-d2e6907c55b4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f932d9be-87fd-4c48-b141-19a6dcb21fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30b7d26-46f3-47c6-aec9-7fb8637a60e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1580a7b3-de2e-438f-b918-c4d90848b858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8ecfbe-134b-4c23-9c56-f84ddf305d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbb37a3-bcac-4850-8055-a06aafa03ad9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d3388a-29c4-4c13-b6e8-5174ffc7c6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c85322d-c2d5-404a-87f4-dd4fd56049ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a658a5-e921-4d2d-b713-94e35ec618e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f046245-fe18-4873-86ec-05dcfb1df035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4f36c7-f92f-4df4-ac63-0ee9de3dd5ba",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c374fb-57d5-4525-988a-02924b669cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34176962-6401-4e98-8dbc-f85f9415ef5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07d091c-b3a0-4b9d-8dbd-4fa3e6b2570b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61200416-86a7-41a0-a294-2f647e22c64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae6b52c-d1f4-44d3-be85-af0612840dac",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64dc9dcc-47b5-47f9-9f80-b721c1bbc881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c967653-74d5-471a-9ea2-1693ed0fc803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9429bae0-7853-46ef-a0d7-7d1a482521fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f4869f-05c9-4986-a21e-82fd9ad8ff27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba007f7-3e12-43f2-b741-001939f0969a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce05985b-745f-4009-9fcc-18e738e68f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bdbb1db-98db-4649-845d-c59babf4444e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9412f2-d261-4607-9d7c-b643e4aa7f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8579ef-27a0-4160-af33-2fc2814f97d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f003ae84-c27f-46a6-b01e-418a812918e3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f616653b-abd0-4ea4-8419-57972af685e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbdcab4-0bfb-41e1-b481-3fa500e73afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5395e3fb-0a20-4a54-a8f3-bc3ba112e0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9edfbf6-3c0a-4153-83f1-510b6f5f83fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a6fc8e-5518-48af-9605-672f03110847",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d0c346-f4ef-43a3-a775-76cc3bb2faf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca95991-dfc8-4820-8379-b1615af99594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8975234-7cef-4fc5-a6f8-c72c0270bc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1242aa-8f68-41eb-ad9c-3c167594b26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc660d6-c552-45e0-bdf2-bca21e3fd046",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58248af2-57c1-4b77-89a1-065cd5f376c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c005bc-17f1-43e7-9874-1e425dc39607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c57b81f-187b-4c74-8868-e2b081eedecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47e51501-6308-4e23-b0ec-07b3358f3c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852d821a-bb60-4a07-b087-77624f2210cf",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7da6c50-7685-4b84-9864-98ff12f85b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a8f5c9-06fd-4317-843b-1d2efc32e95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ec0392-7415-438a-821b-54b5a628255a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9aa3189-6a47-480f-b519-87e74da9f3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db885487-8aa0-49f4-bf07-34357af3deb3",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b474f83d-fb06-44f0-b5a0-fe9616f34ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6037c36e-f18f-4d06-95de-58beea1ff2ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8413209-4a58-4131-b070-862b8e2a8f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0758b813-622f-4196-b7ef-c121fa1e3010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4856124a-cb82-46cf-8ecd-ef2ef22be0d7",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd9962a-0a1d-4c09-a268-875c3bbc9a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c445baeb-7ca5-4f21-ac48-6ff82077dd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a6b284-e5e7-4e18-b939-a11b2dd30a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5521ef99-0cf0-4d35-9c07-0f90be079d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae20f8ab-1c16-4ec8-956d-5257eafa5203",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1165b0d6-2c08-4143-b14d-272742066c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32977cb-f55e-40ec-a076-8b187fac0823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f492ba-660f-47e6-a58d-3edfe424c9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cade0115-969d-46eb-80a9-efbec889a736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052da1c1-f9ad-4b75-a13c-bab6c004dcfd",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95350b4e-72ec-4bcd-844e-4f9a936fa7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9269eb-e6b6-4aa8-9182-c50ee98aeb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451ce596-94e2-4da5-8c0d-9824538d8b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7331979a-afab-4dc1-a1c1-d9093bbe83ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ed832ec6-e944-4c3b-a8b3-146ae19bf354",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd6275c2-4874-4f0c-af8a-7ee1d44e18bc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0176db9f-2524-4a21-8bd0-297a9d78479c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "eab7d165-558a-4d1f-ac48-5dba7cfca576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51aaaf3-35e6-4017-a168-1a0e0b41c359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65046628-6516-4de8-8f21-cf8c7bc37aad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0545880a-2c39-4226-a453-801880980ecc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40a455dd-bd44-4f9d-8563-d3f0596b23af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f0f8d2f-c1c6-4230-ab39-f72f00e36444",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21ae737d-43f1-426b-bdbc-34555648d2bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37f17248-3368-404b-b583-f82bad5c2cb5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1e64f4d3-57b7-4910-a475-777e002fb62e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "422620e1-9481-4cee-aa25-5f8a7fd1d531",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a37b213e-ca93-4336-848a-ad7cf0c10b7c"
            }
          }
        ]
      },
      {
        "id": "526f2117-61d7-4878-b2a8-817e8e0d279c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0249775a-65ec-4884-a6f5-5183d990caec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "367421e3-dc7f-4544-91fe-c6ee3108378a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8f2e3a10-d473-4257-b69f-2c84f30d3482",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a38356-a4c5-466c-8783-5aaab87ebce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795c2273-d627-4733-87dc-7aa78bcf3d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59712bf-4840-4267-9aec-b63b3661bf2c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f5393d-b539-4ef8-8795-05d852d918ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2281a2-e823-4411-a54d-f5448eb848cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b989b30-29ca-4f52-98ab-a64bfd798d41",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdae4530-fbfe-43ff-9898-29eeda4088f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7498023e-06e7-4178-b92a-c12762f3fa40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a233ccd6-0f5f-478e-a228-1b225db5b52f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a006ba-25b1-48f5-8f36-be0b2b2c0557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e81364-a91d-485a-97bf-dc02c7c19b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f4240f-d9f1-4b3a-bdd2-96f8cb1f4580",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "169a1db7-4269-4431-ba0b-cb6f097ad16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f67daef-4b7c-4ca8-b703-bb90c675daf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3111d9-5949-40dc-a667-e24261211c83",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c63c54-27dd-460d-9b2c-998cfdaa8304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4090e93-00e1-48c9-8b1f-6ea22d649def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7df795-3a2a-4282-bc8a-0c20cdc7112c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2ea977-4fcc-43c7-8c2b-e9053b6cdc57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3fb1286-f646-4a41-9474-0ccdde4f7c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45af020c-8b10-498f-a8f4-8031ff654558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4ce08e-ccd3-488b-a6a9-5f1b8c625be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e3a4db-7375-48fd-930e-bc6f54cf3d00",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad412478-d7d7-4580-b454-8a4298328385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45a60ab0-65b7-4324-8e94-ce11a036f65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfece13-7132-456e-8ec1-cfe37e444952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552ef7d3-fcfd-42e5-8999-ad9f948201e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d060564-e22b-436f-8e10-f1465b082a9b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a32b7a6-fcd2-44ab-858c-23384de7571e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25608ee8-45e2-49f6-9b85-46e4ed21298a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a657638-a9fe-490b-a821-89f6c93fedf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0ba615-fb2e-4403-b062-f9c65c22bc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da03fbb6-6658-4eef-8ccc-197dc02fd4e4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d01267-e2ea-4617-8f46-56c507dae0a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e980eeb0-9b78-4c0d-b024-3584d595a726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371fd4ed-04dd-468a-9c4f-e2f51fe64546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87990451-4c4b-4338-ba8b-c64b3ee12b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d0722f-bbb1-44d7-b76a-afd36b08a49f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed77d80-3de3-4cb9-a7ed-5187d1220a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7255896c-eff5-45bf-86ed-63290d30f362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0520aab6-e983-4985-ae7c-745e2ff1a69e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60cd07c8-2ab2-4a8c-9d24-098e7118319a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fadd32-dc68-4fc3-be2d-e12216e4bbde",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c7a6a7-5546-4bf7-99ee-1f6771da111c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0019fece-0825-4b11-855c-b3fbd8853381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b53ebd4-465d-488a-831e-08bd02eb010f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b220bbc4-5d41-4e0a-9f1d-a9eabfd1da87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e737d7-b903-4097-80ac-e1a44fd5359b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c205a945-37be-48be-9524-8a779e59f7d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d7d114b-0ae8-4eee-a4f4-3b5bb1aa3db2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fb9c90-55ad-4abe-b494-1cfb7fa61661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d443c41-3131-40c7-bf34-b77ebcc85f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44550802-62cc-45a2-b54a-946a40583fae",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204e2e43-bc58-47d1-9cf5-20debbbf6053",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58ef9602-4493-4e00-acbd-b48e2e19c747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8830e18b-1e6a-4cf1-af63-da12b4caeed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef819a7-bc46-42c7-a606-14214a530f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac7f7e5-558e-47e3-8704-30ae795ce87f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac8b648-bbd9-42c7-89b0-883b7cd3a920",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe16e22a-d2b9-47ef-a546-253bcedb5a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adef1199-12f6-4d20-ab06-2fdfeaad8bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd739adb-06ec-47e8-bfe4-0acd25b76325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a067af-b236-4cf4-bb8b-95511a338332",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25aad165-1af4-47a4-8a2c-e584ed7fb9a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15ad0d8d-6d58-485d-b445-25b6279bbad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3d8f44-dd69-4df2-870e-fde608251552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a381c18-5f02-4104-8fbf-bb59cd37e5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83f9fef-dde0-4a26-a39e-62849f13438e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ee7c15-dd26-4ec4-84b8-4deba25f63d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb48b90-a100-465b-ad12-f8999e3874ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6474e00a-928e-421f-bf61-82524a5251c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7e9024-4c0c-4d3a-ab89-96974c7de58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90416cbc-8ae9-4689-a09e-d92790f08ff4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dab31ea-f3a4-4979-84d2-6a19489124c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0186e4b9-bc0b-4fd7-b78b-a576d62d5421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a1520e-cfa5-4ff7-b52c-b59d95a3b1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e60eedba-ba51-4ef1-92a1-ce90e3eb77c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e9fe01-5581-4c17-a4b6-ddcfffc98d1c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb3115e-ed88-469b-92be-0e186a1a0bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b89f5b-672f-4120-ae7a-0d660acc1397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74be21cb-f3ad-4528-8541-a398a57fbdc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25797152-ce23-4c2c-a18b-8024db9a493c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d48c337-9bc8-4890-acb6-0cbf3c7ead4e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c6f793-2b55-411a-8990-67917bae9e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df7cd8ce-32e1-42ce-b2e3-d38789c96143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e80c4e-93b0-43dc-b513-b78f3e0eae9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a48130-00b9-4fe5-b917-210c0cb1fb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5222b3-b1fc-451c-ac56-2855a4496af8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d93b9d7-e137-4c88-a0a5-35dd8cbf87a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c712be9f-e07a-49e3-9d0b-ce89d9344885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae49cd9-11a8-4e32-90ca-6437ef4fb467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ca8440-b378-4a91-930a-0476b4bd55f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fad30f0-3c22-451a-9a50-36dd7cc3c6d0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b51345-03c7-44e1-b974-20252468959e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9eae599-c459-4811-962e-d356016ca5ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fee8c4f-bfb6-44ce-ae17-0c495237e288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74fcca52-2a33-41e0-b7d5-6f17eda47fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87db0eb3-f022-4e0b-a05c-5b6baaa3085e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38672779-ece9-4f32-9bdc-e02081c2bdc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38659a0c-6939-4a66-8e6b-5ec4893ecbff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6310955-0f9e-499f-812f-3bc2c5ff0a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53291ed-4121-4ae1-9025-0256721a41b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240db305-9d30-47dc-b1d7-c6c7406dfe30",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2383123-5506-472e-a532-55b866d031cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bcecd2b-7e6a-45ad-9dfa-b8b3714e029d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d739abb1-76f8-4600-af78-6f1ca350da19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be0b52d-56ad-4957-926e-5c729ae38756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bca564-cf08-46f6-a359-b6c5b27dee83",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c12e285-bc4f-4c4b-ad99-07d1fc247aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc01d100-42cb-4326-afaa-6fb4eace5d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d676fb5-e0f8-4063-aa67-0b1ebf496da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd5de75-298a-42ea-ac9a-6dabfd49420f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34367cf7-1270-421c-8582-b619838900d5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968a544c-19f7-4c09-bfe7-d5ac46377d70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7375c690-4b98-4fd2-bece-8bf996baf342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76be0b19-1e21-456c-8def-517c15ec4685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86477062-88b2-4971-8376-47e0d6e9574b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0941dbb-feff-4bac-940a-97b6f26c1baf",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cc7479-205f-47ea-be76-5b8a44132bc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a384f72-88f4-4a8f-97f0-97bd7c2083be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a1e338-7d59-4432-b3f6-41197ed203d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d62a4b08-edb2-4847-bf0c-2c5a059e23b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7aa150b-7eaf-4fd1-b3b6-a1b47a55389b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5572c7-9ad5-429a-ab35-0f9b8412e077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f501359-a73f-4ce7-a43e-daaf9385c624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb0b0e1-762c-4693-86db-029b24b7ac8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116b83d9-9899-486c-b3ba-96c7e3012b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182b5462-8404-4a41-834d-101527847d8f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e043cea3-7354-4012-a26d-722b2510fbb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a1120a7-b9b8-484f-934a-dc20634204bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00dbc5f9-14ac-446e-9a63-f9449f51caed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3113d8-50ed-47bf-b685-2a0d824a17ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3429e5-92b7-422c-8c2e-1808d1de5e91",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b882842-e55c-45c7-9b32-f0fb1e656ce8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24d43796-87ee-45f7-b5fa-6ed125da5f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15ba982-18c2-48cd-96f9-17f288db1419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15da2e0-b17c-4699-94f2-3959e96a2ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1f384a-bb52-4753-931c-157372753a45",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb76c315-41f8-4fe0-90fa-2872ae48a823",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a0841aa-2931-4035-9c04-aca51332801d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a077e8ad-8e84-4152-85fc-fd825073a423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7038f8ae-16d7-4430-81a8-4aa39cbc8431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637332c8-8104-478b-9837-4bf02692c5a2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843b96cd-2785-4e65-862b-ca1c7bbd8900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b04ad46-f97a-4d62-9aeb-e55d6c72dd06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8937eb86-0b04-4107-9cd6-087ec27e5c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875a5313-90d9-49b7-a784-85ec3060e78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c453ab51-cd8a-4756-abab-e93127a84f0d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41846190-a534-4478-b287-26b59bc1082c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3d4f5ac-55a9-41af-985e-3f79df1de020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0708c35f-2e66-492a-b47c-f12a77253db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e42f48-7837-4e32-8901-0f684d6ecfba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f05b349-d2f3-455b-8dd0-bcfc980a67b3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa20a10b-e3ae-4891-aa29-b238f2d5a233",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7497a176-317a-4f5a-a5c4-770085cc61c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "699031ec-df66-4d35-80e9-217e2ae651dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e36add4-83c5-4249-9e41-d5f1cdef3827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2acd36-b795-4b73-860c-4beb6b3099e1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d714c3-c976-4147-890c-fec466e6093e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2528c41-24d7-4181-ab31-4364354c9d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a27482-2a61-434a-b864-d9d1d704cf4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3d9cf3-e98c-45e6-8fed-e065e69e8325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd5459c-cbc3-460d-a7e5-b28a67798905",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea1954b-81e7-4966-b48c-78ec982713b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ce2bd2f-0d51-4117-8fa2-7daba688f30c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae21919-5295-4cff-9d88-e60cf3ebc351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ec11c9-705e-4db6-80f9-63fc38b74cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bd4b32-baa2-4a68-aad0-f38bffb1c1d2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c780ac-81cf-4fda-b706-733382442f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e958fa-d3f4-4f9d-9180-b9559249521d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfd14c6-271b-4fe8-a275-fab2e293d2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba2da24-76a8-4928-89a8-06045f60a49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2b33e5-dd53-45d7-92e1-674b43119c48",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a309ac-0e44-4837-99e1-42c9ca4a42d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c41a735-6956-465f-989b-09d791702d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93301c3-ca31-4f74-9d60-983c454e5c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9beb38c-3ab5-4cab-bba5-45fbcd4d9865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1233ca86-6c92-479e-b987-033303fbe571",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330cbb04-7ed4-48c0-899d-0de223b20927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82382348-0a4c-4d9d-84bf-38b8a12495af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9112b636-6cb1-423a-9483-e3668a11a42c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73e1146-bcea-436e-8d7f-7b8650431a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff674df-9e72-4185-a773-59a98efd2740",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfc0b69-c902-4170-8140-684f05d567e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c032a715-2398-4e71-9b84-1b88ceeecb50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56150bad-b364-41df-907a-5f02f0d26eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac36b5b3-9277-48cd-8408-974542549595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1236d72-2938-4ed5-bdbb-a1e7d8952cfb",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f6d5ac-c6a0-45e8-88cf-d8b5674e39b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e30c24d-d9c3-453f-8943-e8e820ee953b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce166b5b-7e13-4761-986e-376fce9bdba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c080dc-a0d4-450b-a4c7-c21f1eb003fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47dba1f-d6ac-491d-9473-c6a192db34a7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf097f78-fcb2-4b0b-bee8-88eaccd0b625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ae5e8a-fa50-44a9-afcf-5cef93f64746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6978d56c-bc52-4322-853d-6601c4b0adc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd02f6f-1a40-4b62-a227-1097c3188dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76173aa6-4cfa-4c5c-b973-42ec42e0c6a1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa846cd2-50a9-4721-be66-1c172af02846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c7247f-8b5f-4303-bb2e-d111f54addab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db7402c-54f9-4c6d-83fb-2cf45f8d022b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cac6fd3-b411-4352-a84a-acac2a078c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5d9844-bce4-4960-84fe-03e641e21f47",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38eb0b29-4c84-44f5-96ba-fb9fff777d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41fe69b9-6756-4d0f-af89-9f31b4631952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53482a9-e483-441e-b8ed-47426f5ab066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd4b868-92f2-4e75-a236-83c5b36114d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69180f7b-608e-4f21-93e7-6f361a6b06d5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b442f425-410c-403a-b292-596ad2555f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43438b56-e2c5-4348-875a-46bf1f11de7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d433a63-1fe1-4603-bc94-750488f2aaf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00171d1d-051f-47f5-86e1-900b8c1005a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efc5350-f3a6-4f3c-af41-0e9b35e67772",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2376497b-1b90-4f47-9c08-26cf9143b4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9ad7ae-281d-48a5-9803-731c8ae65ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda3bb63-4fa2-4720-9d99-071092175ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45aa79c3-d35c-4eb6-abbf-c949e298c16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63433785-7a69-41fa-9f45-f0dcebc71335",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c341a0f1-d993-46f8-a4f7-01fd7590a1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe81fea3-1082-46aa-850f-4ff7dcbed31e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c59ef8-a926-4a3e-aead-94455571009a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c644bfad-1501-44be-9a7a-64d840333980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d14e00-3416-4ff9-aed7-12e598c67cab",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ae8ade-0311-4d4c-b4bc-2f1ee7949d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bcc136-ba90-4c23-ac3c-8835d3ef5a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589a427b-0235-4fcb-ba3c-4e0da3be1878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dea844d-fd45-427f-8a1b-026a9a5d7a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43de2af9-8daa-49c2-a302-9d94eb8c73bd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d147b0-735a-4549-8466-3346ac92a51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92fb3929-12d4-4790-aac4-9c433c808c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "510af19a-9fe9-42ae-8514-df796d0a6a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc16f499-2c03-482e-8d81-e8f674fc5be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33a1ad1-d25a-49e7-a77b-af8086d1185d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b914298-da0c-437c-bcdf-64992e9dc949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16e75e9-6a7c-4994-8dba-f73c89d91203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe86556-b1a4-4324-8ac6-0366975ac0db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5654c8b0-7b40-4e0d-8017-8c5728868fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af4c43a-51b1-4c85-908a-0839dc196abb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbea176-7cb3-48aa-8391-1671d00474cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6c69ca-e67b-4d42-8df3-a1043bf86c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec1d331-0fe9-4fce-a878-b769efdd78f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf615e7f-7cb2-4d7b-a0ce-4de6088b10a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee632491-0e7d-4095-85f7-9dad71e2dd9c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc17c49c-4b7d-4d2d-a21d-dd39d29ac856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e7b54f-3c68-4767-a042-5dca7e98be28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727dc01c-671a-43a9-ad72-374f463da6d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0685497e-eae5-4f30-8d91-43d74b81a870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb71ef62-f1d4-4dd0-99c8-8c43555fe8d6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7a3c03-3327-4dcf-9ab0-70bdd09b53f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4878fe65-bc0b-4666-97cb-bcb1a0422300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c168f4d6-e6a8-4881-9537-35c3cc5f6abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19366295-08ec-45ee-962d-9957dd5d4abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e07ba9-f412-4644-8c0d-54f6e06121bd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73ceaa9-4b22-46a4-9133-8fc729b273b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0303ac4-a322-4d2d-af9c-36227ea7190c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0728a02a-51ae-44d4-8e39-51a492f97675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8474805b-e0c2-485c-8fc3-a9526595518c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5549df23-6ff3-4565-ae26-03cf2ac15bd2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11754cbc-abe8-45d2-8fdd-ddde6be2de7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e55c37-6560-4998-a1fb-75bee74f00e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9df3c22-3d11-4472-959f-2a4b998ec38a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e22bee-28b5-4045-a878-41c81a334c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dd75a3-71f9-4276-bffe-5773746bd23f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4ed17e-48ed-433a-9d89-8cbb2fa46198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd892fd-5bcb-4fa8-8ab8-2fb1358a26c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bde4b18-b3c0-4f3c-93c6-264d71749e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fadbb15-4d4a-4dee-88ee-6df960c9749d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3852515-2596-46b0-97ee-67daeda46385",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcc11ee-f9f1-417e-a7e7-5357aac42e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a080bc9c-d104-4eeb-947c-e8c9c37e4462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a979f0d1-f6d8-4e75-97f8-6acdcf7ff862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c854044d-cc17-43ac-9d51-834e6922a60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe9a15d-5c5a-4085-848c-79e81172a72d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f4843f-cfda-4935-bd09-114c08c5f3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0635d5f2-2c18-4626-ae08-ba245dc01934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e166feab-46dd-4348-84c3-f6cb4e5dd7c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b75d409-eaf2-42aa-9aa0-fdbad6908945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c267b0-ef10-4e30-bfb7-15cd13182698",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ab6f75-40da-4110-bd34-2dc6119d0961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b1fbb6-5cd6-4327-a021-62fddc951b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f6d073-08a7-4f34-a7fa-bf63ad2f5b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51aa886e-da57-4151-807d-c190553f8805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d98cc3-e738-4ea2-96ed-e1d00b1a0f92",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39df2100-0aec-4f42-8b28-8ad9cb89e21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3afed394-6dbf-4ddd-a7c2-fe7dfd42b809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a56e64-e91c-425d-9a15-fe1d9883c13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce3fb0c-80e2-4a08-a19d-af114e65793e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4688577d-5803-4d90-96b6-371dccc2c473",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da29e3e4-4449-4684-9a70-48cb92554d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "265c3f94-e952-4707-9b08-6c18ff42efee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e43ce5-d517-4366-aa7f-a818ab198e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341090b8-0a21-4dba-86aa-b61605986780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd473edb-6426-46dc-9d9b-b6e07c86b0e5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f462f160-7546-459c-90e6-1f17a3247fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd0bac0-d357-4b7b-a1d7-5f1164f3ff2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf965461-c5b8-4491-a071-30bc9c0f80cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36fc0fc9-b4fb-4ff6-845f-45fdb9c857d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c10b8c0-b159-4c39-8fbd-2aac4357f8b5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee86b8f3-3d77-4818-82a2-f4682b166057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a9a4be-2a40-4a31-a8df-108e9cbe21a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bcdb66-0d31-4b1e-9a08-4e4bc28493aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14be047d-c017-45b2-ac0b-42515a7fbcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409bd19b-08e5-47b2-9da2-f5cdd4ec3e12",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a42cca-faa4-44ba-bfa7-20ddd5c67ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4e5ec82-fe25-47bd-a154-4832aadf8eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40895691-9809-4343-bc70-2dbfa35ee499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80563cff-212b-47f3-b4d1-8f317d571993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc8ac84-bf14-43f0-a4d9-d56a93ee2650",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecce539-c9b6-4029-9166-436bbd612be7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b8ea09a-3c9a-49f0-9032-d1d5e1083726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cdb7e5-61d4-47b9-824b-fcef580439e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc8042b-2a97-4890-9e6e-443d2c48c4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74daee2-3660-4530-a7b6-ca9033358430",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213b2302-bb20-4bba-9c69-3a5b5fa2525c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2856f7b-aa43-42aa-9e58-f14879bff48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4d5d82-8f75-4eb5-9432-f660882d07d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e7d1bf-ae98-44ed-82d5-4d6a7b6108a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29515313-a2af-445c-97e7-b419f1accb79",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea71ca90-1edb-48f5-822f-2ee02fed7715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd75886b-bafa-4493-aec4-d60a5c1be191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13963419-f1cc-4f4d-bd0e-65a0e6513540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac47b92-a559-44d2-b26c-4342de368fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05f2f14-64d3-4bb5-81d2-0d4ad4a61601",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef90ae0-1212-4e2f-a1d4-37a77951fed9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "029edfd3-8c2f-4865-a8b9-53df45cefbe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a70bad-5c25-4d96-94cd-2541d7e81b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc6c97b-b0ed-4dfd-acb8-f5f926ec0596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374e4007-3d7c-4404-a4d8-dbaabc1c15ad",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edf1ba3-0fca-417f-9fe0-cebcb9264781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a24e0d55-81c9-4a13-a2f7-1aad64328cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45207be4-6f30-4e42-85ba-1372a35ac193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe329aa-58e6-48bd-8273-c6aa0213124c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42a79d9-032c-4075-9975-44897fee5ee5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd79059-adee-490c-8d9f-99578a440922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d6b930e-c1ce-410a-b9d4-804c2190c60e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63786125-5800-43f0-84b7-5f668cb68e73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df6083f7-007b-4ac2-8047-81fc6d0381aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ac4435-3479-40de-90ad-87836e158277",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59537f0-5a18-4ee0-9849-af1e5c6e8981",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed556c26-d0b2-42cc-8caf-d74dba8e1b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4323faa5-1ec1-4c28-8be7-0fe977a85852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2398853-5a5f-485c-a8ff-3f0ed25a0956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e63a0df-af65-4765-9369-22df8f1f397a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e672e875-2a3d-411d-85a7-b7c7b4159727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9392a4be-27a1-448f-9208-1d1a9f4d98bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27db19d-e0c9-48ab-8417-038be811bceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de999acf-6e0b-424d-8ca7-b1993a073a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724f4970-1d75-4237-b33a-3915d0f145ba",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe27982-8e79-43f1-9e59-3f278b0ff930",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f577c44-717c-4abb-b9f6-48ce1dce84ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093b259e-b4df-42ef-a6f1-2d9f7004ff35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21aab8b6-e285-45c7-bba5-ce6475940d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a6c242-c6ed-4752-9019-4da6160131db",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e87c947-7fc5-476a-abbf-8d15c349e573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ff0d04-703b-45bb-8e68-cd0e7ff2b923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2119507-8296-421d-bc11-08b8577d1b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2e8e15-e869-41dc-9860-29e5af31d564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c779272-6dcb-4afa-9e3c-90f8fd68acde",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbd08ca-4ad6-4fb9-8c0e-46aa63933640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5deabb80-5cf1-48eb-8523-64be5f563295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b620a210-fea1-4f81-a8fc-cbde35a14261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55838da0-915f-434c-8aad-09986347025b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b7ae24-6d6b-46b6-9a89-4ce17078dd0a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3958b73-f6d9-4736-8dc9-daf6556aad4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42f0b91d-b33a-4a06-9a7e-808d9cda5d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "977018d7-7f82-43ed-ab99-2f3eada8082e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b86cc2-5cff-4dc6-9f77-cdf065226cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0012c4-1534-4204-8263-b49f7526f5fb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed5096e-18a5-4979-8539-3a4f3fb2c677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b537e269-4d76-4695-ab13-6fe5406b7a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bce6682-11c2-40c4-b351-f3f7421bba7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bd7f07-910d-4efb-a709-ed3a1edf1622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f852acc7-6445-414d-b3d0-c8a5503be49a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9174216-131e-4205-9a76-83e56ed9b098",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae50ca0e-2e78-4f55-8878-26a64b3536d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae437179-e206-40ea-894f-65d598c78b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1734cf03-4938-4c53-9a5a-96c6c7f24eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5926e365-a91e-40bc-83db-b2d49b161454",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854143e9-ecc6-487e-918c-46e525265037",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43901f8b-d3d4-443b-ba34-363615c43811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1612d1a0-7db0-4f39-b4ec-084e5a749405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26219a0e-f468-44b2-8572-a8303170ce10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea5d606-a205-489a-83a3-b9efacf6fefe",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb758a84-0d18-4ac2-8bb8-692c1a7bcce8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c527a342-ac4e-4e69-9bdc-2d6434779c23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e05653-27a5-4e07-9422-52377c7549d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b6d1e7-a6d0-43f5-abc7-8dc56c877666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b0855d-7b1a-48aa-a68a-adad45ccdc73",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbd166c-d167-4df8-b2d5-00d9c6f930da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39af621b-7f11-4287-a88f-320b7359023a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c4f467-4051-443a-b024-33bc25c020f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eca7193a-b269-4f7b-b095-2d28fefb57cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6501df-5b18-4edc-8c47-a08865fcc414",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243b37bd-18e7-4668-9eb6-ca8b43e1069c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5fb81d3-a605-41af-919e-69efd5a24f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c9e567-e28c-4aac-9df2-351c047aed22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa4f23f-2ae2-440e-a859-32379bb7ddd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adeec55b-f325-4ea3-af33-ffa6c5adec3f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1880845-3053-433d-b7be-3589e6d09eb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71622515-a4d7-4f4f-a469-503571ae23d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f509ab78-0ab3-4d61-a7c2-731f9ad58712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669a0948-2ba6-4f22-ab90-145595128592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c651d809-e4e2-4adf-8f58-3ddf0b3c1f93",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca08b377-ce99-4ebc-a6a6-23427e3d1757",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c504495f-aba8-40b7-82a1-42ec0f7848eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f99618-8863-4907-b0e8-c19ee810d31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a61b10f-368f-4be0-8ef2-990948ccecec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4274dc-8e20-4dea-91b5-79dacb541b68",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba719b77-7ab4-4f21-94f9-8df2780097f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce4bca8f-ca9d-49e7-ad62-d74dd3085e63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c3aae0-f5dd-4b7f-8cc0-fc4139b25732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2868f35-849e-4755-bdbd-75b3e8199b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fc01a3-9e03-4273-b9c2-fdcd19a6312a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b86c2e-4f10-4f8f-8c9b-55c022b5c3a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "268c2c77-93e1-46db-b175-811bc134ca29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b5a011-be7b-4157-97dc-be19e45a3cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "065f30dd-ba03-4829-addf-37c49091ff3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466cc4fa-08d9-4310-8d8c-4d2a4cb48948",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e6a1cc-ce8f-4157-b060-660819997a14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f3b8a65-e07c-4df5-8c33-12a21e91e2c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa885b0c-d516-453c-b421-e532b3268258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45762b2-15fc-4e5c-ba0d-fca123a0ce93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4743d7e-4306-4160-9113-0e4037b643e8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b69908-6a3b-4b4a-add0-35b1559d4326",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79bb2a7d-0322-4dc1-9dd1-583de43ee8ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8992e04-41ce-4093-9d1c-f5b4a9c5763c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d0a281-c777-4ef0-8d30-f0c8ccc977a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e91838-1fec-49d4-b821-45de9f68b82d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7315f5ae-7119-487e-8fac-7991ec51397d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38e253c-edd9-43d3-a0ac-ca34bac0f351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ff89f7-2331-4718-8319-50fd6c49392c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49bfa6c-73a2-4dee-8b9e-c145b7091b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4a85e8-c655-40ac-bdab-f0fb5da67145",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07be305-2792-4e72-a380-8ef483d7bc08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffb4eed5-21c1-4945-9508-f0f75d602335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2e0476-3bd9-4577-9bd5-5c62d1ebba5a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde91bfe-51af-48cc-908d-f30c2678de23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387df34c-c47e-4c2f-9943-fd0e4f72d7cf",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168c1c8c-5c0f-40c3-b7b6-5abcba698f77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe2a3c78-ec3e-42b2-980d-aa7ba9f018e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ee9512-2609-448b-9a1c-5b55bfbccf83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf865c69-247b-46f0-a373-1d22e0a384f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48ea145-78a7-4260-830a-cf541082a3b5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1392168e-d592-4db0-b155-d9ed41278e3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee63975e-ea9e-479e-9cd7-ec15625f910e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bfe2d8-7d2b-4479-a06c-0253b8b7a841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d3cc3f-bff4-468f-b7c8-6633e7b4322a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1c7d53-b194-447e-8e52-e791f7f58116",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555b34a3-ce21-4fba-a218-a21f4b67a301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89130859-1009-49ff-bfef-ca3bae5899fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d275bf-bad3-4ada-a130-b5cafce6b7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb8f3de-5bdc-4979-9971-f19e684992c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bdf1093-1675-4e9e-ab4f-88f16c9f3ad3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaed1953-b3bd-427d-8ed7-88823db8d5f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed221752-038e-492b-bd7f-2bd97883b3aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "365698d7-7e7e-405c-b5f2-7d4832ecc591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce365800-d1b6-4d93-a750-035fdb8c123e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41f4626-6b77-4a81-9619-c2cf192667d0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af466d6-522e-4bc7-946c-4bba807271c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb56f2f4-fd7b-4388-a9bc-894150540420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd9140b-c4e3-45f0-a9e3-36c7635d70fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325d90c4-2361-469d-a4e8-3d3f4e5f5d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c7e3fb-90a7-4040-b41f-b72569dfb66d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11c0db5-252c-414d-ab36-1e3ac37bb5c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c98a572-6b2d-46ef-9be1-81bed3e013d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad5cb58-6c57-48b4-80bb-34cfad5ff7b8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cdba95e-11d1-4e5d-a1ed-0cac1b7db8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdb35eb-c31a-471d-a3ac-131ee3c68c62",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f88b752-e63f-4f96-a102-272b8ad5f9c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8127dac6-e77d-4898-82ea-90c35c3e9ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7093187-452e-4d80-8223-01600cfdfede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5adf8cb2-1efd-4f31-b848-3124196527d1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca89c8db-aede-48e8-9907-ec78a793755c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5695270-60e8-43ce-aae5-2ae308690f17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81ce3de6-9935-4a2e-99bf-698a375b359f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31b53f97-0e79-4992-a43d-e8ff890613c0"
                    }
                  }
                ]
              },
              {
                "id": "13b97ced-eb16-430a-a802-c653227d5e95",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca2b0eaa-9dcf-417a-83b1-ac4d4280a86b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14d2226-34d0-4793-af10-cd0d88233585",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "36aea229-e77f-45a4-b07a-df7faf2ca4a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fd69f5-3f78-4828-bcfa-b2f4be7661c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86f3a76c-5af4-47c1-b14c-0d1d15904567"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b55f6e57-7a2b-478e-97fe-d735a7b8a67d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38c14dff-a22c-44cc-846d-dc1e0f481464"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5ac9614-917a-423f-88ad-34f0e941108d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98dc5bc8-2e5b-4ac4-a2e4-abe938fcf6d6"
                    }
                  }
                ]
              },
              {
                "id": "cd485718-3f0c-454c-9f8b-13f5e7da68b2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4f01a123-22fa-44c8-99b8-124607af36ae",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d48d444-dfbd-420e-9a00-3c1cc0a930cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b345a7a4-8720-4536-9b1d-437c2d14ca04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596b1aaa-0428-481b-9dba-17ba0e56dfec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e341726-df06-496b-9785-bac5ea056e31"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b74e460c-0e3e-4a34-bcac-96c098ace177",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5738ae7a-170d-4c04-9791-3c0d26ffacbb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cedf1c3b-e61a-41ee-8216-f54f05803de4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fb69915c-ef11-40a2-a773-797e3609bb9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f3a691a-66b1-44df-9ccd-d6ba446142ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f58f5f4-d1ac-4e18-a8a9-7dbfce629031"
                    }
                  }
                ]
              },
              {
                "id": "8d4fb6ee-76b0-4069-8c19-ee9a60a7cd9d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f0e851f-7cd0-4448-8375-0db3e64a7e13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bb273453-d8b3-4a9a-bda2-44de8aa1df31"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a29fefcd-749c-45f9-91c3-809765d7e9c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7847667f-b835-476f-ab83-44675799f34f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db8d4c3b-03cd-4559-88df-8798c52cce5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d76e77fd-7831-4696-b05f-2e870782a0ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b550687f-3f87-4ff9-a7d6-33d1a1a92956",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf56515b-b810-46f4-ac56-66ded126b2ff"
            }
          }
        ]
      },
      {
        "id": "10c97ee7-106f-41e6-90cd-67ddda9761d3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ecfaf501-9625-4a2f-9695-653497f3d5be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b747d7b9-dada-4d8b-84fd-4de6200b42e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e02bfb9-3b01-4bdd-8f2a-486d1ad8d674",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852c31d3-90c2-4e58-81cb-ea6a81fc5cb9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cc8b9002-ef0e-430b-84ca-0701dfa392f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e766b6-097c-4696-8240-058cd951fc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a496f0c-35f3-4982-8d88-0647e4dde454"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a43d9db8-2e71-41fe-a9af-a4f528715205",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce2b892c-1de3-4057-a27f-014c514800ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09af5d41-3849-467c-aa67-9fa4f3fbc23a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8029b5c1-cbc1-46ad-a235-0d910ac671b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ed29271-6294-4748-a58f-9f2a8fe54f1f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c6624337-ca1d-4c05-9274-5dcc51ad752c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b187c328-abfe-4ea7-91c6-b2e49cfa7a74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3888a85f-a143-4991-aedd-21b7f444aa34"
            }
          }
        ]
      },
      {
        "id": "ea6539bd-2ab6-40b9-971c-097cd9b9b670",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bc77ac85-92f5-4bbe-8aa4-433a7359409d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e10464a5-7b51-4458-a915-c0b2e915b1b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5583a63c-f59c-49b7-963b-da3dec4b6934",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb42f7a2-972c-40dc-937d-c7aec53e79ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78d18cb4-2a89-4a55-a403-2f1ec45f7cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f7a703-bd94-4083-96a2-33df840a1656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ed3317d-ace9-475e-8be5-8517f56e29b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85b94267-57c1-4725-b0d5-6f362c2ec6fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a1b54ce-66c2-4dd2-a4bf-19021615da15"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "641da4c9-62b1-4033-970b-185bad3dcfbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3163293f-4c93-42a0-bfaf-75f86ae27965"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b25dd040-0879-43d7-ab58-5364a08ccfd5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "28b3b463-4be5-415f-8ce7-4c8f1acc719f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d463b3ee-6b27-4ad7-a245-9210f7a29ea1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "603447ba-78de-47b8-9227-84ac4147553c"
            }
          }
        ]
      },
      {
        "id": "a9f2e066-558a-4a0e-a774-3d6ffdd4e605",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fcef9973-b610-4beb-9b9f-bd7be002d810",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c182b30c-de6e-4d2a-8dde-bfcf319b0bc4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c098d48-21f8-448d-9d75-5dcfe96a59da",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e756c4-945b-4c28-b650-6efed6be86bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e7060dc-216d-42de-a74c-90111dbb968b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0e92dc-18f4-4430-8ab0-fdbb650f3d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a615e7de-a02a-43eb-b0b5-9cfc675257e6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7379b39d-b360-4840-8a91-03514081cc01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c40617d0-5cc2-4791-a00b-15a3209c0b69"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d76b971-fbf5-4226-8096-76d2fa96195b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2cb44cb-d476-4ded-b4e0-f768f54c62a5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a282858-14e6-4388-a394-4e1b73404d07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3a4b5622-cb82-4409-a727-e96d5adc4d23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28732b84-5d7f-44e2-b0f9-7d55ebb9957b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5cc45c89-2ace-4d59-b46a-c79f0cfb062e"
            }
          }
        ]
      },
      {
        "id": "86dfa20c-f3a7-4847-9815-43d2a550944e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "321b95fb-9073-4858-aea4-d55d74eeeb63",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be2d125e-de77-414a-a019-e9270aa54b8a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f21223c3-bc28-4e19-bc89-7fe5fcdc1f53",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2f14d36-1579-456a-822c-05d789fcb999",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ce27296-7984-4c72-a38d-93690f0d452d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.898245614035,
      "responseMin": 10,
      "responseMax": 551,
      "responseSd": 69.21464324135039,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698798968264,
      "completed": 1698798999674
    },
    "executions": [
      {
        "id": "9475fe38-26ff-4d3d-83e3-f9e46b5b9278",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "81908318-f6b5-4568-a112-cfbb0fee9b66",
          "httpRequestId": "4557b731-9228-4ef5-8ed9-3233b8a2280b"
        },
        "item": {
          "id": "9475fe38-26ff-4d3d-83e3-f9e46b5b9278",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9587d93d-c088-492e-85c4-42ca859920a8",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "680ec939-dc76-443b-b460-de53f7e38d8e",
        "cursor": {
          "ref": "9b05585b-7336-48e4-9582-99bbf5ce270a",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "51ba8b29-b6e9-430c-9764-521c3a3525b3"
        },
        "item": {
          "id": "680ec939-dc76-443b-b460-de53f7e38d8e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "72cf402a-8223-4a0b-93c6-57e431789d33",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "db5e3706-409d-4a8c-bb01-29874310169a",
        "cursor": {
          "ref": "8071e6e4-74f0-425e-b36b-ddaddc9ca75a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "42cbe1f5-d12c-4d23-8a1a-5b2641fc188d"
        },
        "item": {
          "id": "db5e3706-409d-4a8c-bb01-29874310169a",
          "name": "did_json"
        },
        "response": {
          "id": "9134bb8d-cd5a-4160-b5c4-9224277354b2",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ea2658-6e69-48e2-8c7d-363a4cf887ce",
        "cursor": {
          "ref": "491dbc75-cd53-4f98-a7ca-2b71a69e6abc",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "773a1f6d-7676-4ce7-83b3-c7c723bfbd3a"
        },
        "item": {
          "id": "f2ea2658-6e69-48e2-8c7d-363a4cf887ce",
          "name": "did:invalid"
        },
        "response": {
          "id": "40e41d62-5a07-43d2-bce0-4fee702002f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ea2658-6e69-48e2-8c7d-363a4cf887ce",
        "cursor": {
          "ref": "491dbc75-cd53-4f98-a7ca-2b71a69e6abc",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "773a1f6d-7676-4ce7-83b3-c7c723bfbd3a"
        },
        "item": {
          "id": "f2ea2658-6e69-48e2-8c7d-363a4cf887ce",
          "name": "did:invalid"
        },
        "response": {
          "id": "40e41d62-5a07-43d2-bce0-4fee702002f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38a6d64-da5c-405e-8793-0851b95d4cce",
        "cursor": {
          "ref": "ee8ad191-98ec-4926-ab13-e927c6491997",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c6db7caf-0d7e-4271-aaee-ee1d7f0eb5e0"
        },
        "item": {
          "id": "b38a6d64-da5c-405e-8793-0851b95d4cce",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2bda990c-10eb-4259-a988-33ebd47d5335",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e895f22c-ef5a-44c1-872d-be61356249ae",
        "cursor": {
          "ref": "f7b85ecf-2b33-43b0-a1bd-762aae3a18de",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9822c6fd-37dd-449a-964f-ba9a0ddc6eb9"
        },
        "item": {
          "id": "e895f22c-ef5a-44c1-872d-be61356249ae",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bca42ae1-24a9-4ee0-ae0b-e9ebf4c50c26",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7220d3d2-c6ad-4e7c-8642-44416c2f7726",
        "cursor": {
          "ref": "92e8de95-25de-4e26-90b3-e6e95ac24050",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e45747d3-8aee-40ee-9978-f4fe52603dc8"
        },
        "item": {
          "id": "7220d3d2-c6ad-4e7c-8642-44416c2f7726",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "93e713b9-80f2-43ab-858b-2644200bbbbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0feda48c-a882-4ebe-9c09-efc8f3e3af02",
        "cursor": {
          "ref": "56008849-94ee-4e49-8caf-9338711a7517",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0ad0559d-36a7-40e0-8555-6bf9dc36954e"
        },
        "item": {
          "id": "0feda48c-a882-4ebe-9c09-efc8f3e3af02",
          "name": "identifiers"
        },
        "response": {
          "id": "6017471a-994b-48cd-8204-596a2276c59c",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49610df4-d898-4fb4-b260-a27aff08243e",
        "cursor": {
          "ref": "9922015e-d3c7-4c83-b5ba-d080bdacfe81",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2f7c67ca-1bd5-424d-9751-2de78be3e831"
        },
        "item": {
          "id": "49610df4-d898-4fb4-b260-a27aff08243e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "37cb095e-5520-4df1-9fc3-fd647113f609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614e1187-df91-4817-901d-471f329a4535",
        "cursor": {
          "ref": "308f4193-32da-4c9c-8916-8a57d51b0fe5",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8eff5d6c-a0ba-4108-add1-2fdbfbae4869"
        },
        "item": {
          "id": "614e1187-df91-4817-901d-471f329a4535",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "23a3e5a3-9fbe-452b-8a59-6068a969e6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ddcef2-fa12-4236-9d16-bc066035b9de",
        "cursor": {
          "ref": "60d8f81c-4a16-4087-a3eb-0fb682525f0c",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5119ed52-de63-4a7f-8bbc-b1d439d49f54"
        },
        "item": {
          "id": "19ddcef2-fa12-4236-9d16-bc066035b9de",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "37fba0b2-47b6-4a5a-9088-3abf9af0d124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93bdd1b-14d2-4c3c-ae5e-6b4098f48898",
        "cursor": {
          "ref": "88c51d45-6a07-47f6-af5d-1b795b7767d9",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3f62be57-4f78-440f-a550-322fae865835"
        },
        "item": {
          "id": "d93bdd1b-14d2-4c3c-ae5e-6b4098f48898",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "777db7f5-7e8d-41de-8112-3f55c752377a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84e62d8-4de5-4325-9c14-1d081bc789f8",
        "cursor": {
          "ref": "82d6741b-80df-4a5e-bf37-fe40744a7343",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b6455d93-503b-4b70-94b9-8a928bc7038f"
        },
        "item": {
          "id": "d84e62d8-4de5-4325-9c14-1d081bc789f8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ecf1f0ce-6998-4847-b4f9-b11ba8199356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e17f71-aba3-4760-898c-44d97de39043",
        "cursor": {
          "ref": "0a88d40f-66e9-495f-9807-c1a9cfc146ff",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "91c5312c-898e-4018-8f44-9de821f6bc7f"
        },
        "item": {
          "id": "f1e17f71-aba3-4760-898c-44d97de39043",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "591dd683-509e-4dd9-9461-222cd267f48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e6ba81-50bc-408b-922c-a8b8ab1e4895",
        "cursor": {
          "ref": "2a1845fc-087c-4861-aca1-4cc79e9c160f",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b381c77f-651e-4af0-9add-d95c1234f6cb"
        },
        "item": {
          "id": "91e6ba81-50bc-408b-922c-a8b8ab1e4895",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d19ef9ad-19b5-435d-b0d4-a744080c2583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860fcb2c-2f68-48e5-ac43-da0932ef74b7",
        "cursor": {
          "ref": "56944d10-aa8a-408f-b155-b8d39f63b43f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5f2ebd78-d56b-4173-a8cc-595f7f88495f"
        },
        "item": {
          "id": "860fcb2c-2f68-48e5-ac43-da0932ef74b7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "35a638ca-3ddc-44e5-bdaa-4cebce84ffcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d78fcc8-a9d9-401f-8c54-a171e6aeeeb2",
        "cursor": {
          "ref": "7de4f745-de31-41b3-9383-4420bedf5d5c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ce420f32-3cbc-4632-87d9-cf95ebd6db60"
        },
        "item": {
          "id": "4d78fcc8-a9d9-401f-8c54-a171e6aeeeb2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c1363f87-8f70-4679-8070-9f0e4475019c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c98c6a-9f40-4d11-a69c-60aba9f967d5",
        "cursor": {
          "ref": "a2d9d9fc-d97e-4506-88b1-ac9150f71032",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dc5dafd0-7504-4e14-8de9-f0e2111010e7"
        },
        "item": {
          "id": "43c98c6a-9f40-4d11-a69c-60aba9f967d5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9d69de38-87e0-426a-80e9-0a0ef5dd34e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403703ce-8459-4e91-8d3b-be297901950c",
        "cursor": {
          "ref": "50e87f0c-ad5c-4fe2-9725-98308ea1fa26",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5ae99c02-28d6-4151-9a26-18906bc2666c"
        },
        "item": {
          "id": "403703ce-8459-4e91-8d3b-be297901950c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bfb4aa38-c3f3-4605-b583-d352d64d4709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0cb3c8-208b-4301-9caf-4d8de8a2ca78",
        "cursor": {
          "ref": "2af97520-38d0-4475-bdd7-8d2a92f6adde",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c5e9e619-3a88-4432-ae66-0a892913da4b"
        },
        "item": {
          "id": "1f0cb3c8-208b-4301-9caf-4d8de8a2ca78",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "72c7c480-edc1-4916-8006-5ff5597f7621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b14501-6ad2-41ff-a4f8-a9819620670a",
        "cursor": {
          "ref": "4bdd886f-7e31-494f-a406-efc8d5074ade",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "35d685bd-e7c3-4770-9127-35b520215970"
        },
        "item": {
          "id": "07b14501-6ad2-41ff-a4f8-a9819620670a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b134415a-63b7-4fd8-8174-49b9a6beb6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1458788-100e-4e4d-a59d-6e51dfe4c776",
        "cursor": {
          "ref": "07580e31-a64a-4766-bd93-da47b9305eba",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8644e724-b97d-4973-9e25-7362cf14fbf9"
        },
        "item": {
          "id": "b1458788-100e-4e4d-a59d-6e51dfe4c776",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9fbca6a5-41f9-4870-bae2-a69f80a2267d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc3b227-fac7-4d6b-8818-290a2fccf6d2",
        "cursor": {
          "ref": "32dfc338-1334-4f60-a499-f03f37570f5f",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "662276d6-4565-4ad0-a223-47442c61c80f"
        },
        "item": {
          "id": "9bc3b227-fac7-4d6b-8818-290a2fccf6d2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a2df8f83-d93c-42dd-a313-904f5bedf211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f4908c-40c2-40b6-9ef4-a4731a79e626",
        "cursor": {
          "ref": "66aae73b-67cf-4232-9d41-49aba228aeb4",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8741c8d3-b1d2-4099-99d5-d76d6fc2255e"
        },
        "item": {
          "id": "53f4908c-40c2-40b6-9ef4-a4731a79e626",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "401a7efd-359a-46f0-84ec-f03ab9bdee54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eace5e96-ef2e-43e6-b2ad-213584759f02",
        "cursor": {
          "ref": "6fbb1358-462e-4803-9de7-45d3b5083064",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "000ad5a5-46ff-4975-bb4d-1ba95d5312b0"
        },
        "item": {
          "id": "eace5e96-ef2e-43e6-b2ad-213584759f02",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e5be1e8a-f896-4cf8-97e8-5db010104a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1987392-3ba6-45e4-95ba-32dfd5a76c4d",
        "cursor": {
          "ref": "b6d62eb6-7ac2-4ec8-bfa3-4d3034352661",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7366eede-3782-49ba-a6e6-581dbb09e912"
        },
        "item": {
          "id": "d1987392-3ba6-45e4-95ba-32dfd5a76c4d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "41d3cc44-6cf5-4ef5-9545-e3a379cbb39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf095fc-18ab-4d6a-87f6-6b61985f3544",
        "cursor": {
          "ref": "386c4c2d-dbfc-423f-a17f-355fa690f140",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c0915678-c99e-4170-b176-9b3a3cf9f49e"
        },
        "item": {
          "id": "3bf095fc-18ab-4d6a-87f6-6b61985f3544",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4f835eec-a0fc-4a08-be72-7b56f9529331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b9d230-617c-47ac-bd20-ddc4888db505",
        "cursor": {
          "ref": "55fc9749-3d50-4fb3-bb9a-e3a481da2341",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "20f09e32-4a99-45b0-a992-b8a1d2432c17"
        },
        "item": {
          "id": "35b9d230-617c-47ac-bd20-ddc4888db505",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6890e48b-33eb-4047-a765-c49a364229e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663dc61d-11f6-4972-8cbf-924575771250",
        "cursor": {
          "ref": "d37f6816-e41a-4368-bc00-ede2c6c3a904",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ea8ebcf8-3eb1-4c20-b3b1-2d6ef8060843"
        },
        "item": {
          "id": "663dc61d-11f6-4972-8cbf-924575771250",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bc0cdc8e-dd79-4bac-841d-829ce6fdc2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d070113-f56a-49ab-8ded-d2e63add7605",
        "cursor": {
          "ref": "d1c8d3fe-76cf-4c79-b6f7-4ed484db52c8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bb5ba622-4ecc-4883-9344-d53df4dfbc63"
        },
        "item": {
          "id": "3d070113-f56a-49ab-8ded-d2e63add7605",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "acace91e-141d-4fb4-adc9-9f1c8b5a2d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d815860-fe99-4a33-b7b6-1fa844f8f577",
        "cursor": {
          "ref": "33fb37ff-0abc-470b-b5ba-782c391baab2",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e504acad-c7c9-470c-8bbb-ca21695b3f9c"
        },
        "item": {
          "id": "8d815860-fe99-4a33-b7b6-1fa844f8f577",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3ebc2878-2480-4e5e-ab8d-5ef8b9d7ca0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d222154-8bf1-4fff-9d02-9d66c5e9bb48",
        "cursor": {
          "ref": "97969025-160c-49e2-a33b-5837cee73555",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b74af996-859e-4775-b8b9-e90f977a79b1"
        },
        "item": {
          "id": "4d222154-8bf1-4fff-9d02-9d66c5e9bb48",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "17809cc8-ac3e-441a-9c14-051a38ea4d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d256b34-8781-4d27-bb5d-feae3b9eb6e9",
        "cursor": {
          "ref": "b6113a1a-543e-4587-a15f-336c34fe9784",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "465a95a6-c0e5-4fb4-b8fe-2c5252fc27ba"
        },
        "item": {
          "id": "0d256b34-8781-4d27-bb5d-feae3b9eb6e9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4ef4e2b6-01dc-4780-b389-8e4744a17d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089b4d61-c8f8-4428-889c-ae0229142519",
        "cursor": {
          "ref": "9c940096-ad12-4d7c-a28c-91aa6cc05e11",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e9d178fd-e393-4e68-ba67-6375d8419f69"
        },
        "item": {
          "id": "089b4d61-c8f8-4428-889c-ae0229142519",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "60821323-7e95-4494-a83f-7aa3552f1144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778283ce-c744-4edb-a290-3c53fbaed31e",
        "cursor": {
          "ref": "584ffdea-f5d2-491f-91fd-196d946673af",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fea8ef01-a464-489b-b984-e9acc9650c02"
        },
        "item": {
          "id": "778283ce-c744-4edb-a290-3c53fbaed31e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a8432575-922d-4a07-bed4-3c3a927e4649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23bf21b-6a67-4471-be76-48e30b8ce97b",
        "cursor": {
          "ref": "9432b7a5-b3b3-4e85-9b2c-689a839bc3ed",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ebbf6d85-35b5-42eb-9bd4-9e5ab6a0fe7e"
        },
        "item": {
          "id": "e23bf21b-6a67-4471-be76-48e30b8ce97b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3c420bb3-7143-4707-881b-e4b0808049c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d22d8a5-2518-4630-bde5-e21c05e72a79",
        "cursor": {
          "ref": "6b754f54-265a-4ccd-8a40-32a2f02a72bf",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "32fe0054-836b-475a-aa8b-01850eb7301b"
        },
        "item": {
          "id": "8d22d8a5-2518-4630-bde5-e21c05e72a79",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "50e1c99c-b546-4770-9df9-8ce25690a3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ec82b7-1a23-4919-b8a1-d035b438e0fc",
        "cursor": {
          "ref": "04d31d64-7bde-4e06-812d-62ad553afbd7",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "252d965f-d2a6-4ad4-a2cb-732527bd8568"
        },
        "item": {
          "id": "96ec82b7-1a23-4919-b8a1-d035b438e0fc",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f917f21f-46d6-4ecd-9e67-9e4f92284bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be61803a-0d16-4b8a-9de9-0b1286eab840",
        "cursor": {
          "ref": "89837b9b-dc99-4d26-9796-fe9665f08ef8",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9acc131a-4c96-4b14-800f-8a648d14a5cd"
        },
        "item": {
          "id": "be61803a-0d16-4b8a-9de9-0b1286eab840",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1df8e604-1510-4414-8ddc-ad79c6a0aab6",
          "status": "Created",
          "code": 201,
          "responseTime": 551,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a8af201b-7f97-4562-a1be-ca8b7cae00d6",
        "cursor": {
          "ref": "b894fff7-f269-4cfe-8775-fadd87146777",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "54673d7b-82be-4659-916b-8a39b58ed7b0"
        },
        "item": {
          "id": "a8af201b-7f97-4562-a1be-ca8b7cae00d6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4c740e86-97bc-494d-b155-61b7de46371f",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b7a0fccc-4238-4eb6-96a5-2fa7d521adbe",
        "cursor": {
          "ref": "53104476-1ab9-4707-a1bb-a3d7e940fd3d",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "22445b2b-8228-4f4e-813f-9b3c257909c4"
        },
        "item": {
          "id": "b7a0fccc-4238-4eb6-96a5-2fa7d521adbe",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4f26ec3f-aaf5-4704-a25d-01fed88a2077",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "1cd9938d-6aed-4dd7-bff6-4ad3d757743f",
        "cursor": {
          "ref": "6324b1c1-678d-4508-964c-ff95d2bcbd32",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "19fe4524-4287-4cc8-a4b7-f1309737fac0"
        },
        "item": {
          "id": "1cd9938d-6aed-4dd7-bff6-4ad3d757743f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "651a56f3-21bd-42eb-a437-3adc0938f335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454aac12-9fbe-41b4-9713-ac87152eb3ab",
        "cursor": {
          "ref": "dae83e25-5508-49a1-8bee-0e7ee04c3042",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c1f236a3-2417-4fd0-a6af-3b5dce302a20"
        },
        "item": {
          "id": "454aac12-9fbe-41b4-9713-ac87152eb3ab",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7e75f0a5-66ae-42af-99e4-aee3f50279d5",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "761b3c6a-47b5-4552-95aa-200112921b7e",
        "cursor": {
          "ref": "acb85753-07b3-4f04-845b-6771711a9553",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "11b18343-fb69-4940-bade-cc67e9c1680f"
        },
        "item": {
          "id": "761b3c6a-47b5-4552-95aa-200112921b7e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2da48dee-be1f-4330-9b4a-f20c4714e94f",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "172cf196-0bf1-4d99-bd1c-77ee4dc1752d",
        "cursor": {
          "ref": "dc5d5629-bab1-4067-b082-d0f63745dd12",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e7e83d4f-ff33-4cf3-a83d-c44df7afb663"
        },
        "item": {
          "id": "172cf196-0bf1-4d99-bd1c-77ee4dc1752d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2503f9a8-aad2-49b8-a921-5089556a470b",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1630fa5c-a367-404b-9760-6025ec94322e",
        "cursor": {
          "ref": "4986f2df-744a-47f7-9bd6-1d886519cdad",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "779623de-f281-40ad-bcce-c013306acf71"
        },
        "item": {
          "id": "1630fa5c-a367-404b-9760-6025ec94322e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c2ba3ecc-7356-4b5f-b71a-939d4b34ddca",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "10052da1-9acc-41d8-b799-8dbe37d38165",
        "cursor": {
          "ref": "66a80d80-db68-4571-9273-1d6b9e99c2d6",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "017139ad-8877-4c75-b3d7-05249d8a1f08"
        },
        "item": {
          "id": "10052da1-9acc-41d8-b799-8dbe37d38165",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6aa4fe86-3cfe-4cbc-bd95-b2682565a932",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f479ed82-60a0-470c-81fc-8da937f3826b",
        "cursor": {
          "ref": "ed25f6d2-1da8-4d2e-a068-d965dbfabadf",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f50b18ac-1b6e-4c6d-ad50-2d6fe63354e7"
        },
        "item": {
          "id": "f479ed82-60a0-470c-81fc-8da937f3826b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8ec1dcf0-7b93-48b7-8c39-1da27f4251cb",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2740c16b-8da0-4cad-ae34-8b6995ffeb77",
        "cursor": {
          "ref": "e9c9f715-a487-4bda-a149-1444c36385a6",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a1648410-0fc5-4917-b93f-d72c392ebdca"
        },
        "item": {
          "id": "2740c16b-8da0-4cad-ae34-8b6995ffeb77",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9a0b7eb6-ade8-4d7a-b6bb-137479d5c36b",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "64134b3f-bdcb-40ec-8dcb-cc67c3f4db6a",
        "cursor": {
          "ref": "4a161cde-6acf-43b3-8018-b8152bda3261",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e7cf2c6e-20d5-4f49-a466-962ade3a0219"
        },
        "item": {
          "id": "64134b3f-bdcb-40ec-8dcb-cc67c3f4db6a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a448e3de-c4dd-4927-b4fe-6a03b221739a",
          "status": "Created",
          "code": 201,
          "responseTime": 435,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cdab5a72-5787-46b0-8446-ebd12ab26ac0",
        "cursor": {
          "ref": "3be096f0-027a-437c-8d90-020cd264c530",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1a80ead3-c7dd-4e12-8ea4-781aa4335982"
        },
        "item": {
          "id": "cdab5a72-5787-46b0-8446-ebd12ab26ac0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "67278aee-5f43-434f-88c7-013978879ac9",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "941210b7-7f3e-4734-822f-fc6d66534ddd",
        "cursor": {
          "ref": "6eff34b2-56c1-4838-9de9-02e6a71ec146",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "eb3e6683-6569-48d8-966a-393d3c9b84cf"
        },
        "item": {
          "id": "941210b7-7f3e-4734-822f-fc6d66534ddd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d3436721-30af-4e60-903a-793e0bae513e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b33615-774a-4335-8115-f99cbc65f7fe",
        "cursor": {
          "ref": "02c8c79f-ffb4-4087-a1b9-58483e54bec0",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "47a9497b-f7fa-4e99-89e6-f9647ce1db7d"
        },
        "item": {
          "id": "59b33615-774a-4335-8115-f99cbc65f7fe",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "58a62038-b755-455f-914c-c01b991005d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca9eecd-dc70-4590-886a-d244cfa3b609",
        "cursor": {
          "ref": "17672088-eea6-45d0-94ec-91ff20d6b5ce",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "246281b0-ed32-4683-b555-c1f2eb19be02"
        },
        "item": {
          "id": "6ca9eecd-dc70-4590-886a-d244cfa3b609",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "76f91694-e182-4f9a-b3cd-5aafb8f521cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dba2811-56e0-4a57-a4ac-fd7ebbdcc033",
        "cursor": {
          "ref": "a2f37c34-8d2a-4b4e-bc3b-93a2ff8e5ba9",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "dda4fde5-f12f-4db6-aeeb-d26fbe5b6d53"
        },
        "item": {
          "id": "7dba2811-56e0-4a57-a4ac-fd7ebbdcc033",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ac09a4d7-743b-4fc2-ab5c-ca299b955c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180a5887-8c7f-48e4-872d-8339dc452665",
        "cursor": {
          "ref": "034ddca6-1a6b-4d75-9034-65c6c550c1b5",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "43a4d97e-3594-41e1-b32e-5d05be94436d"
        },
        "item": {
          "id": "180a5887-8c7f-48e4-872d-8339dc452665",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9e4ee949-b38f-4e22-9874-2664c43a1a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cf5171-b678-4a40-bf85-9c9ed7a314e3",
        "cursor": {
          "ref": "50a5974a-4822-4e9f-a973-36aa1e437906",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "624f1f35-0ee2-4de6-a072-1de7d299e81b"
        },
        "item": {
          "id": "59cf5171-b678-4a40-bf85-9c9ed7a314e3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f53e4587-f8da-4d63-b028-5952db984188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31313fff-684f-42a5-90b6-387aaee95f44",
        "cursor": {
          "ref": "ee33bd1a-be18-40d9-86f1-34db111c43a6",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9efa4b75-06a4-43b3-b1a3-ec6a42691158"
        },
        "item": {
          "id": "31313fff-684f-42a5-90b6-387aaee95f44",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7d27cbb8-c9fc-4315-88c4-bb971e26de21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824fc4e9-f181-41a7-83eb-0a076cf82978",
        "cursor": {
          "ref": "856c0fdd-b382-41b3-bdde-3e326e5bb563",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e27cb386-de58-451e-b3ff-5b4a6aeae6bc"
        },
        "item": {
          "id": "824fc4e9-f181-41a7-83eb-0a076cf82978",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "64eb94a2-e0b1-47ca-996a-202b3deee0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcc5446-baaa-498a-a275-a1bf5cb8c88e",
        "cursor": {
          "ref": "d4b3323a-3122-4ee1-8e95-5c634807d69c",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2707aed4-681a-49ff-be77-8ed1a1631dad"
        },
        "item": {
          "id": "4bcc5446-baaa-498a-a275-a1bf5cb8c88e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b33cfeea-8bc0-4283-b6d4-8b300b758043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf22b0d-50f7-45db-a5b5-7bde8208d05c",
        "cursor": {
          "ref": "54ee845e-d3a2-46e9-91ec-afc511ceed2f",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e16f1b00-1644-4c98-89ce-deb5f5a644ae"
        },
        "item": {
          "id": "9cf22b0d-50f7-45db-a5b5-7bde8208d05c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e28ba3df-ee33-473f-bb16-5cdc96764bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1efe1766-6b33-4666-bd73-919162f7c892",
        "cursor": {
          "ref": "7d912947-3556-4a02-a68d-24cdf259f241",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "52c8221f-60c4-4a0a-a580-0fe9bab612d0"
        },
        "item": {
          "id": "1efe1766-6b33-4666-bd73-919162f7c892",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1016a212-fa1f-45a8-957d-a47e0ffd0f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7299c1d-2854-4b48-a4ab-8c18e23cde7a",
        "cursor": {
          "ref": "0f149c18-6db6-4f30-89be-6f4bf61244a7",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3d67f3b9-7dd7-4e03-8e53-fd30d0931537"
        },
        "item": {
          "id": "c7299c1d-2854-4b48-a4ab-8c18e23cde7a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c858e0c4-0928-46b2-aa51-d3b6b80373fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5606d7d-60a3-4612-9fc9-6ed153cb1e36",
        "cursor": {
          "ref": "66f3ae98-e578-44d8-8547-c68bdf463d07",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8e4e87a5-117c-400f-8dc6-7b962d18e313"
        },
        "item": {
          "id": "a5606d7d-60a3-4612-9fc9-6ed153cb1e36",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "868aa163-4fe1-44e6-b6c9-96ce8cf2d3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d348fde-ae91-42b0-bbdb-4dd7bfb968ce",
        "cursor": {
          "ref": "646e181f-18ad-4ba7-ba8a-8987bbb45fc3",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3bd85d58-0f07-41bf-a7bf-63477fc0365a"
        },
        "item": {
          "id": "6d348fde-ae91-42b0-bbdb-4dd7bfb968ce",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9df19ba2-c7ab-41f5-99bc-d8ace9021082",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "839a0cc9-27fe-4217-ba2e-0b6087efe12d",
        "cursor": {
          "ref": "53f0a3be-e088-4a0d-9f7f-4cd6b4909c1e",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "27935119-380d-4075-8f6c-0c672d375ad9"
        },
        "item": {
          "id": "839a0cc9-27fe-4217-ba2e-0b6087efe12d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e7f68c81-1d19-4519-8a18-c12c3a5e13a1",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "cf51909b-b258-4986-aa88-94b3318e1980",
        "cursor": {
          "ref": "ae4be8cc-7759-48fb-9c9c-39179bcaef38",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4a74c456-478d-4111-b919-13af0e3a1c58"
        },
        "item": {
          "id": "cf51909b-b258-4986-aa88-94b3318e1980",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4e09c46c-9f11-4bc7-9dde-b34d4058ee3f",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4e7aafe3-4fbe-4b62-85ad-dbb81913722c",
        "cursor": {
          "ref": "b90a0ffa-1b24-4322-b5cc-d28bd071133c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "98822ce5-10dd-425c-a01e-c42ee98ae6f1"
        },
        "item": {
          "id": "4e7aafe3-4fbe-4b62-85ad-dbb81913722c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5502678f-9419-469d-8461-ba17614f1063",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "49f46b25-4fff-4743-8a17-b18d78c8498e",
        "cursor": {
          "ref": "c6b9821d-e1e8-4ae7-996e-da18db602c75",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "48596f3a-c503-41e0-886b-69785f85e47f"
        },
        "item": {
          "id": "49f46b25-4fff-4743-8a17-b18d78c8498e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9ccd3ddb-3df9-4c55-822d-024b1a6f1d1b",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "cae8f73f-3dd2-432f-9587-2c425b01c565",
        "cursor": {
          "ref": "6cda5ac8-ff93-463c-9c8a-7030ebf72d26",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "befd6a68-3dba-4ca2-8d43-6cfb200d6832"
        },
        "item": {
          "id": "cae8f73f-3dd2-432f-9587-2c425b01c565",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "76f09cdd-7f8e-4877-a9b0-eb19c14445a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b00e24-9034-4b96-8caf-efd62da3dad6",
        "cursor": {
          "ref": "e7ca3e4c-a4fe-4c2f-b581-be7757c65560",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6960190d-67bc-49a5-b9b7-281acfa199bf"
        },
        "item": {
          "id": "38b00e24-9034-4b96-8caf-efd62da3dad6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "26437f9c-6552-4619-9f5a-dac6a21c78a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfa4906-f892-454e-8134-7a2366ee8971",
        "cursor": {
          "ref": "7aba687d-b661-411b-a0bf-792b9a6bb793",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a7dfdd1a-1fc4-46fb-a269-7877888a41db"
        },
        "item": {
          "id": "8bfa4906-f892-454e-8134-7a2366ee8971",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "34d06a47-be14-41b3-81b8-b3c4bbb90bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8075decd-af00-4267-b8a9-d1fc8e03c067",
        "cursor": {
          "ref": "7109dc49-ea07-47c3-913d-6ae800ae622c",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5d810cef-31bb-44ac-bc2e-d1caa0d6b695"
        },
        "item": {
          "id": "8075decd-af00-4267-b8a9-d1fc8e03c067",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a8879930-db0e-4ab4-9899-e21624e5392c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a529f69-f82a-4f29-8494-ce132ee4e4be",
        "cursor": {
          "ref": "929d63d8-1bfc-4b8d-aeb4-6feb73dda23a",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f71a05d9-ff27-4f59-b204-69dd141cca72"
        },
        "item": {
          "id": "9a529f69-f82a-4f29-8494-ce132ee4e4be",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "379ec2aa-2322-4402-9380-b89643adaff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb25aad-66b8-48c5-958f-e0111398dae8",
        "cursor": {
          "ref": "3bce2a46-3c41-44ce-b649-83b3544f17a9",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fcf6d533-756c-40b0-8607-68a6fb0bc841"
        },
        "item": {
          "id": "8bb25aad-66b8-48c5-958f-e0111398dae8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "dc8c223c-8608-4350-8f06-2e03706ecb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038296af-3f16-401c-a280-edb3b3932f7e",
        "cursor": {
          "ref": "f2c1827d-b463-462d-b4bd-2efcc6b139e3",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "382931d1-244a-49d6-8e2b-30cba291f944"
        },
        "item": {
          "id": "038296af-3f16-401c-a280-edb3b3932f7e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "dc528455-d68f-4731-abd7-021558e2518e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d7800c-8522-4959-bf8e-f0dc2ae6c42c",
        "cursor": {
          "ref": "081865a6-df7d-4dae-b516-9b11ecbcd8f9",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c4c76c5c-5720-4e30-9024-0782269ff500"
        },
        "item": {
          "id": "b4d7800c-8522-4959-bf8e-f0dc2ae6c42c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "36f2562e-43bd-43e4-97f9-a22f7f528ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c08847-a4c5-4297-99f3-7fba7ce33b98",
        "cursor": {
          "ref": "48814332-71ae-40ce-85a6-7b22977de05a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6325eb1c-9d88-401c-a1a8-8beda118bbb1"
        },
        "item": {
          "id": "72c08847-a4c5-4297-99f3-7fba7ce33b98",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3fdeb557-f533-4f7f-9886-e77b4a69f5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e63aba0-8e75-4139-83c7-9463fdab026c",
        "cursor": {
          "ref": "c1a2096f-ae83-48a4-9987-9db2c0cb2751",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "49fdcf2d-b860-46d7-b5c7-45e6f71a1083"
        },
        "item": {
          "id": "6e63aba0-8e75-4139-83c7-9463fdab026c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5d8ecf7b-7ac3-4251-a02e-fc5fc68c7275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a39afb5-7b73-45e4-8385-8e59ee18c1c6",
        "cursor": {
          "ref": "cb813151-1665-4921-86d1-7c9c5607b7c3",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "35bde4ac-02cc-4c18-9c86-fbfafe6aadfb"
        },
        "item": {
          "id": "4a39afb5-7b73-45e4-8385-8e59ee18c1c6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "01d51035-7ec0-4cdc-84b8-a8411d14f4bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c671e27c-e1fd-4f06-80ae-658dbfdeade5",
        "cursor": {
          "ref": "78985478-b00e-4394-a678-b4d3d06b2a63",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "91eddef0-9b3b-4413-9374-7b765c3382eb"
        },
        "item": {
          "id": "c671e27c-e1fd-4f06-80ae-658dbfdeade5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "dbe46ee7-44c4-4b16-8086-f268f45c7576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467bca3d-f7ec-4f8f-b45b-de603aa30632",
        "cursor": {
          "ref": "9be550d6-4de3-440b-8667-69687740f232",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1c7898e3-913d-4b1c-a6c4-e23ec6bbd633"
        },
        "item": {
          "id": "467bca3d-f7ec-4f8f-b45b-de603aa30632",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1dc390a1-1c85-4bc8-8831-3545f72a2899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4d4d04-443d-4df4-b38d-77398084da35",
        "cursor": {
          "ref": "cb3c4cc2-8cb4-4694-a937-bcfd565fabba",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f8a7c9cc-87a9-4f7a-8579-04440e4c35e1"
        },
        "item": {
          "id": "de4d4d04-443d-4df4-b38d-77398084da35",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "33506c6c-1bd2-4f11-ab09-f49a6bd122db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739702be-7910-4d98-9556-57a2311d45b4",
        "cursor": {
          "ref": "eef674fb-8ee8-4014-b2d7-83043f75c2fd",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9eb95aba-23f4-4c28-a3b6-497d84ca6a5c"
        },
        "item": {
          "id": "739702be-7910-4d98-9556-57a2311d45b4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6ed6d6d1-4fe3-4d7e-aef2-bff61e9ba190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b226a6a7-41a1-4385-804a-ba44fba26856",
        "cursor": {
          "ref": "462929f7-0627-405a-b7ba-4d5b49762079",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "78ac7dec-fa69-4298-867f-54d79546b8ed"
        },
        "item": {
          "id": "b226a6a7-41a1-4385-804a-ba44fba26856",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f43fe456-a8ab-4f28-9b79-03083be48652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8569b3-898c-4454-932c-7edd734e38e4",
        "cursor": {
          "ref": "26282fa2-ad50-403f-986c-251ee58afbf0",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c83fc27d-c5c4-4881-9049-871d4f777f68"
        },
        "item": {
          "id": "1b8569b3-898c-4454-932c-7edd734e38e4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "26f47e03-989f-4d25-938c-878b789db6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafddcf4-3695-4115-89ce-e9d6cc3b2184",
        "cursor": {
          "ref": "e2ad91a7-e2b1-4ad6-99ff-c94318583745",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9564317f-a121-47d4-8f08-05c345af42f4"
        },
        "item": {
          "id": "cafddcf4-3695-4115-89ce-e9d6cc3b2184",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0c250f79-d919-4b30-9b2c-dc2458a2a309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81b32d9-df73-499b-8311-af62761dabd2",
        "cursor": {
          "ref": "397ba5a6-b3a9-4af3-a28f-7b51fcff09ab",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b9a20974-5eca-4703-b1fc-4250b440861a"
        },
        "item": {
          "id": "e81b32d9-df73-499b-8311-af62761dabd2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cfbe2186-7d41-4c9e-83af-40bf3c84831e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9638d36-aafc-4731-9e58-827d071c8e81",
        "cursor": {
          "ref": "b56df278-aad1-4902-9765-517b0a206c32",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9e8be8a8-d042-42a1-8cc1-e0cce1409fb5"
        },
        "item": {
          "id": "e9638d36-aafc-4731-9e58-827d071c8e81",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b8160d3f-f1bd-401f-a8f9-277dda46259e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65241599-24dc-4726-bb48-0ce03d21240f",
        "cursor": {
          "ref": "54f7f3db-fd9c-4953-bc65-c91fceeb956d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "86299a5f-aaa3-404b-8bd4-0bce7ca31199"
        },
        "item": {
          "id": "65241599-24dc-4726-bb48-0ce03d21240f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7d8d8eb9-1ca2-4fdf-962b-f219684bea3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8772e676-274d-4b19-9879-fc55d23c7a36",
        "cursor": {
          "ref": "e2d8cd66-9bea-420f-839b-2a4190a55212",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9eb73e59-4e9a-40ce-8e30-614875cfb475"
        },
        "item": {
          "id": "8772e676-274d-4b19-9879-fc55d23c7a36",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "187edcc1-17d8-49bc-a4c8-eba09dc2fab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72617cb6-5114-4e8b-87b1-c8d8a79a83e6",
        "cursor": {
          "ref": "d70e5dd0-16f5-4b07-8e6c-4e20ff9a9f08",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a88cd789-6518-482c-8272-82e676f34e1c"
        },
        "item": {
          "id": "72617cb6-5114-4e8b-87b1-c8d8a79a83e6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0c3cdd89-cd8b-416f-bb85-7cfe71976ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8daa6c94-e483-4603-869a-3fbb292c092b",
        "cursor": {
          "ref": "4d5ca99c-2f7b-45ea-95e7-652fd9a89a81",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0628e11e-44af-4180-8a93-56beca5fbcd3"
        },
        "item": {
          "id": "8daa6c94-e483-4603-869a-3fbb292c092b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fb9c1649-e907-4afe-9172-fa53fff8a569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c1c880-a2f3-4285-b376-d4830d5db983",
        "cursor": {
          "ref": "674fcd58-69fc-4359-897e-311e2f32a793",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7e1ed9e4-96cf-4400-ba29-148db5586072"
        },
        "item": {
          "id": "b7c1c880-a2f3-4285-b376-d4830d5db983",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "08ac7b6f-9454-42d5-973d-269d3e216fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416653cc-2a67-48b5-aef9-4804602bed5b",
        "cursor": {
          "ref": "13fdef88-9892-4b4e-944c-b8eccdd1372d",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "15a7b8f3-5d7a-4746-ad95-722d12f3008e"
        },
        "item": {
          "id": "416653cc-2a67-48b5-aef9-4804602bed5b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "90376b1a-6604-4da9-a135-4abab81cb0f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6342804c-2477-4652-83e4-4ff055da1108",
        "cursor": {
          "ref": "8b9a1a0b-b1d3-451a-acee-0454d41dc129",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e8f312ba-d3cb-4a14-8b36-b6d1d1e4451a"
        },
        "item": {
          "id": "6342804c-2477-4652-83e4-4ff055da1108",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9c35a5db-a088-49b0-adde-d530f7216bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5262cf5-4980-465e-b5fa-f386bea692b0",
        "cursor": {
          "ref": "e7c6fda4-73f2-4e6e-bdd0-c17fe4cddd48",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "76c1503f-0f8f-4c9f-9371-819195fbb675"
        },
        "item": {
          "id": "a5262cf5-4980-465e-b5fa-f386bea692b0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1d1dd1a9-460a-4892-b555-8d975cee34ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0da1300-61da-48bc-a9a1-6b02fc93ac9d",
        "cursor": {
          "ref": "b2789f12-e0a0-4ba2-ba96-5e12851cc052",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2c9c9cdc-13ad-44e2-81ce-65bbf1d21b6d"
        },
        "item": {
          "id": "a0da1300-61da-48bc-a9a1-6b02fc93ac9d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c8eb9b44-6c0b-4a46-ba62-f389e0f08ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77ad045-55c3-4aca-af2b-0f09dd46672a",
        "cursor": {
          "ref": "0576d53e-c961-443b-af74-891f07de5a1c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "58dd3033-e4af-4894-a972-7542ea9be9ff"
        },
        "item": {
          "id": "d77ad045-55c3-4aca-af2b-0f09dd46672a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4519317e-19a0-4172-b0f6-b7c9b23c6989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8bb172-9ddd-4a15-8613-d9e62948243c",
        "cursor": {
          "ref": "0e13b4c6-89df-45a4-a1e3-b1837c9d5c04",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f7ab54c7-e234-467a-8eb3-bf6c2e8c320c"
        },
        "item": {
          "id": "4a8bb172-9ddd-4a15-8613-d9e62948243c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2f396776-8fe9-4b77-98b5-f8325a662a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536f4886-9aa5-424a-be2e-4574863a13da",
        "cursor": {
          "ref": "70b29e13-8069-4ac5-874e-bc531b9f0f30",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2eba3672-40c0-4cce-ac46-bb484d10e57d"
        },
        "item": {
          "id": "536f4886-9aa5-424a-be2e-4574863a13da",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bcdc6cf9-a89c-4309-8ca7-419ea67f3bf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b76027-23ee-44d6-9529-985ed9852926",
        "cursor": {
          "ref": "6395be65-b0c9-4b16-933f-4362a8bb8753",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "81afa2c4-ffe3-4463-9d0e-4ba1030dad6d"
        },
        "item": {
          "id": "76b76027-23ee-44d6-9529-985ed9852926",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b8c6dda8-a39e-49a4-962a-f57b4ede0980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "71d69560-cc32-4c51-8d58-211d0cfe5355",
        "cursor": {
          "ref": "cfeaf1f6-3cbb-4446-82aa-066acd1f43d1",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fd3fe02b-e1be-4e87-8b38-5e10a5b10c87"
        },
        "item": {
          "id": "71d69560-cc32-4c51-8d58-211d0cfe5355",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7c324245-7e3a-46cd-b98b-d7a2a2a94b35",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0359cb0-2e8f-48e9-a182-389d716377bf",
        "cursor": {
          "ref": "c6cadea1-3f6e-4c99-8771-64b356e5d40a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "21d0cbaa-76e9-4085-b574-851ca964cf49"
        },
        "item": {
          "id": "d0359cb0-2e8f-48e9-a182-389d716377bf",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "de42ecab-790b-4964-b270-4c8c008deb2f",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "987efe3a-3504-443f-b83c-f38dd3f3875d",
        "cursor": {
          "ref": "65bb6eb5-279a-4748-9d07-c05254e354eb",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9e06e183-2cf7-48f6-a462-5bb5986218bf"
        },
        "item": {
          "id": "987efe3a-3504-443f-b83c-f38dd3f3875d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1ca05e7e-a679-4bd9-8927-1ab90c530788",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e6058b-6b2a-4288-a90a-2644e77f65e2",
        "cursor": {
          "ref": "dc34e664-de74-4a3f-ac2d-9612011e00f1",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f2a08277-f0b3-40e7-a676-c9aedd51a6b8"
        },
        "item": {
          "id": "c5e6058b-6b2a-4288-a90a-2644e77f65e2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ce9ea5cf-6a47-40f3-b7f0-941099dab52d",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5160528-9eeb-41a7-9c1a-82a5b4bd92fb",
        "cursor": {
          "ref": "af412a93-fc0f-417d-a959-844e626ec406",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ac1ca7f5-5f1e-4f83-9385-ef456ed177df"
        },
        "item": {
          "id": "a5160528-9eeb-41a7-9c1a-82a5b4bd92fb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cc6a7eb6-a3d4-4567-b7c2-e3d4169a4e29",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-01T00:36:23.324Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-01T00:36:23.324Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ad28b3f5-4237-4dae-ab37-0ed5d69a6b9a",
        "cursor": {
          "ref": "fd396d63-5608-458c-b9bd-322ac731588f",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "965c27fb-d5a5-4adb-bca4-a8ef995041f3"
        },
        "item": {
          "id": "ad28b3f5-4237-4dae-ab37-0ed5d69a6b9a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6ba8ad57-2509-44ae-af4e-e8e5b771b8ae",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32895afc-421c-4198-80aa-a9fa4b95157a",
        "cursor": {
          "ref": "cc6dfb58-df53-4f97-b33f-72d3394a5750",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0955826b-8c73-49f0-a5de-81671d85c16b"
        },
        "item": {
          "id": "32895afc-421c-4198-80aa-a9fa4b95157a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4b78cc39-d9a2-46ba-b8ad-4255aa3724b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d893222-8dad-409e-ba4c-9178ea329a15",
        "cursor": {
          "ref": "87fd6362-8eeb-4573-a775-b2072f529b82",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ad883484-92f8-4298-919c-05dad17dc61f"
        },
        "item": {
          "id": "1d893222-8dad-409e-ba4c-9178ea329a15",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "50607b49-794d-4d6e-8fc2-913595f47054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ca7ea8-b356-4372-890d-0633418a21e4",
        "cursor": {
          "ref": "5ccdcd32-1e96-4bd4-906c-afd3b9d27256",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7e0ef000-2b18-4f7b-bd85-07d457059ef0"
        },
        "item": {
          "id": "01ca7ea8-b356-4372-890d-0633418a21e4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7f65e9fc-e291-4551-b0f6-eaceb522d212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c944355-5462-44e2-b953-b3b9222edcfc",
        "cursor": {
          "ref": "0bd6d9b6-582e-4897-b568-1c93f1f786cc",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "96151096-9206-4447-b604-117ab3b1cae4"
        },
        "item": {
          "id": "4c944355-5462-44e2-b953-b3b9222edcfc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "92c28aba-39e1-48c3-8e1e-fea75d898f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43b9587-ba4f-4e0c-8a01-eca8fc84b825",
        "cursor": {
          "ref": "b94b540d-5b95-498d-a957-ce3995e0e29a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1c101cd6-3cd0-428d-91fd-1a887451a158"
        },
        "item": {
          "id": "a43b9587-ba4f-4e0c-8a01-eca8fc84b825",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "38ef1609-7f9f-47c3-a656-c60307a85b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f906737-1b26-46f1-8186-22b34321a9ed",
        "cursor": {
          "ref": "9746d1a6-4bd1-48a6-a951-65ebb7159803",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d6e637b4-2537-4d59-bf67-d63750160700"
        },
        "item": {
          "id": "5f906737-1b26-46f1-8186-22b34321a9ed",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "58898603-7bae-47b5-83b1-9036a23d16d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5ac295-68a2-4e5c-adc7-134c64540856",
        "cursor": {
          "ref": "b7a150a7-4d9a-41d5-8340-122141dbb026",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3fe4025a-ceea-4dae-a54b-587e936ab5fe"
        },
        "item": {
          "id": "cc5ac295-68a2-4e5c-adc7-134c64540856",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6e5eea0d-be8e-408d-a6fd-846604f3ac8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c382a9-6d68-4d2a-96c0-fa625b562695",
        "cursor": {
          "ref": "0336e306-eefc-4a99-bc7e-c67573d9bb10",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ac5b4889-e8f7-4229-9bcd-93672bae5781"
        },
        "item": {
          "id": "33c382a9-6d68-4d2a-96c0-fa625b562695",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "82877d5a-45d4-4e29-b3e5-bbf7f3d27065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9cf6a9-d991-4be8-b5ad-aa0f9787e8bd",
        "cursor": {
          "ref": "3a3fbacf-5eff-4048-9767-3d3d16eb3845",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "738184df-c33d-4e18-8f0f-e8d65d6cce22"
        },
        "item": {
          "id": "cd9cf6a9-d991-4be8-b5ad-aa0f9787e8bd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "394517b3-4ec5-43e8-add9-5162bb765bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b13ded-8ca7-475f-a9ef-cde3674cbb4c",
        "cursor": {
          "ref": "cd3aad03-b037-4436-b36b-bc154803b71d",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fe2e22ba-c29a-45ad-a9fd-3b24ab554cfa"
        },
        "item": {
          "id": "38b13ded-8ca7-475f-a9ef-cde3674cbb4c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "511d620b-b4cb-4f6f-8177-87be700a2bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524e8b5b-cf7c-4ca1-a135-3d4e08d7c176",
        "cursor": {
          "ref": "50847ae4-2351-49fd-a593-afc915fde2a4",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "822f1020-d92b-41cf-a788-6973204b052d"
        },
        "item": {
          "id": "524e8b5b-cf7c-4ca1-a135-3d4e08d7c176",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3c56c237-28f2-4d0e-bd49-07b6a0e33725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe522660-e9d5-4b86-b9c2-028c336ef724",
        "cursor": {
          "ref": "e82bbf2b-b481-4201-9886-55069111d666",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ca127651-d080-4e3c-ae8d-7255088bf176"
        },
        "item": {
          "id": "fe522660-e9d5-4b86-b9c2-028c336ef724",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "113789fe-d1b1-41ab-8e5a-4f622b930164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2d9a8b-1f2e-4716-a6ef-b5192b635386",
        "cursor": {
          "ref": "9407a7e9-dd47-4f47-9777-7c7ef5f33be9",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6a79fec3-d9ca-42be-ae38-3aa0b399f86f"
        },
        "item": {
          "id": "ec2d9a8b-1f2e-4716-a6ef-b5192b635386",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bc2e808d-4ff3-4c2b-a717-1c6d36d956c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfab8fe4-4cad-4f41-b145-867e04066062",
        "cursor": {
          "ref": "c4e0d53d-04de-449a-ac03-989fd13fc622",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5d60b1e9-1be0-4b1b-8f5e-4fa07f4334f2"
        },
        "item": {
          "id": "cfab8fe4-4cad-4f41-b145-867e04066062",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5f4ccca6-3a79-40e2-b0e8-1d715f5f9f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe3ace3-741f-429a-b8b6-36c76d4bc254",
        "cursor": {
          "ref": "c6d6832f-869e-4be6-b9c4-4950c5ccd891",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ab53d0b9-46ff-4277-bfa2-3ed49db83276"
        },
        "item": {
          "id": "abe3ace3-741f-429a-b8b6-36c76d4bc254",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "83d37caa-2286-4ec2-9de5-86b243138e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5892a0-11c7-4977-a02e-c665806efdd3",
        "cursor": {
          "ref": "9c599dac-c003-4a65-8b67-b53fae7b2c2a",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ae1eb938-b73e-4fac-bce2-b688a7611b65"
        },
        "item": {
          "id": "2c5892a0-11c7-4977-a02e-c665806efdd3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8639d9b5-9589-4011-89db-507c468ad0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaff9af-6db9-4fff-8935-7d47d053ea16",
        "cursor": {
          "ref": "8b1a2d11-f916-4488-bc43-ed009b8d0a32",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "667ece34-1f3b-47ea-ba31-ba41e2fd9fe4"
        },
        "item": {
          "id": "caaff9af-6db9-4fff-8935-7d47d053ea16",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fa22e30c-f18d-4dbe-976e-7d432d3b32ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9ff5ce-95d7-4d52-8ea3-b121183bceb0",
        "cursor": {
          "ref": "1a8ebb56-9966-4417-b38b-e095641fdbca",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1c7ab8eb-4aa3-4591-a1ef-67f471e4d672"
        },
        "item": {
          "id": "9b9ff5ce-95d7-4d52-8ea3-b121183bceb0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e51b026e-35fb-4b57-a445-2c7f49f80653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6b3731-22a0-455c-9019-49264616a65c",
        "cursor": {
          "ref": "150b827d-697f-401b-b051-652cde8d1415",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9a2a8dff-076e-4b64-aeb2-9c928f2d1d33"
        },
        "item": {
          "id": "cf6b3731-22a0-455c-9019-49264616a65c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4c93cb0a-ead9-48e9-8c84-6c5c0c0cfedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babe0439-948f-4690-b1d8-f36c1ceac63e",
        "cursor": {
          "ref": "af72960b-35c5-437e-b7fa-05fdbed7aa88",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f0466f10-9673-498b-9e6a-a67de96546f2"
        },
        "item": {
          "id": "babe0439-948f-4690-b1d8-f36c1ceac63e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "517937fe-da96-4eaa-977f-4237ff620983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea4328c-f5bd-408b-8acb-ffaa47e1e1a0",
        "cursor": {
          "ref": "902bee2e-030b-4965-b49e-c0124047fbdb",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a612d0dd-5197-4e71-8b86-95f07bf7a2fb"
        },
        "item": {
          "id": "9ea4328c-f5bd-408b-8acb-ffaa47e1e1a0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cff217f9-6d13-40b5-b628-2c2154756623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6500bb40-a22f-42b2-8d6a-f38dc4c528ff",
        "cursor": {
          "ref": "49c435ef-0fb6-4e9e-b72b-36a4dcb504a0",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b5b073ed-3e1a-405a-89b5-d2bce2bf36b1"
        },
        "item": {
          "id": "6500bb40-a22f-42b2-8d6a-f38dc4c528ff",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2e6e88cb-3006-469f-b8d6-a8a1200b357e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8f7216-ea28-4f0c-97b1-cd9cace796c3",
        "cursor": {
          "ref": "43daa76e-67d9-4156-b158-f75cdf7cfee9",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e89e00c9-36a0-499d-a588-9aee04f5174f"
        },
        "item": {
          "id": "6e8f7216-ea28-4f0c-97b1-cd9cace796c3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "16a1bf9d-2e83-4344-9453-243bdc6fb739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac9c548-c6a2-4e0f-8750-640bd1e78da3",
        "cursor": {
          "ref": "7b6d2961-cded-4184-9bb2-984d02defb03",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ec80cb6c-17a2-40d1-a53f-340b58abbd5f"
        },
        "item": {
          "id": "8ac9c548-c6a2-4e0f-8750-640bd1e78da3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a6f0661d-3643-4558-bf5f-4a205746535f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4506a1c-b5b7-47ea-8e41-5917a532caf5",
        "cursor": {
          "ref": "3224b083-08a1-4ea2-8144-94d2f7acf729",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ea0bba18-1534-4df2-904b-e94a28005cbf"
        },
        "item": {
          "id": "c4506a1c-b5b7-47ea-8e41-5917a532caf5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8e62dbc6-2027-474d-ae6b-131a39e2ef4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de12e1d-54e1-4679-9a8e-2fc9b48f5a20",
        "cursor": {
          "ref": "6c26b8b0-11c6-416f-b8ed-31b1973952c9",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "adbd95ee-7d79-4153-adc4-392cb0a888cc"
        },
        "item": {
          "id": "7de12e1d-54e1-4679-9a8e-2fc9b48f5a20",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d3944050-8b8d-45d3-98f1-07d4882dcb92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe259e9-99ec-475a-adbf-dcb47473f7aa",
        "cursor": {
          "ref": "fc6942df-ded1-44dd-8a67-e3f90d3e49f5",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d1a5801c-64e1-46e8-89d9-3290d16a4849"
        },
        "item": {
          "id": "dbe259e9-99ec-475a-adbf-dcb47473f7aa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "28ba2b48-bc63-4720-8f7b-c958eb3361e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b593e5c3-3252-4f69-98c6-871fa4fa007d",
        "cursor": {
          "ref": "13ba2e91-5d23-4aa7-8068-84778bffee89",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a8885b0b-2897-4de4-beea-e517b70d69f3"
        },
        "item": {
          "id": "b593e5c3-3252-4f69-98c6-871fa4fa007d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fe60a351-3d29-4388-bdf8-fb0a7bf2e5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca2e3c7-84c9-4cff-88f2-07a8415a747f",
        "cursor": {
          "ref": "21d5cfbd-3a0e-4cf3-a5a8-95ad0f453280",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "06f14628-71dd-462b-822c-91f14e997f96"
        },
        "item": {
          "id": "8ca2e3c7-84c9-4cff-88f2-07a8415a747f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "077cb5e2-90a2-42bd-85fc-415e0d7d7f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7c1bb1-46fa-4f17-8c40-69c3592d76fe",
        "cursor": {
          "ref": "ef3d0ce4-3a2f-4a1a-9a5c-e0dcdaea7e5e",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "25ef58fd-71bc-4451-9c65-8ccedd7076e6"
        },
        "item": {
          "id": "7b7c1bb1-46fa-4f17-8c40-69c3592d76fe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "72571c3a-bc85-43d2-9ca6-72a55fb0a748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa953967-fdd0-42b1-86c8-763879eeefc2",
        "cursor": {
          "ref": "be3c9db5-341f-4add-9fbe-4fef0655e09a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "408aea2a-4ad0-44d6-919a-571adfb1b518"
        },
        "item": {
          "id": "aa953967-fdd0-42b1-86c8-763879eeefc2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e4a60caa-a048-40d5-ad0b-fce66769acf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e58d0b0-ed6d-4985-b129-8fea3acbde44",
        "cursor": {
          "ref": "a72eb777-5cc7-4efb-947d-6e8cec5213e6",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bcaa8cd4-b353-4206-b06a-cef4c7925d9f"
        },
        "item": {
          "id": "7e58d0b0-ed6d-4985-b129-8fea3acbde44",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0cf9fffa-24c7-4bc4-9ba5-98cd8025b81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab811925-8fa5-4778-9786-3d8ef32651ce",
        "cursor": {
          "ref": "e82d54db-9e0b-4670-92d8-46471685941c",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2630668e-613b-4e6b-8a05-c65f24cfd9f9"
        },
        "item": {
          "id": "ab811925-8fa5-4778-9786-3d8ef32651ce",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "392f83de-b10d-473a-a7a4-e42949872707",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7063e56c-252f-4202-8068-f4e30e6cfd4e",
        "cursor": {
          "ref": "9585380b-f3df-4b7c-ae3e-52d8d261912a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "284d6e98-7d5b-4ae6-8b5b-f18d7c88aefa"
        },
        "item": {
          "id": "7063e56c-252f-4202-8068-f4e30e6cfd4e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c50e0d57-4ca4-458d-9020-1924adc48e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d807394b-62d2-41cf-a9c3-ff5b4250b243",
        "cursor": {
          "ref": "fa8e3e7f-eaa1-4a7f-91cb-971298aeca63",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b93e0b4d-2070-40b7-afaf-3c76a806eed8"
        },
        "item": {
          "id": "d807394b-62d2-41cf-a9c3-ff5b4250b243",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f5dc343c-ba12-4cbc-88fb-3bb096e00731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4444a46-d5b1-4c32-8776-f1f0bc4ba01c",
        "cursor": {
          "ref": "14f1f20a-1bf4-4438-95fa-617611ee04b6",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6e82bcd7-8b9b-4f37-a473-34464a1a46cb"
        },
        "item": {
          "id": "c4444a46-d5b1-4c32-8776-f1f0bc4ba01c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5dd558e6-a2b9-4de1-80ce-95902dd3258a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029ac570-5381-407f-80a1-f352652e18c7",
        "cursor": {
          "ref": "39d3451f-b5c8-4074-8149-cc686de4cdfb",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d79ac32a-b9a3-487d-bf11-7e02bc307561"
        },
        "item": {
          "id": "029ac570-5381-407f-80a1-f352652e18c7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "11e3f875-61c9-40c2-9d64-03b6009ac2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb5609c-4d3a-4955-bd2e-274d99712717",
        "cursor": {
          "ref": "10a1b899-ffe8-4126-b443-3f605d8b4c6e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5dba8048-eb4b-4118-b140-50bab6d94856"
        },
        "item": {
          "id": "adb5609c-4d3a-4955-bd2e-274d99712717",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "80364d50-032d-4d35-939f-44798db27faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c833f1-9931-498c-a9e8-d9ec0c7e2d1c",
        "cursor": {
          "ref": "8df49c83-7c78-44b7-a6af-828f3e75edf1",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "dfdea1cd-56da-4cba-a788-494437621d8e"
        },
        "item": {
          "id": "89c833f1-9931-498c-a9e8-d9ec0c7e2d1c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3b363680-808f-4bb5-a3da-48af7d4bc09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d744af2b-4b57-4b16-84d8-a08eea1ab96b",
        "cursor": {
          "ref": "a271cc07-9e71-4cd2-8e87-51cffd86718b",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "20f014e4-cca8-4ed8-b8bb-eae5717f6dfb"
        },
        "item": {
          "id": "d744af2b-4b57-4b16-84d8-a08eea1ab96b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c1e022b0-3d5a-44a3-99bc-bd42e1ed3dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbb21f5-8489-4f95-8080-b510f918d23a",
        "cursor": {
          "ref": "5fbf29b2-16c1-4ad7-adf0-7427733e7483",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "76756624-d1f3-4a59-b5be-ecc231c46e97"
        },
        "item": {
          "id": "0fbb21f5-8489-4f95-8080-b510f918d23a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "921b782c-ed16-461b-a01f-35217d152769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce237a2f-2b6a-4507-8e4f-04d334c1ebf1",
        "cursor": {
          "ref": "899d4fee-2ed8-4e88-bd6d-a59aa12bc599",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "589d2d33-9657-48f9-9c59-5aecf0887af2"
        },
        "item": {
          "id": "ce237a2f-2b6a-4507-8e4f-04d334c1ebf1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b62acda1-b866-4b1a-ad27-900d1964c440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2613dee1-bba7-47eb-b39c-b5b0009d3d1b",
        "cursor": {
          "ref": "bcf92bb3-b753-450f-9d15-0393b58eff64",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "899147e1-2cd3-4272-95d5-3b3578493a84"
        },
        "item": {
          "id": "2613dee1-bba7-47eb-b39c-b5b0009d3d1b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "947c9877-c293-4844-b2dd-a8857a6124ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b9d411-ed44-490a-9425-9f29e82db805",
        "cursor": {
          "ref": "c9612ade-199b-427b-b116-77798276386a",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a1dee0ee-bcd9-4908-9e93-6d61690e35c4"
        },
        "item": {
          "id": "d2b9d411-ed44-490a-9425-9f29e82db805",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1dd95920-48dc-4835-9362-75df31c08172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edf8e7c-45ef-4bb7-8785-2b959c3cc709",
        "cursor": {
          "ref": "c61ab78f-bedf-4e4c-b63f-9ec3dc5941a3",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "de520d98-86c7-4f15-a474-0d659283007a"
        },
        "item": {
          "id": "0edf8e7c-45ef-4bb7-8785-2b959c3cc709",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0031fb06-858e-4650-9b97-523fe1f02166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af61104-15d4-439e-b519-f4c20c2dfc99",
        "cursor": {
          "ref": "25d08922-de62-4cc9-8f7a-9277f2a1ba0f",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5b7d261a-7183-47d3-bf7c-767e19f96086"
        },
        "item": {
          "id": "0af61104-15d4-439e-b519-f4c20c2dfc99",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "033e4830-5d80-4e31-a20a-f8f056332dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f845e8-0ca4-4054-95c1-a588974a079e",
        "cursor": {
          "ref": "463a7e18-d5c3-428f-bb4c-52d2827bb604",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0725d553-f141-4871-bae5-388468ed81c8"
        },
        "item": {
          "id": "53f845e8-0ca4-4054-95c1-a588974a079e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d526c724-495a-431f-87bd-311d6cd6806f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408950de-a44b-4adf-8df0-ce38ba704447",
        "cursor": {
          "ref": "ee3c8c6c-f6ef-45c9-8cbf-8326ef4893fc",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ccc47bef-ba3e-4eaf-81ee-b444ffe703f1"
        },
        "item": {
          "id": "408950de-a44b-4adf-8df0-ce38ba704447",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b1d26753-8198-4197-a73a-7e04cf68f3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d401f3c0-a834-40bf-bd47-3ee0a6c77a31",
        "cursor": {
          "ref": "007fb462-236a-4de1-a850-ca5df4012ab2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "eaf949ff-c4ce-4768-a67d-bac813cd6daf"
        },
        "item": {
          "id": "d401f3c0-a834-40bf-bd47-3ee0a6c77a31",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a216cc78-43aa-4a06-abaa-426f62467d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e02f684-ab2f-4c97-b051-bf3291a291db",
        "cursor": {
          "ref": "4dac3445-04a7-4874-b01a-fbbe5ef07776",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c33277c3-c9e0-40fc-abb5-f1dc5ea6ad11"
        },
        "item": {
          "id": "1e02f684-ab2f-4c97-b051-bf3291a291db",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "178062dc-2e14-4385-b03a-5e1b17f2612e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872f7060-bf7f-4eb0-abdd-5c3960f81de5",
        "cursor": {
          "ref": "d6877b82-f7c2-4891-acb6-913c4b543eb9",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "99462177-071f-43da-9b4a-76eb025b755d"
        },
        "item": {
          "id": "872f7060-bf7f-4eb0-abdd-5c3960f81de5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9ed61f39-e862-43d4-bf59-f1f1589c1d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75cb4fc-1c2c-4142-8233-1d829df130ed",
        "cursor": {
          "ref": "05cdfaca-8e87-4063-b632-2f38df7282be",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9987903d-bd1e-462e-8092-8ff48ea9550e"
        },
        "item": {
          "id": "a75cb4fc-1c2c-4142-8233-1d829df130ed",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "31cd2a75-3a3c-4acd-b260-c8aa4fd72809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104ca2b5-a435-48d0-9213-23b4113a2342",
        "cursor": {
          "ref": "3f331027-83b9-4c1b-bfaa-1f775c4f8a40",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "356221ab-b85a-4dd8-bc44-be3bb04e795f"
        },
        "item": {
          "id": "104ca2b5-a435-48d0-9213-23b4113a2342",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ad372882-3abb-4e67-bce8-e32ace9f1178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d476106-efb3-4d88-bd1f-145dafbdb653",
        "cursor": {
          "ref": "621a52a1-8921-4f06-b739-f5620279bb3b",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ae1dce92-0305-4409-b538-187c5fa3a2d4"
        },
        "item": {
          "id": "1d476106-efb3-4d88-bd1f-145dafbdb653",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2ee7b09a-a45a-4074-a7fd-0fe0f7c9720a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88271c5-28a9-4ec9-be0f-a49104e50225",
        "cursor": {
          "ref": "7aa80644-796e-4f00-a87e-f1ce48cb06cf",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5c8b6069-ed75-4c7d-8d42-9cfcc8bfb8ae"
        },
        "item": {
          "id": "a88271c5-28a9-4ec9-be0f-a49104e50225",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "65c6076e-7c43-4b98-8520-599e39cdc5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6059a19a-012b-4a73-8bc0-a61e74a504c7",
        "cursor": {
          "ref": "a8709bb7-851d-4825-8cfb-ffe6cc8fb0d4",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b021ae8c-426d-4854-9355-934910e7ac74"
        },
        "item": {
          "id": "6059a19a-012b-4a73-8bc0-a61e74a504c7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "414d1ed6-3481-4ad4-a09a-52839bf0f5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7a9e61-ecd6-4156-a69a-e71851be69d7",
        "cursor": {
          "ref": "1cc0f35d-529c-4d3b-8be9-86e36812b40e",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0e1ce1d2-51c5-4949-a5c5-0eba5a03043b"
        },
        "item": {
          "id": "fa7a9e61-ecd6-4156-a69a-e71851be69d7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1471d3ec-b92e-49fd-bdd7-19d41103b938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0df833c-0703-4ae2-a0f4-d2e6907c55b4",
        "cursor": {
          "ref": "5f0f4ab6-7e7c-42be-a0c8-433e7e6122bb",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "bc00e001-6515-4107-baeb-f852bf79e068"
        },
        "item": {
          "id": "f0df833c-0703-4ae2-a0f4-d2e6907c55b4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "97a39fd1-8288-4144-a1b6-6babc828e9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbb37a3-bcac-4850-8055-a06aafa03ad9",
        "cursor": {
          "ref": "b843a6f2-da0b-4cb4-b806-eb19fb753d41",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "aa8a57d2-8e47-4f56-b692-014d7e1a49a1"
        },
        "item": {
          "id": "bbbb37a3-bcac-4850-8055-a06aafa03ad9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "171c7603-6f4b-4705-92d2-2531460b38d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4f36c7-f92f-4df4-ac63-0ee9de3dd5ba",
        "cursor": {
          "ref": "abdd978f-3cbc-4fe5-bdd3-7cc3099ee84d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1cff1316-6bf1-4687-a216-dca749ade4c1"
        },
        "item": {
          "id": "1e4f36c7-f92f-4df4-ac63-0ee9de3dd5ba",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a3fafe08-56a9-402b-b5dc-bdce93504bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae6b52c-d1f4-44d3-be85-af0612840dac",
        "cursor": {
          "ref": "95e7009e-26f4-402d-bb5d-741d06ba8272",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f95a0487-7bc4-4401-bb79-2c3ecf12aca8"
        },
        "item": {
          "id": "fae6b52c-d1f4-44d3-be85-af0612840dac",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a6ee8f00-43cc-4b26-b4bc-70ffb8d4f0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba007f7-3e12-43f2-b741-001939f0969a",
        "cursor": {
          "ref": "90acd8ba-a0e5-46e3-b2fe-b48b3c946201",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e0485b65-ede4-47ff-aef4-9101c3e25694"
        },
        "item": {
          "id": "3ba007f7-3e12-43f2-b741-001939f0969a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2b279ed8-de80-4168-af78-7c76783ae9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f003ae84-c27f-46a6-b01e-418a812918e3",
        "cursor": {
          "ref": "2ee2e46d-5886-41a6-8197-85f6230e1496",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "102f0f25-1911-440b-8ec3-d55eeaf9d018"
        },
        "item": {
          "id": "f003ae84-c27f-46a6-b01e-418a812918e3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a3b90bb0-e2ea-413c-93ce-8000958de21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a6fc8e-5518-48af-9605-672f03110847",
        "cursor": {
          "ref": "98ae028a-a56c-4f5e-b889-216530efc1fa",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "aa0813eb-1b9a-484c-b0da-3a1b969f9a57"
        },
        "item": {
          "id": "19a6fc8e-5518-48af-9605-672f03110847",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9efefb03-96ee-494d-b148-e1d4f6c77cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc660d6-c552-45e0-bdf2-bca21e3fd046",
        "cursor": {
          "ref": "7bcc2092-a87b-4b65-b050-bf22f8887b55",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f0593b76-3fbe-4e15-8818-f5d5a79668de"
        },
        "item": {
          "id": "8cc660d6-c552-45e0-bdf2-bca21e3fd046",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "cc82ef91-65c7-4bf8-b676-70b635cd0736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852d821a-bb60-4a07-b087-77624f2210cf",
        "cursor": {
          "ref": "8b9a2e61-8733-44ce-98bb-7c7fef4f3d21",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a408556f-59db-4721-8bfc-3562fb16b6d5"
        },
        "item": {
          "id": "852d821a-bb60-4a07-b087-77624f2210cf",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a6fdce15-9a1b-429f-9200-6504f928f2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db885487-8aa0-49f4-bf07-34357af3deb3",
        "cursor": {
          "ref": "bdfa2590-2811-4604-a6b6-d3033d7c2c10",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "355e2feb-54da-4925-953c-29c180fcaac5"
        },
        "item": {
          "id": "db885487-8aa0-49f4-bf07-34357af3deb3",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e378bf76-a872-4983-a6fc-bb4a70be169c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4856124a-cb82-46cf-8ecd-ef2ef22be0d7",
        "cursor": {
          "ref": "6d32c8cb-4f17-4a21-af53-866b248ab80b",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4bcb8aff-4729-4d70-854f-2fc980c70420"
        },
        "item": {
          "id": "4856124a-cb82-46cf-8ecd-ef2ef22be0d7",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7eb07458-272d-40d3-8a62-ed8670a6b999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae20f8ab-1c16-4ec8-956d-5257eafa5203",
        "cursor": {
          "ref": "fe1b2572-7341-456f-a83a-a2c733d3959d",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f1bf4832-a4ff-46a5-8b90-c5a37aa81d0c"
        },
        "item": {
          "id": "ae20f8ab-1c16-4ec8-956d-5257eafa5203",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8c2cd4ae-0a68-49cf-828e-37b76047b135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052da1c1-f9ad-4b75-a13c-bab6c004dcfd",
        "cursor": {
          "ref": "80eb1535-3b57-45b0-9d90-12088e116af6",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "87717c40-b85a-4ba5-9d5b-3d6999bb0fb7"
        },
        "item": {
          "id": "052da1c1-f9ad-4b75-a13c-bab6c004dcfd",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a2bbc937-475e-4c8c-b403-a16069fe6aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6275c2-4874-4f0c-af8a-7ee1d44e18bc",
        "cursor": {
          "ref": "50516d06-eeb4-4611-813e-bf51dd7cdd3c",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f521d2d3-8514-4ae7-9fd4-3eae11fbc8d4"
        },
        "item": {
          "id": "bd6275c2-4874-4f0c-af8a-7ee1d44e18bc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0d518a92-b3e0-464e-a822-5d4708e81e99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2e3a10-d473-4257-b69f-2c84f30d3482",
        "cursor": {
          "ref": "a3d5c440-6171-4c0b-b504-a89812cd45e2",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "63bf0c62-0cf4-4971-8448-133a475061c0"
        },
        "item": {
          "id": "8f2e3a10-d473-4257-b69f-2c84f30d3482",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "72080604-2b5f-4cbc-9461-d72e15b272e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59712bf-4840-4267-9aec-b63b3661bf2c",
        "cursor": {
          "ref": "30ae9bb8-fa89-474f-9c24-bd883d2c36b9",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e6ef1057-d821-44c6-93c5-695d5e760140"
        },
        "item": {
          "id": "a59712bf-4840-4267-9aec-b63b3661bf2c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0ef8561d-6d93-4148-832f-e48344232487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b989b30-29ca-4f52-98ab-a64bfd798d41",
        "cursor": {
          "ref": "34b03ca7-93a0-4573-a359-cdee2351126e",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "caef3190-e050-4121-a988-c73197e950fd"
        },
        "item": {
          "id": "6b989b30-29ca-4f52-98ab-a64bfd798d41",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b2ada203-d217-44be-aa83-4d006a63c6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a233ccd6-0f5f-478e-a228-1b225db5b52f",
        "cursor": {
          "ref": "dffd6794-f3ba-4e51-b2ad-004342961744",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2b10cdb7-af39-4172-bcda-dcf19c90e454"
        },
        "item": {
          "id": "a233ccd6-0f5f-478e-a228-1b225db5b52f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "00abdbbc-8857-4dbc-9ba0-5a47fc38bf7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f4240f-d9f1-4b3a-bdd2-96f8cb1f4580",
        "cursor": {
          "ref": "e9b53fee-3842-4476-9587-680872f61320",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "18449266-fd11-4d3a-a941-83a2e4f8e5c8"
        },
        "item": {
          "id": "90f4240f-d9f1-4b3a-bdd2-96f8cb1f4580",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "67fb55f6-255a-418b-8d6d-bcfc8a8fb87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3111d9-5949-40dc-a667-e24261211c83",
        "cursor": {
          "ref": "395b2237-c5eb-4f58-a042-06a9776d0a6d",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f73e9b71-4a2b-4574-96d0-c3d2b50e1ee0"
        },
        "item": {
          "id": "5d3111d9-5949-40dc-a667-e24261211c83",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "848fb79c-7df4-4546-9ddb-f040a14c2dad",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "2c7df795-3a2a-4282-bc8a-0c20cdc7112c",
        "cursor": {
          "ref": "4e778b8c-9bb3-42b8-8ccd-926eebbbcafb",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2449648e-5b03-4eb2-8dfc-e836f4d3ba5e"
        },
        "item": {
          "id": "2c7df795-3a2a-4282-bc8a-0c20cdc7112c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "87dae52f-6972-4558-9a85-250085090cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e3a4db-7375-48fd-930e-bc6f54cf3d00",
        "cursor": {
          "ref": "8d1246d0-4d9e-4e95-a392-6af172589f38",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ec7b6921-6a57-42dc-87ed-09c75cb0a7ed"
        },
        "item": {
          "id": "54e3a4db-7375-48fd-930e-bc6f54cf3d00",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a78572aa-d2cf-4a6e-af7f-31874e0cfb2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d060564-e22b-436f-8e10-f1465b082a9b",
        "cursor": {
          "ref": "1296fdb3-df20-4b2c-b7e0-2208b835e753",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "505e49bb-2dbc-4343-b962-20243a0a0553"
        },
        "item": {
          "id": "4d060564-e22b-436f-8e10-f1465b082a9b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "50bc0d13-ccbd-405c-97af-68031b789764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da03fbb6-6658-4eef-8ccc-197dc02fd4e4",
        "cursor": {
          "ref": "98508dd4-3578-4882-89c2-e5c14363a698",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a73df5a7-084d-4fb5-a76f-3e79927a0564"
        },
        "item": {
          "id": "da03fbb6-6658-4eef-8ccc-197dc02fd4e4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a3cb68cf-75b2-4b7c-a711-c02c6ee3db9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d0722f-bbb1-44d7-b76a-afd36b08a49f",
        "cursor": {
          "ref": "8981f9e8-43c1-4ff0-832a-5c3f3ee54eff",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4ec4589f-96c2-4fea-8b3c-762e90adc23f"
        },
        "item": {
          "id": "31d0722f-bbb1-44d7-b76a-afd36b08a49f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "45f06600-bb9c-470e-bcf1-372e5c266a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6fadd32-dc68-4fc3-be2d-e12216e4bbde",
        "cursor": {
          "ref": "7aaf60a9-4368-456d-8cac-11e9229422b1",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3a181117-a7c3-4ebe-a08a-c46397eaf12e"
        },
        "item": {
          "id": "d6fadd32-dc68-4fc3-be2d-e12216e4bbde",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a4e0f836-8c18-47ea-bb33-61617ce38677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e737d7-b903-4097-80ac-e1a44fd5359b",
        "cursor": {
          "ref": "48d78aae-afd4-4ca2-be97-3ab4271bc2d5",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "34ad7ba6-9e23-4d7c-b137-20213fb39336"
        },
        "item": {
          "id": "d2e737d7-b903-4097-80ac-e1a44fd5359b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d52ea576-3d09-499f-b3cb-32294650a9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44550802-62cc-45a2-b54a-946a40583fae",
        "cursor": {
          "ref": "60d7a624-9aae-4fd3-832a-b51778d9fe27",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8a04bbaf-c815-471c-9181-a1dd5d1e2c0d"
        },
        "item": {
          "id": "44550802-62cc-45a2-b54a-946a40583fae",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "54d5e26b-dae1-4f6d-bdd8-630ed137aede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac7f7e5-558e-47e3-8704-30ae795ce87f",
        "cursor": {
          "ref": "96c47835-8f46-4e67-8761-eda834610964",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1baa8672-5dcd-40a9-84ea-83b10d710975"
        },
        "item": {
          "id": "3ac7f7e5-558e-47e3-8704-30ae795ce87f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c42336a0-1a73-492c-a3c1-6408d9bfe7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a067af-b236-4cf4-bb8b-95511a338332",
        "cursor": {
          "ref": "10030ac3-5adc-4832-8814-7399c4dac295",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "549c3fa9-5404-4731-aa33-2f7e4f326c26"
        },
        "item": {
          "id": "d1a067af-b236-4cf4-bb8b-95511a338332",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7286d117-8393-4d59-9c09-c111a6b8b9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83f9fef-dde0-4a26-a39e-62849f13438e",
        "cursor": {
          "ref": "118e1f33-d26e-44c4-8f7b-07fcb4294dda",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6e24074b-6ab0-486e-acb0-42950bfabf0b"
        },
        "item": {
          "id": "c83f9fef-dde0-4a26-a39e-62849f13438e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "76431928-1c50-48b3-871c-e358a2c03d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90416cbc-8ae9-4689-a09e-d92790f08ff4",
        "cursor": {
          "ref": "4da596d7-991a-46b7-9734-726bfd222e2a",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7cce2f4f-834d-463e-b918-bf54941149fb"
        },
        "item": {
          "id": "90416cbc-8ae9-4689-a09e-d92790f08ff4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "317d551f-77f7-417b-8e3b-06f42c133218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e9fe01-5581-4c17-a4b6-ddcfffc98d1c",
        "cursor": {
          "ref": "d28fd861-b282-4efb-863b-aefdf25cb506",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c5fb2130-9186-4b71-b499-748a55361a2f"
        },
        "item": {
          "id": "19e9fe01-5581-4c17-a4b6-ddcfffc98d1c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "20b6ab01-782a-43de-ba3f-5647f5885395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d48c337-9bc8-4890-acb6-0cbf3c7ead4e",
        "cursor": {
          "ref": "2a093720-3f1b-410d-a881-8018bc590049",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "83db054d-88c8-4e70-84b0-96c8eaafb8d1"
        },
        "item": {
          "id": "5d48c337-9bc8-4890-acb6-0cbf3c7ead4e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "55dc966b-f098-4a99-bb72-45a9e448b0ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5222b3-b1fc-451c-ac56-2855a4496af8",
        "cursor": {
          "ref": "35177b51-7fe0-4771-ae8f-351e9d37fd2f",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e2da8857-2838-46ab-be31-6a89a7cb7899"
        },
        "item": {
          "id": "dc5222b3-b1fc-451c-ac56-2855a4496af8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e0407b04-51c9-463d-9988-83aa88c9411e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fad30f0-3c22-451a-9a50-36dd7cc3c6d0",
        "cursor": {
          "ref": "094cc6e6-fb07-402e-ae2e-a1fd991645e5",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4bff6625-aa21-45d3-83c0-ebfb56500a3b"
        },
        "item": {
          "id": "8fad30f0-3c22-451a-9a50-36dd7cc3c6d0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "02ce0b3c-78d2-4c76-bc40-4777e619aa63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87db0eb3-f022-4e0b-a05c-5b6baaa3085e",
        "cursor": {
          "ref": "43ca6c9b-1750-4327-a345-9eef354ef6f8",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5a0fc12c-a446-4a84-9198-2ce381b0b6e3"
        },
        "item": {
          "id": "87db0eb3-f022-4e0b-a05c-5b6baaa3085e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "144fcee7-a11b-470b-9739-be7030c250e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240db305-9d30-47dc-b1d7-c6c7406dfe30",
        "cursor": {
          "ref": "3cc6c79a-1e03-4f9e-8c7c-790fbfbd9bb0",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c7f6e8da-26cd-4f0e-8a93-bb89ff0b69e0"
        },
        "item": {
          "id": "240db305-9d30-47dc-b1d7-c6c7406dfe30",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6ce41e88-ff06-4300-8550-f70a035af135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bca564-cf08-46f6-a359-b6c5b27dee83",
        "cursor": {
          "ref": "b099353a-f9a8-4856-ac7e-ab1ee084b6bd",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "33540fb2-233e-47d1-85ed-87af33500aea"
        },
        "item": {
          "id": "b6bca564-cf08-46f6-a359-b6c5b27dee83",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "96a43d23-57b5-4c2d-b427-b38ec265a7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34367cf7-1270-421c-8582-b619838900d5",
        "cursor": {
          "ref": "726d1a32-5d0f-4417-a014-218e3ea4aa14",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "791df3dc-15fa-473b-a958-5335537c9ac1"
        },
        "item": {
          "id": "34367cf7-1270-421c-8582-b619838900d5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8ed0921c-d954-48a8-9ce8-7cbd9b87c7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0941dbb-feff-4bac-940a-97b6f26c1baf",
        "cursor": {
          "ref": "7b9aefd4-3053-472b-bf2e-f90e49a194ac",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c486b8d2-0114-45ba-a391-44451381dad1"
        },
        "item": {
          "id": "b0941dbb-feff-4bac-940a-97b6f26c1baf",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "004a0511-e527-4104-8b6d-794bb70fa58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7aa150b-7eaf-4fd1-b3b6-a1b47a55389b",
        "cursor": {
          "ref": "1af47385-12d7-40f1-a1df-70b9d0db16f2",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "20206dc4-0399-447a-8085-c1432129cbf4"
        },
        "item": {
          "id": "e7aa150b-7eaf-4fd1-b3b6-a1b47a55389b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "95462d2e-fdb2-416b-b7c2-e01dd48c2aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182b5462-8404-4a41-834d-101527847d8f",
        "cursor": {
          "ref": "5a7daadd-bf32-4fbb-90ee-abd99d47eb0c",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "061921f8-7413-46ff-8c3e-543cea9976fb"
        },
        "item": {
          "id": "182b5462-8404-4a41-834d-101527847d8f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6c647f3b-f101-4618-920e-9a487dea3a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3429e5-92b7-422c-8c2e-1808d1de5e91",
        "cursor": {
          "ref": "2bb6ee87-4afe-48da-b253-3d540c748cba",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "70e4747f-8e9a-4a1e-b79e-ca311eaf151b"
        },
        "item": {
          "id": "7f3429e5-92b7-422c-8c2e-1808d1de5e91",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "61105002-610e-4ddc-a8ee-b55392a66ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1f384a-bb52-4753-931c-157372753a45",
        "cursor": {
          "ref": "f8324177-c759-43c0-b4dc-cdda940f71c4",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "70a93554-804e-41a0-adb4-d5e6f7bdde6d"
        },
        "item": {
          "id": "3f1f384a-bb52-4753-931c-157372753a45",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4efef7d2-3062-4dc7-9661-626554fba317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637332c8-8104-478b-9837-4bf02692c5a2",
        "cursor": {
          "ref": "406ee45a-69ca-4c5b-89eb-ae3bb947f408",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "73b9f408-ea09-432e-ad0d-102484700068"
        },
        "item": {
          "id": "637332c8-8104-478b-9837-4bf02692c5a2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9bdbe3e7-edfa-4cc7-a685-c9777bd1770c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c453ab51-cd8a-4756-abab-e93127a84f0d",
        "cursor": {
          "ref": "2585047e-c6c9-48b0-82a9-6e9f896f2030",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1f815234-a0c8-4051-9af4-11819a2443a3"
        },
        "item": {
          "id": "c453ab51-cd8a-4756-abab-e93127a84f0d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "df91a78d-35bf-450e-ad49-4e2a7a9c9ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f05b349-d2f3-455b-8dd0-bcfc980a67b3",
        "cursor": {
          "ref": "e7bfdbc4-5f77-4446-9b6d-090791cc3f22",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0acccca1-60e0-4400-baa8-96641dfcad0b"
        },
        "item": {
          "id": "6f05b349-d2f3-455b-8dd0-bcfc980a67b3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0d6f84c7-c2d6-4c2b-bf85-29890446e907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2acd36-b795-4b73-860c-4beb6b3099e1",
        "cursor": {
          "ref": "d86b7e12-4772-4c36-9b16-b574b0f25571",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "41f9ac80-514f-4078-bef8-4aaeee55bf6c"
        },
        "item": {
          "id": "8a2acd36-b795-4b73-860c-4beb6b3099e1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "20294983-2139-49c5-918a-a1d734f99da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd5459c-cbc3-460d-a7e5-b28a67798905",
        "cursor": {
          "ref": "eef02f39-d9c8-4d79-8e3b-085d6f8e083c",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "843fddae-894d-4b78-a626-22487e5ac9bd"
        },
        "item": {
          "id": "1dd5459c-cbc3-460d-a7e5-b28a67798905",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a5eb9fd2-e906-42b7-9ad8-5027f2067aa8",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "65bd4b32-baa2-4a68-aad0-f38bffb1c1d2",
        "cursor": {
          "ref": "c1cfa716-05ac-494b-89ed-09b96c2a37cd",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f60fc898-4587-4abf-a29b-f4d287e83ae0"
        },
        "item": {
          "id": "65bd4b32-baa2-4a68-aad0-f38bffb1c1d2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "227fbc90-a583-4f19-a02c-cc33ba53c518",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "7d2b33e5-dd53-45d7-92e1-674b43119c48",
        "cursor": {
          "ref": "6e8c8a26-4fea-4d9c-a5e5-d242ae8d5d69",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0cf8d717-864f-467d-a4c9-31d03ac77b67"
        },
        "item": {
          "id": "7d2b33e5-dd53-45d7-92e1-674b43119c48",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6e3c0462-ceff-4802-864d-b9fe0239368a",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1233ca86-6c92-479e-b987-033303fbe571",
        "cursor": {
          "ref": "bc6a852f-bb67-40ed-a525-ac673fbf7922",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b78828bc-893f-4581-b1a4-4bc7ef23d86d"
        },
        "item": {
          "id": "1233ca86-6c92-479e-b987-033303fbe571",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f67c673e-708b-4355-8ae8-576343c60e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff674df-9e72-4185-a773-59a98efd2740",
        "cursor": {
          "ref": "8eb49601-2e63-4e6e-a74f-c8d818974d2e",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "692aeb6c-4a0a-40cf-bedf-e744df4453c0"
        },
        "item": {
          "id": "0ff674df-9e72-4185-a773-59a98efd2740",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8a56c6c2-87b2-4e35-9054-20aeb4e3d202",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e1236d72-2938-4ed5-bdbb-a1e7d8952cfb",
        "cursor": {
          "ref": "1d9761e8-71a9-41d3-90b7-7615a00b69e8",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "35a159f4-75af-4b75-9580-769b01a741a8"
        },
        "item": {
          "id": "e1236d72-2938-4ed5-bdbb-a1e7d8952cfb",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4c46b12a-6733-452e-99ef-c9ad28aa0cf1",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a47dba1f-d6ac-491d-9473-c6a192db34a7",
        "cursor": {
          "ref": "3e5da83a-206e-4cc7-9644-1511eca6e799",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d1d91242-7ed8-4834-b497-52fd61aacf71"
        },
        "item": {
          "id": "a47dba1f-d6ac-491d-9473-c6a192db34a7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2c39994e-9067-49e8-8b12-29b88e7475d0",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "76173aa6-4cfa-4c5c-b973-42ec42e0c6a1",
        "cursor": {
          "ref": "a5853a6e-2c07-4b03-9cfc-aab789c1604a",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2b400d0c-7720-4593-9fea-8e380891991a"
        },
        "item": {
          "id": "76173aa6-4cfa-4c5c-b973-42ec42e0c6a1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e4aacf91-189f-4c87-9ee2-c2aca6feacd2",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6f5d9844-bce4-4960-84fe-03e641e21f47",
        "cursor": {
          "ref": "5b0d9419-5d88-4154-a9f2-718ac5e1e818",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "79123342-0fcc-449f-89d1-0b569f539a9f"
        },
        "item": {
          "id": "6f5d9844-bce4-4960-84fe-03e641e21f47",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "07df02f9-c13f-4199-8243-39e1ab0e5988",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "69180f7b-608e-4f21-93e7-6f361a6b06d5",
        "cursor": {
          "ref": "e5e0cf5c-5236-4169-8e1d-5122f9c3992e",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "edd40c0b-9a00-4af9-ba15-f5dcd4d73909"
        },
        "item": {
          "id": "69180f7b-608e-4f21-93e7-6f361a6b06d5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f0140214-e099-446d-9529-ca580780438f",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0efc5350-f3a6-4f3c-af41-0e9b35e67772",
        "cursor": {
          "ref": "8d77a23a-3a98-4fb5-9711-b57dd661e2cf",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a199ffc0-20ea-424c-9749-2be92277588b"
        },
        "item": {
          "id": "0efc5350-f3a6-4f3c-af41-0e9b35e67772",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "87d5d6d5-fd0c-4f03-b82e-eaf12a882c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63433785-7a69-41fa-9f45-f0dcebc71335",
        "cursor": {
          "ref": "efc3fe5e-9107-4273-af03-29a049a9989e",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fb1039c2-f028-48b8-aee9-e55e26d156cc"
        },
        "item": {
          "id": "63433785-7a69-41fa-9f45-f0dcebc71335",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c10931a4-5741-4f95-bf1f-e6ff091930d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d14e00-3416-4ff9-aed7-12e598c67cab",
        "cursor": {
          "ref": "6817f3f8-f0f8-44c3-b149-4b2abeb9b430",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b822d893-6007-439c-95a5-dd127dfde9f8"
        },
        "item": {
          "id": "81d14e00-3416-4ff9-aed7-12e598c67cab",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ea5aef53-6a78-4c5b-b3a4-d8145dfb3f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43de2af9-8daa-49c2-a302-9d94eb8c73bd",
        "cursor": {
          "ref": "3bf90959-a023-4fc5-a3e8-94cc17421790",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6dc8d2b6-f415-4576-80b5-56c0a7a9ec59"
        },
        "item": {
          "id": "43de2af9-8daa-49c2-a302-9d94eb8c73bd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6ca0ca73-31ac-40e0-aad1-9ecdf461865d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33a1ad1-d25a-49e7-a77b-af8086d1185d",
        "cursor": {
          "ref": "d9f57ddb-c519-4c00-aac1-a5eaad3f565f",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1ff4c4ab-fb3b-49ae-b57d-e165125dddb0"
        },
        "item": {
          "id": "e33a1ad1-d25a-49e7-a77b-af8086d1185d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d27d809b-1241-4449-bc8e-4dbae86910c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af4c43a-51b1-4c85-908a-0839dc196abb",
        "cursor": {
          "ref": "bf2d8531-52d7-4d7d-a46d-47c3313cc7d9",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bd9ca8e9-2e7c-4c91-a200-6d192ed85a2d"
        },
        "item": {
          "id": "1af4c43a-51b1-4c85-908a-0839dc196abb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "524239f2-7e75-4a63-a135-545af6b32c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee632491-0e7d-4095-85f7-9dad71e2dd9c",
        "cursor": {
          "ref": "52241cba-f470-4b82-b77b-bea004b83038",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "48fea169-2a7f-4a8a-8e51-5c98a85f97bd"
        },
        "item": {
          "id": "ee632491-0e7d-4095-85f7-9dad71e2dd9c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c7e55b0a-0c06-45ae-9f2e-d727c65302ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb71ef62-f1d4-4dd0-99c8-8c43555fe8d6",
        "cursor": {
          "ref": "690bdba4-5084-455f-9434-5396a0035910",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "155701ac-1e4c-4c17-8e8e-b2200c83a82f"
        },
        "item": {
          "id": "eb71ef62-f1d4-4dd0-99c8-8c43555fe8d6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "778bdbf9-1a5e-4769-9f9e-df288b2eacb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e07ba9-f412-4644-8c0d-54f6e06121bd",
        "cursor": {
          "ref": "6be28596-9c44-4e7b-bd67-6ad9ead838a6",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1a908113-0cc6-4ce6-a1d3-7c0aa9c65d9f"
        },
        "item": {
          "id": "48e07ba9-f412-4644-8c0d-54f6e06121bd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e61f9e4e-5e86-4888-84b4-9062419329f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5549df23-6ff3-4565-ae26-03cf2ac15bd2",
        "cursor": {
          "ref": "f7872647-4993-4762-bcbf-c3468b261281",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ca8fee6e-4ce6-49df-b453-9dbd8d04e769"
        },
        "item": {
          "id": "5549df23-6ff3-4565-ae26-03cf2ac15bd2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1dface55-8f67-425f-b7bd-73d64f75b7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78dd75a3-71f9-4276-bffe-5773746bd23f",
        "cursor": {
          "ref": "947a3292-baf1-4d03-8200-befcad694589",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "98f352e2-d826-4abf-8d34-7eb66c92b890"
        },
        "item": {
          "id": "78dd75a3-71f9-4276-bffe-5773746bd23f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "59d48323-6edb-4268-bd39-014ba8d629b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3852515-2596-46b0-97ee-67daeda46385",
        "cursor": {
          "ref": "fc329e17-f652-4eeb-a503-e9239a39dc34",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "995a7233-969a-42a5-8a1b-b2cde25eaffe"
        },
        "item": {
          "id": "e3852515-2596-46b0-97ee-67daeda46385",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ce5a7ef5-b5cc-4cc3-b454-ec1c612bc39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe9a15d-5c5a-4085-848c-79e81172a72d",
        "cursor": {
          "ref": "26257c57-73a8-4bff-9f7a-6f401e418266",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bb579a0c-a1a0-4d79-afac-ee22ae03e2ed"
        },
        "item": {
          "id": "9fe9a15d-5c5a-4085-848c-79e81172a72d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ffeade34-c677-405f-a7e4-c20a62aabe46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c267b0-ef10-4e30-bfb7-15cd13182698",
        "cursor": {
          "ref": "95d1b4e1-691e-4817-89d7-1ff3a197d5e7",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "00ab1f7e-edfa-420f-966e-3b11074932c7"
        },
        "item": {
          "id": "f3c267b0-ef10-4e30-bfb7-15cd13182698",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1071e3cd-b46f-423d-a8b0-834e9dff4594",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "28d98cc3-e738-4ea2-96ed-e1d00b1a0f92",
        "cursor": {
          "ref": "c45de418-c61d-4f7b-903c-699866b4c35e",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fd277277-845c-492f-90f3-f5269fbda179"
        },
        "item": {
          "id": "28d98cc3-e738-4ea2-96ed-e1d00b1a0f92",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "added304-70b8-447d-8d57-43820099665d",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4688577d-5803-4d90-96b6-371dccc2c473",
        "cursor": {
          "ref": "ebd4f4b2-25cc-4ce1-903c-df1414273b57",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cad4a3e5-32f3-4a9b-989e-7321107cbf8f"
        },
        "item": {
          "id": "4688577d-5803-4d90-96b6-371dccc2c473",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7c4aa20c-b41f-41b9-9fbc-bd32d811e491",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "dd473edb-6426-46dc-9d9b-b6e07c86b0e5",
        "cursor": {
          "ref": "898deafd-6261-4280-9e88-36367b1f4c1c",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fb6320ea-b739-43cf-a0cf-cba4caf095b8"
        },
        "item": {
          "id": "dd473edb-6426-46dc-9d9b-b6e07c86b0e5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "824ec8a2-fce0-4002-9893-1ae90cdaa0b0",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7c10b8c0-b159-4c39-8fbd-2aac4357f8b5",
        "cursor": {
          "ref": "8eb21b72-f1c2-4f69-bca3-4afde13fcab0",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5ad022ea-8b4c-4c3c-ac09-f818bb39b5a4"
        },
        "item": {
          "id": "7c10b8c0-b159-4c39-8fbd-2aac4357f8b5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e298f44b-28a2-4ce3-aede-7fa296a3830f",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "409bd19b-08e5-47b2-9da2-f5cdd4ec3e12",
        "cursor": {
          "ref": "ea4a0339-7e5d-4307-be30-1fc3d1baeea8",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0e27bf19-607d-4a82-a5f1-5372369b8fdc"
        },
        "item": {
          "id": "409bd19b-08e5-47b2-9da2-f5cdd4ec3e12",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0d16e488-230c-4e35-a83a-af92fcf6486e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc8ac84-bf14-43f0-a4d9-d56a93ee2650",
        "cursor": {
          "ref": "0344ee14-a0d5-496e-b4d6-ed1ea62999d3",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "891ee77d-d0e2-4536-9a18-c4028dcadd1c"
        },
        "item": {
          "id": "dbc8ac84-bf14-43f0-a4d9-d56a93ee2650",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4938cdbf-4aad-4ec1-a283-e2126d3069c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74daee2-3660-4530-a7b6-ca9033358430",
        "cursor": {
          "ref": "a9b22148-23b9-4976-bb26-6633443e3d1c",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3142f3b3-ac45-4151-bee6-a10e5039fc50"
        },
        "item": {
          "id": "a74daee2-3660-4530-a7b6-ca9033358430",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9fd9895e-5128-4832-a06b-06ad053e4f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29515313-a2af-445c-97e7-b419f1accb79",
        "cursor": {
          "ref": "d5602092-6aed-4d88-81a0-3ea1be3b0fa3",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6aa02fd9-5126-4c9c-afff-95edbff69d50"
        },
        "item": {
          "id": "29515313-a2af-445c-97e7-b419f1accb79",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0dedc500-d91c-43f1-8af6-adb854c99fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05f2f14-64d3-4bb5-81d2-0d4ad4a61601",
        "cursor": {
          "ref": "0701f5be-150d-416a-8d1e-5af96520a2ca",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "52262f0a-e951-48ea-b97f-930dcd709bf4"
        },
        "item": {
          "id": "f05f2f14-64d3-4bb5-81d2-0d4ad4a61601",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ecbe2763-2bf0-4d15-92fb-0706e1854214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374e4007-3d7c-4404-a4d8-dbaabc1c15ad",
        "cursor": {
          "ref": "21978a9b-533b-4ef5-b87c-d5fdc9cb3654",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d8dff1fe-372f-4fed-b430-747eff470112"
        },
        "item": {
          "id": "374e4007-3d7c-4404-a4d8-dbaabc1c15ad",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "beba049d-3b0c-48b0-a6d6-19bf5538ca2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42a79d9-032c-4075-9975-44897fee5ee5",
        "cursor": {
          "ref": "d1679e74-f2f3-4928-aa88-19f13af98ee8",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "70dd26c4-11ce-4257-95fe-2291843abb9c"
        },
        "item": {
          "id": "b42a79d9-032c-4075-9975-44897fee5ee5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c302a7b2-3a99-4c74-b339-0ad18959f8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ac4435-3479-40de-90ad-87836e158277",
        "cursor": {
          "ref": "8eaf872b-ea90-4c18-9147-b06b0576d62b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "57d9d309-2bb1-4172-a1e8-4b866796071a"
        },
        "item": {
          "id": "c8ac4435-3479-40de-90ad-87836e158277",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0770067b-3965-4458-83ff-145d814f1222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e63a0df-af65-4765-9369-22df8f1f397a",
        "cursor": {
          "ref": "c9fc019a-cca3-4f1c-a8bf-675e54d48bb2",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "867936d5-0336-4ccd-b7a8-ac2981bc3499"
        },
        "item": {
          "id": "7e63a0df-af65-4765-9369-22df8f1f397a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f4147d33-b89d-4f44-8cbe-41319e9a44dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724f4970-1d75-4237-b33a-3915d0f145ba",
        "cursor": {
          "ref": "b293b8e5-931c-4e52-a273-3021409fa5ce",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e001abef-f350-43aa-9a97-41ea3bc62347"
        },
        "item": {
          "id": "724f4970-1d75-4237-b33a-3915d0f145ba",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3e9cd34e-9a93-4436-92fa-5b105902979a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a6c242-c6ed-4752-9019-4da6160131db",
        "cursor": {
          "ref": "d8cb1b74-9daf-40ed-81e8-3415fbe6795f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9f4c3fa7-9af0-4374-8cbe-ffb6db3e2a8d"
        },
        "item": {
          "id": "75a6c242-c6ed-4752-9019-4da6160131db",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f3e43548-ce0f-4a9f-b95e-14b324fa0f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c779272-6dcb-4afa-9e3c-90f8fd68acde",
        "cursor": {
          "ref": "fedd4ec4-92e2-472f-99ef-a0e09fc057f0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b2f7d266-c540-4bf3-8c59-1f4378ce7d05"
        },
        "item": {
          "id": "8c779272-6dcb-4afa-9e3c-90f8fd68acde",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "cca34c1c-bb05-43de-92e4-fc31a1f12ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b7ae24-6d6b-46b6-9a89-4ce17078dd0a",
        "cursor": {
          "ref": "eadfe8ce-43b5-4e7f-856b-309666bb516e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c899f419-13d0-4219-9897-13ec561188e2"
        },
        "item": {
          "id": "b6b7ae24-6d6b-46b6-9a89-4ce17078dd0a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "53fd5151-5ae5-4599-87ac-2c09507264f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0012c4-1534-4204-8263-b49f7526f5fb",
        "cursor": {
          "ref": "e384083d-838d-45f1-8191-6b780995d97b",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3ab644e7-f848-4fd9-8422-2a11a013347c"
        },
        "item": {
          "id": "0f0012c4-1534-4204-8263-b49f7526f5fb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f5a846a3-e6db-44ba-873c-56880088684c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f852acc7-6445-414d-b3d0-c8a5503be49a",
        "cursor": {
          "ref": "823fa8a0-9ce8-4871-841f-cf166a6480ab",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "883cd0a9-03cf-44ee-a9f7-54115dc5e7d2"
        },
        "item": {
          "id": "f852acc7-6445-414d-b3d0-c8a5503be49a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2cd8b2c7-b12e-4eab-941b-215df82c0e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5926e365-a91e-40bc-83db-b2d49b161454",
        "cursor": {
          "ref": "59b10dab-1fed-418f-ab22-c806329c360d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "adb07950-a755-4b6a-a064-11e03e4af84e"
        },
        "item": {
          "id": "5926e365-a91e-40bc-83db-b2d49b161454",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "10f5001b-04b3-48d5-859e-18f1c0a5eb40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea5d606-a205-489a-83a3-b9efacf6fefe",
        "cursor": {
          "ref": "cfca1d4a-92bb-4bb8-9afc-731233e8ed43",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "aa9282a3-dfd4-418b-9e44-e046303dd83e"
        },
        "item": {
          "id": "aea5d606-a205-489a-83a3-b9efacf6fefe",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e98be9cc-7fbf-4c85-b745-71660dc6dafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b0855d-7b1a-48aa-a68a-adad45ccdc73",
        "cursor": {
          "ref": "e8b792c3-9fde-4a30-9b1a-af5fbfea4be2",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "dea31a46-31eb-467f-92ff-6aca1359a499"
        },
        "item": {
          "id": "77b0855d-7b1a-48aa-a68a-adad45ccdc73",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7f7b0646-81e4-4f1a-8026-5022a12b45e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6501df-5b18-4edc-8c47-a08865fcc414",
        "cursor": {
          "ref": "92717bb6-a098-4875-85ba-546380b5a0b9",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ceec2f66-9840-44f8-823e-44fb22d446fc"
        },
        "item": {
          "id": "bd6501df-5b18-4edc-8c47-a08865fcc414",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4c00c4c0-30cd-4b90-a568-046f4906e895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adeec55b-f325-4ea3-af33-ffa6c5adec3f",
        "cursor": {
          "ref": "bd16ce49-a5cc-4eb3-9c7d-93c232e9b92e",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7ac532f5-be15-4d02-985c-4c135d6ee1cc"
        },
        "item": {
          "id": "adeec55b-f325-4ea3-af33-ffa6c5adec3f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ab648c4c-89fb-4391-8009-b88424658d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c651d809-e4e2-4adf-8f58-3ddf0b3c1f93",
        "cursor": {
          "ref": "b9776647-363f-4e56-8a98-f20ecedf831e",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "231f6968-8333-4d98-b836-a754eb0bcf71"
        },
        "item": {
          "id": "c651d809-e4e2-4adf-8f58-3ddf0b3c1f93",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a7214d2d-9759-4776-b543-900dac432eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4274dc-8e20-4dea-91b5-79dacb541b68",
        "cursor": {
          "ref": "33ea1b7a-3c9a-429c-bdb0-aed975665bb5",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f2ee3314-090b-428a-9e5a-8e0eb701d24c"
        },
        "item": {
          "id": "aa4274dc-8e20-4dea-91b5-79dacb541b68",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "32d42c9e-228f-4aec-9311-d522e908dfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fc01a3-9e03-4273-b9c2-fdcd19a6312a",
        "cursor": {
          "ref": "3ece3d53-d926-4235-a166-55b5f467890c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "633d887d-8324-4bb5-98e0-aa7623fa97c0"
        },
        "item": {
          "id": "a4fc01a3-9e03-4273-b9c2-fdcd19a6312a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7863a792-a78f-4ba7-896c-eca335203ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466cc4fa-08d9-4310-8d8c-4d2a4cb48948",
        "cursor": {
          "ref": "3d570497-b035-4930-b383-4b3bb79d0480",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "30331db9-c268-4162-8d34-76f1fa3eb09a"
        },
        "item": {
          "id": "466cc4fa-08d9-4310-8d8c-4d2a4cb48948",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0c7ea1a8-a424-4eb1-9757-5462f87f962a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4743d7e-4306-4160-9113-0e4037b643e8",
        "cursor": {
          "ref": "58744291-b49b-4ddd-a0e5-fd34209ab00c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "bb00cbdf-7e81-4568-8a74-f7ad2f503d37"
        },
        "item": {
          "id": "d4743d7e-4306-4160-9113-0e4037b643e8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6fb11d7e-053f-46c7-8da0-389faf4d0792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e91838-1fec-49d4-b821-45de9f68b82d",
        "cursor": {
          "ref": "258128fb-5a83-4e34-a4db-62d2c277ecb6",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ad12cff6-96b4-4d48-bdb2-b3de672b9ff0"
        },
        "item": {
          "id": "58e91838-1fec-49d4-b821-45de9f68b82d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7e492c95-d59e-4a91-80c8-f19131e49f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4a85e8-c655-40ac-bdab-f0fb5da67145",
        "cursor": {
          "ref": "198db8e8-fd54-4558-aa4b-cb05e11bb97d",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "9e9c7898-fd24-4b35-82d3-5a7885504d9f"
        },
        "item": {
          "id": "2b4a85e8-c655-40ac-bdab-f0fb5da67145",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "30bd8e6c-95cc-4321-bd0c-d3b9163225c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387df34c-c47e-4c2f-9943-fd0e4f72d7cf",
        "cursor": {
          "ref": "410140ce-0296-4838-974a-4ebb2a870552",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "cd49d26e-82ac-4057-987d-29e42a4f958d"
        },
        "item": {
          "id": "387df34c-c47e-4c2f-9943-fd0e4f72d7cf",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e6f65883-78e9-4faa-9853-037603a68a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48ea145-78a7-4260-830a-cf541082a3b5",
        "cursor": {
          "ref": "00644964-c80e-4772-bb1d-8cff02332860",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "99a7eb79-e706-4d2f-b53c-a0f476220686"
        },
        "item": {
          "id": "a48ea145-78a7-4260-830a-cf541082a3b5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "47ed3ad8-a456-4740-b05f-f7c5daabf96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1c7d53-b194-447e-8e52-e791f7f58116",
        "cursor": {
          "ref": "dd3970c0-d76f-4e8e-8ad1-a1bab0248d2e",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8c852a2e-ceb7-4b07-b76a-63c3adab32bc"
        },
        "item": {
          "id": "8a1c7d53-b194-447e-8e52-e791f7f58116",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "038f9a96-82dc-453c-8e44-eb2d0ee31b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdf1093-1675-4e9e-ab4f-88f16c9f3ad3",
        "cursor": {
          "ref": "42f21339-8c0d-4fe8-a2bd-30de2134b3f2",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "139486de-66ba-49e1-8e0d-79fd0c6e46de"
        },
        "item": {
          "id": "4bdf1093-1675-4e9e-ab4f-88f16c9f3ad3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5da4c96b-7f41-4aa8-96f8-13ec86a34df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41f4626-6b77-4a81-9619-c2cf192667d0",
        "cursor": {
          "ref": "3231a9c6-ad4b-4557-a523-b2d348dfbb06",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "b3962451-6cd6-4604-9cb0-31fa00750da0"
        },
        "item": {
          "id": "f41f4626-6b77-4a81-9619-c2cf192667d0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e94b7d0e-cbe9-49f1-ae82-8d3c62d61eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c7e3fb-90a7-4040-b41f-b72569dfb66d",
        "cursor": {
          "ref": "333d8fe4-8ba5-44a2-8808-686d896769b5",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e9b79d1e-b28e-47ac-ac48-df5d1be3e5f5"
        },
        "item": {
          "id": "63c7e3fb-90a7-4040-b41f-b72569dfb66d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0837973f-b6b7-436b-870c-6c7e242b925f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdb35eb-c31a-471d-a3ac-131ee3c68c62",
        "cursor": {
          "ref": "7e93706f-f560-4833-93fa-086638bcdba1",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "4a4f690e-3fe1-493e-9ab5-c6d11eb33900"
        },
        "item": {
          "id": "bfdb35eb-c31a-471d-a3ac-131ee3c68c62",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ce2a8ac7-5cb0-4e42-ad88-ac4693c70480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2b0eaa-9dcf-417a-83b1-ac4d4280a86b",
        "cursor": {
          "ref": "65f2409e-b02c-4562-b813-50e95058dca5",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "8c442242-dd67-42aa-b0fc-e5ac5c18f50c"
        },
        "item": {
          "id": "ca2b0eaa-9dcf-417a-83b1-ac4d4280a86b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a1f214b7-dbd7-4158-aeef-15c70676b61b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f01a123-22fa-44c8-99b8-124607af36ae",
        "cursor": {
          "ref": "795fbae1-bab6-45b9-93fa-39bee90e2027",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c7baf48b-bc4e-4db4-acb1-76ab572cb315"
        },
        "item": {
          "id": "4f01a123-22fa-44c8-99b8-124607af36ae",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9eb2cc28-4553-4218-9fa7-16f27464103d",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "5738ae7a-170d-4c04-9791-3c0d26ffacbb",
        "cursor": {
          "ref": "7b343a13-ac7f-41f9-b3d0-e26a041633e6",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4d9a97ab-e19b-4fd2-b9d3-b33871231058"
        },
        "item": {
          "id": "5738ae7a-170d-4c04-9791-3c0d26ffacbb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8f00f803-7df2-4f4c-a1dc-665d57ed64dc",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4fb6ee-76b0-4069-8c19-ee9a60a7cd9d",
        "cursor": {
          "ref": "d3c66761-c224-4e50-b2d1-798d5ab331c9",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ab8788fc-fab9-4a78-9083-d4ddeabdf692"
        },
        "item": {
          "id": "8d4fb6ee-76b0-4069-8c19-ee9a60a7cd9d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5fd01f25-24ef-4732-af94-01834ee760fe",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e02bfb9-3b01-4bdd-8f2a-486d1ad8d674",
        "cursor": {
          "ref": "31cee210-59c6-47d6-9d94-024a7b01f870",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "101bb378-a0dc-42d3-b706-a7f511a98718"
        },
        "item": {
          "id": "4e02bfb9-3b01-4bdd-8f2a-486d1ad8d674",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d7a97fed-f623-45d5-ab23-d7982c0c40e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e02bfb9-3b01-4bdd-8f2a-486d1ad8d674",
        "cursor": {
          "ref": "31cee210-59c6-47d6-9d94-024a7b01f870",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "101bb378-a0dc-42d3-b706-a7f511a98718"
        },
        "item": {
          "id": "4e02bfb9-3b01-4bdd-8f2a-486d1ad8d674",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d7a97fed-f623-45d5-ab23-d7982c0c40e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5583a63c-f59c-49b7-963b-da3dec4b6934",
        "cursor": {
          "ref": "6e326ed4-19d5-4509-8eae-406eb0a83254",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "0c35d228-8105-4c63-a084-56bfe9ac34a1"
        },
        "item": {
          "id": "5583a63c-f59c-49b7-963b-da3dec4b6934",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "95f52774-1916-4765-8622-53ff5ed686f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c098d48-21f8-448d-9d75-5dcfe96a59da",
        "cursor": {
          "ref": "3bdd039b-06cd-4777-9cc1-c2916e97aef2",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "c8d9fdfb-6e65-4a22-9638-886c281cc369"
        },
        "item": {
          "id": "1c098d48-21f8-448d-9d75-5dcfe96a59da",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5c00c702-835d-4e30-8c8a-78e725a19f35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}