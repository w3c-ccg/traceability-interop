{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "381f7786-6aea-493b-a633-eea084a4bed2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "522449ac-d497-4abb-8f4d-41a07fbcd8bf",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f06f8fcc-a20a-4e7d-9d59-71d61f59a1b2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e908be48-b910-4b85-8d40-2c785b6e4203"
                }
              }
            ]
          },
          {
            "id": "0289b9b1-b100-46f9-ab91-de6354a0315a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c762267e-657e-49dc-847a-0b5dfdeee2ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "23e17566-fd95-478c-8223-554915176b47"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "874470d4-bca6-4e02-8b6a-32e495025718",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2fa45112-082c-42c8-9cec-9cef99fb54c7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "664dd65d-9156-424e-bde9-ea028709de4c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c11fcb9a-d0be-4e6f-b7db-e10e02f7c0e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84f55ed8-e22e-4331-9d0f-4b3b9553b26f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8c459a91-7509-4297-8f53-6edc3366a77a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3e26a4ac-3973-48cf-aa16-daf5bc60262e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "18354eee-6e89-4946-a5d1-15cf08a707ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f774a8c5-7c13-4a80-b690-8786c15d00f5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8db9b6df-6bc5-449b-bb1c-713ab470bd2d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "082dd110-3134-4bca-9cdf-051e12f2b69f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c312315-8398-44a5-be7a-a05684edb750",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6ab2a69-a92c-462e-b758-bbe4843cc99b"
            }
          }
        ]
      },
      {
        "id": "a52c4458-4ec2-443d-b110-53038e7ca855",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c18a924e-0761-4d7c-bdb1-995b861789f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57db796a-5d88-4818-aaa3-6668273c356e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "79b10418-6d55-40ae-9be6-b26e22020f1c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcdc684-f5a0-43ff-a736-9265b330e2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48577c57-d7cc-4211-aa2c-3f89fddc228a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b716f7-a4b6-40e8-adee-317bf3245222",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54300d63-b79a-46dd-a4e9-9301fcfa983c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "544ef8a9-ef99-436a-91c8-f7db1ff28c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43c118f-9363-405c-ae07-d6508663c8c4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20da22f-8783-41b7-b270-37e031ad19e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "acf0ec62-5766-45a6-8061-968beae89ffa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5a50ae9a-09ed-4486-a7e8-939906f93773",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c326e768-5f80-41f8-b51d-6d59583f4c55",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a7f1a6-bada-46a0-8b85-6b6a98099ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23f9f55f-34e9-4d66-b0d6-f3bab8f5c07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3eed06-8f9f-4772-b680-564b8c8791eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7124fee7-ffe1-46e8-b00e-c1039e0f1b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd10dcc1-d950-4475-bb5c-ca03fbb0e271",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0500a412-85d5-4d3c-ad44-54fb147901a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f440df72-2b4d-4239-94ce-d7fe40cb9c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4673b2-c390-455c-8589-18f0bead2831",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ead1e551-8300-416d-8b65-5c42fd488d56"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f364e2d8-14fe-4bec-a751-79a3c36d5944",
            "name": "Positive Testing",
            "item": [
              {
                "id": "477c2d6b-b0a7-4f6b-bf4a-6f55d6e8cf19",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68874571-9d1b-4c94-b024-69ceae7ee8fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "88ec7557-5b9e-414b-97bb-1eeed999f128"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20b50b2d-e553-4bc0-8a06-4804d376abec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "66f19c69-1785-4b33-a1a2-d7383e753ce9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7609e838-8653-4feb-b6c2-2816ec61fe68",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e79d767a-266e-4199-8175-e0a9140866bb"
            }
          }
        ]
      },
      {
        "id": "9c3c17d6-1262-425e-86c3-6850cefdd78a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a5830dc7-461e-4d76-8ab8-8f944c518813",
            "name": "Negative Testing",
            "item": [
              {
                "id": "852c9b97-8acb-4e52-858f-811042624bae",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b784789a-0398-49cb-81eb-2f01fe7cc583",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30eb6c1b-9022-4346-9d37-0057a5f0ddfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5b9f22-b34e-460d-b3b9-17350017bf9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a684c4c-c979-4cb7-811c-021f0cfda7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c13d63e-bdcc-4cc4-b20b-ada9cd754be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bec142-7fb6-4a0b-9f1d-e7cca934a089",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fdd240-ed15-4c7d-a8b6-8b0764b283e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ad343d-aae6-4a9d-bb40-b6215b458464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00157323-cd01-425c-8684-96d2e2fdef61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a2053a4-e7de-44a0-8b7f-98cd2c18c3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90117fc7-e18d-405a-9c0f-1df7ef11d6bf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9885d1d1-0006-4846-a3fa-7265090885c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90743fd-683c-4fce-b477-4dfe5022de62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945ca8c4-1259-43b5-af0c-205cf23756ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb868111-30fd-4ea9-a123-cb259382b6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93788ff-da1e-40b1-9c86-84dd3dc8d47d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d54590-4011-4f32-a057-5e4b807fc9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2eb18b-73a6-4d2f-965a-cf7c46225a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455d1e34-9533-444b-9cf2-f09e862043df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adc097d5-4f1e-4874-9011-e46a6c8f0d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3de5ff-89a6-4bf5-96a8-da9669bab5cc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5ccc66-ee2c-49c5-8dc6-558618afc936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82591dee-f8af-449a-a9a2-e9d903cbed6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da573472-470a-46dd-81a6-9397c3e73dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2df205e4-9b00-42f7-bb63-f2ab8309bdef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37220df-0f40-439e-b429-d40cf30354bd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91169447-74dc-4a44-bad7-8bf4044f5dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83109b9-7338-4cc4-b3d4-a446bc0b1033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c9b431-0a0e-4a80-b7af-65de0c847399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f23e4ad-5596-4e19-932d-0e0d421b89a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd4857b-fc0b-47ab-9e2e-545ade2f28b4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7606c0f-0ded-4b31-821b-882d80949ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "536c115b-2622-4b0a-b44d-7241ae36926b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b20111-6de8-4c1d-a530-61f1f69983fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94465e7f-b910-4bf2-bb37-f7c22fc87c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65d95a8-cac1-4bbe-8d53-c5385f98cc43",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3983dc-9b3a-4b2b-8f2a-d6fd834d2913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375bd478-6a9e-4dca-9319-1b315ab86b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee319af-da3f-456b-8ca8-6df43f9abc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "028bf5fe-e4e4-4c3e-a47e-21e9843513e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c497f68a-2a8a-494a-ac62-9452596402af",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e8ec6f-daed-4b0e-a5a0-914d426d790b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8089ed-7a06-45cc-9ca6-732bd5ed7381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d467211b-aaca-456a-8728-12019bbb19b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32fe9f36-03a4-4681-be0e-4237f6c998bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba48a7d3-4035-4e8f-b707-9ed8db1cf6a4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4da4d8-de9e-425b-bd99-aea4cc5db01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a8db54b-0513-4f90-956d-ef1a5f6b694b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f258c7db-3131-44eb-9b8a-f9f2c7dd6960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "497b1701-4fcd-459f-bf58-f03500219048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8315dfab-3e59-483e-87f5-fe0f90327aff",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c2cf69-199f-4b5a-9ea5-cd3f5decdd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4193698f-0745-4958-896a-678d3e8c2528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff612fb7-e293-4e14-8e21-a6bf3b0abc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3d07309-3669-402d-b3cd-aff329e26fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089b9c96-57c2-4b0c-a862-9e71b6f49661",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f4d468-18cd-46e9-acf0-ac7734ad5056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "818e8abf-0092-4baf-9ae2-be78b3d35578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b23c3b5-1e9e-4841-a3d6-312d69d552c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "288b56b1-9944-4573-9c59-6b2042e88810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9be594-8530-464e-83ec-d4e3dfecc51e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d47eb1-af72-4f4e-95cc-dc980beb2140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59177561-e255-45af-9369-816a3a470b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e993e549-c976-4670-b386-6f4e848c4ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5473dd4-878e-4c6d-8110-c3f36104c800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5184f487-482d-46dc-97cc-a36be4ad1f30",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4529a549-a7cd-4f61-9e26-421cba165344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56d8cc3-8837-4479-b57c-34316e9e32e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058dba9e-0c73-478e-8ed8-4b2d831f185b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd2ac0ac-dbc2-4d81-a782-847c0eb028a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c83e688-ee23-4e08-a8ea-cb7043a2c44d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdd9f86-8d21-4447-9ef1-665e598bd061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cb747b-8d7f-4581-b7b1-c71a1a7931df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf2fdcb-d2a2-4867-a253-c4bfd0e9dbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97ba25a3-9548-4431-953c-63f6ddcf6b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fd1fb8-f178-4e6a-a896-d5557069690a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85244752-775a-465d-8790-a9e169e08b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "415cb5a6-227a-40fe-a718-499b29fee75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea9b7a1-7a30-4fcd-b5b8-b2199da732fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0766b718-096d-47be-84d2-a4b86aec8b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067b5957-f883-4754-9121-5e223b19a0fc",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5b1441-0349-4028-b8ae-42e1fb0d874f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d46fdc-b816-4faf-a0f4-95ed57b48051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a3f41a-b77b-4728-b979-819ccaaf0060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79041879-75cb-4f68-a6ca-0fe376c19e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9236d60-48d4-416a-8215-7cfb5fabe42b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0876f03-3aa4-4208-bb32-7657d21027bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f9d3ca-9f13-4c65-a327-e449e447659b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d1514d-3397-45a0-ab48-480e39f2bf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7627c0cc-2aae-4f5f-acce-e6786ff65955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49d1cd4-8960-42c3-8170-70d07262b426",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b8f812-d040-4555-bbbf-98d2180f2a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89494c87-e31e-463f-9f6c-4f5e522879aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43360a42-71f5-4dad-b01c-db19f82fbb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af8135cc-724a-411c-a16f-57c196a15b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd09610-ff9f-4db2-90af-cbb15e5f4a60",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "593afd0b-0489-4e01-b3c8-0f5c4fe97696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f249a44a-1f0d-4100-924a-e5fc70aef738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c401ee-bfba-4d39-8500-f5b5dd48f78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92cd0f58-77c1-4e74-be60-9217de415417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25005d9c-b186-47bb-a539-fd665ef5c5d1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3029961-1b1e-4c32-ae3c-736c00acf91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d35a0da-6d27-4e27-be2d-cd1b12d42ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6b1e1f-3f1f-4a75-8295-2dd0a91f21ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4c4689-ba65-4108-90ec-514f7c36d26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9a6ce4-7288-43fa-8afb-a46c090a0d69",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58142f9-7158-440a-99de-83a5a960e3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb3b34ab-b24d-4e33-83b4-d3d42cca8fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531bd052-b0e7-42d9-8853-5615bc627f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2d34aa-b1bd-4c51-b81e-e26eca817401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902ed377-7660-454f-96a3-dfbb988b240f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829dbcdb-bfdf-4c10-b81e-48368fee5ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf2ff40-452d-4555-9fdd-f1fa84d7b533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd41673a-0f68-4ec8-a792-018a0ee35978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b54fdd6-2246-42cd-8793-3e505659d234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c77872c-862c-4cf7-824b-51c7e9110261",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f79769-9f45-4d60-aa2d-68d09f690add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c7991a-c605-4995-a7cc-5e9687282e4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0fabfe-1e18-4b2a-8930-b01621607832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9402bad1-b29d-400b-b800-453d524a81dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c71a1e-b569-4067-8cf6-9028d21f92bc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22709c43-0d8d-4a3f-aa8d-69a1e32341aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47fa5cbf-e643-4c09-bef0-366426b70764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d2250a-a503-4a81-9c4d-0f13eb80ae9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "df600ce2-13dd-45b4-b1da-d0e4f0da3aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12704b2b-4c6e-45b7-90bf-792bf34aaa25",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ad1c56-5c0c-4412-b924-01356d3bec2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210820fe-7032-4af7-b26b-10a7ff0f8fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1611d8-0f84-4575-bfe1-4ace392ddb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4863c526-d430-4419-8720-d79d300d966c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f998751b-2379-480c-884c-f300de063d20",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8305f42e-cfe1-4d47-aa83-3638c7f7451e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2acfb9ff-c37c-4dc0-867f-d35bebfa86b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c70dda-89cc-4a74-9305-5408174e5ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "49786adc-0b26-4a66-bf45-45975590313d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f633ed32-2e7f-460e-9cb9-32c2069bb072",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9728b6-f4f9-40a4-a5a8-d1d2b2fcc846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0339627a-1e73-4f13-acf7-98ea791bafda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc92d38-4be5-4f00-a872-0c91020bdeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a935967-95c6-4f90-86a3-b8f52742ac94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6186ea8d-1d17-43e3-a1a8-3a72451c26e9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c52af6-016b-49fb-b2ed-52a80df06e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0829876-8c1b-496b-b5f0-303ea6094476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c69d84b-4544-42d0-8928-3fc476ba3ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33ad9093-ee44-41cc-bcf8-0baf63a93c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3152da62-ced9-43a9-aa79-2348ad359150",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7897df81-fd5c-4d2f-92a6-a33ff3558293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c063ca-d64d-4cf4-afe4-a0225b8b6c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67ac101-5cbe-43dd-9224-713af9e6a7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bf7d484-4941-4232-99d3-6d18c8a51e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22122551-6310-411b-bfdf-9d20e9ecd62b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04b7dda-5da3-4faf-a29e-7910c64a1cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6719e40-0b66-4a95-99e8-5321641fdd1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1703ecaf-78e7-4889-b065-b8c7ef883abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8052ac7d-8423-4fdb-9555-40c2241f54c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c749de5-4592-4b2e-a962-b807ecee8908",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728eb327-0078-4225-a552-76d7cbf2a94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f77b3b63-d3a3-4807-9fb8-8a9d1f98ef3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e882f31-320a-4c0c-8060-547444651b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5256b8-be40-497b-8b41-a393553d1f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d3bcb8-038b-4a0e-ae48-5cca47d9b020",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1575281-d1b7-4487-84e4-393814af9221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a31c6e-fec7-459d-b3c1-ae0a8385b711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3183deff-7e3e-4b6b-ac09-822ac6bccd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c88579b4-66df-4488-9db4-b38c80c68de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a719fb86-2070-4418-a0a4-12a8a664bdad",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543c42d9-77a0-413e-ab95-c750817c3907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "619406e2-64ef-4aba-9739-ae32d36c9f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9ca08b-34af-49ad-9575-4c446cf0d2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91da5e56-2208-4dbc-aec8-b12cfda87d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a260020-5ec4-4f1b-b1a2-354780728632",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f63be9-47a2-4f5b-96d7-91aff18b9b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3f30ef-74ea-4e75-8cde-ff205674c65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fd49c9-e3c5-423d-bc1c-95e3ee2c1c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa269b8-820c-456e-847e-6977f48ff285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069587fb-7db1-4eba-8d90-9bacda1db524",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb310569-f74f-4d03-b3c4-c725b8fecc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b2ee6fa-e0e0-439b-bfa6-1c3f38d7ee47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d54e27-a908-4eee-8d70-a3d8acb3be4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2621c2ee-3162-41c2-8658-56c109834a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90e58a5-cda6-4c30-991b-0e1108fac97f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72822c7-0d46-4ea3-9314-ee027b2ad35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55108e95-4c67-4c8a-9904-f024162a3db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0d4166-65a0-4f20-9a5b-9c804b08aefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80de85c7-9169-4202-b33b-016e2f366d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656f6bf2-6d1f-4500-95ce-bee482e4e412",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ccd5aa-d3fa-4260-bdd0-0119d422ab73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbd5adbe-214e-4535-bd6b-d9332ea6c33d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607370be-69ab-4615-9353-933ea346cace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "04cb1328-5604-46e7-bb4a-71a03714d55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf9c112-bd42-4332-843c-d69dd1882994",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a700129-5fc2-4ce9-8ee2-b5f90f62ec48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d030a6f6-a66e-4e88-bb71-e56a2eb6e6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483f40ec-4208-4484-86ad-d6d59296921c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef33d317-568b-429d-98ad-b63c872a7d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d034f2cd-2c0b-464c-bb0d-a40bf430fe6f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd87c09a-0f2f-4833-9605-60de7a2cdc8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a24b607-d148-4684-92f7-fad88f59af8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347b803d-97cd-415d-9124-c57abdcee79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "11cee454-c0a0-4567-8e3c-d94d6b670141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce6d30a-71a9-4d08-96f3-22f589aae844",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792e396b-6664-4fdf-a829-b10a6035b8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b1966a-fd61-4306-a905-3256c0f59988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f55927-f8b2-42a4-8dd7-2f9e726bd7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "63c17501-2f96-4cd3-aa32-c50f5297ae23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbdf757-f8b1-43ae-8638-c9591ecb06b1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f531c90-56b7-4fdd-8687-d1cda86cf056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc704b4-0683-4fd2-b6fe-66c819e5d87b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e882733-b3a0-4c52-936b-79c479fd2fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "99eda527-a903-4874-9ffe-4c27f08ca436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cb2160-5853-4d46-8776-cdc07342bfa2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8be1609-6b6c-49d2-8a9a-2ad40f283738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a640095f-2286-48df-9c17-4c424b4042e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363b7a88-f0fd-4199-94fd-eb197f0b6842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9d83f3d-1389-4f19-a858-3f2573e20ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78ee0c4-1bc2-4bc5-a1cf-896e00c021fa",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d07a5a-f82d-47f5-83e2-bc7bcfb3bbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f27025-abb3-4422-84f8-b4ec46561f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5189ed08-fbac-4438-9e0d-c5dba14d138a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9df656ef-db27-4a24-96b0-03b169888bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72779e0-ee17-4654-b37a-fd87de1b9885",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d7bac9-3942-4fbd-8541-d8648f80b3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f26568-dd6c-4948-8898-ae84e1c6d147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460ca841-d138-416a-ac3c-349559e340c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "78874120-c9df-4fb2-8ac0-66a2f7e8e785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7a02ac-f296-4934-ba8f-0493c5ee37ea",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab834be-f22a-4bce-957b-b79b7470effd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f86c86-3516-4ef2-ba45-7224d8c4c2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1398c348-bd3a-40d5-adb3-d854b9aae27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c51f00a-5b75-4d69-a1fa-7cb3ab4b140f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537f9137-f1ab-450d-95f8-47b96d575f95",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9e21ef-ef04-4780-9237-0751b990c32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e06a18-1f25-4a90-bfe2-3dac1d8c8f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0616e8ab-dd6e-4c7a-bcd2-81d121a49783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02eff445-b542-40f9-80c2-3d0b467cd801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248ccb4c-d05b-48b6-8b94-1a9ed0eb805d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b4b842-c9f6-4261-aa6d-038064c2e575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4527ee-2c95-4e54-91f7-32c292375b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827ae151-4363-4e31-9d6c-8239f5107328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "afac8c93-677b-40d0-95c8-78a425ec5138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244e7c2e-66aa-476d-991d-42e29cbd46ca",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a165d5f-30bf-4849-9a1b-840f2a636c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f02c6eda-ef92-4739-9111-75379e90c850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c2c027-4001-4405-bf9b-94b899c180b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "375f5229-af92-4cff-8308-c4c91c45f7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb2a2bd-a192-44ca-b332-7ea66306edd9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4bec5a-80fc-4560-b50a-c6b2fbca5ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f40bdef-d1df-428d-aca9-f4b46e495819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46dc7651-50bf-4bc6-a61b-d53a6220facc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "05047d0c-daad-44db-917c-cace67a17f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084df60a-60e2-43ad-a265-9e1c150d3ccf",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a87878-440c-499d-af94-b2627ae2f8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a376bf-428d-4e8b-813f-f37d90c6357f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7460be-dcdf-4158-97de-118d9016b4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cce5a7e-aa8d-4460-9c3d-3742adf948cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01bb2beb-33c5-4bb5-b016-14b8eb503d3d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e413f9b0-4cda-4f89-802e-f1544fb1e250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90a61b2-481e-4b4c-819c-b909ce9b09b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e7548c-5cf3-4a48-895b-994db9b12456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c41e658f-2889-47d2-9706-bfbad94f4d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd7b602-e46a-4907-a3c1-3f9da47ee847",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad7affa-9782-4cc2-9a3d-7149ba042e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b7d6c0f-6f78-4c1e-b17b-e8ae2b5e0feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0edd758-9d53-4883-a722-b48a8ee60f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0101af90-c58d-4d7f-acf6-5026e98e5880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1db97d-742c-44d4-b1f7-5615c7d7d8da",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8c4e9c-e782-4628-add7-c8cd80efe921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509130db-5117-495f-912a-0f170ff216cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea75773-8b89-4b06-850a-06a65c5b9b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9875bf07-7937-4432-bd58-0f7860751251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b764a91-a24b-4435-a403-d1618ac59296",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefb4adf-2715-480a-894c-b7bde245768a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36376f77-aa01-4fc7-9a43-a7e591f2e248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d942212-0e45-4152-aaad-634dbfcfce4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32eb2236-07df-4ba4-b2bb-b67ccf17d62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f5e046-54fc-44bd-9c2d-dc4defc34c95",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db62fd2f-6ea4-46a6-81ba-9c83fddbd83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf416a7-95bb-4a38-9a52-b4cc955c0d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288f0c13-acac-496f-a724-356c6200734e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "951b3c63-d0b6-4e5c-a94a-7694b5689d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0beeff65-7de7-40d7-9950-7aa09c695eef",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3787ae1b-bb04-4431-84bc-42635784ad75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94135118-b806-4aba-afb2-7953b123a3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902b2bac-c7b3-4042-b442-1af576e2620f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "753d5b7f-4e4f-49cd-bf66-e77b3b034e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e42710-0963-4a51-a07c-c8510e100851",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1696fe-fffe-4277-9dca-c57c15956029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc1a870-f750-4933-95c5-0752dbcfc248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837c75de-3cdc-40a2-b284-a8df3d42c44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "826f10c7-c1e1-4137-97b2-1c5adc8720c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cf0277-0496-4ede-9a83-d3f69a0633cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93bcd80-4a95-4b08-a1a0-d0672a3a5c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c297e28a-83c2-4ac9-93f1-6fdad11e3759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e1b4c3-c3c2-4270-8acd-df2fa59b3264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f395bde-672c-45ab-9270-54756880bc41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0f1819-bc82-429c-a0e8-f7c91ae1b37b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bc1a82-6399-4c49-a6ff-69af1ed2ffb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3510f0-2e88-4a60-86f8-66d82acd3922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242d719c-38b8-4379-866a-96077dbd78c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe34960-cac4-43ac-9f87-6a87c12660c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f103f57c-536a-49cb-92cc-44c6f6aa9d8a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea37119d-de07-4569-9685-23a06e48ed0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00e623b-ab34-415c-9c84-4e0417226837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e96cd6-79eb-4312-bffe-fa767ef2e097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1da74249-aa7c-4b28-924c-af468e4d75d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca657d98-2693-49e8-9780-3e961a98319e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91ae0e0-bd4d-4d76-a7ec-6fed61b0ce05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc5125c1-12af-4991-94e1-6f45d01876e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283a6a34-b8c3-4471-ab9a-be28cb405961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c71e745f-ae0a-4ea5-b976-c35347e92ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6520bc07-245e-45b4-9e5d-494bf001e72d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6010ce-8b4b-4e4d-962e-3eb522a05246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679919a8-a6f1-4845-ba83-70cfe8dd185f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb804188-e974-4a5c-a0bc-55ee4e821256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3fcfc5-da6f-44d4-a5c4-47f94b296a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a7f5c5-3140-42a9-bc68-87af7af7b145",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d567854-be23-4f11-b2e5-e6888eb8dfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce4e051b-5853-41eb-9dc3-a8e18e8b59a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9359f80-b2e2-4753-8d1a-aee4fca8459e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "edd6f71c-532e-4259-a2bb-40589c2906d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b389024-ba16-41e3-9d18-def9d71ca00a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2466f279-95d5-4fea-9d94-505ce645f158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f13fcc00-b976-43e7-b419-796584b5a6f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cde88cc-92ad-4789-bcae-9a7a2dfb9aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8bc7cf7-6092-44dd-817e-72b1a321fbc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7214fa54-049b-47f5-8d21-f2dd1ebb1ce9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d645684-d690-4993-8b12-9fb686befca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911bb68b-547e-4b2d-9fd4-b7c806e530c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c222360-4c17-43f1-a08b-9acd848359f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3670bdcd-8d76-4700-8fa5-d276e2d21924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8187bc48-bc47-4740-af45-6726a57fe688",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c5c1a4-cbb3-4eb0-af7a-90219f8139d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ccdf2a-eba1-4a4d-a9a0-63d096d8fc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4607b4d9-2104-44b5-8e45-b7e9660804dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e1b2d0-4582-45cd-b4b3-d738f087e582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549e76c4-0995-4120-bb45-aa66dc597feb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80d7d7d-8140-40ac-bc33-0897701267bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e7bbc6-0e02-4995-881a-00e070d48a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab897cf9-a29d-4e1f-878a-ff7ab950887a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "beaaf115-0bdb-40b4-bc10-e9a1c92e9703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4517b525-1359-4ecc-aa3a-14c881ac2d03",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba6f75e-60e4-414a-8979-d127614fb4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "556d9a44-72f6-4501-86bd-003b2a7e04ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae893e11-5da0-4a70-9812-8b5b81ba7166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf3aeaf-e214-43bd-adb7-862deaf3e39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b59d43-76e3-44b9-9853-21c490ea9376",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d70357-6898-4d91-8266-40c5533771cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c64eff57-b363-4609-82c6-bc7ebbb0d764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816954a1-4d7a-46a4-b152-bd5bbde01d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89e7b0e2-c751-4409-b1e2-aac978fc2d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c304786e-817b-45a9-b4f2-e12742db5648",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c504a650-1edb-4bbb-84c7-165f4077bb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d4397a-d7ce-413b-b053-db9f66f1d3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3c840a-0230-4176-838f-10d80c00b72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a03b75f9-c37d-41de-927e-e98681d23023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e49c0ac-24c9-4c0d-bc71-cde007042859",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b19465e-3bc4-47c5-881b-2f5147cbfe66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f297c7-97c8-48ea-9a8c-ba7d8c9df114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8fd642-dd0a-4c6d-8f3a-c3da8465d8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b95bdc4-f17a-44f4-aa89-828a98e0726b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c857cbc-a79e-4bd1-9e9f-c5446d72769a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5e2723-8c52-4b3c-8f53-9b48d0986615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d3bb75-cd2d-45a2-b22b-9fe8979bbe5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38598fec-a0eb-422e-8b1b-995a524f6509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f6c9ef-fd1b-4a1b-905a-f52977c2bcac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82473f31-03e0-4180-a1dc-381768c0180d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d950b28c-e5c3-4fdc-9dcf-c6a89371c1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4386b832-ab7f-438c-94a1-3fce8bcfe874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f021a77-c142-45f0-ad17-58e96718f715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df4948b2-f1f5-4ab8-a99e-c64cce257cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3a53a8-f034-4051-b912-e070bc1ccfa1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd015f0-d7aa-4925-b406-35505d36f4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fda9476-42c0-47c5-91ba-9066b6612741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f6e963-150b-40ac-8bad-ea7d48dc3c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd516eae-ad76-485a-b48c-cef93214ceb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6c80f9-dc3c-422d-8c3b-48512e05bb2a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283e2bce-f5d2-4aed-965f-6816fd098fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2d9c54-44c3-48ef-808e-87b4c2ddc7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2a5605-5583-4afe-ba95-c954e7adf055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2e8460-7a6e-4ae1-bd61-996ccd0e0130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e771368-1088-4b7c-8688-0d104173b9ea",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72268bb5-b20e-4d7b-a7b2-90b32ab8f062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e90d3d-42e0-4419-833e-08db2f78321e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b826908-5a4f-47cc-ab43-2a9bfa1b6d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1c0ccc-027d-4ffd-b42a-fa2907e8bc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaa8df5-bb2b-4450-9f30-1aca0706cbc2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595b273f-705c-4a9d-99cb-acec156de862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f41ac71-4b7b-4b71-9d1b-96c429b03279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d82db44-5dff-4bde-ae6f-c1bf06bb81f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1156678-0cac-4129-bf0c-b1fa00fe62cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4278d6a-48ba-4268-81ed-00ec6f395c71",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35577d9-4207-4014-bad7-fa4fac6b98a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd22f6e8-a9ea-4e98-9035-e9fe0766f4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8603ab68-ba69-4183-a433-15b06195a4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "201c7c09-3ffe-4f45-8fc9-003e01aa211a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341db2db-d292-4aba-aaef-ec5033c48e9c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dec510-0b58-45ca-b16f-1df6be35bb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76beb94-e73b-4a7f-8b2f-9aeebce01bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899f0b5a-a0b2-414b-847a-28733b1d82f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "68963390-007b-4e55-b7fe-732ee7833be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839982ba-ff11-4cdc-ba3e-21eedbe48e09",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "147bcf5e-5f8c-4c53-81e3-30dde406e330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5bb4cba-2daa-4e57-acb9-6dd92b0ff35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3e867d-ecde-4627-ae38-57f9d30ac0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b08b0d7-bd9b-466d-a902-c772440e7879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbe393c-125d-4277-8a72-8cad1eae0c5c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10e8eef-f1e7-402f-97eb-04ac5b50bb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b58806-b289-430a-a9ce-688ef140f1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f55456-1bc8-4123-bef2-0ff18578a176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75693e00-8088-43f7-a073-53ce6142e512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a11b48-5fa9-4395-9e32-cc7db9b68d88",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a7c3d8-1473-45aa-8010-a08c45717176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad5c686-4927-4863-a31c-a5b1120533a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2200b7ac-d03a-4523-95e0-caa215cc7a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f70fe2c5-cf71-4fe2-b92c-f7c17008221c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6d34e8-8ff8-4bc9-886d-9ecef43210f5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6139ba-5515-4f4f-bc30-b5ff60a1d626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b251d759-6a4a-47e1-842e-e6d2cca2ecec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd66a21-c212-4454-ad29-7a03a1aac768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c323a07-2322-4933-b34b-97873908ce65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d47dd78-d416-4604-8aa3-b8f74f1ba101",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95753a8-3247-4d81-a3bf-108f4ee4d718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5a4dd6-ed34-4399-8997-26a10987929d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925701ae-a832-4fd9-87e1-e7087e4cd344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef736a6b-2d5b-4a1c-9362-6a57b9a1c13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13501906-7479-4f37-8ea7-852c87be2a65",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def85166-dd7d-4c82-adf1-e6f58f92d0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5d2045-4e3e-4286-a813-a169d5acb66e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecb1584-e961-4606-9b04-0f756434fa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0819fc64-40d9-4cf4-9964-9bc8af9420ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2467f2-7913-4dd1-b8ec-c1128416d35a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30dba44a-19b8-41f7-916e-58cf04100cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd13224-95f6-486b-8529-f2caf62f9b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef448c8e-cdf8-4f88-946c-ae65c9974784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b823da97-cac1-4377-a7e7-e3d624174389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7fd2ad-81d4-4f45-8d37-c0c68fbb3e49",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e17cd6-d513-4176-af60-53d5ad3be563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04cf6fbf-9e9b-493c-b14a-52790a19802f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6aa843-b0d2-456e-b958-e623206c9ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dab0d28e-d5ba-4946-a844-9140f415ea1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50b05ec-1586-4f58-97ea-51e00651eb5e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d58eed6-71b9-44c2-ae71-07901292d4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64223fa-2e10-4a82-9431-4b44a38cc59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7dd660-ac7b-4886-86bc-d17e86f0d2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f067fce8-f53f-4b61-b620-5358661680d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fe39d4-b788-4274-ab81-0428d6ad8c89",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980b8cca-8062-47fe-b8a6-434b6bbf9878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e284061-3987-44b7-b8a1-883df7080b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ea7962-5b9a-4664-9a79-4b0b4b424705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e79f9777-f629-4cd1-943e-80c81e6400e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dadbd10-8126-4c7e-a819-053ee1f904b9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7ea0dc-e1c9-4cd1-bb1c-f968b82ffba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6bb3ee6-52ea-4185-85d4-55a9f049368a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc169c7c-ce61-40ad-9522-7a18dd4232f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "07e4422c-7424-4238-80de-8cbff9e06fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c584742e-624a-4781-ab9f-bd00edef7a8c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e02ee64-a1a1-4c0f-a958-e6ebf63e6970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f0d7f7f8-fdbe-45a3-9589-ac7c413dc50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a289d8-452c-4e1a-9e71-e261562e60ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f22256af-7f0c-41cc-bc6c-28f343f0f457"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1cc69a22-1f62-47e2-a94c-87e9eb7890ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "40fbfc83-f8c0-4ce1-bdca-92aaec28f91d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72787138-3b92-4275-8a45-722697d5781e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7f2c57f-a6ec-4cd2-8696-7860d7bceb7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b0772c-dab8-4a23-9b1e-1308102579b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52e06aca-c46f-4ee7-a22f-868cf31cfb0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9c665d-ffa1-4fb6-b155-05b67fe15e8b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a530d2aa-14be-4864-9ef9-3948e0d908d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4255cd26-76bd-4d13-acb5-717834940a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344b01fc-1f0d-4d72-94e1-5eb87f22278b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0783e54a-7f2a-473d-b230-e1b6eeaf9087"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94dc49ef-8e78-4ed5-a025-fdefc80a624a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4726eb5e-db64-448f-8229-b0b4da20abfa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14cbf4bc-c8d0-4f3f-82ca-d464e6426b6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac5206ff-bc9c-4c97-95d8-56201f56ea91"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c65885f9-c3b1-4eb9-8304-709e4cb95def",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "481bbcf1-1dcd-4c48-8c24-2816db69919e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ebedaf2d-1e4b-4701-85cc-62ee5f5f052b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4fcd3f2-bc4e-444f-8b6f-3ee3aa545ccd"
                }
              }
            ]
          },
          {
            "id": "f9b3b697-0f3c-43af-9200-4ae3723cb265",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3eca477f-9b7e-463b-be3f-697ac66e1fcb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "593bf7f9-195d-4a8c-8e04-a4090fef1a6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2abbc04-d577-43fe-a504-680ce10241dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2918b7d-8657-4bec-a793-5d7e1e83d6cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d25046c9-2aff-4a61-89fd-cd39eb433941"
                    }
                  }
                ]
              },
              {
                "id": "15a306a6-48a0-4628-9194-2b25a8954a77",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ae9e640-499a-4810-88ec-e9f03df0470e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b465787a-2ba5-473b-9ee4-457f058c796b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8ddf24c-dfe6-4d2c-98bd-a1bb687f0533",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e752148c-7204-4856-857b-84927567abc7"
                    }
                  }
                ]
              },
              {
                "id": "dc27921f-b327-4579-93b9-5d774028ec35",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "920af370-f6e1-4800-b70b-615c131642f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c8db736-03d0-44c1-863a-650a00ae3636"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7010fe6e-4fc0-45dc-9397-fe9b95d1ed09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0f422c68-645b-4f38-af2a-49f548beb943"
                    }
                  }
                ]
              },
              {
                "id": "769b4211-514e-4594-9d60-0a4d1524269e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b15c531a-3b6d-4557-8a2e-7017d51d3e58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea80bc60-2a86-4ea9-aed8-95e1b86e7d37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "511d7cbf-8589-4639-bba6-9ae4f1a355a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "49e0fefc-93df-498a-bc40-00d20ec3c524"
                    }
                  }
                ]
              },
              {
                "id": "39470255-d119-4803-a845-c0eb1bc0e65d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9420c454-2163-4b82-95c9-77d70ffd0ce4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61ab3f0e-9f9f-4ccd-8f92-0f31ba6ad3b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e331ff0c-4948-4c37-9055-72be39fac460",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d9cf08c3-5c5b-4630-b993-0abecd609445"
                    }
                  }
                ]
              },
              {
                "id": "827f6acc-141f-4f6e-829a-96800436bf2c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5ff609f-3f49-4476-9c82-3d05e1a44217",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a78e94dc-3546-4e0a-a3d7-b2ebd48279e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48f40d38-f4e0-4cf9-b4e4-fc21456b4f05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "33cb5526-c6b4-40a8-8ec5-5c45fddaa60c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa5940c7-fc09-4fd9-bf75-2fe2cabf53ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "524de7f6-9714-4909-843c-912f8559564a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "987bbff5-9865-4db1-8936-340f5b8e49c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "299985d1-8b51-4f5f-bf99-6840b9aa2331"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "881264cf-edcf-413b-a360-7310d1ebfff1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c1e75425-a557-4434-87f2-eb781540a4c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a322711e-d39c-49d3-bc2d-226944e69e6e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff8efabb-c9f7-4983-a332-50ad1e47d8f2"
            }
          }
        ]
      },
      {
        "id": "4c93ada4-ded0-4514-ad13-3619cee41a09",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b4692e2f-bdee-44ed-b4e6-be6b9f1ab0cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50a6dde0-ca53-4d39-8808-8e00a139724a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46a75514-4fbd-4a6a-b63a-d73454053f73",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ba6796-8f1c-403b-aa0a-630f37fa6b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14cec1af-45e2-4ef9-a5fa-08fe8c707f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c7d137-7206-4f07-a53a-8e2c725d2061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "42af5550-bdeb-49d3-a635-da3a1bd2b612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0e0d7f-7f9e-427e-9eda-1570c11a6b66",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c02aec8-e662-481d-a719-399bebad1210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c4e6b8-8dba-4727-8497-bcce6d6a6131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7f1f72-8e69-4ab0-a5bd-cf236e063927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cdf53cf-cf90-4d29-a3dc-122d02581a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bc1bfc-4555-413a-b16e-39354634f96e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452f1e77-9c67-44c2-8024-ce4bef1388cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22a8f6d-8c38-439a-a00e-d79b20038b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dbc1e3-4529-447a-b243-f34c51f0fe70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dea8c855-4584-4cfb-b014-38f4201a9cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a8ab2c-4ddc-405f-8d2a-19992c805d08",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ca8115-98d8-47d5-aafd-88e0fe95c222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1758e83-6e0c-4c26-959d-ee393a7c2892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e3c305-9662-45c2-acd9-03fe887e03e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7eeb7b-5a89-44b3-bc35-c91dbc5a2f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f9c438-fc19-4566-a090-a5a9a21f8fc7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c9054c-1843-4fe2-bbd9-a38ea9437c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7cde42-6716-4e7b-ad3c-2cc31b1a657c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194260c9-473e-43b9-9b8b-1f08d144877c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "040fdfbb-7560-4328-a48c-c3c05f7911ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee15e2a-1ac1-4328-97de-54541b37bd46",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fac7b9-5305-4e39-b90c-0f9032f56a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a4fd7f-0c4b-456c-90fd-edb218e16f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952c64fd-4800-430f-ad08-d68728d03b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b362682f-3b9b-4ff1-adab-b96319122b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c8fd0b-b26a-4a80-b28e-94652bd93901",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b5f7a5-5811-4cc8-83c3-186a3b2b1ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40ef59f-61ed-4188-baa8-0f6725285226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da21b7b5-ce53-495a-a51f-e1cd3e85883c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bedc1d4-f543-4247-8c14-8b053dab40bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2dc3878-06f1-47db-905b-f99d453c536a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6968268d-1cb2-4fdf-9947-4404cdd7e2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a44aef-fbf0-4e23-afcf-0cff24d4028c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0247c48f-4ee7-4c13-aa1f-368c7b5a821e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb7a50e-f4ff-48b2-9404-e3e18fd624bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7f3e38-b233-4389-9b2a-8fcabfd9dbeb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a4350f-bf4b-4718-a9eb-103d229e68bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d9b2d2-ec6e-42df-993c-29b487dab70b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a89d151-2649-47c1-85b0-b6754ec23ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "558f1e16-ef57-420c-8e3f-23f627b763cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd9edd8-1962-41ac-8c79-812ae42223fb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2a120a-2792-4392-b641-d79e80d00331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81826a8-ef2a-4e92-a053-42dc2e9161c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af18794e-46cd-4bec-8863-53351018b45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42d70b90-b6f6-4d2e-936d-87d6a062574e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc7aa6d-f016-4f2e-80ee-c7c96a170278",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8f3044-e523-40a8-bf0b-39b84b80e119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18175af4-ea52-4ed4-9960-733359972932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d7d973-00ff-432c-97eb-4907e4d67457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "134036a9-36ee-4c81-b9f6-c6e52db0fa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2034d76f-02d8-4461-b07f-f1e26d57b2a0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b23935-977a-44a5-a5c0-96f76d3ca420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a576f93-3dab-41ec-b49b-a56550f1192f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76350c0-a4c8-403e-885b-0f12b3fa60eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd8f935-f9b0-4cb9-83a7-d46b65a14a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6c89f8-3970-4185-9274-06741ea32ca9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fd302b-87bd-4bb4-9b65-cf2d528cdb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d350caef-e1ab-46c0-9515-e2fa5451d704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3c5f06-a49c-4747-b280-16fc22a84457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60b7ab17-3a1d-48a7-834f-562c18119ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d89e987-701a-46a2-84fb-ed73f8918530",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6b77ab-b3f7-4117-89f7-c6d4d25541ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b56ede2a-1685-4f38-b30f-0aae30e1d87d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36766e34-a1d0-4505-a839-5509753e159c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b49dc2-2c3b-4755-ac16-8b50b0b98ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3659343-7133-4115-aead-74bee93c6564",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18e2f0b-5b64-46eb-a1b3-c203846db9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48f2a0d4-5ba9-48a7-96ba-ac1cc98e8cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14281773-2255-4db8-a44b-c1857b2a4b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "517e7bb2-3f40-4bf1-91c6-ef505424e6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55137b6f-f937-4cc3-9c5f-cbcd46ec0e9e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0a18ad-c653-4cca-8f3b-b39a9898451a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44099132-c66a-4990-8388-89dac771ada4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa3c651-a1b8-49ea-8200-14278ad2bcb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "42a8a8db-4d29-4025-9583-5e9a4817dfaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c8fbad-c21e-468b-a589-f57e847fac1a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1b583b-d4ae-4bae-92ab-4f88625287c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd282f9-2fce-4ca6-b030-3b50df4005d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b54812-3931-4431-9c54-6f71def45e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1796fa04-d160-4b56-bd05-af55063992a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f3cede-5ef6-4ff7-b5d6-58737da16143",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97c546c-e554-4b2b-8020-6dc81ae8efb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4662b5a8-5a3f-43ec-bbe2-23e5d7795f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00fb553-f379-45ee-b7aa-1bb52a66a57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c38fd36-752f-4f02-8e85-fed47d621b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297abbc1-a5cd-4872-8e47-2e42b20c44b8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc546cb-8a45-41d2-913a-21d46deb0f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc8128a-fa94-44b6-8acb-80d603b6fe42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110ed81b-95b3-499f-834f-fb22844de02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f56f2b97-fe33-44b2-bb13-fc6552097914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3847ae90-e588-49c9-9fe7-14935f361ae1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6d9258-6f59-40c8-83f2-44ab89bc208a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273c0bb5-7e01-4b81-8ae5-0a10c06b9f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5521d50-9dbe-4568-98e5-7b332ff43dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0511bd76-50f9-487c-a240-5eda81ed6919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b956ca6d-9471-440c-ac7a-1d90aeb59df1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e4c511-adce-4a47-aecc-984d61af8d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f7f0b4-5fac-4544-a77f-0da7c434adfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63710885-9f30-46ab-b445-3ea4da65159a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf551e9-95d1-4723-b341-8a41f9287222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a616865-4874-4b0f-a105-f4cc94a0d45e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378fa727-2b62-4afc-87f0-48e6a50160fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16406305-9580-4e91-8660-88cbb5092f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb93663c-5b27-4915-bb46-15945c889163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "678280d3-d45c-4c99-92a1-5951e3025d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bed398-e18f-42bc-9ccf-86b94c3c6d20",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3055aac7-3203-4f9f-a2ab-72db39cc036f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbdda89b-b244-4379-b8ed-92c0774fce21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b457309-5d71-407b-aae6-5e8786b41562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af9731dd-6344-4cab-a686-fb880228d7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6a1914-35e5-4ffa-9ea1-a3fba0fc7224",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3bd2d62-4a66-476d-b47a-ade48ea3fb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "864f711a-aa2a-4775-8be5-54f47ee9ad12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a4b0ac-7d1c-424b-8883-3feed22da99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7267f0e-5e7c-43b9-9f17-514240051465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c61d6a8-74ad-4b53-8eee-859b40c9e8e0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97fd277-5597-413a-8687-7f4de380d972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1aaac51-2984-4f3a-9885-50378b4c6a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4a58ec-d482-454e-8916-209e0be72be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "911377a3-43e3-472c-8085-10db1ca73ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d9c462-5326-4c56-bbcd-e932f34cfcc8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ead199-ad89-439d-b87b-58210f587ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef178999-3bad-4314-a21e-2c369185b493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a98a108-f939-4339-9472-dc687aa49cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "616080cf-ab9d-4d04-a6ae-cafa05753475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab879d5-7919-4b6f-b36f-d20bb51cef32",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f59302-0c7f-4e3f-b0e6-eec8fbf74689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0187e3c5-9e38-4b4e-b9c9-7ce5aa14977b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eaaeafd-46b7-48d9-a138-589b6eb4163e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1552fff4-9f1f-477e-87cc-da541bbd23dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1527d6d-7cee-46be-ba8e-230e8980c402",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99d1bc2-e9b9-439d-a2d5-56d0b81acdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e5b8ab-2a51-425b-901f-d03e72e67fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f606a57-b3a1-4551-889a-5a0f49799d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a78ab047-a1fd-47a2-a53c-a9b35324aed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30067f03-4cb1-4cd7-8f97-29bfa331ca35",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf5bb27-9337-46c6-908f-bc7eefe0b890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46a1f1b-ef2e-4189-8a14-92ceaba0eccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb76794-28b6-4ec2-9936-a619b64f3d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c315d9f-9edd-43da-bf75-fc516b8df997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbd2663-4590-4ef6-83df-e37a0a70d742",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415f74ef-bef6-4e6e-8535-931eb2eda08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94059c3-643b-4c88-9574-0d89ab05b1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7380f6f9-60c3-46d2-9254-069f105ea1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1dbe23-8371-4947-a58f-886e598cce46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e514df92-71c9-491e-9053-55bb4e2d02d5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6959e9f-2a49-4a44-8387-c71e00686417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90379e3-6692-4f4f-b052-4397b3ecdfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba91051-fb5a-496e-aa2a-6284071a3eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3adb057a-aecd-4aaa-9271-65b7c00b149c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226065d3-bab0-4a4d-a08c-f266c1769f74",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d83850-47dc-4a62-aa32-65961300669f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "941faf21-849e-4710-8c89-e4109c4cc7a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c41e138-f2cd-446e-8b13-57a54f144cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba856dc6-f710-40c0-b1f2-40481ee9f6c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c7f83dbf-7316-4120-94e4-863604892b5c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a537c6df-efff-4782-9985-adbe952826a1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96dfd588-0733-4536-9f85-a72eb5ed3f3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c4f532-5981-4ac7-92b3-23b0187a023f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1b8e94-61e8-4be2-9ee5-699fbc8688da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de813a7b-0aa4-4672-9341-b00a57f71f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30347bf-e302-4a13-af73-48d2bf3f9fd2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8997a1-7a4a-45ac-b6aa-10f7b1aeacce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c525444c-87b8-4247-9e0c-e6da8b755df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a01488-06c7-4c24-8bcf-50dd5e04e9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5019552-5c4b-474a-b295-224987818510"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccdb3e5e-3c15-416f-9da7-5035d041e178",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5e1f323-98b8-4b2b-9e2b-115847490804"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76218fc3-fd81-4f18-b368-f97ae01d834a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6af0c090-319a-4168-90f6-869d129b59d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb0a260f-001a-442e-bc25-ea276fb4cd73",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d9d31e6c-88a3-4e59-b8a6-03a9da8be2ca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "988bab9f-7712-417d-a41d-b34feec2d2e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80ec21ea-598a-4498-bed0-96df8d5c11e4"
            }
          }
        ]
      },
      {
        "id": "38306caa-6c7f-4ac1-b6db-dc8f50d3e34e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "02d77f68-9e4e-4181-b6a9-7a79ee350fa9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f8d6add-9de9-48b5-b4d3-60304fd55410",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2be4aea8-c3d8-4604-abce-cadb888e8252",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d6eb35-b583-42d2-a755-466e11eaf121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f6be93-b90c-48ea-9fe4-7acc2831ab2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c04c7dc-fc8b-49f9-9112-fabd759d2d5c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388ccfa7-d9cb-4c3a-9a79-34f8ba6ed915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1c2b76-d583-4b1e-80ab-a4360a85166c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1a42d4-2fa4-4067-bbc8-025e8a29f821",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec4137a-d14d-4704-ae47-d03a5e6000b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9614133-76aa-4166-b1a4-2656d68a425b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df94ffe8-14f5-424b-ba7f-db107a259126",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda50d17-a0a5-4028-8fe6-8e697ae99821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad176bb0-46a5-4ff8-8997-af418b57d58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a90ac10-8f91-4a7a-b306-1e776d0e1879",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78902395-e6c2-46b6-8d98-b8cb5f843b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6f1342-b473-4a1a-9a51-af2c3a962ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c4e15f-38bd-4b0f-82eb-ea6a948ee635",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6476a967-aee7-4d9f-83cd-d51255678472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f6557b-cd57-4e42-880c-d608c3d6a2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970764dd-e36e-42a8-9f63-61bd73c804cc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844f7171-1b76-4f31-a9d0-4076dc711be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2760db60-22a1-4439-b12f-35454968a73a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b273ebdc-d789-4526-aed0-7f7334597b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8143485-0c5e-4659-aae8-f17019b42d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec0c924-9cd6-4317-92f6-c5983978dc9e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2641f79e-ae47-494d-a6dd-df786c6a9f14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7da42fbb-5a69-4415-9fe9-01798737db99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9dd0d2-edd3-4442-ba94-0a1f33aefd23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f071094f-ee68-4321-9aac-93ad19868a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3033484b-87f9-4357-809b-a14fed293494",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52b3acf-f345-4c39-a669-13417ccff15d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8704a7b-eeff-479d-84c6-f5f423bbe279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f9b3dd-167d-4567-ba5c-7f7eaee69db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea34348-2457-456c-9d32-592afb82cddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997ad647-ec59-4c80-a86c-96fecfe848a2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf1e2b7-a550-411f-83ab-9bd2b4259100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "942d720e-20c2-4670-998c-7991920b3214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fb15f8-fa11-4ab2-ab5d-c15700b47074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfe63fc-8332-4693-9bbd-6a913f75a368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d371491-3406-41ad-be7a-d1c17a9760dd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e910f28a-2154-4ca3-8c76-35ec3a2bd79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6a310c-37cb-4215-94a0-6d8d6010280f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d26d739-3a5d-47da-b4ba-31d42ada340d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c59314-633b-466f-a8ac-4953ca1df108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461149bd-394d-4cfd-b65c-2467c93a48f4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f84643-bedc-4b2a-82c3-8ec36c56300a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f67535-054b-44ea-8091-0f7ecdc8ffa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55530ec-6f2f-4921-8bae-aaf049fb5292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa989f51-2274-46f4-a5aa-51241cdbb5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5712ddca-7a15-4212-b5bd-7912814872a0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04a0b1b-0f52-4904-8bf9-f63af6c43e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8abb7496-c2f7-405a-845e-4c1618779eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01649736-61ca-48dd-b395-a424f34efe5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e4d0e1-1a7d-4424-a10f-37a6d90e6b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45936a5e-74b3-414f-b852-96a24fb0cd27",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c788e4-ec82-481c-9f54-f93c4ff15b93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a97dbbf-9d87-4371-a80d-ff55ee6f64ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2368cbcc-44a6-427a-959a-c38e68de2db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6759a8-2e48-4948-bd5b-7836d50b8a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9075a8e-fbb4-495c-b789-fee34732ce50",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0715de6-a3e6-4d41-83ae-1d995a28dfee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c734a81-35bb-467c-860c-9082725efd12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863951df-2c6a-4f0b-8dce-42f5b5ef9833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4744d0-fe43-4557-a6e0-92e2808a57e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a137d312-1635-4c96-8f8b-5a4b9fa5d9af",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad170e9-fd64-41c7-9cda-452a6393a8e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd976c51-fd15-4ee5-bb54-6810a1226432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b45ec5-2804-4620-a459-c2c100564991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fcd679-b91b-455d-99fc-34e083e33a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9123a9e1-cfe9-453c-ad46-43632f1139ff",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98806bc4-54dd-43ca-8225-1e4ff0a49b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a9ceac-d6fa-40dc-9441-2af9065757ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d9e70e-d96a-4451-b35c-1bda2457edd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c417774f-6268-48b6-8eda-70a0f8bb6f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a60122-ea52-4c82-8e5a-0b34cc12808b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab382bd-8b76-4b0d-9cb9-27cfde7df0a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e006ced-db6a-42c0-a717-1476f491cb9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69573870-76ff-4018-8bcf-d31ccf89ecaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9bf22e-dfc3-460d-a4f2-578d676e4de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba06100f-d631-4b91-92af-48da9402e28e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62a8f24-2b8b-43a7-b1ad-d2cd9d9d05a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484034db-8952-4e12-adb9-1e00929f7fcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abb0db6-12e0-4537-8350-15a365127a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3146c090-7a5b-4cb6-845e-3629c07a319d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9609210-6ba9-4bbe-813f-1479e89733c8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bb4be2-51ca-4571-95e8-9c4d11feaf3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ac7417-996e-40fc-a78f-f23a7670e3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc4e88e-1473-4996-896b-67a0573998b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33a715e-b4bf-4cd9-915b-03a259a7af40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b33e222-0cdc-403e-8fbf-e34bf095388b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9b04a7-77f8-486f-a3ed-4142c3a144a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f7801e-ebe3-4a81-aaa2-80feea6efaf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a82597-d395-4bcf-9fab-6778c3656205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecdd218-28ed-4353-9e7c-ba3e0b2aa95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd41bc4-9be6-41f5-a957-b9a04b0013d5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c57cb4-42b9-4ff1-9370-cbe6ea35153a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d9060d0-f4bd-41e6-a269-1503eedb43be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "539d59bf-467b-4ef4-8abc-8b39adef1282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1900d412-4aa2-4c0a-aa70-a87ce63ef9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c138e40-be3c-4e01-a3a3-7d7ce73a69fe",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da386ce6-0f5c-4f17-aa7f-440ab5509931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c56de90-90eb-47f8-a462-4cebf6f951ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6f4745-a8da-4436-85ef-9aa921f18ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9892284c-99a5-4bea-969b-5bbe27226452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444aca9f-1acd-47e8-8024-49675fcc8be7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03271e12-e4fe-4c1c-ac16-e50c622fafbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70c93eb2-d8b6-45b5-8e4d-f21b54d4b6a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "571bf8ba-6b0b-4424-8177-2a4dcf55514e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b3c65c-8dad-4a36-bc28-23857a5882a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f817b3-3ceb-4361-8ef2-5d8f086e8133",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03511f3-0434-495c-891d-cb7364cfed55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "712ad731-7bfc-4179-a316-4ed763e9c8a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9ea16a-f7ed-434a-bcbd-5c5a88997f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f617b9-06f8-49a7-b7d6-a1a53d9f51cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509f8968-75d7-40c2-8fc6-479c6537bb57",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba121592-dea0-4556-86e7-77dc2a6db1df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd6146e8-3ac8-46e8-a494-57e5f148cdc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1b909b-d9a5-4743-a79a-cdd4621aec77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b79b86-5ce5-4f44-84d9-65fdaa483c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de115bfd-2b67-474c-adfa-73010e3298ea",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813e577c-97c0-4afc-b01b-3897da4eb6f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2227d25a-d30f-40f9-b8dd-800863d05268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b23b4e-e8e2-4844-ab96-d83995e15b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3978e5c-b93c-4693-ae01-8813c61526c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c50602e-8810-47b3-9a6f-a868117bb23c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e22b9f-c89e-4952-aa53-2b3555944daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d09b974-0dc7-41b2-ab87-54911fe78d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36e6516-f1ef-4ce6-a5a8-6d0cc15d2be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e3385f-aa12-45d8-8122-65601845752e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b58cbb-0c67-40c3-af7d-05c89022e8ee",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1183e4-df56-4075-8637-8d5ccc909ef5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c23b454-5394-48aa-9b87-7b39f04b569e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc855ee-18f8-4695-b4c1-97d1d273c418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a8a980-9a9e-428a-9cb7-a8b910670085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25ee709-3c5d-4b95-8b4e-25a70ece4433",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe147e6-d8ba-4ff6-9107-2d64bdfbb0b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfa4109b-618a-42b7-944d-304a2d8be9e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1883cbef-42b8-498b-9966-b484be2aa4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d698ace7-483b-4b76-b447-e93a08e30ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28df4744-12d6-4d8b-b2df-f5d9b53b68ac",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfe3541-fa05-4d17-93e5-c9d526103b7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffe84811-7f83-44fa-93bf-46e296e0a654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ec500f-2301-4678-ac7b-78375b0bce8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "466e2a5e-b260-4cac-89f4-439d2b80b836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa0344e-c87a-44a0-8941-d126063fbee4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ef3bb1-f19b-480f-bb4b-bab2f60eae5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bee459f-5ca2-4a8c-a840-af50c035b248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d93d7ba-986e-4684-a635-2fc19a87dad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "625d7dbf-bffc-49a9-8fc4-0b8ef7767920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5de3645-9e4f-4bad-a1f3-87f647c8b3b9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970939cb-516f-4019-888a-6b8815bcfbcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a862815b-0212-4585-9da8-52f99ab3e48e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072996de-fc60-4660-ac93-6055e8c2fc36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d9eac6e-60ed-4c9b-98c0-f5becf695aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6737a55e-0ba1-4e0d-ab99-8f99c116796f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2427c75e-735f-44c7-aa2b-f92e95843836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad0d2cf2-2c0b-48b1-a1f6-52772801fd02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96da02b9-2fd4-43d2-aa87-a4fdb1c4fd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f11e8e-db0b-413a-a149-af9900eeff0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e63210-038a-47a9-9414-db7a060adeae",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900b78d3-0ed5-43b6-87e0-abc1885d6854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f04ff2-05c2-4e63-b4b9-8827aa6a15dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15d5b4c-9146-4e6d-a55e-99c48baf1860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44349d1-7c9a-4242-820a-46ab1bd4b443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a34d47-2079-4a53-807d-cb3ab1d94601",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f4bdd9-9e11-4cc3-b578-5f0455086de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd5609cf-dd9d-4f2a-9fd8-2053f2a504e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baffe8ea-e36c-4b45-96b8-d666af99f119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f8cdb0-a085-4e7f-a1a9-03c0e845c38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f044bae-fdfa-46fe-94f4-b9811d895e0a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9795d112-6560-4c44-8775-66455ccfab67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8119a0b0-437a-40e0-ac90-bc15166bb90b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5902319c-bb22-4fa5-9696-595911b2eccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05405f3-7235-42d2-bbde-3769864a0abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a6799c-c6c8-452e-a6e9-f8ba074842f6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949bf97a-517e-450b-be8e-27910b1ad7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf185508-c6c2-4b4b-8f50-ef4590a3a97d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df39512a-9c64-40d7-b702-760b69ba6031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377891f9-718c-4f45-bb51-e2a465399d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a9bd12-9d76-4000-8130-fbcae5f61f90",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520f0e05-6f32-4199-888e-8304f97f74d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5054496d-e9a8-4589-91cf-8899a2b06b8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a542581-b65f-4b00-9507-82dd15ee5c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8001f8-5226-4b74-a859-c001b11d883f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b2c81c-5708-459d-b6df-7373b0ce08e6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3725eeb8-36d0-477e-8dd2-00620b090675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68235ebf-a452-4de4-a681-7e19d6e35757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b55c3cb-3e8e-4ac2-a8d9-5d2deebcd89d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f042d55e-9dc0-422a-8699-e13a725c7c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1f5a2b-1da5-42b4-9a2c-a415d0c329d3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b296e0f9-dc89-4c7e-82c0-1bfd201ceb7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0842c9b0-9ba3-43e9-bdeb-6b589a468a3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "228a135f-17d7-42c7-b3bf-577ae2810db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b299a675-bdf0-4c90-9943-091c9bef89cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc24338-2848-4d4d-9b39-92e9627ac45b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc3ab6d-2593-427e-b61d-a21aa63385d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f23bba-24e6-4167-b950-fce8f5a82961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee2174c-8e57-4b9d-b721-22eacee02c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c15ee6-5b93-44f3-a737-c058c049cb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd98111b-7b51-4f0d-9840-02afdda36898",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b88ebf7-a141-4bd9-bc17-8fca414ca2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b5467b2-7f09-4770-9969-2091ca27252f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd29020-4347-4830-bde3-f285a5d6178d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba76a3e-3a2d-4565-b5c6-c95ed090138d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2021756d-989d-4778-92ed-4570c9644565",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efe808a-6da7-4437-9534-9acf21fa494f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9896fbe-6039-4afa-a415-6856cc978029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59c2ae2-b131-4a67-bdef-b0e47d7f1745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3eec68-6a85-4bce-b8f0-db5ba2b683cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbdbcf25-69a3-4fe0-b753-dcd4ea9a9efb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d54b19-8a0c-423c-89d6-afcaa11e0d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f7a9fd-17bb-427e-83b7-7264f8d79ad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb91e1db-0b54-4c51-955e-cad4560624d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69768ab-39b6-4c5f-95fa-c661a1183137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d631299-3ecb-47c0-b787-ecfc1bd1953b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14ebd6f-e4f6-4dba-9b28-80337b282dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080f70a2-0f46-4040-b290-2b6f600d56f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9c19fe-9ef2-45c2-a72a-8b37d55ce9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac7b03d-1955-4910-a889-fe7432e254b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7416d47f-d322-4f0c-8eeb-f3b456403e7c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1328b47-a743-42d7-8ce2-4ac49fccfeb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f863b9b9-2a70-48a7-b9ce-b63bbce997c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52180cce-d27b-4d52-b3b1-9068c16dde32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95df90c-4a07-4e4d-a3c5-726d0e44bfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80215c4-68e3-42a9-aabc-07a5c4cafcd7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06dfb98-2aaf-4f81-9d0c-462d95bd0f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad7b4c19-51f5-4dc4-9cfd-e2b9633eadfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b66b21-c3d9-4c8f-865c-03ff9ff64a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4dbc80-6634-4e34-990d-9e0374c38631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278cabfd-3fba-4903-bd81-7d62870ca7e7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a2974a-1c66-401a-a403-9920e3e12af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7081c2a4-d501-426a-86eb-0b2d5a643da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b6430c-ecbb-4ccf-b07e-b21964475ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb386a5-d451-4e22-87f4-e10f37c6fddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ba221a-423d-42a1-bd68-ea4bdedfecef",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007e784a-a6f2-4b6f-b6ce-d1ca31eb2510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e3bfad-092c-4bfa-9020-b70229d1bcb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "121131d1-b184-4e6e-85a1-dcdd7910711e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca36a3f-d512-477f-8332-8703424c5b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2113b8f1-48a6-4f0c-9a2e-aee392573451",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f24288-6626-49e9-bce3-d28855f351b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9451dd9e-8f22-46c3-a78e-b6fa4238b0d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0fbc948-d633-45a7-bb74-8e377bfa5e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f020fe9-725d-481e-b0c5-39d26cab0223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ae1f52-1557-4773-a0b9-a98d4a0c26cb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b13b663-610e-4347-90ce-7fd411facd5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed2f9d0-d194-4083-908c-647fd86d138e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10254b1-70b1-4ab9-8b71-ffe56b5c489c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e641b85c-7bcb-4da3-bb24-c18784c1094c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8d4d25-c60e-4bae-bdc1-28ca6997d8d1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e435b777-8aaa-48af-a516-b28bdfa07937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeebd61a-7ded-4710-8a64-23690f1d1897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfa9016-a42a-4c63-8600-f5e9649be8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268e8bc2-ffee-4765-8a8c-46610e51e987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dd2b33-1278-4df1-92fc-54b5c6bfc28c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658f3c12-8698-4718-bc02-455a9b41593d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec8d5d0-49d2-40e4-bffc-158b1a233a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c016da-9f24-4e9e-a937-b0232cb4cf57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31645efc-0d10-4707-82a7-a9c9602c99f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9821831f-9da2-4762-a0e7-a3980fd8682c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d8a6d7-60af-4efe-9a0b-6ee5e3710f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7888d6d-587c-4e6f-85fd-3c59a16a31c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8767e591-54b7-45ba-8168-0fc814d723b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30445393-3208-43b7-9a1b-e773631dd0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787d347f-8d5d-4298-bdb7-f75c0d8da83f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b469037-f796-49fb-947e-15897401a7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f183de-480e-4c5f-a582-e55037cc1925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ce1a24-11d4-4ad2-9397-cd93a69b8a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180395e1-c6ec-49ad-9879-de136251312d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1da88d-28a8-4ff3-9f31-b340f7040aca",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a8dac3-816c-4244-9982-b09c862d0b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69621859-f445-42a6-8da2-23ff3e29f5f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed78fd11-77c2-4f52-b3f4-38c1162c832e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b309a2e-638a-487e-95fa-8792673f88ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5047c9d6-2126-40ad-ba61-527936c95eea",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9a412c-1114-4d4f-9de8-63659c300fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604f2acd-47e9-4aad-a00b-a1e1460d97b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04cb9d9d-741b-4085-8ba3-bbef84cc193a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efa3595-7337-488f-9222-4e2644da1bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fd0582-9414-4079-bfeb-549c6891be79",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec40493-9d3c-4df2-925a-9125d850e4c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9eb8f3-798b-44cd-b9bb-402f165eb2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b28581-9af5-4a80-811c-dfa6d2046507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67bce4d-ac27-4391-882a-4c730a2b8daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a9a4ca-3f9d-4e15-a1c0-03d7e7a7a111",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420d2b25-80bc-4952-83f4-d71afd39e701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12e964c6-5156-4f07-adff-0f6ca46ba248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e361cab4-7bf1-471c-8188-b4c5f61e9f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be6e683-cb5a-46f2-82d8-ca996c55ac66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1040bfd-7965-41b0-916f-0d754d8fca2a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba408d9-426a-4211-9d38-1a41aadc6184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f1e7ce-ca25-40f1-9888-2914c84c87ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50da793-5729-41ec-a3de-98304f6a2026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9d76ff-5b69-4baf-b478-abc94b50e16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b461104d-ec7f-42eb-b469-c1c3b919c8ff",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf17be0a-5b84-47a7-b3a8-e92fca5fb821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75262a07-f9e0-45c7-afb0-4985047657bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "618e7c81-5524-48ff-8622-07110d7b2b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b089631-8313-432a-98f4-9b2282947313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd14f90-e0ec-4745-b789-8ed5dec0fbf9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09869594-86fd-4a5d-bf9f-691777300166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8691028c-d6af-400c-a09f-3c0b34b99b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1db7b8-dc8d-48f4-b588-9abe7c57a422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cadb9f7-0c31-416f-9362-3bc03c8fbc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8579d5f0-e0f2-46f0-be1a-87cf3471e607",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db31c27-59f8-4962-8235-06a754ef450c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cc80dee-d4eb-4eff-a9c7-355e0797dc33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806bf5f9-87ce-4d20-9037-ea7df5d1c089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b147c0d3-adaa-4f7a-99d4-f7fd9bbc4116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dad1faa-0b27-4a22-ae0e-6f58b57281fa",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d20546-a416-4da8-a842-b2716cb03532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f11fb10-d5b4-43b4-92bf-9d52b092901b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d668149-a1a9-476e-8493-483089ae3699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bf1a75-1811-4100-8e8a-daf8839b213d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e9bb7d-d971-4d7d-bd3b-d277ce2aa09c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb97a75-4f79-40ba-8adc-d1299a47604a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ea43c8c-09d4-41d6-a489-85ffed14ead0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "047299d8-e2d2-4ebd-8ec4-4ba4db8929d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d514531e-b19e-4731-bea3-8585c4ce43a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe4fd80-93b1-4bc5-8c45-f27a8715701d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304146c9-d6c0-4b8c-8e2d-011efbac3992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f7e326c-2d69-410f-8eae-f2252b6e5f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70bc3e1-7825-4552-852d-a6b6eb49199e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0a13b1-1a4a-438e-9096-7ee41a0c41d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f34e02-41b7-47b6-9b6b-954a349aa676",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f8855d-28dc-4f11-a5f0-f3b31ab9ccc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6445bab6-8477-4b68-a273-2df441da9a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3bd812-75ba-43b2-a75a-1fc3dbb335d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a799747-e735-40e3-8a31-57fe8ca888f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa4158f-9ddd-4d71-a806-c275f54ad401",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2d61f6-faf9-425b-ae8b-2ce1aa7527ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c909853a-0a06-430b-a977-6237a1880579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5193f07-c34a-4204-a18b-0a3fd4ace9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08dd22d-567b-470b-be0f-2944d0207fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e017fd-ca69-4ac7-aaa2-141681e20862",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0d29b9-0345-43ec-8d97-aa7f0e30044d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d4a1613-ad5f-4978-9134-9c73b377f13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59d22c1-8b34-4b47-ab34-1602caa810ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c5c2e6-de7b-48b1-8ba3-c8ffe7ad7180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c852a8-0040-48de-a0a6-219c6b36585b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be6c81c-50bc-4436-8945-2d22bfb3fc8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d53d1996-fc93-4574-9bdc-450559f450dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "959a27eb-8e00-49ad-9ce8-1ccebdca6476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fe703f-8272-4db1-8ee6-fce7264ddb1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88cffe5-76bb-42f5-9d6f-f81de1840214",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a033fa92-bea7-4224-964e-63fe58c4abc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9373746d-27be-4957-80c3-801c5e887e2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab486c2-106c-493e-a563-579c641d8c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a811160-4a8f-434f-b291-13f7dd3f54fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95462907-e830-4d1a-b5fc-aa30f2ebc1ac",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1986626b-7257-431e-9737-876ebea877e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d655798-7272-46d1-be2e-fb75d77f9ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d7f457-a4be-40f6-868d-a62a837ece03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fffec8b-8995-41cd-a04a-9a4b5860dde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7112dda3-022a-4c1e-83bc-2c901ca1d3cc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17342220-83ca-43ec-83fc-16e78f24ad18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "706e6b58-1ac7-4de9-8d39-8e7e69feed70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4ff838-f63a-41c5-adfa-b877fbaa2677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3370b7-329b-4ce1-b2e0-2ef6c5670e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48764ba-7b2a-4cbb-9b9f-0da4d50304b9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada8b1e5-4614-40cf-9636-daa808fd6ddb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c561cf7f-a1dc-4ca7-9ea8-133cecea1984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5be413-73a4-48dd-98a2-9d3c6de0cade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d513632b-73c3-4458-a4a3-1b88919ac8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9e10fa-6174-439b-af46-3561769523a3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db558f1-1617-4d9d-a87f-826e65ed7a3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10eb2960-d395-4de1-8f05-b2f078a31605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5c3081-0dd5-432d-9272-0652ff54bdfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c113dd8-c2c8-421f-839c-f9431c458bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e31807-f896-4d0c-81ee-049e66ed91dc",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68305c76-38e9-468c-81a3-e48509ded3ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9368bd53-4724-4536-b383-9399aa110a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd8d2cc-68be-4f48-a61e-9cf25efcf91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc12d604-bbcb-43c9-b6cd-bd087c6deea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5cc96c-0052-46dd-8ef1-6f5bb4e61f7b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c963a7-089f-4f84-aa70-dee6ac292a2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d9e619-b701-4da6-b9f7-2617067c3b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "102cfcd2-e1c7-4e25-9507-e5af9bd81cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58bf1d04-e87b-4bd9-b313-d97145a32679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ddeac8-9933-490e-8fb5-28181dc75e74",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f10c156-490e-4d5f-894d-cc00d8bf3210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b860c15-7e1a-4ee1-852e-387ee48dacb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f004e6c6-af3c-44e2-90da-d1fc5d6ea62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200366a0-d607-4956-91ba-a6b4a660af9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1658c67f-29f1-4986-b05e-7e48e21bbce0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17835d04-e236-453f-a6f6-c094a53b0ea7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61c77d24-18e6-48a1-ada9-5f448302c917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f44eec1-3c72-4645-b8b7-6c9669416334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6f97b8-af6e-40e0-bddb-ed69ee3030a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3f4126-c6c4-4570-8926-eca51b484327",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96f54ff-f2c9-40ff-8ba9-e4ff7c329fe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1158fc09-3536-4597-bb83-a88b9aa35ecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7326fbd-8e0f-47c0-9843-75574241d526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7369df6b-96da-43ca-a420-8e18878a0291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bd134a-22f4-4734-b7c2-6722f97bbcd5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03908d73-d67d-43b8-a68f-8bfb639c9a08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2315b112-029b-4d7a-bfb7-3442421ae893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "425fa90c-4f4f-4be1-bf3c-073f9590498d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f251649c-efd1-4e31-a543-b6c9c10576e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bbc435-f65c-4800-8449-63dfac06907e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34e1097-dfd6-491f-bf79-c4680335443d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d73d4804-23e1-4e1f-b61b-1007f3659947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d01ca3-1af8-4256-b2fa-653cf63e1285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb4c326-c214-47b1-9ea4-43542e1e1862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a62437-9b60-4bc7-884a-3cae9a305231",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03b75cf-fbc5-4a1b-bc50-1794f3e6bb80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e82a78a0-93bf-4c41-855a-90fcab4f01e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36996815-4a26-4026-bf8f-7c142d22c71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2475a856-0bbc-4c34-b199-e0caee1a2ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73555de-7fb1-4ef0-982e-61d12c67d6ca",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280f6a87-cbe7-43f2-a343-b74aefba2596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48b4b73d-ca3f-4146-ab6a-fe1c7b6c6ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37685929-559b-4dab-b640-09581a421829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53845e7-eeee-47ca-be4b-b8b4f4bac38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1071d14c-a43f-4e6e-8329-a31a1108655f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe3c392-0378-47b5-960d-35359710b43b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c17a9599-7b38-422a-897e-3f0ceb4fc22d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06143a6a-b0f5-4344-a886-4d8a584dc842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8a7f11-67fd-49f2-9bf3-52577196cacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ccf875-0c2f-4ae3-97db-a0a7608fb219",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73844b3e-d9e6-4589-8443-00416685a3af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acd1b8e4-427f-45f6-9e1a-e870c378c14e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0d9394-0724-4fd8-8762-bdfa8b7b2d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e15a767f-cf6f-41c6-a2e4-6886cb43ed31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c30abab-8198-4737-8424-2fde971df966",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0374fc28-a19d-45ff-a730-9e61357edc7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7822660d-9422-454d-aade-e05ac268a77a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e8f968-5455-4245-a08c-a46bec99c5d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3baf7042-c228-4e2a-9d21-f7dc851d469f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a13a9c2-ab22-4c92-a70f-dbfe5e569968",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f21f8d-c461-46c4-8e23-c86d70187940",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52374063-cdd6-42fc-801b-4cda22b57c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f354776c-baec-4040-a213-3c97eeca010f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082bdec3-3be7-42b6-aa6a-e6163f7e4f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499de461-1454-405d-afab-e4141d450af1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7141687c-5593-4cbc-979f-7834c68b1f29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "352a0064-8f34-4510-81ed-d5dcaa7db604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3246553-70c0-4d84-bba4-097915af093f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd35026-8e96-4009-8a45-cbe15254679a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6e2ea0-4d86-4826-a880-015a3fc93f9e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8f9a98-f01f-46f6-ad30-e6889dea6fe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f73ec37-a776-4e32-b614-f43f2a13844a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f0e0e3-5e6c-4ecc-9155-8cf3b64d33a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3579d334-151a-48a9-81d3-58cc785a9f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee2918e-232a-4714-984d-26972f9105ce",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafd8ff0-aa1c-44e3-adab-20fd803a3fa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcaceff8-bfef-4ab2-abf7-9643ab3b264a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccfff3c-3ea2-4d45-93e2-346b66b10893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6809e7d1-c0a7-4ddf-9185-77996a28dc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ac0b97-4568-4b7b-9bff-87c6cabf778b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e5a285-e70a-49b1-8c15-e767f23833af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14c02c9a-6b61-4cbe-9ae3-e0f183c8a47b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ddd682-0c94-4944-9e6c-f34dbca185cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f302169c-e782-4d03-a39f-f9db28b73888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b637a97-49d8-4a37-9fc1-92ba31c7a7de",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d9f1bc-6182-4dc7-8e81-d63f5911f7ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b05322a0-ad5b-4e82-bf20-7cb7203cef78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95c63e5-a1ca-406b-a990-accde688a394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19574bb-932d-46cc-95ec-c8c1aebfedc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885742fb-c9ad-448c-9bbd-2e28237ede6a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9231ac87-e2c6-465e-8fe8-0ba3773ebeb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff427423-2fa7-4f1c-9a8c-99605a7373a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5512ef28-3f61-41b1-8d5c-513069db63b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2099a57b-7d94-40bc-8d06-ff050c7a7d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b371f005-46fb-4044-a377-00cc5646b0f2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a672d0c2-2982-4f32-b03c-701ab606fe5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3420264a-6058-4595-915f-68ce26ea6ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4747a843-09f3-4036-b577-99de2457c72d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fcae3bb-03c0-47ab-9f2d-2e18908db4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cfa4ac-8d50-4600-965d-3df77af328b0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23481e4-7678-4465-a0ed-4be569d1c57c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbdcffb2-edf5-4110-9ef8-9ffbf59d2e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3900e09b-f4aa-411b-afc5-4eb3c10fad07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4b48a4-0153-400b-8edc-85430deda82f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8867e442-deb4-4f1c-894d-53c47b3353f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57e32d58-5dd4-443a-971f-d9a8b263ead2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7a9bb87-6451-408a-af47-f8f53be74887",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "041be465-58ab-4b68-b80f-c0aa91de4c4f"
                    }
                  }
                ]
              },
              {
                "id": "fb831c16-338a-42ae-9a88-d34ead1b803c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3a42998-fa9c-4b65-b8ce-b36342d233e5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2363ee5f-0306-4547-bf24-1531ba4902c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ae816f12-7c61-4d57-b796-27b8cd516a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34416a3-99d8-4cb9-9fee-5a3837638511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12a1d926-967b-4b66-8d33-7dd27ecedc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc9a191-056d-468c-aaa5-5fb16fbf8804",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1931a1b1-d5a7-48a2-b165-70d44664856b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fd82aeca-9ad3-4c50-81f4-792fe789e791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e7cc00-7b3d-42a3-bba6-daf5c2a1b4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "097b2802-2767-422a-84a1-e34cde4bdae9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd6ab393-c0b2-4455-b9ae-4ccb1771eb11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a58fde5-9084-460d-a775-25efdec43be4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ae14e5c-ea9b-4939-83e3-22a212e96117",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a1932db-96ee-48c5-acab-2cabb4d3b481"
                    }
                  }
                ]
              },
              {
                "id": "e6b3843d-5d8b-4819-9103-5e876f287ce1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3780eb51-8d8a-46db-a48f-571266c7d335",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77869702-d8e2-4bcb-9570-398872989f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d4e2e03c-8649-4717-928e-c1d831132ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324a1868-3f17-4f11-95b8-f0e47e718cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8bc6d39-9800-49be-aba5-2772e3b4474f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bf65fa0e-79cc-4f00-9d21-3275949b0e0c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "87bcaad5-42b7-47ed-917e-9c61d43d0a3b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1411749-abf5-4b74-8745-2ab3e0008c59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "026d1cf0-f294-4915-9880-e84da632bad4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "735ff226-23ac-4e70-916d-f78bd63a2e28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3929eb4-0def-42f1-b8fa-d93e8c140dfc"
                    }
                  }
                ]
              },
              {
                "id": "63393742-8b43-415d-ad39-d9ba73390224",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c620f247-d91b-45a3-917f-eacb1a9c3eb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1d59bdbe-09fb-4ee5-a151-25efa37c5d67"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80578bef-da52-4a91-9741-91a5c0bf17e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f08ffe5a-6e66-4dfa-8cc2-7ba6c92af1f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "162eaa18-a190-40a8-9065-22e110d5741f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3c062962-7630-455c-8a91-d01f41ebbe22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67503b58-8544-43dc-88c8-85c0e51b31cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ac7704f-418e-497c-ba16-ca2f2439ba67"
            }
          }
        ]
      },
      {
        "id": "167bb825-07d3-4271-b8da-3a8f8aad906d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "faf4a893-7f04-455d-b7cc-e9746a2965ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "814715cc-e1fa-446a-a467-1e2ea662a59b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a62255d9-8501-44df-a8bd-298693191990",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc76a3ea-c930-475d-a066-68b0e976a583",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2d108332-119c-408f-9f7f-106b6df7c294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb964be-0f10-4d4e-a754-59b1ba466456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "323bb56b-8ff9-4058-a999-a1e8f9a361ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce73ee89-71ed-4461-b663-f8b5bdd510ab",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53cc5c5-3c57-4965-822e-c3ef25b8583a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0d92f32d-00fa-43fb-bfbf-19a4f0036f7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e5ff97-6b3a-4b2d-b6eb-644e2300427d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "534ccd35-4bc8-4c39-b039-2253041db3f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f0964b2-5a28-493a-aac4-6640d7d03e25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff9f4a72-2bc1-4aa4-85f7-7c39c3f64ece"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2369abdc-e43f-4bce-99ba-d4dfcfbda602",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0aad2d2-78f1-40d8-9c8b-f183759230e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da64497e-b7c2-4f51-a127-83665a987f05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6e41a890-881c-4962-b4a8-d7f436a08356"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8948c99e-1f3c-4ae5-ac28-c015c65a919f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c72394e-f294-4597-9776-c070e8a0f189"
            }
          }
        ]
      },
      {
        "id": "3cbe5d04-7dcb-4616-a3a1-cab869bf71b4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "545ce9f8-b2ec-44a6-8fcd-cb6ac511b487",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8dc5212-d144-4496-b3b7-6666f14cfab7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d163f754-f166-4a7b-b0e3-85640de27055",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4089c9c-a2a6-4281-96ad-565897cfbdc3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "094ca10c-865f-49cc-9b2c-d85d0152ba02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a30d69-6356-4ba4-abe3-f867a5926dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee548cf9-19e7-4f4f-ae4e-882dc2d53e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d78bc7-012e-455e-a346-be433090caf5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969c1326-5c3e-4ce5-9c60-0c42ce1d533f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "92fd248b-22f2-4b12-9ca7-cde2c44cd295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afbf636-9998-4973-968d-176daff54d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f83d171-cbe0-4ac1-97a5-54ae87bb4b81"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e835ca4-cd72-4fee-914b-1fc1433cc503",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61373b77-7a15-42be-a72d-f527fd7942b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "607e6a09-9aaa-4cfc-af46-5720df810945",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23c0aa37-f4bc-47f0-b3bd-4d1bc7e4e230"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f65d542-dd62-412e-a4c7-c443c09f8ebd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "55b0195c-abb2-4263-b2a0-a84435a348a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a38126cd-faf2-41b8-b9d5-c7b55d4aeaf3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31cc4ee1-359a-485d-8ec9-bed8c377cff7"
            }
          }
        ]
      },
      {
        "id": "d6a49856-d108-46fd-be56-dab7d9804a43",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "00f9aaf0-aacd-4f2f-adc0-8a56cef07df7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5526478d-d169-40e4-a60c-5c0f9b0d7bd1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae68a841-6e24-4b22-9090-a1086f08edb4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62d87bf-9e76-4497-938a-dee7d870f20c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4514f1f2-11f7-4f9c-bac0-bbc2a30bc772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2c2277-7a37-403a-8ab9-1c8a929242d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cd252c7-ff02-4632-a84c-ebc40b2d6e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bdb999-7b42-4248-ac88-17ade96122c7",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fb55e8-edc4-4fc2-89fd-161b2b619f6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fbdcf7e3-a2d2-49b7-967a-9054f0f2f304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7535fae7-240d-4a13-8c1f-e7494d0ce905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09e3ff4a-ef8c-4a09-9248-2bf14c93e88d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04fe2ef7-546a-4955-a527-3cd106810620",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "464ac181-c8eb-4038-8e26-2cddbb0facad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3182b86a-4cba-4204-a881-0771b7c58fc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07bdd864-dd9c-4593-b8ab-f525780aed3d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b951d6e-1f25-48f4-8f34-0c86fdf48c99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3a0aec1a-a72d-40ae-a912-7a356b5cd2ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8eed6fde-be1a-4861-87ef-5ef7fd55f826",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f154159a-6203-4b00-8b1f-066d9875337d"
            }
          }
        ]
      },
      {
        "id": "effb6690-2f9e-408a-9709-f34cb9b70694",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d152b4ba-41b1-43e2-8072-f67879e3d896",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9e492d5-d520-4e99-a6d6-994232235bbf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bef3d8b9-edd7-49bf-82d5-f558eb7544a5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87014152-8a78-42eb-b13b-5d18db4e0ffc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c1912eb-75df-414b-acd1-b4a6f52cbe09",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 278.2576923076923,
      "responseMin": 9,
      "responseMax": 6977,
      "responseSd": 757.0623227434793,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684284031048,
      "completed": 1684284116501
    },
    "executions": [
      {
        "id": "522449ac-d497-4abb-8f4d-41a07fbcd8bf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1a98fc50-c703-422c-b00e-8e52827bee5c",
          "httpRequestId": "794a74be-48bd-4f55-a433-e2be3d9b5c07"
        },
        "item": {
          "id": "522449ac-d497-4abb-8f4d-41a07fbcd8bf",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b2706d62-5c3f-4d74-b42d-c8f6a992be29",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "0289b9b1-b100-46f9-ab91-de6354a0315a",
        "cursor": {
          "ref": "535ff4fc-94a2-4cd0-ad9a-5ef4bfab7db0",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9aab1d1b-6724-480b-ab60-a0509359a658"
        },
        "item": {
          "id": "0289b9b1-b100-46f9-ab91-de6354a0315a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "98a24ef3-098b-44c3-98dc-6e13124292c9",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "664dd65d-9156-424e-bde9-ea028709de4c",
        "cursor": {
          "ref": "56b6bf67-15df-460c-95cc-b1c3d195b846",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "74fddebc-6c1e-4061-97ac-a461adc26fa9"
        },
        "item": {
          "id": "664dd65d-9156-424e-bde9-ea028709de4c",
          "name": "did_json"
        },
        "response": {
          "id": "f4953af8-5b06-4ffa-8f1f-920478e88fd1",
          "status": "OK",
          "code": 200,
          "responseTime": 379,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b10418-6d55-40ae-9be6-b26e22020f1c",
        "cursor": {
          "ref": "136924a5-333d-459b-8151-b79055796fdc",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6e7264e9-4a99-424d-b3b1-eb210c0a0ca1"
        },
        "item": {
          "id": "79b10418-6d55-40ae-9be6-b26e22020f1c",
          "name": "did:invalid"
        },
        "response": {
          "id": "65a01cb0-d66e-48b7-8785-9d489ba30835",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1289,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "79b10418-6d55-40ae-9be6-b26e22020f1c",
        "cursor": {
          "ref": "136924a5-333d-459b-8151-b79055796fdc",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6e7264e9-4a99-424d-b3b1-eb210c0a0ca1"
        },
        "item": {
          "id": "79b10418-6d55-40ae-9be6-b26e22020f1c",
          "name": "did:invalid"
        },
        "response": {
          "id": "65a01cb0-d66e-48b7-8785-9d489ba30835",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1289,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "86b716f7-a4b6-40e8-adee-317bf3245222",
        "cursor": {
          "ref": "b1ac80aa-119c-42fd-82c5-c134132f8b10",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b29e01e3-e159-4f14-97f3-2c37899bf762"
        },
        "item": {
          "id": "86b716f7-a4b6-40e8-adee-317bf3245222",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c9a3dbf9-bb86-4ba5-a8d6-7c762a49469c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43c118f-9363-405c-ae07-d6508663c8c4",
        "cursor": {
          "ref": "a45f3431-f973-4f7b-bbd3-07e8950d5f14",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "663f38e3-6476-4284-98f6-4015e305df71"
        },
        "item": {
          "id": "c43c118f-9363-405c-ae07-d6508663c8c4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "68c5592a-d60f-48f7-821f-165aebd4800a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c326e768-5f80-41f8-b51d-6d59583f4c55",
        "cursor": {
          "ref": "b674a183-0248-4de0-852f-b94663865786",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2fbb52a3-c629-40b5-b216-c98f0e630fa0"
        },
        "item": {
          "id": "c326e768-5f80-41f8-b51d-6d59583f4c55",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4dd69d86-d9b9-43e1-85a9-49a22846f767",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "cd10dcc1-d950-4475-bb5c-ca03fbb0e271",
        "cursor": {
          "ref": "defd14fb-e456-4c89-9b2e-a057a075cc94",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "49a9ed7d-376c-44e6-801c-3ce2b93b939b"
        },
        "item": {
          "id": "cd10dcc1-d950-4475-bb5c-ca03fbb0e271",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f3be713d-4cb8-46b8-8168-dca2bee3dd5f",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cd10dcc1-d950-4475-bb5c-ca03fbb0e271",
        "cursor": {
          "ref": "defd14fb-e456-4c89-9b2e-a057a075cc94",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "49a9ed7d-376c-44e6-801c-3ce2b93b939b"
        },
        "item": {
          "id": "cd10dcc1-d950-4475-bb5c-ca03fbb0e271",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f3be713d-4cb8-46b8-8168-dca2bee3dd5f",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "477c2d6b-b0a7-4f6b-bf4a-6f55d6e8cf19",
        "cursor": {
          "ref": "9e7ffcc4-55e7-4f9c-b208-61e134638fbb",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "638a662a-0046-475d-8b41-d1b3c49a092e"
        },
        "item": {
          "id": "477c2d6b-b0a7-4f6b-bf4a-6f55d6e8cf19",
          "name": "identifiers"
        },
        "response": {
          "id": "337d02e1-a6e7-46cd-99f4-57d8ef49da7b",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b784789a-0398-49cb-81eb-2f01fe7cc583",
        "cursor": {
          "ref": "f97ea664-850a-472c-adf7-b0a1034b914d",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c5541294-2dd5-4594-af81-3a80dbb7417b"
        },
        "item": {
          "id": "b784789a-0398-49cb-81eb-2f01fe7cc583",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4a5e5d2c-953c-47e1-a5b1-c020720d0ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b784789a-0398-49cb-81eb-2f01fe7cc583",
        "cursor": {
          "ref": "f97ea664-850a-472c-adf7-b0a1034b914d",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c5541294-2dd5-4594-af81-3a80dbb7417b"
        },
        "item": {
          "id": "b784789a-0398-49cb-81eb-2f01fe7cc583",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4a5e5d2c-953c-47e1-a5b1-c020720d0ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bec142-7fb6-4a0b-9f1d-e7cca934a089",
        "cursor": {
          "ref": "ffef6767-4479-4f0b-b533-d3936bef4a6c",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2c2b0aaf-64cb-459d-940f-e4b4050deb60"
        },
        "item": {
          "id": "17bec142-7fb6-4a0b-9f1d-e7cca934a089",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e1a0f66d-cc98-46ec-995f-2ffb953d6337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90117fc7-e18d-405a-9c0f-1df7ef11d6bf",
        "cursor": {
          "ref": "9104e358-62be-46c7-a3f4-88d320356fbe",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4a508ab9-18cf-4a2e-adaa-50df0d2d50e0"
        },
        "item": {
          "id": "90117fc7-e18d-405a-9c0f-1df7ef11d6bf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "298ad147-e284-4a79-9f56-0c719e1c8adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93788ff-da1e-40b1-9c86-84dd3dc8d47d",
        "cursor": {
          "ref": "f328579d-be46-453f-9b00-3607d63dc1b1",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "caf1625d-26a4-403e-a483-be121cc6b5e5"
        },
        "item": {
          "id": "d93788ff-da1e-40b1-9c86-84dd3dc8d47d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "be29b42b-aab6-4a60-bcbd-86c68e9fcd86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3de5ff-89a6-4bf5-96a8-da9669bab5cc",
        "cursor": {
          "ref": "a3cac20c-177a-4720-88e6-cb504b2972c0",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "07258a7b-b7ff-4291-b3ba-8d8730db64c5"
        },
        "item": {
          "id": "4b3de5ff-89a6-4bf5-96a8-da9669bab5cc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cb11aa10-d6d8-4f76-9b79-a57157b73157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37220df-0f40-439e-b429-d40cf30354bd",
        "cursor": {
          "ref": "e1bab670-07e9-41b3-86d0-2ce24d983d7a",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "877dd560-c46a-47d5-be0f-148dfae9781a"
        },
        "item": {
          "id": "f37220df-0f40-439e-b429-d40cf30354bd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5fa40398-727c-423e-a5e5-cbc0a023f278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd4857b-fc0b-47ab-9e2e-545ade2f28b4",
        "cursor": {
          "ref": "11a1feaf-c99c-4669-a0db-f151a718399b",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c331bc9b-d027-48cb-9a90-eee31053d5b1"
        },
        "item": {
          "id": "fdd4857b-fc0b-47ab-9e2e-545ade2f28b4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0d5f3c54-844f-40dd-80d5-ccba3262f4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65d95a8-cac1-4bbe-8d53-c5385f98cc43",
        "cursor": {
          "ref": "e9ba3cc5-15c3-427c-9638-5332c6db5ff7",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "094672a4-f986-4e59-b415-8767c2ece776"
        },
        "item": {
          "id": "c65d95a8-cac1-4bbe-8d53-c5385f98cc43",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0082bee2-3f1b-452a-ab59-15a408b5837a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c497f68a-2a8a-494a-ac62-9452596402af",
        "cursor": {
          "ref": "93c6d14e-13ba-4fc5-8e78-5928895eaa84",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2bd84763-1f4c-4eab-863c-0c6fc9684651"
        },
        "item": {
          "id": "c497f68a-2a8a-494a-ac62-9452596402af",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "529cb0c9-f8e3-49e7-8e5b-3933ab06abcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba48a7d3-4035-4e8f-b707-9ed8db1cf6a4",
        "cursor": {
          "ref": "a2a2e150-d8f7-40fe-ba1b-f5b698fcaa4b",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2b29efbc-d036-4549-b8a0-681a31e86a25"
        },
        "item": {
          "id": "ba48a7d3-4035-4e8f-b707-9ed8db1cf6a4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b1459fbb-ba9c-4ae0-a8af-8dbd8348217c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8315dfab-3e59-483e-87f5-fe0f90327aff",
        "cursor": {
          "ref": "8fcfdc76-d866-4742-a7a6-2f4651ad39e6",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b1ec80ad-caa3-4da5-bf3d-38196d0c4772"
        },
        "item": {
          "id": "8315dfab-3e59-483e-87f5-fe0f90327aff",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e95cb913-d51d-48b6-ba97-65032445121d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089b9c96-57c2-4b0c-a862-9e71b6f49661",
        "cursor": {
          "ref": "6714949b-bf31-4341-89cb-615b341a321e",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a0bf3794-01eb-4dfa-9280-7d2fe7642544"
        },
        "item": {
          "id": "089b9c96-57c2-4b0c-a862-9e71b6f49661",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5b008dde-3105-40ec-8f13-1dc1ab35f685",
          "status": "Created",
          "code": 201,
          "responseTime": 1054,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "6a9be594-8530-464e-83ec-d4e3dfecc51e",
        "cursor": {
          "ref": "7b845e3a-b8b3-444c-a350-6c7985f2bcce",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "caabea94-9477-4dbe-a8ef-ed88cb062707"
        },
        "item": {
          "id": "6a9be594-8530-464e-83ec-d4e3dfecc51e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ccc36a4a-1846-4a08-a5ac-4b818632ad86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5184f487-482d-46dc-97cc-a36be4ad1f30",
        "cursor": {
          "ref": "51b84012-52b4-4687-9631-771c11bb33ed",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4863548e-d4d6-4025-ba57-73b31d5eec43"
        },
        "item": {
          "id": "5184f487-482d-46dc-97cc-a36be4ad1f30",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f351a32c-afe9-4d30-ad59-f7e8cc5e8605",
          "status": "Created",
          "code": 201,
          "responseTime": 6977,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "6c83e688-ee23-4e08-a8ea-cb7043a2c44d",
        "cursor": {
          "ref": "c0ec32d5-8d0a-4f39-b0ec-9cc665aabe2c",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e9740f46-5e06-40ba-87fa-9a1074d868f0"
        },
        "item": {
          "id": "6c83e688-ee23-4e08-a8ea-cb7043a2c44d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "15387a25-1b20-499c-a004-e3a3bd83a3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6fd1fb8-f178-4e6a-a896-d5557069690a",
        "cursor": {
          "ref": "da556439-d9d2-4c49-a241-9909bcff3bce",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d4a6507b-d366-4e30-a827-9cf09a542f66"
        },
        "item": {
          "id": "d6fd1fb8-f178-4e6a-a896-d5557069690a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7509e854-cea2-4c00-aa97-b0050147a4f7",
          "status": "Created",
          "code": 201,
          "responseTime": 4342,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "067b5957-f883-4754-9121-5e223b19a0fc",
        "cursor": {
          "ref": "11a884a6-53fb-4156-ace4-abbfe27b7f5e",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "56eba118-b86a-4877-9739-d901a8d83700"
        },
        "item": {
          "id": "067b5957-f883-4754-9121-5e223b19a0fc",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4b94f026-d645-4a3d-b5e6-def2346cd5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9236d60-48d4-416a-8215-7cfb5fabe42b",
        "cursor": {
          "ref": "6a8dd0ca-2147-498f-b0c7-addc69a4f34e",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3565a0f8-7f23-44ef-8dd0-ffa0ab9afa66"
        },
        "item": {
          "id": "d9236d60-48d4-416a-8215-7cfb5fabe42b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "43a3cb02-a538-4561-8e68-0f8b928816d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e49d1cd4-8960-42c3-8170-70d07262b426",
        "cursor": {
          "ref": "357be312-6b6c-4a67-8611-1b54f776690e",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3c634c55-4914-4cdd-bf86-91579e041b14"
        },
        "item": {
          "id": "e49d1cd4-8960-42c3-8170-70d07262b426",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a29568de-752b-4fd3-80bd-953fe10d5a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd09610-ff9f-4db2-90af-cbb15e5f4a60",
        "cursor": {
          "ref": "0c017f64-49ce-4b98-bb19-b8a070cc6669",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b1291734-473e-4d2d-9f47-40ed142b2221"
        },
        "item": {
          "id": "edd09610-ff9f-4db2-90af-cbb15e5f4a60",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d3d0e148-3026-47a7-b2f5-57d4eccc1da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25005d9c-b186-47bb-a539-fd665ef5c5d1",
        "cursor": {
          "ref": "12c09c70-b631-406f-b15b-a95668a28070",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "23f92584-340d-4fc0-9899-e70109716f14"
        },
        "item": {
          "id": "25005d9c-b186-47bb-a539-fd665ef5c5d1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "97b129b9-ba62-4020-86ac-ca5176924092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9a6ce4-7288-43fa-8afb-a46c090a0d69",
        "cursor": {
          "ref": "a3ba6ba6-e467-467d-870e-cdb73785531e",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "01e6d40f-ca89-48f4-bc6d-f6c03d1132ef"
        },
        "item": {
          "id": "bb9a6ce4-7288-43fa-8afb-a46c090a0d69",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "633da63c-ff2c-4e08-9156-92118776fcc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902ed377-7660-454f-96a3-dfbb988b240f",
        "cursor": {
          "ref": "9cd9b071-b04c-40d7-ac48-a47a48fa6a8f",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "37dd4959-295c-4c32-9382-ecbb466c42be"
        },
        "item": {
          "id": "902ed377-7660-454f-96a3-dfbb988b240f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5bb48ed5-301c-4d75-84f6-be737aba7020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c77872c-862c-4cf7-824b-51c7e9110261",
        "cursor": {
          "ref": "bf41b3aa-3402-4821-ad60-bee339e95ef3",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c430ee2d-19da-4466-85bc-3046fe65e537"
        },
        "item": {
          "id": "0c77872c-862c-4cf7-824b-51c7e9110261",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9b8e80a4-de75-41c2-aedb-65a384c15ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c71a1e-b569-4067-8cf6-9028d21f92bc",
        "cursor": {
          "ref": "e50de5ae-7c7e-4a0d-9c13-ca870d417aca",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "04e8ed9a-4ac4-4b51-9a81-86b308f44537"
        },
        "item": {
          "id": "52c71a1e-b569-4067-8cf6-9028d21f92bc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "863e3f70-ab67-48a0-a8b4-82e3cb797793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12704b2b-4c6e-45b7-90bf-792bf34aaa25",
        "cursor": {
          "ref": "1cd2389b-4a86-4703-ab8f-e7e4998196a7",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "08e58063-6ba7-4d19-b723-a5138d88c155"
        },
        "item": {
          "id": "12704b2b-4c6e-45b7-90bf-792bf34aaa25",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "03ea0096-67fc-41d0-96c0-1595efd4b4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f998751b-2379-480c-884c-f300de063d20",
        "cursor": {
          "ref": "eae228f0-83b1-4f3d-9d30-56a7f4f8ae12",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6ebdb16c-be35-42e3-ae4d-ca3be067e475"
        },
        "item": {
          "id": "f998751b-2379-480c-884c-f300de063d20",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cb9f1526-3750-4114-a783-db51ca789861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f633ed32-2e7f-460e-9cb9-32c2069bb072",
        "cursor": {
          "ref": "354a04d3-d36c-49ab-b69a-c69c2a031d4b",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "79bb1ec8-3dbe-42b1-a9c5-5b823799b85b"
        },
        "item": {
          "id": "f633ed32-2e7f-460e-9cb9-32c2069bb072",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4a046267-79a5-4104-9a5a-eed4343c3db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6186ea8d-1d17-43e3-a1a8-3a72451c26e9",
        "cursor": {
          "ref": "6de8f30d-53ca-4561-ada8-35ea8cbd3461",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b3100a1c-87df-4485-bb93-7a9b9800e624"
        },
        "item": {
          "id": "6186ea8d-1d17-43e3-a1a8-3a72451c26e9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d0f7f845-851f-4049-8e25-4488829170c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3152da62-ced9-43a9-aa79-2348ad359150",
        "cursor": {
          "ref": "70013e68-6d56-4b7a-9b6c-43f9164c7a75",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2b9a8cb4-ce36-429e-bfc5-638239eee701"
        },
        "item": {
          "id": "3152da62-ced9-43a9-aa79-2348ad359150",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "af55b7b4-661c-4200-8a90-f0dd6ca9cc3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22122551-6310-411b-bfdf-9d20e9ecd62b",
        "cursor": {
          "ref": "bbc0d2be-1643-4b10-a535-56fdf39cc04e",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a7c4387b-3f94-41e5-bc1b-b3f45fc3c864"
        },
        "item": {
          "id": "22122551-6310-411b-bfdf-9d20e9ecd62b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1754a5c2-3f89-4471-b1f4-2cb205b0ad98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c749de5-4592-4b2e-a962-b807ecee8908",
        "cursor": {
          "ref": "aacf1fb2-44a6-46a5-ac26-328d972e9423",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "77a5af4e-5d3c-4be3-aedf-80b0b9f526c2"
        },
        "item": {
          "id": "4c749de5-4592-4b2e-a962-b807ecee8908",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "659f5e5d-937d-440a-b245-35725cc8faa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d3bcb8-038b-4a0e-ae48-5cca47d9b020",
        "cursor": {
          "ref": "e4a29d1d-4d91-4897-870d-67480f75941b",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "aa1ff4e8-e51d-4bb5-b773-23d41bd1c189"
        },
        "item": {
          "id": "18d3bcb8-038b-4a0e-ae48-5cca47d9b020",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c622d59e-4a9f-41cb-a114-0deb8b0f29d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a719fb86-2070-4418-a0a4-12a8a664bdad",
        "cursor": {
          "ref": "500ab407-88dd-4a5a-8270-dc7c01ba12b1",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8554b3e7-fe12-4667-8cae-8776a48e754d"
        },
        "item": {
          "id": "a719fb86-2070-4418-a0a4-12a8a664bdad",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7b723171-7143-4579-ab5a-7af26264cbf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a260020-5ec4-4f1b-b1a2-354780728632",
        "cursor": {
          "ref": "cb546a3d-b523-4a8e-9eb7-fcb21191267f",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e9952fb6-8a1c-4990-ad03-ae8874a9d220"
        },
        "item": {
          "id": "7a260020-5ec4-4f1b-b1a2-354780728632",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8f3e8c64-da92-4b69-82c0-e9edffdecc62",
          "status": "Created",
          "code": 201,
          "responseTime": 2718,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "069587fb-7db1-4eba-8d90-9bacda1db524",
        "cursor": {
          "ref": "1eca1ae2-15f0-4ec5-820c-eae8f1b1dbce",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "141177c3-181d-4e35-a4be-0a4b5c602253"
        },
        "item": {
          "id": "069587fb-7db1-4eba-8d90-9bacda1db524",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "98d58ab6-6656-4ae3-b9cc-07d048e2cb92",
          "status": "Created",
          "code": 201,
          "responseTime": 2911,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a90e58a5-cda6-4c30-991b-0e1108fac97f",
        "cursor": {
          "ref": "e2fe5321-dd93-4224-a55a-e7e37164baac",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "13964119-ea42-4bb1-94ee-76b59abb6f3f"
        },
        "item": {
          "id": "a90e58a5-cda6-4c30-991b-0e1108fac97f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3942b32e-c157-47a4-8da0-d371fc8b3cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656f6bf2-6d1f-4500-95ce-bee482e4e412",
        "cursor": {
          "ref": "8a170b7a-2cc0-4c4e-9573-681874c48e6e",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ccb5ee66-b11a-4ff4-a608-fe91c625001a"
        },
        "item": {
          "id": "656f6bf2-6d1f-4500-95ce-bee482e4e412",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ab36d300-6133-4cf8-ab4f-36f3b26a24f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf9c112-bd42-4332-843c-d69dd1882994",
        "cursor": {
          "ref": "0ab2f56b-6455-4f0a-b7ad-126fd1981ec8",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "32da5788-0b7d-499e-a573-a5910501090a"
        },
        "item": {
          "id": "bcf9c112-bd42-4332-843c-d69dd1882994",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ae2022de-fc14-4d70-a202-3bd023081e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d034f2cd-2c0b-464c-bb0d-a40bf430fe6f",
        "cursor": {
          "ref": "73aeabfd-91dd-4bb0-976b-e1f03e21c07f",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1c8a532b-3165-4baa-b3e3-b34bb9484b00"
        },
        "item": {
          "id": "d034f2cd-2c0b-464c-bb0d-a40bf430fe6f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b29ddd24-7539-40e9-8ec3-be6d45066343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce6d30a-71a9-4d08-96f3-22f589aae844",
        "cursor": {
          "ref": "38937b6b-c6f3-47a8-ab89-6b08f37f0b7d",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e5d0eefa-2c7d-49ec-91dd-243a494a8cbf"
        },
        "item": {
          "id": "1ce6d30a-71a9-4d08-96f3-22f589aae844",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d41573d1-f9ff-4c1a-8d6e-5ce84def12c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbdf757-f8b1-43ae-8638-c9591ecb06b1",
        "cursor": {
          "ref": "57ea2737-c821-4575-91dc-ca7a3a42ce79",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4f69beef-59bc-4cd2-9e93-8fb3048547d0"
        },
        "item": {
          "id": "ddbdf757-f8b1-43ae-8638-c9591ecb06b1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "addeb63e-c100-4490-9c0d-28e2088d01d4",
          "status": "Created",
          "code": 201,
          "responseTime": 1978,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "41cb2160-5853-4d46-8776-cdc07342bfa2",
        "cursor": {
          "ref": "2039e2be-2a33-4294-80e6-a7139007ddea",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "daeedd20-6f95-4220-a75f-7aa586522a5f"
        },
        "item": {
          "id": "41cb2160-5853-4d46-8776-cdc07342bfa2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f534fedb-7ae1-4d81-bc96-873e90c82a63",
          "status": "Created",
          "code": 201,
          "responseTime": 2577,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b78ee0c4-1bc2-4bc5-a1cf-896e00c021fa",
        "cursor": {
          "ref": "01ce0cc9-bf43-4bc9-bb5e-e5a052a8bce6",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f65886b8-f2f9-468e-a5c3-aed33f588f09"
        },
        "item": {
          "id": "b78ee0c4-1bc2-4bc5-a1cf-896e00c021fa",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "03d19d32-e922-473b-8468-4c0ef0c204ad",
          "status": "Created",
          "code": 201,
          "responseTime": 2453,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f72779e0-ee17-4654-b37a-fd87de1b9885",
        "cursor": {
          "ref": "dee4d24b-f10d-42f0-995e-ccd79466f800",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9e3b3670-fdc3-48c6-a1f2-8808f44c7329"
        },
        "item": {
          "id": "f72779e0-ee17-4654-b37a-fd87de1b9885",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6bdd3b59-35af-4632-b8f1-1067ecd3f5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7a02ac-f296-4934-ba8f-0493c5ee37ea",
        "cursor": {
          "ref": "aeeb7c92-5966-4150-a351-36994ae3e30e",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2eedb8a4-ecf9-4125-8d89-61c51d0d3c6d"
        },
        "item": {
          "id": "ea7a02ac-f296-4934-ba8f-0493c5ee37ea",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c1edc967-088a-462a-bb74-8ce995ebf051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537f9137-f1ab-450d-95f8-47b96d575f95",
        "cursor": {
          "ref": "2b4ce325-e1cf-478f-b26c-075319c2c618",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2e11e290-9a03-4858-960f-adc808ac36f0"
        },
        "item": {
          "id": "537f9137-f1ab-450d-95f8-47b96d575f95",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0131a2ea-9ad4-44b8-a21d-fb034ae9eb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248ccb4c-d05b-48b6-8b94-1a9ed0eb805d",
        "cursor": {
          "ref": "9cfe0c2a-ced4-4047-9667-b47a708db306",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "879fa6a2-63f1-49a4-bd62-e53bbbbd2d94"
        },
        "item": {
          "id": "248ccb4c-d05b-48b6-8b94-1a9ed0eb805d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d6f46189-af3c-4ddc-ae49-57b2e666507f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244e7c2e-66aa-476d-991d-42e29cbd46ca",
        "cursor": {
          "ref": "dd1b8116-62db-41e2-a1de-7946722ba7cf",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d50da4eb-cc96-40e6-8ac3-80e364f34b99"
        },
        "item": {
          "id": "244e7c2e-66aa-476d-991d-42e29cbd46ca",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a1fd74bd-3b34-47c4-93cb-b87c41727fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb2a2bd-a192-44ca-b332-7ea66306edd9",
        "cursor": {
          "ref": "a9a049ef-28cf-4c2a-81f3-e1474e5140c5",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "429a25df-4797-4e41-97da-d0d166ba4ca3"
        },
        "item": {
          "id": "eeb2a2bd-a192-44ca-b332-7ea66306edd9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "df00386e-384f-4a9f-ba06-dd000037a51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084df60a-60e2-43ad-a265-9e1c150d3ccf",
        "cursor": {
          "ref": "ee4ffa8b-0b3f-4b99-958b-6e174797b6b0",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "acfef773-1e36-4e1f-84e7-111f87ba60bb"
        },
        "item": {
          "id": "084df60a-60e2-43ad-a265-9e1c150d3ccf",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f28e6682-1c2d-484e-b91a-72c4c2d955bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01bb2beb-33c5-4bb5-b016-14b8eb503d3d",
        "cursor": {
          "ref": "feba7e57-7e7e-456d-8c61-3bbaf4b0d58b",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "39cd7841-74c1-4b3c-9eba-b45fda164b0d"
        },
        "item": {
          "id": "01bb2beb-33c5-4bb5-b016-14b8eb503d3d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "22e28b47-a810-4c3d-8736-3ab56fc9fbec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd7b602-e46a-4907-a3c1-3f9da47ee847",
        "cursor": {
          "ref": "d254b598-1b03-45f8-a505-dcc31b9a82a7",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f7577673-2311-4909-bc8e-c019790d3d20"
        },
        "item": {
          "id": "8bd7b602-e46a-4907-a3c1-3f9da47ee847",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "35b8f45c-78f4-4443-9fa1-28bd2f9fba79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1db97d-742c-44d4-b1f7-5615c7d7d8da",
        "cursor": {
          "ref": "88f44d78-235d-4b1e-a044-746095f316fd",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "40ecc104-f9ba-4ea1-94f0-78fd3a3c3364"
        },
        "item": {
          "id": "9f1db97d-742c-44d4-b1f7-5615c7d7d8da",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "04bb7304-1f3a-45f7-ad90-ba47ca853faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b764a91-a24b-4435-a403-d1618ac59296",
        "cursor": {
          "ref": "63081f8f-4a29-4d8e-8905-0964ff192aa2",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a54b697d-9761-4c02-b661-2debcdf46c27"
        },
        "item": {
          "id": "4b764a91-a24b-4435-a403-d1618ac59296",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6c30af78-f833-4312-8d11-73d4f539e7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f5e046-54fc-44bd-9c2d-dc4defc34c95",
        "cursor": {
          "ref": "a2573340-0f5e-425d-b6b9-512e36c39a1c",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e71b901c-51d5-4deb-b8ff-3a52712ad4b1"
        },
        "item": {
          "id": "30f5e046-54fc-44bd-9c2d-dc4defc34c95",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e17c0ae3-a84b-4a42-b847-fc6a6ba75c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0beeff65-7de7-40d7-9950-7aa09c695eef",
        "cursor": {
          "ref": "41a782da-5728-4418-8193-deb1b6bde512",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d637531d-21ee-4cf8-8470-a1611688f22b"
        },
        "item": {
          "id": "0beeff65-7de7-40d7-9950-7aa09c695eef",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ef0aff49-1e2b-4aaa-bb24-1d31685c9e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e42710-0963-4a51-a07c-c8510e100851",
        "cursor": {
          "ref": "924a4858-abb5-434a-a048-ef6b6141b78f",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e5800079-65ea-4846-ba2d-6cbe6732a08f"
        },
        "item": {
          "id": "85e42710-0963-4a51-a07c-c8510e100851",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fa37ba7c-44f5-430b-87cf-b7fb83eb79ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cf0277-0496-4ede-9a83-d3f69a0633cc",
        "cursor": {
          "ref": "711ff51d-12ab-4802-8c04-917c56a300ef",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3d7247a2-e121-4116-adb2-4b05d2a0af8f"
        },
        "item": {
          "id": "a5cf0277-0496-4ede-9a83-d3f69a0633cc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "936507a5-7dfc-4a70-abb1-2d874058a4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0f1819-bc82-429c-a0e8-f7c91ae1b37b",
        "cursor": {
          "ref": "19195e6e-c454-4fa1-b83a-24f8e25a4287",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "679ef42d-95ea-4557-8e2f-32a9a51676bc"
        },
        "item": {
          "id": "1a0f1819-bc82-429c-a0e8-f7c91ae1b37b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bbd83113-7107-4788-bac6-4ef7f0218e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f103f57c-536a-49cb-92cc-44c6f6aa9d8a",
        "cursor": {
          "ref": "ec6a47e7-9532-449b-99af-5af6d1e46a9b",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f498befd-7073-46d6-a53e-6158838a56a4"
        },
        "item": {
          "id": "f103f57c-536a-49cb-92cc-44c6f6aa9d8a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ee164623-25af-4c7b-a8be-dbad2e08e1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca657d98-2693-49e8-9780-3e961a98319e",
        "cursor": {
          "ref": "cc0359bd-b025-409b-b28f-6a2996ade438",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "184d1bdf-c5bc-4858-8324-4b45d7b62581"
        },
        "item": {
          "id": "ca657d98-2693-49e8-9780-3e961a98319e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ce505c0a-e63e-4497-b850-0baf399f851e",
          "status": "Created",
          "code": 201,
          "responseTime": 2010,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "6520bc07-245e-45b4-9e5d-494bf001e72d",
        "cursor": {
          "ref": "0286df15-2efc-4a4d-b86f-df223d1b3a6e",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3aa72e92-5f3f-4902-a1c8-ef68587632aa"
        },
        "item": {
          "id": "6520bc07-245e-45b4-9e5d-494bf001e72d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a55a08e2-4ea6-4de7-897b-3618ac4f4787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a7f5c5-3140-42a9-bc68-87af7af7b145",
        "cursor": {
          "ref": "74e13c82-a7c5-4cfc-a7e4-44b5487748dd",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "06856f93-2304-4b0d-b1fe-3db46be01187"
        },
        "item": {
          "id": "17a7f5c5-3140-42a9-bc68-87af7af7b145",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "121e345a-b9c9-476b-b427-a6f70824d583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b389024-ba16-41e3-9d18-def9d71ca00a",
        "cursor": {
          "ref": "24339484-59c0-40b2-b4a1-0c6504667d08",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "87a5917f-4aba-4831-8232-c5a52df0b6e4"
        },
        "item": {
          "id": "3b389024-ba16-41e3-9d18-def9d71ca00a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ee5fa23a-a774-4dcd-b22e-fa90b75ba800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7214fa54-049b-47f5-8d21-f2dd1ebb1ce9",
        "cursor": {
          "ref": "c811d579-c8d6-481e-bd2c-097b4dcd2c1a",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e36488bd-8404-4e76-b2de-5b70c0db631d"
        },
        "item": {
          "id": "7214fa54-049b-47f5-8d21-f2dd1ebb1ce9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "159346f8-c500-4715-9a01-56e63d00d06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8187bc48-bc47-4740-af45-6726a57fe688",
        "cursor": {
          "ref": "3509c924-9048-4705-9be3-b221cf6b31d8",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "84f1aec3-3a8a-4cf0-b160-d788a0a974e7"
        },
        "item": {
          "id": "8187bc48-bc47-4740-af45-6726a57fe688",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "79d66bbd-0de0-483c-8467-00866b96a0a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549e76c4-0995-4120-bb45-aa66dc597feb",
        "cursor": {
          "ref": "92ddf026-82dc-48ba-8eb2-599c2cd20651",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ce32e68e-fb80-4217-9d8d-0dee6c09a220"
        },
        "item": {
          "id": "549e76c4-0995-4120-bb45-aa66dc597feb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d1ef5ac6-ae2a-4c52-8a33-078c41dc8ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4517b525-1359-4ecc-aa3a-14c881ac2d03",
        "cursor": {
          "ref": "621f7968-2cad-49d2-93a5-92e1e2152105",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4b216ce4-fde8-42ad-9d6f-f66d7b1e04c8"
        },
        "item": {
          "id": "4517b525-1359-4ecc-aa3a-14c881ac2d03",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e0637169-9eb5-48de-8699-70a26d6b62fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b59d43-76e3-44b9-9853-21c490ea9376",
        "cursor": {
          "ref": "199203a6-77c2-4283-b3a1-30f2ba05d475",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8bbd8ddf-2c63-43a2-af70-462e4d116133"
        },
        "item": {
          "id": "98b59d43-76e3-44b9-9853-21c490ea9376",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "999f6122-1522-4b1c-8972-8c980f4fb18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c304786e-817b-45a9-b4f2-e12742db5648",
        "cursor": {
          "ref": "1c5929b7-7ae2-4f37-a587-ac904d513584",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d9046368-b3a3-47ef-9f0e-e2989feb073e"
        },
        "item": {
          "id": "c304786e-817b-45a9-b4f2-e12742db5648",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a5aae402-9f86-4779-bbe2-d865299633f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e49c0ac-24c9-4c0d-bc71-cde007042859",
        "cursor": {
          "ref": "679bffe1-d428-4b99-9544-1fe9c295df91",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "051dff50-9654-42ec-9b0e-2ca8c8771eba"
        },
        "item": {
          "id": "6e49c0ac-24c9-4c0d-bc71-cde007042859",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "01de1a9d-e6f1-4d14-9793-3debfed246df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c857cbc-a79e-4bd1-9e9f-c5446d72769a",
        "cursor": {
          "ref": "c4357cad-02bb-4299-8817-2b75f7e5cb69",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8fb3ab6a-a9ea-4e8c-816e-812c7bc3c510"
        },
        "item": {
          "id": "7c857cbc-a79e-4bd1-9e9f-c5446d72769a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "332b1501-fb2a-4cc0-bd9c-63a605f1aafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82473f31-03e0-4180-a1dc-381768c0180d",
        "cursor": {
          "ref": "b7d541db-3056-4331-9bb8-34b41de8c117",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fcd2c4f2-80b8-402d-8066-a4ec123ece39"
        },
        "item": {
          "id": "82473f31-03e0-4180-a1dc-381768c0180d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "183d81e1-0514-44ea-b574-6dd35bbaa781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3a53a8-f034-4051-b912-e070bc1ccfa1",
        "cursor": {
          "ref": "f13c1183-db38-4810-97dc-e59b638e8e32",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2f31d153-9872-4c5c-b811-33805de474be"
        },
        "item": {
          "id": "0e3a53a8-f034-4051-b912-e070bc1ccfa1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7b8a8944-1ce9-430e-9629-a5ff44243e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6c80f9-dc3c-422d-8c3b-48512e05bb2a",
        "cursor": {
          "ref": "9c00f88c-573d-4425-9af8-edd9d01f48a2",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4bf2831c-bed0-4e69-9fc7-ccf6aa8d39f2"
        },
        "item": {
          "id": "2b6c80f9-dc3c-422d-8c3b-48512e05bb2a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f7cd6526-84e7-4d8c-bca7-097012669ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e771368-1088-4b7c-8688-0d104173b9ea",
        "cursor": {
          "ref": "3d7e5e29-c013-49a8-91df-a2c8e7c7fd30",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b69bc191-d709-42c3-b2c0-170f72509c8f"
        },
        "item": {
          "id": "4e771368-1088-4b7c-8688-0d104173b9ea",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4b260317-c064-4420-a166-5b1c90d5d391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaa8df5-bb2b-4450-9f30-1aca0706cbc2",
        "cursor": {
          "ref": "a268c79c-fe22-4884-98e2-2ed91ab086ea",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3f427789-2aff-4427-a2d5-4c65b6cae26e"
        },
        "item": {
          "id": "dbaa8df5-bb2b-4450-9f30-1aca0706cbc2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "04e4adfe-3c84-4854-a34d-35723ce97d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4278d6a-48ba-4268-81ed-00ec6f395c71",
        "cursor": {
          "ref": "85d96b67-c674-4d74-9f51-57a047c5e61e",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7a4ab793-0a37-40b1-9157-318e463e18d5"
        },
        "item": {
          "id": "e4278d6a-48ba-4268-81ed-00ec6f395c71",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1ba967c8-539a-4713-9451-3e1ba4684f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341db2db-d292-4aba-aaef-ec5033c48e9c",
        "cursor": {
          "ref": "4c9b4012-86cb-48c4-a16c-bb95a3aeac3f",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e90fe59d-4b60-4efa-b79b-82c9637df034"
        },
        "item": {
          "id": "341db2db-d292-4aba-aaef-ec5033c48e9c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4221fed6-f61a-4816-9c12-7c478cc205d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839982ba-ff11-4cdc-ba3e-21eedbe48e09",
        "cursor": {
          "ref": "323ced41-45d2-45c4-94dc-7140578f06b4",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3783af5a-7e24-402d-a35d-d5df42a3cafb"
        },
        "item": {
          "id": "839982ba-ff11-4cdc-ba3e-21eedbe48e09",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c7b395a2-df30-4f34-afe7-d4ef5b8c645c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbe393c-125d-4277-8a72-8cad1eae0c5c",
        "cursor": {
          "ref": "03e82fd3-2b1e-4740-a405-6be28fd81c3c",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f1552969-f502-4bca-8d9e-ebe48adbac19"
        },
        "item": {
          "id": "7dbe393c-125d-4277-8a72-8cad1eae0c5c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "db59626d-7d55-4e28-b65a-0603fee20a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a11b48-5fa9-4395-9e32-cc7db9b68d88",
        "cursor": {
          "ref": "2a4e0da7-367e-46c5-a865-2eeea7f40b50",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5e86423b-d6d7-4096-bcec-b8bc06826c7a"
        },
        "item": {
          "id": "b0a11b48-5fa9-4395-9e32-cc7db9b68d88",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2e7ea797-4bc3-4ae2-a2f9-a16bf29bf8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6d34e8-8ff8-4bc9-886d-9ecef43210f5",
        "cursor": {
          "ref": "28e1e567-91fd-4a7b-918d-39d427bc0554",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "edb0462b-2a1d-4589-9f3b-8f72a7383699"
        },
        "item": {
          "id": "6d6d34e8-8ff8-4bc9-886d-9ecef43210f5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d39c2838-508c-4ea3-a3c2-5e8ee755cd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d47dd78-d416-4604-8aa3-b8f74f1ba101",
        "cursor": {
          "ref": "7680d5f7-fc5d-4867-94bc-4df91eb75840",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d4b0694c-87e5-43aa-a055-b03c8993c87b"
        },
        "item": {
          "id": "9d47dd78-d416-4604-8aa3-b8f74f1ba101",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9fe3b8f7-d4b4-4349-8f02-0daaf6b64bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13501906-7479-4f37-8ea7-852c87be2a65",
        "cursor": {
          "ref": "bb0c768b-36c8-4332-a1df-22a9c2adf624",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "49ce08e1-ce78-439a-9fec-1927dd4bfda9"
        },
        "item": {
          "id": "13501906-7479-4f37-8ea7-852c87be2a65",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "67dbd549-9c41-42fc-8bb4-f124cf0c5417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2467f2-7913-4dd1-b8ec-c1128416d35a",
        "cursor": {
          "ref": "a813b8e6-4b3c-4805-9c2b-07c187d290d1",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d821ac37-3495-405f-b82c-c2ee6d647615"
        },
        "item": {
          "id": "fc2467f2-7913-4dd1-b8ec-c1128416d35a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "68828670-0e26-4bcc-bdb7-f6607942295f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7fd2ad-81d4-4f45-8d37-c0c68fbb3e49",
        "cursor": {
          "ref": "4b12d390-5d09-4f98-a809-1a226925c981",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9fa1c78e-3c41-40a4-af79-d3c453a247d2"
        },
        "item": {
          "id": "7c7fd2ad-81d4-4f45-8d37-c0c68fbb3e49",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7e450bef-e456-497a-b314-26a40eb73d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50b05ec-1586-4f58-97ea-51e00651eb5e",
        "cursor": {
          "ref": "e2b5d6eb-de62-432f-8d78-798f524eee7d",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f2048ce8-3715-4e0b-86aa-7e5b29ac939d"
        },
        "item": {
          "id": "d50b05ec-1586-4f58-97ea-51e00651eb5e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e7408715-0e5c-447f-9040-8df33666b470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fe39d4-b788-4274-ab81-0428d6ad8c89",
        "cursor": {
          "ref": "08cad2ff-cf03-41e8-9706-d3ce80f19293",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e0c9a7c8-5adb-44a3-ae80-0f8d080daac3"
        },
        "item": {
          "id": "74fe39d4-b788-4274-ab81-0428d6ad8c89",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5116e8ca-a633-4cb3-80d0-24358dc8483d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dadbd10-8126-4c7e-a819-053ee1f904b9",
        "cursor": {
          "ref": "71ba3db0-e43f-4e55-b986-756e63e60372",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "43305649-3a93-4a01-af36-b4114f213766"
        },
        "item": {
          "id": "0dadbd10-8126-4c7e-a819-053ee1f904b9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "911b8742-f920-465b-a188-ba7df1e646a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c584742e-624a-4781-ab9f-bd00edef7a8c",
        "cursor": {
          "ref": "633c3dbb-863e-4c98-9d73-f305574702b2",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "79838f31-4b00-4023-9c5e-5a10ab5614e5"
        },
        "item": {
          "id": "c584742e-624a-4781-ab9f-bd00edef7a8c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b9910d5b-efbe-4718-b46e-b20b8d6a7cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fbfc83-f8c0-4ce1-bdca-92aaec28f91d",
        "cursor": {
          "ref": "15062c2d-1d81-4f45-9928-6d45a18177b8",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "83c468fe-f2e7-4d95-ae0e-1c0740fb0c17"
        },
        "item": {
          "id": "40fbfc83-f8c0-4ce1-bdca-92aaec28f91d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "278fdd2a-db09-46a4-84e2-ab2fa180b2f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 95,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "fc9c665d-ffa1-4fb6-b155-05b67fe15e8b",
        "cursor": {
          "ref": "906351b4-7494-4a7b-adf8-b75c1591ad4d",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8cc03b52-46b6-421c-a548-28b8227dec8c"
        },
        "item": {
          "id": "fc9c665d-ffa1-4fb6-b155-05b67fe15e8b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b19bc497-d95a-4fac-9a36-5a6bc0a49408",
          "status": "Created",
          "code": 201,
          "responseTime": 2293,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "3eca477f-9b7e-463b-be3f-697ac66e1fcb",
        "cursor": {
          "ref": "d11ff00e-5c1d-4a5f-b2b6-a378c82a826d",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7f95ca94-552c-4b9b-bd2a-faaac0aea7b8"
        },
        "item": {
          "id": "3eca477f-9b7e-463b-be3f-697ac66e1fcb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "530d36cf-c3bd-46ba-8465-f89f31c4efcf",
          "status": "Created",
          "code": 201,
          "responseTime": 2489,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a306a6-48a0-4628-9194-2b25a8954a77",
        "cursor": {
          "ref": "180d809d-b143-4442-a768-9860f83a029a",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2ce6b61f-1537-412d-af42-e118fe8dae3c"
        },
        "item": {
          "id": "15a306a6-48a0-4628-9194-2b25a8954a77",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "45bad976-b794-4721-a05f-dcbb5819a3cb",
          "status": "Created",
          "code": 201,
          "responseTime": 2499,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc27921f-b327-4579-93b9-5d774028ec35",
        "cursor": {
          "ref": "6738b2d9-8fb7-4735-bc61-aa8e5279ea30",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2fee8470-0e53-4fb2-9315-69332a9eb3d4"
        },
        "item": {
          "id": "dc27921f-b327-4579-93b9-5d774028ec35",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0e511893-f318-48ad-a303-50b1d6e605fe",
          "status": "Created",
          "code": 201,
          "responseTime": 3204,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "769b4211-514e-4594-9d60-0a4d1524269e",
        "cursor": {
          "ref": "d51f3d79-aaff-4c48-b85c-2e817abd09ec",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e8cadfac-3cde-403d-8f3d-bbfb317aa21e"
        },
        "item": {
          "id": "769b4211-514e-4594-9d60-0a4d1524269e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9a13b039-757c-4b49-a680-54528ef1c042",
          "status": "Created",
          "code": 201,
          "responseTime": 2950,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "39470255-d119-4803-a845-c0eb1bc0e65d",
        "cursor": {
          "ref": "d94dc7b7-a708-4c39-b45f-88e006f922a5",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1012f441-adb8-4d93-9e45-d2a0e87efc5b"
        },
        "item": {
          "id": "39470255-d119-4803-a845-c0eb1bc0e65d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cadceca0-5734-4efe-8d95-f77a932d6247",
          "status": "Created",
          "code": 201,
          "responseTime": 2233,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-17T00:41:29Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-17T00:41:29Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "827f6acc-141f-4f6e-829a-96800436bf2c",
        "cursor": {
          "ref": "8264f266-3b14-4e50-a3a4-0dd1293b684a",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "55d7e050-b062-43c8-b37d-57f36150676d"
        },
        "item": {
          "id": "827f6acc-141f-4f6e-829a-96800436bf2c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "26d034a5-2125-42c6-a907-abb6cccf5298",
          "status": "Created",
          "code": 201,
          "responseTime": 2701,
          "responseSize": 968
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a75514-4fbd-4a6a-b63a-d73454053f73",
        "cursor": {
          "ref": "b316a455-7f7e-4af1-8b51-1c2d4e4a89ec",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "23b5244c-ff5d-4b08-afd0-feaad5249dd1"
        },
        "item": {
          "id": "46a75514-4fbd-4a6a-b63a-d73454053f73",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "993e8d20-6221-4c2c-a422-aaf0b6819034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a75514-4fbd-4a6a-b63a-d73454053f73",
        "cursor": {
          "ref": "b316a455-7f7e-4af1-8b51-1c2d4e4a89ec",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "23b5244c-ff5d-4b08-afd0-feaad5249dd1"
        },
        "item": {
          "id": "46a75514-4fbd-4a6a-b63a-d73454053f73",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "993e8d20-6221-4c2c-a422-aaf0b6819034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0e0d7f-7f9e-427e-9eda-1570c11a6b66",
        "cursor": {
          "ref": "3900861d-2748-4a40-bce9-38d9451bf392",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a692cfd8-f4a7-4c79-a7d7-85d8ecd0c07c"
        },
        "item": {
          "id": "cc0e0d7f-7f9e-427e-9eda-1570c11a6b66",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "151d7e27-dcbf-49ff-bbd6-cbb973f8067e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bc1bfc-4555-413a-b16e-39354634f96e",
        "cursor": {
          "ref": "9126a317-6e6b-4083-b3a1-56fc5f95dbca",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ee0ab58a-749b-4e50-bd72-8a87a35b9dc2"
        },
        "item": {
          "id": "f1bc1bfc-4555-413a-b16e-39354634f96e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "60ab39a9-02c5-4b67-b6ab-5a4077c7e560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a8ab2c-4ddc-405f-8d2a-19992c805d08",
        "cursor": {
          "ref": "bb008acc-c9a4-4872-a30f-5184f3b31ac8",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3233cd55-cf92-4f9b-b57b-d1d9d5bec786"
        },
        "item": {
          "id": "d4a8ab2c-4ddc-405f-8d2a-19992c805d08",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8f3071aa-c718-4504-adea-f9598791f70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f9c438-fc19-4566-a090-a5a9a21f8fc7",
        "cursor": {
          "ref": "79d557ba-05bc-437e-ac25-6abb6e300acd",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f154b1c7-59d5-4093-9913-2190b4057fd9"
        },
        "item": {
          "id": "08f9c438-fc19-4566-a090-a5a9a21f8fc7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "37e4d5cc-37a0-4ef2-adc6-48b0f113d827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee15e2a-1ac1-4328-97de-54541b37bd46",
        "cursor": {
          "ref": "5909c864-86ed-4f79-b21b-c0b0494398b0",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "fca89ca7-0686-45a8-8e1f-ea1dd75ee029"
        },
        "item": {
          "id": "eee15e2a-1ac1-4328-97de-54541b37bd46",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a627dc59-6524-4d1e-8d2a-08db7532c9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c8fd0b-b26a-4a80-b28e-94652bd93901",
        "cursor": {
          "ref": "007cdc1f-c8b7-4701-90d7-c2146211dd78",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e5849e45-455a-4e01-a2f3-bebb8f9a6833"
        },
        "item": {
          "id": "66c8fd0b-b26a-4a80-b28e-94652bd93901",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "01c91a23-9c57-4188-b4b3-d12c47ea0168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dc3878-06f1-47db-905b-f99d453c536a",
        "cursor": {
          "ref": "fb7be1ac-c260-4102-9539-838a7940f610",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f7dd4fe0-cc84-4244-8a75-9e04d0d60b42"
        },
        "item": {
          "id": "c2dc3878-06f1-47db-905b-f99d453c536a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4f41f25a-4fe2-4bbe-8163-1f2fffe640de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7f3e38-b233-4389-9b2a-8fcabfd9dbeb",
        "cursor": {
          "ref": "0a6cb6e7-0c10-4f5d-b3ab-93151f8783f3",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4e0621a5-d7ac-43fd-9699-fac43e8b00b7"
        },
        "item": {
          "id": "4a7f3e38-b233-4389-9b2a-8fcabfd9dbeb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6c438d22-b9e0-447e-b79c-b3598fcaa5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd9edd8-1962-41ac-8c79-812ae42223fb",
        "cursor": {
          "ref": "e645a965-3e47-427d-b23c-9cd799b2d244",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b20c09b7-2405-406e-be29-21a67232c802"
        },
        "item": {
          "id": "8cd9edd8-1962-41ac-8c79-812ae42223fb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b0daccdb-5520-4da9-ab84-044b9387149e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc7aa6d-f016-4f2e-80ee-c7c96a170278",
        "cursor": {
          "ref": "f9d08fd1-fea3-4fb8-be5f-67a782c6842c",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "99c55a51-b8b1-466d-bb3a-67853ed29836"
        },
        "item": {
          "id": "adc7aa6d-f016-4f2e-80ee-c7c96a170278",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3aa3705a-d45f-45f8-aefe-ff3e5fbe319e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2034d76f-02d8-4461-b07f-f1e26d57b2a0",
        "cursor": {
          "ref": "57e98b6a-b1a3-4456-98ff-d3cca9ebec8b",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0a0acb78-7c34-411f-a0ee-61a8f469fbe9"
        },
        "item": {
          "id": "2034d76f-02d8-4461-b07f-f1e26d57b2a0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dacfa0c3-5010-4832-b260-a827fdb77586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6c89f8-3970-4185-9274-06741ea32ca9",
        "cursor": {
          "ref": "04cd76bf-ff4f-4ee0-bb06-c52203ce77a9",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6e2b350d-3c2e-4fbf-8da1-437693aa4849"
        },
        "item": {
          "id": "0d6c89f8-3970-4185-9274-06741ea32ca9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "294f8c27-7ab8-44d2-bf91-c3206b0a7fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d89e987-701a-46a2-84fb-ed73f8918530",
        "cursor": {
          "ref": "e55d5f90-a953-4f62-bf7d-23e9da4564bd",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1e055a77-3c96-4141-afaa-a8afbb4d3bec"
        },
        "item": {
          "id": "8d89e987-701a-46a2-84fb-ed73f8918530",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6f14ccdd-5e1c-45d8-bf61-c59fc08bb8b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3659343-7133-4115-aead-74bee93c6564",
        "cursor": {
          "ref": "2708d79e-50d8-4b68-8bea-6f0f37940a2b",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "04c1fe0d-286c-4e12-95e9-45498d1c2f5f"
        },
        "item": {
          "id": "e3659343-7133-4115-aead-74bee93c6564",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1f669bcd-6c53-49e1-af64-25303b41f6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55137b6f-f937-4cc3-9c5f-cbcd46ec0e9e",
        "cursor": {
          "ref": "4cf39297-34ec-4397-8a1e-a49f4f12c13e",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6d487bc9-3735-4574-a2f7-2e8ac7ab5ceb"
        },
        "item": {
          "id": "55137b6f-f937-4cc3-9c5f-cbcd46ec0e9e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9343600e-34cf-48f6-9b38-d5a1dd8c80ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c8fbad-c21e-468b-a589-f57e847fac1a",
        "cursor": {
          "ref": "98bed830-131d-4199-94b4-fdc8dd206511",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b0c63a22-9c86-450b-87ab-21f9f2d7a319"
        },
        "item": {
          "id": "88c8fbad-c21e-468b-a589-f57e847fac1a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b7e50a83-de76-47d0-89f9-452b0058b7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f3cede-5ef6-4ff7-b5d6-58737da16143",
        "cursor": {
          "ref": "dbfc0320-eebf-4032-b74a-8f4a5effdac0",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cd9589ce-93d1-44c9-8f67-1a4e4156929c"
        },
        "item": {
          "id": "39f3cede-5ef6-4ff7-b5d6-58737da16143",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7b7a2c7f-8074-48a7-91c8-0cc1457ebb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297abbc1-a5cd-4872-8e47-2e42b20c44b8",
        "cursor": {
          "ref": "af6b2eba-dae6-4c91-82d3-7262d4aff09a",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d8fc3aa4-9caa-4286-bc91-8e89e9071252"
        },
        "item": {
          "id": "297abbc1-a5cd-4872-8e47-2e42b20c44b8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d757edc0-c179-48ec-91d3-f7c73d4c7c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3847ae90-e588-49c9-9fe7-14935f361ae1",
        "cursor": {
          "ref": "d3be9752-fdb2-4b0f-bacd-53d695dfddac",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c85104d9-bedb-45f8-b3c4-5716d01e1aad"
        },
        "item": {
          "id": "3847ae90-e588-49c9-9fe7-14935f361ae1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f4becdef-7b0c-4e65-bb7f-49e5bd201be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b956ca6d-9471-440c-ac7a-1d90aeb59df1",
        "cursor": {
          "ref": "58f27ced-2703-4eb1-b13f-2a454f494235",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "767d2def-7fca-4e9b-8384-2678aad2cd5a"
        },
        "item": {
          "id": "b956ca6d-9471-440c-ac7a-1d90aeb59df1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "05db4fa0-e97b-49b1-9999-e5eafa9a4277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a616865-4874-4b0f-a105-f4cc94a0d45e",
        "cursor": {
          "ref": "a9074a44-3e95-4140-b600-a10fea44d4e1",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "884d8656-909d-43b0-acf7-fe75b8f3941d"
        },
        "item": {
          "id": "0a616865-4874-4b0f-a105-f4cc94a0d45e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "56820ff7-5fe5-4856-8a7a-bf823ba7a50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20bed398-e18f-42bc-9ccf-86b94c3c6d20",
        "cursor": {
          "ref": "89b2baeb-d30b-4559-9a62-06b7e03c3889",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "68171d24-780c-43c1-b9d8-363529937b07"
        },
        "item": {
          "id": "20bed398-e18f-42bc-9ccf-86b94c3c6d20",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "31d20a6f-30ac-4be6-981b-a4227b347c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6a1914-35e5-4ffa-9ea1-a3fba0fc7224",
        "cursor": {
          "ref": "f19cd8b3-d98e-4a52-8a82-2e7f4c76d663",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d813715f-90fb-487a-b7e6-1259fee76ad9"
        },
        "item": {
          "id": "5a6a1914-35e5-4ffa-9ea1-a3fba0fc7224",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0e2bba9f-1058-4bd6-b870-851e34388679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c61d6a8-74ad-4b53-8eee-859b40c9e8e0",
        "cursor": {
          "ref": "361d09c7-cf34-42fd-89e0-163908440cdf",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1f5dd5b2-cdc2-4068-8a3f-44e6fdbd605d"
        },
        "item": {
          "id": "2c61d6a8-74ad-4b53-8eee-859b40c9e8e0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "63fef4c9-77f8-425c-842b-20114b758f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d9c462-5326-4c56-bbcd-e932f34cfcc8",
        "cursor": {
          "ref": "135261fb-ef35-43b7-a50b-15049d7b61ce",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0bf1180a-a034-4163-ba56-1879f82a7770"
        },
        "item": {
          "id": "62d9c462-5326-4c56-bbcd-e932f34cfcc8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "87e9ec53-8154-46e9-aec7-88134693b89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab879d5-7919-4b6f-b36f-d20bb51cef32",
        "cursor": {
          "ref": "2b2dbb44-f43c-4484-a205-b21cf2e2761c",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fa4c574d-336c-4ed0-b2b0-43ed9f8e5ce2"
        },
        "item": {
          "id": "cab879d5-7919-4b6f-b36f-d20bb51cef32",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4fed0fb1-bb62-4ab8-9fd3-52688e228614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1527d6d-7cee-46be-ba8e-230e8980c402",
        "cursor": {
          "ref": "576768bf-2330-44af-aa25-e4410e9bfa2e",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "018f2b87-9c61-4655-b6f7-d24eb2f9778b"
        },
        "item": {
          "id": "a1527d6d-7cee-46be-ba8e-230e8980c402",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7bd2796e-0a4a-4904-9583-d6929b7ea372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30067f03-4cb1-4cd7-8f97-29bfa331ca35",
        "cursor": {
          "ref": "ac44c918-fdc0-4727-a8ad-8e7e8323ce9d",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "14705f2c-0bad-4750-a8a2-24031c453aa6"
        },
        "item": {
          "id": "30067f03-4cb1-4cd7-8f97-29bfa331ca35",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a0113db4-9deb-411b-a245-45ba475b28a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbd2663-4590-4ef6-83df-e37a0a70d742",
        "cursor": {
          "ref": "0e976ef6-011a-462c-87f0-91218f69a391",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8c8e3e61-03b9-4461-9594-ce18cd047008"
        },
        "item": {
          "id": "8bbd2663-4590-4ef6-83df-e37a0a70d742",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "94b89350-277f-463f-931d-f8045f1bd5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e514df92-71c9-491e-9053-55bb4e2d02d5",
        "cursor": {
          "ref": "0e0efead-d3a8-4437-998a-12228ddd1325",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "15df7686-2af2-4bea-a1cc-82001bdd360e"
        },
        "item": {
          "id": "e514df92-71c9-491e-9053-55bb4e2d02d5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8d11bdda-ef33-48bf-929d-1fb75f6ea6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226065d3-bab0-4a4d-a08c-f266c1769f74",
        "cursor": {
          "ref": "b050dd02-3b27-4633-94ec-7bbe262cac43",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "506c39b4-5811-417e-bfbe-214acfa5a543"
        },
        "item": {
          "id": "226065d3-bab0-4a4d-a08c-f266c1769f74",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "921c0efa-ffaa-47bc-ae49-5eca755d1cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a537c6df-efff-4782-9985-adbe952826a1",
        "cursor": {
          "ref": "2fd9cf55-53ae-41b7-983c-e020a94fb59e",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "35d2aa75-d5df-4031-975e-5c757fc4b6de"
        },
        "item": {
          "id": "a537c6df-efff-4782-9985-adbe952826a1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6f442306-03b5-46ad-8c83-c895441717bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b30347bf-e302-4a13-af73-48d2bf3f9fd2",
        "cursor": {
          "ref": "5c0d7bab-4b23-4382-aca9-4f94c5fdde64",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3b228ea1-10ea-44f9-a02d-08405d9c1cfd"
        },
        "item": {
          "id": "b30347bf-e302-4a13-af73-48d2bf3f9fd2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1c81944d-4bb0-4dd4-8f97-2c66588b9c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "2be4aea8-c3d8-4604-abce-cadb888e8252",
        "cursor": {
          "ref": "1184ca3b-fef5-44ed-9471-9f7f5bced747",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d2119423-e9f1-487a-86f1-56b6a34eae49"
        },
        "item": {
          "id": "2be4aea8-c3d8-4604-abce-cadb888e8252",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "205c29b5-8618-4c18-b681-3e3418ae8ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be4aea8-c3d8-4604-abce-cadb888e8252",
        "cursor": {
          "ref": "1184ca3b-fef5-44ed-9471-9f7f5bced747",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d2119423-e9f1-487a-86f1-56b6a34eae49"
        },
        "item": {
          "id": "2be4aea8-c3d8-4604-abce-cadb888e8252",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "205c29b5-8618-4c18-b681-3e3418ae8ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c04c7dc-fc8b-49f9-9112-fabd759d2d5c",
        "cursor": {
          "ref": "426f1dd6-4adb-46b4-b5aa-d3dc214130a7",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "85a38ef6-a6b4-4a7b-9734-02a7b7b4b7a3"
        },
        "item": {
          "id": "3c04c7dc-fc8b-49f9-9112-fabd759d2d5c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ef5a594d-ef73-435a-af4a-e0028657dc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1a42d4-2fa4-4067-bbc8-025e8a29f821",
        "cursor": {
          "ref": "7c8da9c1-5b84-4fd4-a226-6b84c96ded49",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "011b1c44-78f7-43cb-843c-c44df8631b1e"
        },
        "item": {
          "id": "6f1a42d4-2fa4-4067-bbc8-025e8a29f821",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3d2e2e14-98f3-4405-a666-207e29fd1049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df94ffe8-14f5-424b-ba7f-db107a259126",
        "cursor": {
          "ref": "ce0a6d37-d9d6-42d6-bbd7-0479180c0e37",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "faa6fef2-aaf1-4b2e-b880-14652fd9853e"
        },
        "item": {
          "id": "df94ffe8-14f5-424b-ba7f-db107a259126",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c98f62f7-65eb-4f17-a4a7-398278bf920e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a90ac10-8f91-4a7a-b306-1e776d0e1879",
        "cursor": {
          "ref": "6f63b99c-2c67-42aa-92ed-1855f81bd5ef",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "04324359-69ec-4101-af04-691303ff7281"
        },
        "item": {
          "id": "9a90ac10-8f91-4a7a-b306-1e776d0e1879",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b4221adb-b597-4226-a20b-4fc3fde39d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c4e15f-38bd-4b0f-82eb-ea6a948ee635",
        "cursor": {
          "ref": "4064f923-37e7-4f39-8520-5b03488dfbe4",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "74a0a259-8378-4060-ad98-58c274d3c113"
        },
        "item": {
          "id": "f1c4e15f-38bd-4b0f-82eb-ea6a948ee635",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a53827e0-ed7f-4e12-b6d8-98cf8fbc49b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970764dd-e36e-42a8-9f63-61bd73c804cc",
        "cursor": {
          "ref": "611a160b-3d8c-44cc-9d46-d1878b0a667c",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8435fba0-5ce9-4bc7-bbf0-1a36b2734825"
        },
        "item": {
          "id": "970764dd-e36e-42a8-9f63-61bd73c804cc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9da00386-cac4-4b69-b28f-17ecba9e186a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec0c924-9cd6-4317-92f6-c5983978dc9e",
        "cursor": {
          "ref": "93d073f4-c041-4c69-8bef-11ca62cae46e",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3b3c22d2-bf71-471d-89e4-3e015ab556d1"
        },
        "item": {
          "id": "fec0c924-9cd6-4317-92f6-c5983978dc9e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "480babef-c58e-4ce2-b51b-791b85d6108a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3033484b-87f9-4357-809b-a14fed293494",
        "cursor": {
          "ref": "709bcb1f-4b63-4a1e-87da-bfd6cf95d796",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "08f5e1c5-e4c4-4f29-af17-94e6a718f287"
        },
        "item": {
          "id": "3033484b-87f9-4357-809b-a14fed293494",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5a489695-a193-4d63-87e3-be9a85340bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997ad647-ec59-4c80-a86c-96fecfe848a2",
        "cursor": {
          "ref": "f0eeb8fa-0f88-46d0-9d0e-75401677f611",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ae504d74-12b4-41c3-97d8-56827b682fc2"
        },
        "item": {
          "id": "997ad647-ec59-4c80-a86c-96fecfe848a2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bc6a35bd-e410-41aa-8114-c8242c06b68f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d371491-3406-41ad-be7a-d1c17a9760dd",
        "cursor": {
          "ref": "25e38e8b-b711-435a-bda9-9942e5789275",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "57ed1c9d-f200-464b-a0ce-8a786fdd420f"
        },
        "item": {
          "id": "3d371491-3406-41ad-be7a-d1c17a9760dd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "86081022-0ad4-4cfa-9efd-1fb99655102e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461149bd-394d-4cfd-b65c-2467c93a48f4",
        "cursor": {
          "ref": "16952660-c772-4696-b239-5a52b3e93a1e",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "efdc88ea-d500-4d8c-bc20-c0a3696517cb"
        },
        "item": {
          "id": "461149bd-394d-4cfd-b65c-2467c93a48f4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a9195a22-5c45-46e4-b782-a636a0d8ae84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5712ddca-7a15-4212-b5bd-7912814872a0",
        "cursor": {
          "ref": "d73dc3b7-409a-424f-8062-a783fdf5217e",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b433664a-e659-4c62-a0fe-31cbaf18ebd2"
        },
        "item": {
          "id": "5712ddca-7a15-4212-b5bd-7912814872a0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6ecc2c2a-896f-4abb-8c28-d20380ea20cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45936a5e-74b3-414f-b852-96a24fb0cd27",
        "cursor": {
          "ref": "9c1f579f-e510-4b82-9032-cdc20dd08091",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "bc462bc3-9816-4f0d-b1b5-77c10905b244"
        },
        "item": {
          "id": "45936a5e-74b3-414f-b852-96a24fb0cd27",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a232f2c1-117d-4312-af0a-d2436a2a1eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9075a8e-fbb4-495c-b789-fee34732ce50",
        "cursor": {
          "ref": "a54a5481-e178-467a-b05a-e376d059cd6d",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1df8a1e9-d762-4d3c-b310-fb4a01fc1e4e"
        },
        "item": {
          "id": "b9075a8e-fbb4-495c-b789-fee34732ce50",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e27f6f1e-4116-45b0-a48d-3cc38adb2673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a137d312-1635-4c96-8f8b-5a4b9fa5d9af",
        "cursor": {
          "ref": "84967a14-4611-42d2-8348-878b8206e535",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "01d39fdf-fc86-4ce0-bd44-e4b060160f92"
        },
        "item": {
          "id": "a137d312-1635-4c96-8f8b-5a4b9fa5d9af",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4d2309b8-3eef-4c35-8243-640fd7f4acec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9123a9e1-cfe9-453c-ad46-43632f1139ff",
        "cursor": {
          "ref": "9e567e9f-1051-43be-80f9-d8aea0c2e4fc",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d6e26957-0f8c-4ce1-91c0-f72b306c78e9"
        },
        "item": {
          "id": "9123a9e1-cfe9-453c-ad46-43632f1139ff",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5d0844da-3533-4ce7-b28b-d0bc5096de9a",
          "status": "OK",
          "code": 200,
          "responseTime": 220,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "65a60122-ea52-4c82-8e5a-0b34cc12808b",
        "cursor": {
          "ref": "3b701244-88ee-4f1d-acb8-8da82ca68f43",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "00fa7b67-e647-444e-b8c2-8ca1a2b8e7d2"
        },
        "item": {
          "id": "65a60122-ea52-4c82-8e5a-0b34cc12808b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "33783bf6-1fa0-4d56-a474-7fad7df940a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba06100f-d631-4b91-92af-48da9402e28e",
        "cursor": {
          "ref": "750fbc44-d64a-4c76-9e36-6431d0e4081f",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e005ae40-ef6d-4ced-b38f-4a558b23679a"
        },
        "item": {
          "id": "ba06100f-d631-4b91-92af-48da9402e28e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1de86b9a-65a5-4d15-911d-9594a8c285e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9609210-6ba9-4bbe-813f-1479e89733c8",
        "cursor": {
          "ref": "7a0a83f1-f865-4ee1-a91c-3fc8a05c8e98",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e882306a-db18-4806-a8a9-49c92b2b80bd"
        },
        "item": {
          "id": "e9609210-6ba9-4bbe-813f-1479e89733c8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "eeec66f9-0200-4ab8-9436-8ab27f166beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b33e222-0cdc-403e-8fbf-e34bf095388b",
        "cursor": {
          "ref": "8237b8ea-a4ab-4782-b489-ea20768ba98c",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "728027de-b1ee-4cca-92a8-73fc4a2e34f3"
        },
        "item": {
          "id": "4b33e222-0cdc-403e-8fbf-e34bf095388b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6063fb6a-de38-418e-b695-cd953b4a7e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd41bc4-9be6-41f5-a957-b9a04b0013d5",
        "cursor": {
          "ref": "f559b90a-d8d8-4656-b458-54958210e584",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1b656b74-3fb6-4f49-813e-5f030d338ef3"
        },
        "item": {
          "id": "fcd41bc4-9be6-41f5-a957-b9a04b0013d5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b8e12297-df9f-4445-a4ba-1ed2ce56042c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c138e40-be3c-4e01-a3a3-7d7ce73a69fe",
        "cursor": {
          "ref": "55b248e7-56a7-445f-aed4-9c4514dd8a12",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c63a743b-260a-40a0-8933-04804c274caa"
        },
        "item": {
          "id": "8c138e40-be3c-4e01-a3a3-7d7ce73a69fe",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5b62a83c-3791-4f8c-acc0-d94309ff792e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444aca9f-1acd-47e8-8024-49675fcc8be7",
        "cursor": {
          "ref": "3c17ae9f-f506-4579-a3b3-b21b5c67ffc7",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5ab5f282-2b92-4bf2-9384-5e91319609b6"
        },
        "item": {
          "id": "444aca9f-1acd-47e8-8024-49675fcc8be7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ddad65ec-5e3d-41a3-a228-4396764dedf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f817b3-3ceb-4361-8ef2-5d8f086e8133",
        "cursor": {
          "ref": "f5b380b2-c2bb-475e-b013-f8a550a25d08",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b2c2f82e-2105-44b4-be78-afc468966225"
        },
        "item": {
          "id": "73f817b3-3ceb-4361-8ef2-5d8f086e8133",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ae87b79b-8c58-4366-a5b0-c77fce1a4c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509f8968-75d7-40c2-8fc6-479c6537bb57",
        "cursor": {
          "ref": "efe5aeb8-cc1c-4c07-8842-e036dbe870d3",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "36988b58-21af-4289-ab43-65868a84bdc1"
        },
        "item": {
          "id": "509f8968-75d7-40c2-8fc6-479c6537bb57",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "03b9b3c9-bc0c-4d48-88c1-762d3badfd55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de115bfd-2b67-474c-adfa-73010e3298ea",
        "cursor": {
          "ref": "a2ab75cf-2ad4-4968-898b-4109f92b7b4e",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4a0eb6d5-d7aa-4790-bfd6-d3ff9ee020a1"
        },
        "item": {
          "id": "de115bfd-2b67-474c-adfa-73010e3298ea",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e626f346-3a1a-483c-a292-761bae7db8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c50602e-8810-47b3-9a6f-a868117bb23c",
        "cursor": {
          "ref": "a069bc85-fb16-48cf-b67f-a51a3d452bff",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "000d4f60-b870-48b7-9632-4a89443f60ba"
        },
        "item": {
          "id": "9c50602e-8810-47b3-9a6f-a868117bb23c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b204c403-321d-498b-b58d-1bfc0e72e487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b58cbb-0c67-40c3-af7d-05c89022e8ee",
        "cursor": {
          "ref": "0a227a1e-ed40-49fd-ba6f-45116fa0ff25",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0d7eadfb-453b-4573-adc5-e0a3ec0409a4"
        },
        "item": {
          "id": "a4b58cbb-0c67-40c3-af7d-05c89022e8ee",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3983674e-1d2d-478b-a0c4-e7a0e0749a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25ee709-3c5d-4b95-8b4e-25a70ece4433",
        "cursor": {
          "ref": "6764efd6-71df-4733-b77b-e5334de9ad00",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2ad6c0e2-fb2d-47e5-9cc7-c587c7ce45ef"
        },
        "item": {
          "id": "f25ee709-3c5d-4b95-8b4e-25a70ece4433",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2f483add-6df5-4b38-a0eb-60e974fb30f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28df4744-12d6-4d8b-b2df-f5d9b53b68ac",
        "cursor": {
          "ref": "85c19daa-a677-494e-9b49-083cccf947d9",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "94d4ef85-f84a-4f12-917d-b343a39e1b71"
        },
        "item": {
          "id": "28df4744-12d6-4d8b-b2df-f5d9b53b68ac",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7bcb9120-f1b3-4dc1-beb8-b0a6ac7a64b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa0344e-c87a-44a0-8941-d126063fbee4",
        "cursor": {
          "ref": "2c67b682-e817-418c-9e5d-eaf9b7cb57bc",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d364b894-743c-4f14-aaae-1cad5bc2002d"
        },
        "item": {
          "id": "1aa0344e-c87a-44a0-8941-d126063fbee4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "975f5765-b43f-401b-8262-a2f063b56139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5de3645-9e4f-4bad-a1f3-87f647c8b3b9",
        "cursor": {
          "ref": "69cd38bd-dfc3-4754-8f0d-7ea14044b86d",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "15760f46-4360-427a-adbc-653ac07828db"
        },
        "item": {
          "id": "b5de3645-9e4f-4bad-a1f3-87f647c8b3b9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2b9e4b94-c9ba-4824-a230-09ae737e586e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6737a55e-0ba1-4e0d-ab99-8f99c116796f",
        "cursor": {
          "ref": "ff785483-9877-45f9-a7f5-9954f16941fe",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "847404a3-c64b-47a8-982f-a62b86b8fead"
        },
        "item": {
          "id": "6737a55e-0ba1-4e0d-ab99-8f99c116796f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c913fcb2-47ca-4064-9e9c-c620b92908d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e63210-038a-47a9-9414-db7a060adeae",
        "cursor": {
          "ref": "49020348-6dbb-49ce-9e2f-27e4a4ee2c7b",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "81147995-ce43-4bbb-9110-479d7b0563cc"
        },
        "item": {
          "id": "54e63210-038a-47a9-9414-db7a060adeae",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "cbf7faec-ed63-4ba2-a9bb-8a18cc9b6776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a34d47-2079-4a53-807d-cb3ab1d94601",
        "cursor": {
          "ref": "8c917742-f97c-4346-a86c-38de48467c94",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f249d9bc-6da9-47d7-b726-10cd1e3114f1"
        },
        "item": {
          "id": "c7a34d47-2079-4a53-807d-cb3ab1d94601",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ca4c4e9a-2373-4d8e-bd1a-db7868250ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f044bae-fdfa-46fe-94f4-b9811d895e0a",
        "cursor": {
          "ref": "b97b028c-e50d-418f-855e-f95850fa5e7d",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "999c2b21-79bb-4703-9e8d-170f53d144b3"
        },
        "item": {
          "id": "8f044bae-fdfa-46fe-94f4-b9811d895e0a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d666a9e1-fc52-420d-b067-c47444a753a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a6799c-c6c8-452e-a6e9-f8ba074842f6",
        "cursor": {
          "ref": "6585a727-604a-4fb0-b58d-5d86798c5bea",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c8ddce18-387e-4773-b957-2ef2c6251c09"
        },
        "item": {
          "id": "96a6799c-c6c8-452e-a6e9-f8ba074842f6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "48bc8582-71df-4ade-9890-2bcbfa71ae1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a9bd12-9d76-4000-8130-fbcae5f61f90",
        "cursor": {
          "ref": "95b32de1-84c4-479a-bbad-a2d9a112a9f7",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8760291c-1ce7-413f-be2d-9eec8a545421"
        },
        "item": {
          "id": "d6a9bd12-9d76-4000-8130-fbcae5f61f90",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fd0564e1-1d1e-495b-a92e-d110318ea926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b2c81c-5708-459d-b6df-7373b0ce08e6",
        "cursor": {
          "ref": "06877941-9a2d-4a99-9385-205ccf5ec02d",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "22af373c-ea3d-49de-a003-9cfb9aad0a24"
        },
        "item": {
          "id": "66b2c81c-5708-459d-b6df-7373b0ce08e6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "646f4e24-680c-4df1-9403-b18c984d5916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1f5a2b-1da5-42b4-9a2c-a415d0c329d3",
        "cursor": {
          "ref": "83403151-5c49-4a4d-9d3f-90192dad3828",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "20965c1c-6dbf-49b9-be53-5ed3a9957b82"
        },
        "item": {
          "id": "7c1f5a2b-1da5-42b4-9a2c-a415d0c329d3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2bed0080-dd57-4566-bc8a-115c36221976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc24338-2848-4d4d-9b39-92e9627ac45b",
        "cursor": {
          "ref": "3c6651f5-7499-4f98-8d06-d943a4dd8b16",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "af9846fa-4745-45e7-bd1e-bceab4cd54f4"
        },
        "item": {
          "id": "afc24338-2848-4d4d-9b39-92e9627ac45b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "27397ccd-bd37-4a9b-899f-75c1fc3f94c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd98111b-7b51-4f0d-9840-02afdda36898",
        "cursor": {
          "ref": "93edff4f-86b5-4333-8c24-a1baf2672867",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bc6407a9-9013-4e8b-8a18-276a7d595f75"
        },
        "item": {
          "id": "dd98111b-7b51-4f0d-9840-02afdda36898",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d4ccc50e-0f20-4526-914b-04610070e6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2021756d-989d-4778-92ed-4570c9644565",
        "cursor": {
          "ref": "3a708d66-c0e9-448a-a43f-9bf29eca9316",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6bab19a5-5d3c-426c-b112-9d8a1a54acae"
        },
        "item": {
          "id": "2021756d-989d-4778-92ed-4570c9644565",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dc76b4de-fc25-4d6d-9ee4-ca4b1ecbd210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbdbcf25-69a3-4fe0-b753-dcd4ea9a9efb",
        "cursor": {
          "ref": "4a2d8f68-8df2-4ff8-b7ac-abe41bcd15db",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d727b3db-e79d-4e7e-854b-d2001b68bb39"
        },
        "item": {
          "id": "cbdbcf25-69a3-4fe0-b753-dcd4ea9a9efb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6d5e8b6f-dc63-4974-b1ae-b3a49883bb6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d631299-3ecb-47c0-b787-ecfc1bd1953b",
        "cursor": {
          "ref": "e1907a02-8e17-4048-843f-65de2f08ab67",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c44413fb-cbd1-4064-a529-e8307f5d88e0"
        },
        "item": {
          "id": "9d631299-3ecb-47c0-b787-ecfc1bd1953b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7fa59941-b773-404d-a61f-a497f7662c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7416d47f-d322-4f0c-8eeb-f3b456403e7c",
        "cursor": {
          "ref": "698878f4-b4f3-4d16-8509-d41c1e9f9d4c",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "94855093-7d05-48eb-8364-9593063b7c81"
        },
        "item": {
          "id": "7416d47f-d322-4f0c-8eeb-f3b456403e7c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d0aa775c-d33d-49e0-ad7e-4541efc86382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80215c4-68e3-42a9-aabc-07a5c4cafcd7",
        "cursor": {
          "ref": "0957f871-3905-42c7-8652-9d70eb1134cf",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9294d105-0796-492c-9656-94badeddcf77"
        },
        "item": {
          "id": "d80215c4-68e3-42a9-aabc-07a5c4cafcd7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d596fcab-7a5d-40c5-a711-06ec5d949891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278cabfd-3fba-4903-bd81-7d62870ca7e7",
        "cursor": {
          "ref": "445e70f7-dec6-435c-ac16-0d545cb78504",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "600122b2-fa5b-4011-97ec-f9ddd0f52a46"
        },
        "item": {
          "id": "278cabfd-3fba-4903-bd81-7d62870ca7e7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "140150d7-f18e-4eb1-9c3a-9b290853b456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ba221a-423d-42a1-bd68-ea4bdedfecef",
        "cursor": {
          "ref": "3d3f828f-156e-4e3d-9364-58cfd143c437",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5c72f080-544f-4be3-b2d2-2b01553a772f"
        },
        "item": {
          "id": "50ba221a-423d-42a1-bd68-ea4bdedfecef",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "76f67589-0852-4400-a27f-6e1394d25e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2113b8f1-48a6-4f0c-9a2e-aee392573451",
        "cursor": {
          "ref": "74a75f6a-19c0-41b0-9bc8-7061c19f51b6",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "404a4d97-758e-4783-a7d5-fd279096637a"
        },
        "item": {
          "id": "2113b8f1-48a6-4f0c-9a2e-aee392573451",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "00361a00-fe11-48d4-8f2b-4dd0e123076f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ae1f52-1557-4773-a0b9-a98d4a0c26cb",
        "cursor": {
          "ref": "7b84209d-d5de-4808-8d9e-d19d9a89ceb3",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d7f00bdb-a5f2-499d-a2fc-2ac07e4b4c50"
        },
        "item": {
          "id": "32ae1f52-1557-4773-a0b9-a98d4a0c26cb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8b0b43d3-5be0-4e0a-954f-d5873b56530e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8d4d25-c60e-4bae-bdc1-28ca6997d8d1",
        "cursor": {
          "ref": "a1a750d1-786b-41db-98af-ecf2296e4b91",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f6089f1d-e792-45e9-948d-a0943468a438"
        },
        "item": {
          "id": "cb8d4d25-c60e-4bae-bdc1-28ca6997d8d1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7d120e7f-77c6-4a9b-85d0-0858a4862411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0dd2b33-1278-4df1-92fc-54b5c6bfc28c",
        "cursor": {
          "ref": "a6847af6-cbd1-4a0b-bfc6-5ac1231e59c8",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "391bc3c6-0fce-4bf4-8da7-5cd3382f0f50"
        },
        "item": {
          "id": "f0dd2b33-1278-4df1-92fc-54b5c6bfc28c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b9f96220-5f19-4c53-bf03-a6872c7ae1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9821831f-9da2-4762-a0e7-a3980fd8682c",
        "cursor": {
          "ref": "a2f63ea6-fffd-4803-9660-64b0c2209e65",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6b95120d-1ecb-4c30-8559-f439d99d5607"
        },
        "item": {
          "id": "9821831f-9da2-4762-a0e7-a3980fd8682c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d3c69550-ad6b-4b36-9d56-32f5b06ea6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787d347f-8d5d-4298-bdb7-f75c0d8da83f",
        "cursor": {
          "ref": "17e150f8-7d90-44de-bb5c-f471f6e36cc3",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5f5b7942-6075-4145-8794-1276808a6ed4"
        },
        "item": {
          "id": "787d347f-8d5d-4298-bdb7-f75c0d8da83f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2d3a6284-7c21-4e37-9d2e-327147190811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1da88d-28a8-4ff3-9f31-b340f7040aca",
        "cursor": {
          "ref": "79c16b90-3977-4d98-9bc3-ba0551d309c7",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "65b072f5-a125-48c7-b647-65a4604538ca"
        },
        "item": {
          "id": "2d1da88d-28a8-4ff3-9f31-b340f7040aca",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b3fe6967-655e-49ab-bab3-573cf7a4ec94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5047c9d6-2126-40ad-ba61-527936c95eea",
        "cursor": {
          "ref": "19f755b4-2a2d-4aa5-9eac-f32a7f02c970",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e863c314-c6e6-4e8c-a5c5-15f3d650e575"
        },
        "item": {
          "id": "5047c9d6-2126-40ad-ba61-527936c95eea",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6ce44d6a-40f0-42c3-826e-168482438b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fd0582-9414-4079-bfeb-549c6891be79",
        "cursor": {
          "ref": "7870210b-3437-4792-b769-4b9e000a799b",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e51ae0d4-598f-4cb6-b6be-a7f49f006b4b"
        },
        "item": {
          "id": "94fd0582-9414-4079-bfeb-549c6891be79",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "88e3fec1-c909-4a69-80ec-b2a6f04b9803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a9a4ca-3f9d-4e15-a1c0-03d7e7a7a111",
        "cursor": {
          "ref": "1c2050b5-e409-4fe2-b4b4-f834ede6e575",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8a32858b-ad31-4866-80e9-ac65a433abae"
        },
        "item": {
          "id": "34a9a4ca-3f9d-4e15-a1c0-03d7e7a7a111",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "153e50f2-3094-4bc4-aab7-0e15f9ddbb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1040bfd-7965-41b0-916f-0d754d8fca2a",
        "cursor": {
          "ref": "6b1fd037-8e67-40ca-aa77-987c502be9f0",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4ead1160-a65a-46c4-8845-770c20bcad49"
        },
        "item": {
          "id": "e1040bfd-7965-41b0-916f-0d754d8fca2a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2875cfd2-764e-45bf-adf1-1d507b52594f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b461104d-ec7f-42eb-b469-c1c3b919c8ff",
        "cursor": {
          "ref": "fb8065d6-b83a-4993-b1fe-292e19dcf94e",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "51cae03b-e879-4426-a0e2-72986ab9bbe9"
        },
        "item": {
          "id": "b461104d-ec7f-42eb-b469-c1c3b919c8ff",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b22421cf-6d24-4201-9ec9-c16e90d18471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd14f90-e0ec-4745-b789-8ed5dec0fbf9",
        "cursor": {
          "ref": "2700ccc4-bc2c-49b1-8051-db2ef4cffc80",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "27459c83-2a42-49cf-8085-5f694e712b4f"
        },
        "item": {
          "id": "4bd14f90-e0ec-4745-b789-8ed5dec0fbf9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "028053d1-42a5-4872-a183-f89a2e290480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8579d5f0-e0f2-46f0-be1a-87cf3471e607",
        "cursor": {
          "ref": "c31336e6-e53e-490c-b3d3-83172faf71c1",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "be024df3-8cbd-48e0-883f-2904b5c8c397"
        },
        "item": {
          "id": "8579d5f0-e0f2-46f0-be1a-87cf3471e607",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d8aa804b-9d86-4ecb-865d-f6bc7fe20558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dad1faa-0b27-4a22-ae0e-6f58b57281fa",
        "cursor": {
          "ref": "ad70aa97-a64c-4de6-8af1-a78a1ea86d57",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bb24c04c-f92a-4caa-8afe-1ddaf92f3839"
        },
        "item": {
          "id": "8dad1faa-0b27-4a22-ae0e-6f58b57281fa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a121fbad-bf9b-4068-a032-f9551bc564c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e9bb7d-d971-4d7d-bd3b-d277ce2aa09c",
        "cursor": {
          "ref": "64be1a5a-e030-4e26-92c2-1d3418eee197",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "53da5131-44da-4fec-b619-129fe7b82e43"
        },
        "item": {
          "id": "09e9bb7d-d971-4d7d-bd3b-d277ce2aa09c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bd157c39-56d4-4233-b399-e48ce416ad69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe4fd80-93b1-4bc5-8c45-f27a8715701d",
        "cursor": {
          "ref": "d55a3fda-3809-4da2-9f31-6d8fbe55949d",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7c099599-e3d2-423d-b783-efa2421ac4a0"
        },
        "item": {
          "id": "bfe4fd80-93b1-4bc5-8c45-f27a8715701d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "25b8d403-bb26-4457-8c7f-13981034f805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f34e02-41b7-47b6-9b6b-954a349aa676",
        "cursor": {
          "ref": "51da997a-fb9b-4944-a26f-93f002d36de8",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8b3ff351-2a36-4980-a923-1d704de7c76a"
        },
        "item": {
          "id": "59f34e02-41b7-47b6-9b6b-954a349aa676",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "dff01826-b556-4bbf-a808-600fbc5d77ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa4158f-9ddd-4d71-a806-c275f54ad401",
        "cursor": {
          "ref": "8d9fb618-79ea-4d3d-94bc-72bde7926db1",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "cddeb630-3a71-4af7-9640-31a19285a5aa"
        },
        "item": {
          "id": "dfa4158f-9ddd-4d71-a806-c275f54ad401",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f1a7213a-c84f-465a-98f3-cecfe8150d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e017fd-ca69-4ac7-aaa2-141681e20862",
        "cursor": {
          "ref": "6f4628bc-3e05-41ed-b0db-42bf78ed75eb",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "97c42351-f520-4984-9a42-909ff5ab5426"
        },
        "item": {
          "id": "f0e017fd-ca69-4ac7-aaa2-141681e20862",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7e3a86d1-b10b-4bf2-942b-bc2b26016ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c852a8-0040-48de-a0a6-219c6b36585b",
        "cursor": {
          "ref": "ffff1b74-368f-41f4-b53a-6e08483d7d92",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "70a81a43-943d-4087-b399-f973447acb9f"
        },
        "item": {
          "id": "15c852a8-0040-48de-a0a6-219c6b36585b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "431afcad-8a8f-4ad9-a50f-7782fcf21843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88cffe5-76bb-42f5-9d6f-f81de1840214",
        "cursor": {
          "ref": "a22f2b38-435b-445f-b355-afed954c0751",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d6d5e09e-a995-4ee4-b22c-536b599eb98c"
        },
        "item": {
          "id": "f88cffe5-76bb-42f5-9d6f-f81de1840214",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8be3de8e-1130-4e37-9dc5-12630acc1834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95462907-e830-4d1a-b5fc-aa30f2ebc1ac",
        "cursor": {
          "ref": "c146b59b-8e8c-4b6b-aad8-176453935fb7",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "45a70a91-5920-4314-80e9-56c14dc2979a"
        },
        "item": {
          "id": "95462907-e830-4d1a-b5fc-aa30f2ebc1ac",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8455807b-a74c-4167-aca2-78866397de33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7112dda3-022a-4c1e-83bc-2c901ca1d3cc",
        "cursor": {
          "ref": "14fe117e-6db8-4bdb-a3b0-ecaccbb68fca",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "202dd193-5e85-40cc-a176-3c76112ce8ce"
        },
        "item": {
          "id": "7112dda3-022a-4c1e-83bc-2c901ca1d3cc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "14150f50-6635-4330-bb7a-63babf682653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48764ba-7b2a-4cbb-9b9f-0da4d50304b9",
        "cursor": {
          "ref": "e06f5678-1f7f-42b5-9087-9ffc60a37048",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3017a707-e1ec-4c8c-9277-1d8fba3f73ae"
        },
        "item": {
          "id": "d48764ba-7b2a-4cbb-9b9f-0da4d50304b9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fc26fac8-881e-4199-81b1-075037e71687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9e10fa-6174-439b-af46-3561769523a3",
        "cursor": {
          "ref": "c50eb776-b68f-4a4c-adcc-8467c8456fb0",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "68cb75b0-4904-4426-8223-8f3cfeeb20b9"
        },
        "item": {
          "id": "4f9e10fa-6174-439b-af46-3561769523a3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "226b1c7e-4896-4fdd-b8e1-f8c64224c34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e31807-f896-4d0c-81ee-049e66ed91dc",
        "cursor": {
          "ref": "0b49c200-d829-4c48-ac81-5cc5c07ed64a",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "560b2805-f36c-4130-a768-a75d62943a00"
        },
        "item": {
          "id": "e4e31807-f896-4d0c-81ee-049e66ed91dc",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4458dd5d-bf1a-4d20-936c-8056b900b3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5cc96c-0052-46dd-8ef1-6f5bb4e61f7b",
        "cursor": {
          "ref": "ea2bf258-1667-4f44-a3f2-1f930ca81ec7",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d2e8a378-8402-4eb7-90b8-3ee28239973b"
        },
        "item": {
          "id": "9c5cc96c-0052-46dd-8ef1-6f5bb4e61f7b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2c602f9d-7c47-4085-9f86-537adf29559a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ddeac8-9933-490e-8fb5-28181dc75e74",
        "cursor": {
          "ref": "edbbb5fd-022a-457c-9b88-15f0e9467d5c",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "79c6007c-80ea-42d1-b31e-411a6971027d"
        },
        "item": {
          "id": "28ddeac8-9933-490e-8fb5-28181dc75e74",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "caf3e200-3d10-4e86-890a-4581be4590b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1658c67f-29f1-4986-b05e-7e48e21bbce0",
        "cursor": {
          "ref": "2b6ca1c3-34ee-4e19-bff6-851e795f7429",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8a3dbd19-e8fa-428e-96b2-738d4d88ee44"
        },
        "item": {
          "id": "1658c67f-29f1-4986-b05e-7e48e21bbce0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9dcd79a4-5cde-49ca-a51e-08e92df99c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3f4126-c6c4-4570-8926-eca51b484327",
        "cursor": {
          "ref": "86bce99f-683c-4bcc-876b-e03c285036e7",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "263932a8-da95-483d-a100-b5f5519ed7aa"
        },
        "item": {
          "id": "da3f4126-c6c4-4570-8926-eca51b484327",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3f2616dd-ff65-494d-9e30-b288e5cac130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1bd134a-22f4-4734-b7c2-6722f97bbcd5",
        "cursor": {
          "ref": "2358f344-f0d5-4f84-82b4-13c17b648dab",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "645a21f0-6e7a-46a2-83ce-30f47a4a914e"
        },
        "item": {
          "id": "a1bd134a-22f4-4734-b7c2-6722f97bbcd5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c6d90138-9687-4e24-93f2-5c00abfad6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bbc435-f65c-4800-8449-63dfac06907e",
        "cursor": {
          "ref": "dbc8e185-05ee-409e-a27e-b8c9fc52b1a7",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8ada8d8e-9999-4f28-9fd4-ff4c4288fe7c"
        },
        "item": {
          "id": "52bbc435-f65c-4800-8449-63dfac06907e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4f672fa1-4f1b-47c6-a47f-d447ee074c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a62437-9b60-4bc7-884a-3cae9a305231",
        "cursor": {
          "ref": "b4a6a457-3386-4778-a5ef-f08f54c1284b",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b07f42bf-9962-426f-adf4-ec0d4861295a"
        },
        "item": {
          "id": "19a62437-9b60-4bc7-884a-3cae9a305231",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b58fb5fb-86dd-42d9-8b8d-0adff27c49ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73555de-7fb1-4ef0-982e-61d12c67d6ca",
        "cursor": {
          "ref": "2dd837c1-c3db-47de-b371-9aad0777ffa1",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "054b5cf3-f6d0-466f-bbb4-d3f118f4b467"
        },
        "item": {
          "id": "e73555de-7fb1-4ef0-982e-61d12c67d6ca",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a6ea19ea-7c1c-4805-bdc8-c7f93dd91c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1071d14c-a43f-4e6e-8329-a31a1108655f",
        "cursor": {
          "ref": "ceecc69f-c954-4914-a2ad-77032f977009",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e2589549-e4b8-4a2b-8447-e3cd46516b76"
        },
        "item": {
          "id": "1071d14c-a43f-4e6e-8329-a31a1108655f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "be0725bf-0b92-4b60-8410-6ca59045e6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ccf875-0c2f-4ae3-97db-a0a7608fb219",
        "cursor": {
          "ref": "058b7008-b52a-4f59-b9db-9639afd8591e",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "eb70f215-e592-4d72-a09e-665ff980cc01"
        },
        "item": {
          "id": "30ccf875-0c2f-4ae3-97db-a0a7608fb219",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d45abedd-d695-4ec8-8c7b-b8288825b5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c30abab-8198-4737-8424-2fde971df966",
        "cursor": {
          "ref": "15e7b3c4-406c-4154-bd91-717842c36d78",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "09e07a5c-f84a-4bfd-a937-4cf8f17e622e"
        },
        "item": {
          "id": "7c30abab-8198-4737-8424-2fde971df966",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c56dc7f1-625e-4bcc-be55-f09ef7c0ddbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a13a9c2-ab22-4c92-a70f-dbfe5e569968",
        "cursor": {
          "ref": "2da66728-7c85-445e-aa65-6df90bf3fec0",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a5b4f2b8-7747-43f6-8792-5a661d145a30"
        },
        "item": {
          "id": "3a13a9c2-ab22-4c92-a70f-dbfe5e569968",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "df28d403-f184-4fb6-93d4-4c5744f11810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499de461-1454-405d-afab-e4141d450af1",
        "cursor": {
          "ref": "6749cf21-83fd-4f9b-b995-36fdbcbecf10",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "391cfd65-b997-4f72-a7b5-f6e6d5fec4b8"
        },
        "item": {
          "id": "499de461-1454-405d-afab-e4141d450af1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3723c50c-2e85-4915-bab3-90e5d6f10083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6e2ea0-4d86-4826-a880-015a3fc93f9e",
        "cursor": {
          "ref": "0915790f-c74e-4ecb-bee2-322abb2613ba",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a5b7921d-384b-4ab9-9156-a4c1e745d462"
        },
        "item": {
          "id": "7c6e2ea0-4d86-4826-a880-015a3fc93f9e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bd9c8625-6b46-4e99-800a-e6adb9ee6590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee2918e-232a-4714-984d-26972f9105ce",
        "cursor": {
          "ref": "8e6952d1-c32d-4f1b-8961-d80fbc4fa8af",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "157c4472-5e21-407d-9dc5-236689ddf769"
        },
        "item": {
          "id": "1ee2918e-232a-4714-984d-26972f9105ce",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4db7846b-3836-4338-b0be-5d872aa5b911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ac0b97-4568-4b7b-9bff-87c6cabf778b",
        "cursor": {
          "ref": "ba1d3952-7fdf-4671-b17b-fad04d9be860",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e6d700b3-b03b-46a7-80fe-8b2acec657c9"
        },
        "item": {
          "id": "c4ac0b97-4568-4b7b-9bff-87c6cabf778b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "da8b1267-88fd-4b00-bbe7-b23e94a7add8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b637a97-49d8-4a37-9fc1-92ba31c7a7de",
        "cursor": {
          "ref": "8da19edf-5595-4969-a349-dec0e95fdc34",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "177e484a-682d-49b4-a097-7cb6f848d554"
        },
        "item": {
          "id": "1b637a97-49d8-4a37-9fc1-92ba31c7a7de",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0a8b7d4f-d277-4429-9fb4-55347970aa25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885742fb-c9ad-448c-9bbd-2e28237ede6a",
        "cursor": {
          "ref": "77fc5fe8-7ada-4a58-88bd-662dd2174d1a",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "eee123c3-65f7-4bb8-b368-e75efe76a36b"
        },
        "item": {
          "id": "885742fb-c9ad-448c-9bbd-2e28237ede6a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "560c655d-7579-42ea-8118-7354869f6883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b371f005-46fb-4044-a377-00cc5646b0f2",
        "cursor": {
          "ref": "920a2e83-6997-402d-97b4-9c3d9ddb926a",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6b7ca3c3-1efa-401d-b54f-18db3d66ebf9"
        },
        "item": {
          "id": "b371f005-46fb-4044-a377-00cc5646b0f2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d859a15a-05e2-4be1-b944-d1b3679619ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cfa4ac-8d50-4600-965d-3df77af328b0",
        "cursor": {
          "ref": "6d26f43e-a120-4a8c-85d6-1873e7f90f67",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "905b1edf-a670-4c86-b88f-adfc3f78f491"
        },
        "item": {
          "id": "47cfa4ac-8d50-4600-965d-3df77af328b0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c458f351-e006-4db8-8d95-d943bfcdf0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a42998-fa9c-4b65-b8ce-b36342d233e5",
        "cursor": {
          "ref": "4ad94442-eb2b-412f-9233-a7490f49264e",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "686f28e7-dfb9-4cdf-95e2-25b5a8dc38d3"
        },
        "item": {
          "id": "f3a42998-fa9c-4b65-b8ce-b36342d233e5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b42a94da-56aa-49a3-9c05-e12b7f27bc3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6bc9a191-056d-468c-aaa5-5fb16fbf8804",
        "cursor": {
          "ref": "19ffd79a-6fd0-48af-a67e-7ae2fc948f93",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "41677340-63b6-4226-bf17-d681b98a863a"
        },
        "item": {
          "id": "6bc9a191-056d-468c-aaa5-5fb16fbf8804",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "69046fdd-ac31-4d90-977d-6d7f81d4517d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "3780eb51-8d8a-46db-a48f-571266c7d335",
        "cursor": {
          "ref": "8bce4ea9-9b3e-4b57-88e5-3500ad647a3c",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "676fb5ab-a171-4353-8a79-eba43bd35bac"
        },
        "item": {
          "id": "3780eb51-8d8a-46db-a48f-571266c7d335",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "eb8dba6a-1a98-4ae9-b932-7f9431c97876",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bcaad5-42b7-47ed-917e-9c61d43d0a3b",
        "cursor": {
          "ref": "54a981ce-2623-4c5f-b1ab-c69cb31bbf58",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2e90ad2d-e7cd-4c4c-b29e-9e7365deb2e1"
        },
        "item": {
          "id": "87bcaad5-42b7-47ed-917e-9c61d43d0a3b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9a1e7938-5bf0-4065-b207-49f5e7661516",
          "status": "OK",
          "code": 200,
          "responseTime": 1802,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "63393742-8b43-415d-ad39-d9ba73390224",
        "cursor": {
          "ref": "7e770489-f791-4d6b-aca9-fbbef9e7f260",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5d9c1ab7-46fe-40ac-b4a1-f4d3085974cd"
        },
        "item": {
          "id": "63393742-8b43-415d-ad39-d9ba73390224",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5bc3b780-b7a0-410f-8a0a-cf7aae9fe186",
          "status": "OK",
          "code": 200,
          "responseTime": 2322,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62255d9-8501-44df-a8bd-298693191990",
        "cursor": {
          "ref": "77954063-6680-4089-8522-61ad09d7dcc1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3d16587e-211b-40bc-b332-efe67096673b"
        },
        "item": {
          "id": "a62255d9-8501-44df-a8bd-298693191990",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8459754b-706a-43bd-9499-cd5a5ba41fd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a62255d9-8501-44df-a8bd-298693191990",
        "cursor": {
          "ref": "77954063-6680-4089-8522-61ad09d7dcc1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3d16587e-211b-40bc-b332-efe67096673b"
        },
        "item": {
          "id": "a62255d9-8501-44df-a8bd-298693191990",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8459754b-706a-43bd-9499-cd5a5ba41fd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a62255d9-8501-44df-a8bd-298693191990",
        "cursor": {
          "ref": "77954063-6680-4089-8522-61ad09d7dcc1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3d16587e-211b-40bc-b332-efe67096673b"
        },
        "item": {
          "id": "a62255d9-8501-44df-a8bd-298693191990",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8459754b-706a-43bd-9499-cd5a5ba41fd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ce73ee89-71ed-4461-b663-f8b5bdd510ab",
        "cursor": {
          "ref": "452038c8-982f-4c05-a423-4858c8742805",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1c9eaabe-34fb-4f28-a36c-e78d3249467b"
        },
        "item": {
          "id": "ce73ee89-71ed-4461-b663-f8b5bdd510ab",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6eb23ccd-206a-4395-a20e-35625c5435a7",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d163f754-f166-4a7b-b0e3-85640de27055",
        "cursor": {
          "ref": "c94f6aa3-af9e-470f-9308-19789358557c",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a6a6012-837c-435e-8fed-7956a2d8151a"
        },
        "item": {
          "id": "d163f754-f166-4a7b-b0e3-85640de27055",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9e076005-be1f-4bb5-92f9-fd87c892cc44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d163f754-f166-4a7b-b0e3-85640de27055",
        "cursor": {
          "ref": "c94f6aa3-af9e-470f-9308-19789358557c",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a6a6012-837c-435e-8fed-7956a2d8151a"
        },
        "item": {
          "id": "d163f754-f166-4a7b-b0e3-85640de27055",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9e076005-be1f-4bb5-92f9-fd87c892cc44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "44d78bc7-012e-455e-a346-be433090caf5",
        "cursor": {
          "ref": "5431dbf8-4a8d-413d-a7a7-93ebc4cc91b0",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "669ce07d-8efa-41ae-8253-51eba4a3c572"
        },
        "item": {
          "id": "44d78bc7-012e-455e-a346-be433090caf5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d451287c-743a-4cf0-a110-3cd5e161295e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 134,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ae68a841-6e24-4b22-9090-a1086f08edb4",
        "cursor": {
          "ref": "08a1b312-6463-452d-b087-70f3a9e343f3",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "030f9e17-0fb5-4239-be0a-3dc2ed1e6b8e"
        },
        "item": {
          "id": "ae68a841-6e24-4b22-9090-a1086f08edb4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e983965f-821b-4491-b0e7-f050ca557cd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ae68a841-6e24-4b22-9090-a1086f08edb4",
        "cursor": {
          "ref": "08a1b312-6463-452d-b087-70f3a9e343f3",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "030f9e17-0fb5-4239-be0a-3dc2ed1e6b8e"
        },
        "item": {
          "id": "ae68a841-6e24-4b22-9090-a1086f08edb4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e983965f-821b-4491-b0e7-f050ca557cd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "08bdb999-7b42-4248-ac88-17ade96122c7",
        "cursor": {
          "ref": "21b0b0ef-7296-4685-bcc9-be29d8c26466",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a1f3faaa-cb8a-417d-8922-076d927b2b59"
        },
        "item": {
          "id": "08bdb999-7b42-4248-ac88-17ade96122c7",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "03b33ef0-58da-4a70-82ac-e006808262b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}