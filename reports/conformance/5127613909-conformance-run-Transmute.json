{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7604d94e-a1d8-4f52-91b0-7ee4ea1aa190",
        "name": "Clear Cache",
        "item": [
          {
            "id": "77bbbac8-a31a-4d1f-ad01-c58d89d2dce0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "22a01ca4-67c5-4a3d-bdf4-5d446857b9fc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3548febc-b994-4805-aaa5-b4eb86ef1d96"
                }
              }
            ]
          },
          {
            "id": "b2798631-78df-4182-8707-61ace018f958",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "75be321d-9339-49b6-863f-a0acc45d5cda",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4b0c2b19-2c01-48e2-8176-4fd4113d6473"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5211447c-f190-4480-91a6-b3589715ac30",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5505640f-1e2f-4f37-b599-b57803eae402",
            "name": "Positive Testing",
            "item": [
              {
                "id": "089d7bb0-da2a-4d4d-a857-8e6f43821359",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48aade95-f8db-48b8-aa0d-0257049b817b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ebbe21bb-3270-4fb1-a1e2-e63859a09286"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cc109f4c-42a5-45e2-81db-689e03a95ef5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6baabf36-419c-4c82-97a1-461aec36e9f6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ca5b0385-f8bd-4b30-8514-a830510170a7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff46ae29-70f9-4ea1-aef3-9948c34a7fb6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da428086-b3e7-4683-8407-a9d34e5d5ff5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f0203bdc-c3ef-4744-a437-8e3325383371"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82373a01-9095-4772-9f3c-d6822cf4982b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09fa7699-278f-4b3a-869c-8a4e7f22b9d7"
            }
          }
        ]
      },
      {
        "id": "44b2c854-3f40-47d7-86e8-11903a05bb73",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ca182df1-c842-4a1f-b555-96e100f0c630",
            "name": "Negative Testing",
            "item": [
              {
                "id": "092c0ab5-df4d-4afe-9cb1-3f096aa41121",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9849f929-39a0-4cbc-9cac-bbecae045a06",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaabae2-74ad-4eae-a3d6-42312314d794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b420ffb-2052-4bec-81ac-9c7c5e6858f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4874f913-c350-4d4b-b617-6103a769d4a6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f60ae3-c054-4cb1-9318-bbc20767c0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c6d1183-6db3-4090-a91d-e9230266345f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf867d17-330a-4820-9c26-d9973645d747",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b34355-bab4-4a31-828e-96c6d1667420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db29f336-4684-4490-babf-73cfed086e15"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ddf77ac1-e264-43a9-8545-14bb6bca6322",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3edae9a-89dd-43e2-9935-8acd1158e51f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507f4981-e79c-49d6-8e1b-b44144773274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "398abcbc-c8a4-4ec6-8c25-e5e88f83fc79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113fb864-c2c8-4b2a-b07f-2e7bd56e0395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8c4b9d-1eb8-4577-b246-368e28dc1a9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "78978348-c6ed-4ace-bc51-c8bcf17f99d5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5d44e946-a570-47a6-8db8-5d7d5d2c3dfb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d6a1e94-80f2-4520-b83e-0e42dcc9946d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "814be4fd-8a4a-43c5-ad9d-7563fba72d04"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "456c1f93-86da-4080-889b-aa6967ce373d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "340a8f8e-4dfe-4186-8779-d4989f142f61"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d149f0b6-252c-4b63-94ad-72a0d5af19ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4405788-73fa-4a91-bd29-20336bac1dea"
            }
          }
        ]
      },
      {
        "id": "59a56c3b-03fd-48ca-9f1d-84f7b31ec728",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b8dec07e-6e19-4c7d-9817-b094f8fdafc4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60ccee28-9040-4484-8cac-6f1c5de93d0f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f61795ef-4e1c-453e-b92f-a6429ae2b7d6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1f465c-13b5-4a33-8658-e3fdf655be73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee9f4c4-fcbf-4af5-b466-5f976015387e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34252e0c-25ea-4d32-a8d9-e18cf34a6027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45395aab-81f4-4373-8ffc-97188d6f5e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4258fa8b-cdea-49aa-ad33-5048838eb509",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924bfd50-32b3-4b14-8264-c49d1b9834b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2044e9-3b23-44fc-a384-6485b038aecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5d4e2a-7a94-4901-b6ed-a25302a7eb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "481feed7-a408-4502-b797-86a4d8f1a72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08589224-f595-490b-8bed-9851bb15b851",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2beb10f-19a2-4891-abba-e7b4143183aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e6494d-4daf-4f7c-af21-8f36976ef6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8129015b-1c62-47e9-aa77-7f2827b19253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b259f199-cb9b-4eb9-9df1-35ceecc51a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a43a57-7bb7-4e46-a129-321e579586cd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b99c53-a00c-4e34-82b7-23777c6d53bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dcf550a-0a2c-4735-9c0b-5bbdb27127a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cfc189-f3f3-468c-9683-21540d692f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c9186d0-ded5-47c5-a174-2be968005e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9564487a-60a3-4a86-8540-dac9d4c6dba8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4f39e4-5c44-4f7b-bc23-826f59a925d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fae12f6-c42e-4285-9e0b-07430f621b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4986d47c-ed9f-4974-aa10-bf35bed6431a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01f72d11-42ce-4e3a-a04c-434a3dfd73dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c596e691-af96-416e-82c7-2f76bcb7c377",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5df0a92-cf57-4955-a5df-7625933d4b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c58de6e-d0b7-4e93-9d66-4e1d90354d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91440cf4-7572-46db-a8bb-bbf2a38efe61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7059e5de-1f02-4b06-a001-4d3b23e645a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fede70-eb1e-4b0c-b29b-b1447d50ad3e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f9dc57-5cbc-4342-99c8-2c65f4f732f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d486efd-c5af-4759-9ea1-3771f8c1a5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9046a0ed-f532-4365-ab5b-973b36bd3681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdd8b52b-40d6-48be-abc7-fe666d70c93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d8652e-04fa-4e29-9934-9366d9d1e787",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1e4121-7d53-4658-990a-be79043fdd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f59dcae-52aa-41f0-93b6-4bf1e9647d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3de3285-eec9-44c4-80c2-b48699c6fda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69b557ab-1a7b-4a81-a230-a947e3340d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfbecb3-d423-4657-9af1-2951df268caf",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb053d76-35ee-4009-97a9-35ab113f4290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47461808-2703-4c6b-a0bd-cbcf68d02a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb77c94e-1601-4a89-b967-1c12a39aeb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45ee35a1-881d-4b9c-a7b4-278ada3e2964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1e3af5-9ea7-43e4-bb10-aa11070498ad",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fd3651-2f61-42a8-996d-d7d6fe5e56ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc77e8b-8205-45e1-9429-526ca72dbb27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c4bb18-2677-4273-9edc-eff83b7f8f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "922bd9f6-5093-46f2-b170-5bdbff913e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9ed20c-9815-4db9-92f1-2aa205fd9cd1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a19ecb-8ff4-459d-bb23-90d4cb32b5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a7735f-b148-4621-a34b-e4a3dadb2c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377e189d-29d5-486f-b51f-a509bea26009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8facd991-e382-4724-82b4-bf5a56038cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9333ddb1-84e3-4d5f-8980-592c04ad2279",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6092419-d71b-4f15-9c36-ed7aed8dbcc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de021d2-8676-4149-afdd-60628ee31ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b0dc53-314b-4331-80b7-24a5a3486b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "175cfec8-e7cd-4fce-a4d5-fc856148cb2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb65ba5f-314f-4674-a45b-67ba2088da73",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbc4664-593c-4c14-aaf5-6636dbc53b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "342b1b6d-a1cb-4328-91f2-e240fc9ee7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12025f20-17d5-408a-bb60-636cb5aaf132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e667b31-d2e8-4d34-ad45-216058ac4b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b085c4-9b8f-47b3-91e8-3477051da5a7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d541b0-0903-4b37-81be-4ddf9ff3cbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e7ded08-9533-4031-8fc1-769a108c5a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b418391-1cd7-4d96-ba26-ff94322f0578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "748d2a9f-3427-425d-950c-377c2349851e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74f8da7-9ab8-4e48-b80a-5534c1dfb430",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5553f64f-9a37-4bcb-8596-9031ce8c3a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c6fbb5-45e5-4580-9181-66cd88336980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095cf9ab-b50d-41f1-b5e4-ea45ff52500a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42831049-5194-44c4-9eb2-d68f20bf587d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf31aa2-2a70-43f4-bbcf-f0e5762c459d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9ad79f-7a45-48c9-ad67-7e9ed992e0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75fdb558-7efe-4292-b9f8-5200b8964c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5d4cd6-126e-4fec-aac2-3a80abe8569e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8bb86c1-ab63-4fd9-892c-ea5390bdc2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e4441c-4ba8-46df-93b7-f89cc8c87511",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3d9cd7-04b0-455a-a35c-0c906c75cc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3d066cb-6982-4817-9cde-de01853459b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918fab61-a1dc-43eb-b878-814bc6c6c94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c276b7bb-5ff2-4249-ad7a-53307aeb6ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b430f2-2405-4786-a20a-6ecbfb33f3b8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12643017-5401-4d0e-a4fb-a4c56583bf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e510a74b-1d4c-4046-8305-855428a961ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f1db2c-62b1-4677-942b-d83c051f64f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c489c612-5b1f-47ac-a893-fab3b8754978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df75edca-f292-4bc3-bb22-c12b2310f9e2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dea1997-fb51-403d-83fd-f91eae7be19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8018097f-c45d-4f0d-b567-34fbb8e8f3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6e2bf4-661c-48f0-878b-98827ec22a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cea48b43-5a8a-4c15-af3d-d1e6e964b8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bfbde4-f638-4928-8039-9877de0f5b6d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a880d9-40e7-4951-838c-6c874b6790b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95daf754-227c-4146-b48c-9d92b850fa83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e53093-cdf0-4d70-b032-a4cbcfeda909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ed8c8d-a3b5-4fbc-ba93-f5d12738010e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6688f869-330e-4d46-b753-1be6a5016999",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0278cb1-7080-4470-b744-758a8cdeebf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b28fbc-8b76-4726-b8f0-b4cc2529b280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0256c38e-020f-44a1-a2b6-d73457fb4273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89bea1a3-9d14-47ef-8a43-f8dfe060894a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cce811-1d46-42b1-9313-f99bc854ad6d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70afcd4-eb11-4e3a-bf31-baa1f064138b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc975f2-bdaf-4a87-8ffd-68469b87b5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b8d7fb-9f81-45d0-8651-4b7053089bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "febc6346-1bb6-4651-bb43-147f2e3a426d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de1b29c-947c-46e5-b18e-451c476a16d9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf26e97-a692-42f8-9bc6-ac9b9835d0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc28e737-9d14-4cfc-a5ce-4f9bef99b4b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4546b8a-2382-4cb8-874e-2882ad5e9449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59b83661-791b-4a0c-ba33-8854cd868b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f1028d-52aa-4e8a-8267-bf6266a68d61",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0ff037-cac0-4e79-ba26-7dd7847521bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7046f012-6ae0-4c89-9d20-f100f56e8d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da27ee62-5442-4f7d-ac2d-812dccbe2f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6f0ac0-7ead-498e-ada3-0714e00f1e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6c3ef9-148c-4d4f-9a63-c7cf2bcece3d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369c74d5-bbf8-4227-8638-6560895d8395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44214b0d-78dc-4a31-83cf-1d9d5b37153a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af6fbd6-2607-480c-b488-7786c8f9fa2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8135c2c5-a96f-4dbe-99c8-4540df77859b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f44d5e-ce94-42e6-843c-bde54c53c741",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b79a06-b4f3-4a85-92f4-9660ac8955b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b64504-a81c-4334-a5f4-35335c19cac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8f8c0c-a49d-40ae-bea1-33d4d1d75563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b256126-faf8-4775-8e02-fc6f4cd0447c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de58b411-3479-4994-82b4-fb08e02fe338",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dff2f55-e05c-4b9d-b47c-9706edca267f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bae81b0-ef4c-4894-a79e-35be010e90d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48735b22-e8b9-4beb-b856-eb11e606966f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9122ff1c-a54f-4cf7-a861-96db4b39b8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efefc61b-ffaf-437a-8fb6-f27efc72b648",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d823c8-076f-4d69-8c90-67159c07fe5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b519aedb-3860-479b-9f0a-b800128f32d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392f2f5c-28bc-412d-8769-fcd4cd8edbec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "244d6504-0456-4c9b-81d7-6582c6158d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad6e5df-50d4-4e52-882c-982d1987661f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b650b76-b0e1-4750-8720-b35080ac4540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c620ac3b-9e52-4fae-8243-ff7997ac8e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593eb4ce-ca09-4df2-ba45-11c1ce175e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdaedc7c-ac03-40f5-bbce-a7a1102b01bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8ec149-4ac7-45fa-b6bc-2e548c64f004",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "741fc5a0-0a33-4fb7-b97b-65da06e43326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8cf29c-ca21-40cf-a9d4-4409596d2f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9704aa2-6b08-4322-9c8e-abf75ff5b4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaddcc06-9890-43e0-b3ed-2e1c1245cfee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b64ee32-708a-44c7-a10c-4364907c06ad",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3003e8-a823-44b8-a070-4654435d3350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35826003-9b8a-4220-8853-3aae14c5b51e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f718a0-e6b3-4abc-8ec2-668b5a62fb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1f827d-4752-4ee4-9489-cb391d4b75dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77729b26-75dc-4ca8-b539-b55fe5d5def8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159acdd7-7bd6-4c3d-aefb-e557117f743f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781c9a6b-1e48-4d36-84c1-64ed10c11268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9acbb3-4c58-4b2f-9d67-99c8030acac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "767a9d1c-e695-48a6-a245-2b2a02d9b8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475caa5a-3a5f-4e25-8549-4f5d2d811312",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edd5286-e61a-4f8c-9999-e36e04f422cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfdba275-06d6-476c-bc4d-a9a53388688e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01c5faa-9eb3-4533-a17f-1cb115e7a8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a15b4bc-ad7b-4397-a205-e696165f597a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62af3edc-64a7-4c2e-9b37-0e47c1e11868",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db1cc21-b447-46b5-a835-c701de054817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce29338-6edd-4571-9d9d-176900adb6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1279cb-1e1e-41bd-8875-d7cb1839587a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a7734e3-46a1-4443-a03a-9e2f07bb35bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495b7f1e-2ad6-46c9-907e-e7ce35e1cbe2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7da88e-3016-442a-bfc5-2cab7ff1b2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eefdd868-568b-434f-b5e8-07383e886083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e749cc79-e36a-47cd-9639-e93232e585b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6f5d9d-2888-4741-be95-dc97aa8f73bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290c3569-78cd-4ca3-9e7f-5c952ad504fe",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c479cd-d1bc-4d14-906c-8d23339111ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60e30bf1-dfa3-4e13-a321-57bf35425efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0125425d-bc6f-4e9f-8613-6899d79d051f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26bb36e7-264f-43f2-8049-8fdc76d78072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cb91fb-fe04-41b9-8d88-326b77375f83",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cec8121-1839-4e8b-8e89-335e6386d754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab5b673e-b70e-48d9-8024-0870a7ba506b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b814d3fd-5355-4a90-aef2-57fcdd000d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8363819-83b0-4da4-99c5-5b53999cb008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f702c29-698a-46af-9d3a-8618a55f7549",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527b0c88-b56d-47d7-8164-7df6f85da2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5635c31-400d-4005-8a5f-9763222fca78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8c9f45-487b-4058-bb30-b6e69073c498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a92f8b-b62e-4c2a-ab98-306b1bbc8211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a0ce98-af12-4b12-abbc-83706678f462",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "057a0f33-e789-4999-8cf3-24f968029d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c302394-87c6-4133-bbec-b2bcd2a772a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522354ff-54b5-487a-bf84-d80f0755f566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2cda5f-be3e-4d1a-9c82-d048c2c60039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3a21f6-ce3c-483a-b0dd-642b2ee27d8a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139961aa-08fa-42b6-abf5-9005efe5a058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f90d1db-6a39-434e-bfa0-87127b836d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fb0ccc-f19d-452e-9f63-a67e92013ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "955daabf-2a85-4f42-9eec-6a7351bce8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d1a2c0-10b1-4358-9318-25134ac24b65",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb33f55-f381-4e81-a9cf-a94738e2aac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff9928c-65aa-4e67-ac31-569bbc94ad22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bb1acd-4bcb-4394-8e87-1e1e98384220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c73b718-e3ca-495f-977b-495d1afc0931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70dc0a9-61b7-4d00-9c17-e71b9b49ede1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42c43c7-2512-46fe-97be-9e23e44f8d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6834f625-687f-4089-9628-57f02f1945a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b665bc-4146-40f8-a863-3b667acdf955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "28d30c17-a858-4eb4-b1af-b42cbb448388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafbddf2-47bb-4693-adfa-cd4a0e745092",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c6a904-5358-4013-b24c-5ab9578b0a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e55291e-c727-45f8-9b08-9e77d6adc4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c428e7-8ebc-4c90-ab30-a993b21ef75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4600df30-9f1f-44de-8096-f4d40c63904d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ec149f-bea1-48a3-8a85-cde89d0155c7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bad43f7-a94f-40e2-af33-d8f5fc3a45a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c041a68-a3cb-460a-a7de-fac1a2967089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c502c40-0bdd-4627-b6b2-a18e467a34bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f7569a-f5b5-45c1-b3f2-e848a60cd64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56967ec1-7cea-4981-abe9-8a1582b34158",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c7476f-4875-4853-9cb0-691a4d017f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecbfca6-97eb-4699-9076-4088fe905d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53052b1d-543d-4b28-a146-64ae74a74fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f43e427a-278e-4eeb-8add-af179b4456e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa1d0d4-2649-4955-b594-96dbef3f2d7d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3036a0d4-52ae-4c8b-8265-54434fb11de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1bbb36-ab7c-4a3d-9151-5e649cc166a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dd7949-8fba-457c-8a1d-6ecb7259d796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e94e82-d91d-4c9f-9a0a-4093e0aafade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612c7031-2f5a-4a35-b4bc-fcf41ed38cd9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db96df7e-09fb-455d-8521-05d49e64c457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4ac157-d86e-41b7-810b-9e6238411e5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c13c94c-936b-4633-9a15-9c9a4006c039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d224daa1-d725-49ea-b074-3cbce2f95933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c0728c-60de-4c80-8f64-d7b2c908db04",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fba2022-bdba-484e-ad65-414cf4de855d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06bd64b1-fbb3-4899-ab8f-f709b7e4448c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c34e126-5d6e-41a1-acb5-27fecdcd84dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19eef8ce-7dc1-4766-b9c7-d00d05b4663d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49938fa9-509d-4008-9b63-8a904bec1e37",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44332620-5398-47e8-98f8-fce7e5a7ac18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d64d5ca-b6f7-44c5-8cb5-1ca944c05183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3f3b80-5449-4cfc-a73b-6ae4400a3af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "559567e3-b60e-41e6-9dcb-3c6c71fe3158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1aa349-43ce-4da6-8fc7-cf11b4d6977b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337bb09a-30fc-43c3-8ddf-39295f22c7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99353ac0-c2e2-425f-a265-0e98974cbdfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81ad4a4-b65b-47e6-a18a-b172a4186bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce679971-6093-4438-b9ac-ad4964631d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2354ed2d-7150-4531-8d48-1c6c84f5dd6b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc56fe5e-adc1-4b3e-9d5c-37d20b4c47bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284363ac-1c1c-4d99-ad91-41a9f4ddeee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416b492d-3afd-41f7-a66e-30956147fc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f33c41d-7b86-4aef-92f6-cba5f215e0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ba33f3-5fa4-47fd-af81-b930295343da",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6c7260-8dec-422a-93b2-61b27f6bf068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70fc840e-a00d-423c-b04f-610c0ae81d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f647434a-98c4-4cab-869f-e74d7df5a758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "43712a97-3091-4c36-bc9e-9a6f00da6ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a50d7e4-7354-4162-b640-22e2af413203",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42e6b85-1fb0-454d-9e1b-0aafbc0fd5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0f430d-ec47-444c-bd72-46440f2b0a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5879d9de-4c53-4ca3-9e23-ea876e3cc35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a44d935f-3bc9-44db-9bd0-af3d03d15972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b6392f-fda9-4c32-8826-1fcd61032336",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8295f28b-7339-4f5c-b12e-dc9dc4fa2964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7236819a-aa27-4528-8632-20ef0c6399ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570644b6-502f-48dd-aab1-8c804cc1e0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2df0462e-a467-481e-9c0c-ab32d7b0062b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db98111-d9b5-4e7c-9fbf-d24e966c3424",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064ed3fa-db42-487e-a9fb-c89e783ff516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3211902e-ca14-4ed6-9706-0380b1961355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8874d4f4-c461-49d6-9157-d429fe665954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74cc348f-5f31-4704-a6db-abbe30c66d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76dcf165-6dea-43ca-9612-5c97ddd041b8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b543b8-340b-4b0e-8ba9-62853bc95417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d93d942-5b50-4946-8f09-97cd9646d903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddfeb06-9405-40fa-a950-9f0489d79747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "203cc7ca-1865-4d68-9c10-688cd5319e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d452fd-9ce7-48b9-abf6-260e4ce125d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b99aa83-d82d-4f7d-913b-0911c8ce4ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad407e5-e8c5-42f3-8f4b-f9ac390b2cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250c5613-f2b5-45c5-9e1c-d03a0e4cf0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "55d02792-63f8-4a19-9a80-38a7c874ee6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032b640a-58b0-4505-b5a8-bbd353f904db",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012e2ca0-6532-4731-983e-859e43e099c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6fcb07-9fa2-4e88-a7c9-e4921103e993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5ef726-fcc3-4dba-9767-f599f5ade7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7288f0d2-9a41-4580-816e-439b9a277786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1414d76c-135e-4880-9fdc-fd84e01bd887",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a65c844-a50d-41d7-b4c8-3ff28ffeac11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be406803-5892-4cc3-9789-17eee71d30ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4335051d-5562-4396-87a6-d3736113d4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d83fffd-545e-4132-8d03-43fd7039848e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c1673c-daa9-4ab8-bd8a-28b8232b6446",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c566a5-9f07-468c-b8a1-5695b47970c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e2501b-2d03-430b-84a8-9bd4f959d568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27da7e38-146d-40d4-a0cd-042bfede0db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "36f6c23d-a9c5-4da0-9bc8-2a0b8a088868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f591fa-dee3-4979-904d-040370b2f29c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7e505d-43bc-4a59-85be-aadfa3c96dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a41c8e1-39e8-410a-b185-7c625a586192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c545363-0e60-4bf5-a9ca-0126ce030e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbb2b68-dddd-4e17-bfd3-583470d7751f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded46052-d2b4-4d93-ac51-5cf083f49827",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74b21ac-f752-4157-8696-b00cb3087cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc5a7093-6a35-4cb6-9e27-053ee86310a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f224c336-fe97-49aa-9c9d-5ac60fcc948b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "11e3b531-2bf2-41ed-8d59-7dbb4f6d3980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56174f55-d073-47a2-ab12-72854cc7d1a7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d63cb0-5ca3-44e8-8a78-5e1daa46f023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7eaf1a-b199-4535-9110-a8b9738d3d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faea6ba1-313e-44ff-8fee-ecc57e2520aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb33110d-937a-429a-a2f4-4e5487197e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13685337-0cd2-41ff-863e-abcfd76ce447",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352b5212-6d3f-451d-b996-062baa32d74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68be2a2-5cca-4487-ac3b-5a8c113f17fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386bce5d-70c0-41b5-8914-ed98aa49ad32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bad030e-8f09-4f5f-911a-b0a11a4557dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61025fc-86db-4d57-b3b6-130803a21d89",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e5e137-18e6-48df-b7e7-e0c1ce7aea9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9e7782-97ce-4ec9-bbf8-295148b9035f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5227b47-39c4-4ff0-9118-06f5d44f855b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "753e9cdd-4132-482d-a842-4b8c6b018361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde59a99-d977-4f51-9118-1aaaf02abb8f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c253aab-96b4-4e34-b456-bfbcc224d1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b8c96b-739e-43ec-9984-4bf5f6e97abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3ff158-9471-4345-859f-aa1c24f93c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c4371e-b854-4e20-a658-754a3230d57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7aee883-a31d-40a3-882a-d0c44ff30552",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c627df5-eded-4f14-ac23-cc06eca7bf88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdbbeb0c-d8c8-4f80-888c-7d00a243286e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d619e721-3242-4c34-80d4-417150fd563a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe42a3bc-8551-4ef8-9bbb-107b4db7c38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d99e319-b3c8-4628-8403-8797cd141b7b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69311eed-7233-4792-b3ad-3db681bb2cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203fe2ae-3671-416f-b6fd-1adf3a3a7f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5108ed-0785-43d5-ac2d-9021c3c6e059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "82051d94-b5c0-485e-9c31-c3080aa363b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afe2cf7-1a5a-4699-8f15-9435f8481445",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e460615e-90da-4287-901e-ab8a11341930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48e6371-be00-49ef-901e-b376ce947b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c899d140-0645-4ef7-b004-951b4b5d117b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e99bff3e-3a40-4c21-b8ad-632d9884bb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072589b4-c027-4b0f-bff9-fe27796a8022",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c724295-4ee3-4dd1-ad2b-66effb7b74c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260b2f07-484e-41b7-9940-7dcc3c0e53be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48e3e88-f584-4118-8ef2-482b0662d4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28c0861f-0f07-4566-aa7e-fc7506a739ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2185ea4e-ba28-455f-8611-b0a5a72341c2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd81b049-d289-43cb-8b6a-8b8ee4f96d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f216df60-b8fe-4778-bce0-f8f9f1012f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879ff428-e9c5-4262-aca4-c9608378a865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f911607-c48e-4f85-a194-e2c6f249364e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d27788e-d0eb-4a7e-9f0f-000eac8a4023",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c65c2b-387b-47dd-bf49-970ea9cdfa95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b6d5f3-0461-47fc-b495-26f9ab365ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dd2cc0-d0cc-4e8b-833e-658b4831f8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01e9fd99-729e-4884-98f0-132f4d26550a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9a4832-a3da-4dd6-929e-1105c3b0216a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d03115e-21ef-423d-b760-61d5d2a29a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a382be53-b33d-4102-8b9d-9ceac292289f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8203e3-e30a-4112-b6be-d8c362da5886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca35b900-dae1-4b66-a6a8-fcbc19319cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c91ae6-6d8a-42d9-b57b-2ca1ef3135e5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f04e03-0a8a-41ff-80f0-d8d52b82afef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "860ec4dc-bf4b-4ed6-ad11-ea85e9051cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b7c672-8512-4c18-83ac-63bc6af57e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bad4d4ad-92fc-4cef-9b01-3909f6f4bfbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811d94ce-8c7e-4d6d-b503-b05926835a56",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0bacb5-02d6-4554-9eb7-6b22ef2f313c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6e7861-6c33-4be2-8588-d763662b7dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d7f8b4-b914-409b-bdf0-3cb205c34805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5435eca2-05d4-4919-83ce-0ca9d8f79488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3645109a-64f0-4adf-a66f-bf102599302c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf3b38d-49da-4dbe-86a5-1fcdf91f7961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a7e753-4a68-49ff-bfc8-6b9557cba9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f2590c-21a8-42f5-8a1e-a08b7a6903f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2412cbde-9480-405c-aa53-8a5958c23670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f935b6d-799b-40d3-85c3-402a2fec0cfc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c2e4bd-110a-45d1-b9eb-41b628047db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9e2e3a-1f82-4f0f-9b28-1615130626eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4f050f-6823-4ffd-a35c-c4c740412ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff16c1b7-8889-49e3-afe6-7a5a39bc690e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299a4a46-b829-451b-9f95-d5b37a061516",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fb8aa4-53bc-4770-a213-d5cba03f62bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4ded75-b943-4558-869f-de296c9941e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90633b65-644d-4a16-bdb9-3f660b1b9272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb3693a-3000-4157-b331-7e1818c3ee3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d95c653-4385-449f-b643-2a0d61bf48e3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e349165-9e30-46cc-9c9b-d953ceaea226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9ac628-36e5-412b-8891-c77cedc02fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb4a067-c4d6-4721-b825-5758b5fce3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f064f48d-bc80-470e-9b16-a033ed862f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d47dac0-c088-49b8-8d1c-f9e12c240170",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630fe7d0-28a0-4279-a7ee-38a46f9f0194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f980720-1f9a-46c6-ae81-ac19951613f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19d3666-b97f-4041-91fd-619058729a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eab28206-7fa3-4445-8360-2dda33174691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7d7270-3596-4ec1-8765-5642bdb48b03",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e65f209-1fbc-4dbb-8158-b92f5dbfc029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f016ac63-1ff5-4b8f-87e6-62f1f86aa999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4069fd-f256-4fb7-a695-553163315967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "02d182b7-987e-46e5-b889-6d72c82e9a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f03a9a-1df9-4869-a315-508bf70b6382",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2e8d4f-5c08-4f9f-a3dd-f3aecae1ef2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e405efe-e041-42d2-814e-1cebd795ccf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386535a4-e6f3-4688-9e1c-0a1361c24b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5d8bf9-6fca-4da9-b3cc-8974edb329ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273f39d0-aa7a-4815-a435-45f1757b9293",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa87f4d-07cd-48e1-98bb-57a655eb8d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66ed8f81-1336-4d38-9df2-d84e656688f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00421c4b-d9e1-41b8-b057-4e444095f1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dedca36a-8e63-4c42-8bc3-b9dd556c3027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace542b6-c5c2-4ee1-9e98-a46cf6101787",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c12709-0994-4e23-a1cb-cc06b4168475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3656e7-f8a0-473b-914d-4b49208a6d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4105f5-73db-4f92-99bd-52868be8423c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "445325b6-6c6e-45dc-bcea-752608958400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eda4eb9-c019-4e5c-8edd-ccd9dab8c882",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b566fd8-b13e-4408-9172-ddc5a7bf9e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38353011-6a04-43bf-aee6-28e1c5c66349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81964f5-ebd6-4b98-90c2-09cedd9a2389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d89b5f5-76ff-498e-ae1d-29cd66b2b0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1ef71c-266f-49f0-8332-108a5e2a60cc",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9293cc-1672-4516-be3d-1a1ab628a1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3ee2d7-14a1-40a1-bf11-dcc376a94cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb65e313-c9f0-44c3-8f02-e410c43aad2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73ca5438-08f9-4100-8e86-3aec7ee629a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d90a908-1106-4ecb-8637-4a16d2ec9f46",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06737c56-cdf6-40bc-88df-94873fb806ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2681cb0f-94a1-487a-86ed-2632bbc23435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cb87dc-c89f-4b76-88b9-bc085de18aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3abdf50-e6c6-4481-9d49-8b00de08a3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a258002-68a1-4a10-8f62-43c55ed9b4ed",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d3a99b-4b50-4ad9-8ee2-ea272a0135a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70764c5d-2ff9-40b0-9d0a-f8916ad90670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5cba2d-f7e1-4efc-a726-6afc25d36ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "14cc1f71-03a8-4914-8e9b-d8b8a630a674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15216ced-85b3-48e7-af88-9fd9ca0edd9c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8bfcee-a0cc-4aab-a68b-c82c981d5728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d8e91f-031c-4126-b3a3-fab003d610ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce27b3e5-a724-40e9-88cf-faff7048891a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "008174a5-ab04-449c-b85f-365599eed09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4dd21aa-dc57-4c0c-a3c3-10fe0646ffa3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea6d774-bcf1-42c0-9152-419720d8c176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9da39c5-a8c5-4a27-a0fb-7ac542a57133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8700cea2-a2dd-4cea-9bde-ec90b97fb8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "45f45ac0-784f-4c91-a058-ea395883e66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7c5528-a3c0-4c43-aa4a-e466f49e6b68",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e032ceee-6e3f-4125-864e-37037c63dfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b730d9a4-d101-4011-b328-4b35d4ecef6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f301fd-0781-4012-b43e-77105b5a218f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "45c90ad4-3acd-4739-9419-5ae81e633d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e6b48e-6aaf-496e-97b5-4f052b4a92ad",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503c2654-03ec-40c5-8a72-39214e265490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1a22090e-abd1-4b2e-93be-78bb20226e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35dbbec5-44c4-47ba-9f61-6011f0141924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8aaf4aa-46e9-4ba3-917e-333050ac488e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0bed34a8-66f6-4662-8442-44690f82c8a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "58a73c45-fe19-496b-98e7-ddc2c93fb22c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e234523a-527c-4ce3-a3d3-e45548483c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "761d6442-79c8-4194-ba62-2a45904be06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbf7fba-363b-4888-8edd-9c921a334e46",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0a7ac87-e8b7-4b29-b4fc-1a49c89e48ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2248e12c-3e9c-4c23-acf9-883eb2799fae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bae91c5a-a80d-43d6-acaf-feef88892127"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca7f01ac-cfc9-40ec-a3b5-497197a36857",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a68c585-3a90-447e-807a-dc8aaf487bf1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec4c2c93-7a6d-45e0-8850-6b948c001919",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6cbb1ad-8246-4311-ade6-aa01c7fcf382"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8a3ed116-05e7-41f3-baf5-da01f6e74357",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c577cdca-2ed1-41ab-83aa-240e291e67b7"
                }
              }
            ]
          },
          {
            "id": "d298bee2-c307-4eef-8dc7-7943fd784f86",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f630ff7-5cba-4fd0-8bdb-133443cd2edc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6608e033-4e90-44da-99e8-71b83fa85f8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6262a564-6b60-4417-b740-96d7683c4fd2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bae2271-b698-4fec-b0d1-6db48d47253b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "32fd3511-87c2-4e2d-bc7e-34ff33e128d8"
                    }
                  }
                ]
              },
              {
                "id": "c3bdbc91-d3d3-4bce-a625-6b7a6e71990f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bebb132-89d6-49f4-bd29-f896b6a64279",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7ba001f-7f1c-4a13-a457-b0151bf83a37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85fb44f4-57aa-42b2-b9b3-0d8efaea7b7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "778889d9-7fe9-4e32-b531-330d89776fee"
                    }
                  }
                ]
              },
              {
                "id": "688e28ab-d388-4e0b-84ac-39aac8adc7e8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68cb2dfd-8a53-4fd7-a21f-d2b69462a9a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4a61e1c-dbde-463c-87f7-c259b1b7b982"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3435daab-880f-4677-a1de-b4d13f9044d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ef394e94-1f77-490a-8829-74085d5633d9"
                    }
                  }
                ]
              },
              {
                "id": "9cccfa0f-0a6a-4eb2-a2d1-c99cb1b813d5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "510dbc86-6666-4fca-b848-82eb3010d76b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d897b8b3-cefa-4921-9cb2-b6ceb8a979c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2a4051c-d8a4-4e83-b8f0-79880a3f9e61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dc9aae99-8866-4dfb-baf1-323fa4a485bb"
                    }
                  }
                ]
              },
              {
                "id": "bb7ecdd5-5dab-46cb-b9eb-0f98a73bbdcb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "386e58ef-d927-4f1b-b7e6-013af494246d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "55bd2a60-9587-4bb2-b7db-ce6ebf1fea3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f37f878-8a3a-4da1-8bc9-487b01f6e268",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2c643fb2-e4fc-41e6-8974-97a970224103"
                    }
                  }
                ]
              },
              {
                "id": "4d2ba53e-5dd0-4c65-9e7a-d9c8d93e9bf4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82c55727-7bb0-4f81-8633-ad51850a3a29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78be9a7a-53b2-4041-b208-e271882e4a5e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6be0b77-4e6d-4074-91fc-577defd88559",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fc77c303-4b28-4c17-b86f-03e298781a3c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13e13ee2-d250-4bcb-8048-bc761dae7d75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ebd8642-1597-406a-97ff-58af3a4a13ff"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "30fad9db-4b44-4988-8ac4-f457c574dd6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d1d58f9c-be6d-47d9-953d-e5d27c56b423"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d610217-78b2-47bd-9065-281685423a59",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "059bb65d-b666-45bb-a73d-491adfeced66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fefad18-de32-480a-8b2f-415476e8cca6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f59774a2-14d1-4713-91c6-bb249fe1d641"
            }
          }
        ]
      },
      {
        "id": "69a9ecba-ac7a-4ccf-91c7-f3b33464e393",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b73d195a-9424-4536-8bd0-c54988ba5c00",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4cbecf5-6d59-452c-aff3-b6d296971596",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fc2182bc-16e3-48ea-a73e-745424cfc5e9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6ec53e-cf6e-452a-ac42-7c53e0c53f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e17f4c-ef61-4363-a453-c5abd5f154cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33230b99-2039-4dcb-827b-9992a63dad13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a33b9f-954b-462b-b9dd-5864f8a6b755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3644dba-03b0-40e3-a0f9-0d10ac6bccb9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef58f96-2166-4932-8987-f686a6938565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc8cee7-10b0-4347-a486-30cc03130b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0eaf0d1-c509-4fae-a45b-75db58f8437a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6743bc7a-815a-4221-87c4-a6d8cde35dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17912f57-4e75-4bc7-8bf9-aa21164dfc57",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a79eae-963e-45eb-84e0-84e55763c5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d131cd70-08c8-43fd-b7dd-5fcece7a846a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7598b4-f4d1-4413-a63b-2121178f3aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c06149-3653-400f-92b8-6b81599bb5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b133525e-46c4-4a51-a0ef-464d3b3da5dd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eceb827-a19a-476d-a5d0-74dc0aa0e63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8336723e-6674-404d-b49a-e29855ba4d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db10d46-958a-4bf1-abbe-ac245e0e5c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f22fabec-ae02-4ab0-a016-c68b92585e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bd533a-32ff-440a-a7ef-e6e259bcb55f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d86988-3504-4593-89a1-459c63b95e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4742ac8-bdd7-480e-abb4-3148e47df3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df9e8f7-43df-4b19-990b-a4d0cec5c93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1355749b-fd03-4aa2-8365-d49f86d16137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b373f3af-f5e1-4470-bb54-cc7c3f869f9f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d213f76-028a-49d1-b8e0-417cf75d600d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe2db5b-ed9b-4b79-aacb-a34d5de90d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67ef938-5fd4-451e-9f42-3db9b1608f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "159439db-e00f-4b1c-8050-74d15382d53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ab047b-4f0d-4ed9-a45e-bcd82cd26a38",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b22807b-d57a-4ba8-a015-a5c44e6307f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ba7750-e4f1-48d8-9dad-bcc8d80e8a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0882863e-ac2f-4ee2-b23f-eb9ac65923a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4807200c-8600-430d-b4e5-9b8013908549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d741ac4-ba92-4927-aede-99258d51c443",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d53b2be-abe4-4886-8783-239f65049303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8cf23b2-6860-4167-8c60-9776f61e923e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be2cf4b-019d-4f06-97fa-f36724efc0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2ad13b-806c-4896-b459-6682aaaf3c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cdc62e-1aa2-4ea9-a486-ed4dc612edd8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ababa6b9-955a-4853-aea6-e56479f860d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71143eef-26ba-41af-98eb-4074cac7bd8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc65838-e0c7-4a72-8303-22e7db61ccc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb5956d-97df-443c-9810-c098522bb679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5aeedf-47c9-4cea-8537-4f1231ab3459",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928c18a5-1e48-4940-bdde-31312122814d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a804c8ca-4be9-46b8-bb61-0e6f3a73edab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20a81a0-7e94-4e4f-ab4f-3a94b5fe50b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb21827-d8d9-471c-802a-ab25aeb5cf40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3c50b7-0e59-4cde-822a-62fc5866bcba",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b02b8d4-4c4e-48ac-bbee-3dbb20ae70ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8748786b-cb9a-46b3-82ef-1fc299c33780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a404a4-50b0-41be-b321-8c3ecf6503ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "32bd2883-5353-4b0a-a37b-40e033b982ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5b9289-5dfa-454c-a038-7e9e905c7cde",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f93bd02-29a0-4e03-a782-91f51b6784ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010d3112-8d6f-4f48-b436-9fb97be5007a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbabf92e-ad5b-4913-9c52-090607b7ed7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb59ebea-bb11-40bd-be5f-83c26e9531a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf106d7-d5ad-4ce1-9394-ef5b9629767b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b55798-e694-4d68-b1b6-f7b6aaec3e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ab9c40-1147-4f76-846f-e3d88c76bc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f141dec-be43-4cdd-a5e5-52a022db8021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "46742218-e92a-441e-b685-4ce2cd45b408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32387b1e-d4a2-4f69-a013-d884ae34d222",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7e4b91-f98c-4bc2-9d3c-eff5eba20464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec836b5-0a2a-467e-9a96-41fc565de1e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdb7b74-e987-4f9c-9237-d261f8b1fc49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6af8b9a3-7805-4258-a20b-b49bfddfb6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1eec5f-18f2-4582-a5b4-f4feca7e7eb5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbde86b-f3ec-43a9-a049-80b60afc2b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b9694d-f2cd-4ea9-b396-4c3ba00f4ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a6f389-113c-4bfb-aae9-966fc24c1b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "12ded4e0-2994-4c52-9d8c-45a57a12b7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572ca51f-d846-4d94-b862-ef93d399a7af",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf74f3c-5b03-4547-b2d4-b2f9eb43af2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f5f4a5-290f-4944-88d1-68677634f595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837fcac4-eaf6-4845-a296-66c99d03738a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "07d882c7-b2b2-4cfb-8eb1-1b17f2a2b8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5713bd19-fba3-488b-b417-9968017c76d1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd2ce14-3aab-486b-9262-77771dd74c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d71aa3-6bad-4f0b-be30-45ed097606cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd71b47-0468-4c23-a833-9d4ff49b70b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "69c18091-700b-4737-8185-36fdbb267e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccbafa26-4127-4293-8ef2-1b5aeb6f3ec2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31832eac-e6f5-429b-8da8-8e0194b5ba22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7793a0-5768-4a03-b705-4e972d291e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3180c9ed-d592-4abf-b365-a07452e48472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a85eeb67-75e1-42a8-8e92-b0f21a53a150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9968174-69e8-412e-8c5d-01553c53442d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a558647-c34d-4c83-9233-3d6cadc0d4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ab4176-b4fd-417a-9fe5-9fd2c00564ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23632b5-2c8e-473c-9d0d-d9c8bb8adf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3cd46da-7004-46aa-814d-db5579292aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44307ed-53a1-4c8b-a272-dc010847de34",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0474f45f-37df-422a-a51d-37180c472b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "528b285d-331f-4185-8e14-b99a78a34ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69562188-020e-4486-b6d5-7213a6e1e46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f6af1a-20ac-4fcf-ac2f-d8d3c5402637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d532368d-5982-4832-992f-bd663b7d2c0e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d16aa12-84b4-47c5-be59-028d3f2c4bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f95bb34-162b-4a99-b8c0-b35fd14b82d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9471afbb-8686-44e0-bbb8-dd87fa3dcbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09afa444-4738-49b7-bd61-725779c582a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba233976-aa05-4dc0-8d9b-c626ba018816",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cc0d54-3256-45b4-a316-f48a422bdade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed084af-c4aa-4d68-8ed7-3d7fc620e884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de073f02-7b56-4488-a8c9-62fa4c0509a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "763fa340-d029-45ee-a9d4-30a71f5af286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f5ea0f-f71c-40f6-9a14-f314ad65572f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fd3440-e8de-4afd-a7c4-5d428961b3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7947feb-64b5-48bb-b52b-41ea68eafc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e682e3-87d8-4e4a-8daf-afa80477ed4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aef8ba49-ec45-4344-a8a9-abaccf44dd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7374f658-e364-4cbe-a347-d5d2d675639a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c84b5d-dbee-454a-916e-543851c421a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40169dd8-82b1-4b37-9845-515ede089c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d340aec3-3b9a-4b02-b46f-a163fdb6b341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e02561dd-85fc-4bc3-a068-870aebfd1c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7748a31f-3bf2-421d-b4e9-d8bcb6ee1f81",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c076050-75a9-4ff6-b5c6-f76272a24e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c04436a-bbaf-4ffc-9fd1-19b556253683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba39def-a488-482a-9be2-df31aed86c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b45497c-d327-470d-91d5-60ed57102c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f7dd5b-745b-4f4f-b69a-360e47c44bfb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbeea67-734c-490b-af12-ee41a7b05553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29492102-e747-44d0-af61-c77b5966dfe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a909a7a-2e8c-4296-a690-705c60ededf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd0cf6c-a351-4a18-b663-380a4c9e4423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee56848a-c98a-4c58-8496-f26f8cff174c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1772cae-64c2-4f1a-9915-d44835d6fbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4c495c-7ada-4dff-8323-a5a8dd745252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9696e57-f75c-4cf5-8a74-59903e63ce55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69101e78-6f13-4d02-85b0-c46477e67bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d767d48-3447-4b45-81f4-3f80adf0d6f5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f60be82-7f88-40da-92c8-9b8d15b20bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dbbe6e7-62e7-433b-9bc4-458d0c3f88ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a79b03-ab3e-43b0-862c-7707c66ca9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b47013ed-2d09-41d5-9080-2f0f01c6bc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0700930e-cad2-4051-8d9c-96060f367240",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0361955f-e2c1-4620-b5ee-b335db9525fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e287cf31-1c55-4fd9-b896-cce992e80279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d5635a-a00f-4297-abbc-1f151d9bd650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99523e9a-bba9-459b-934e-13737a075e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46dc108a-c140-4630-b879-907788ecdb28",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70948cb-304a-4fa4-8b2b-c36cc6db5bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a4a1d1-76bf-4cf1-aa8d-fa251472c29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ccfe23-d7d7-4eb9-8c46-a95f38e34c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "def39a02-202b-4aae-990e-b152b8992038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566a5693-8453-40d1-b858-c98351ab1e78",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae547607-5f00-400c-a769-467d8e0a9d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0cb9408-6fea-4ec6-908a-ce7a6128ac9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3713cf0-7180-42ae-9257-245bc28b11ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66b416c7-601f-41a3-a978-c15f240b118f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42599e1c-14de-4d63-98fd-d37d304d6fcd",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa41ab35-01e9-4760-8609-50fa6dd0cef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46aca61-3c40-4e1c-afc8-810de9d3b852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a3ce81-b2e3-4460-a2e8-89f011ba262f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "977b02a1-ce37-43a3-8304-95a2588ac7e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b234f9b0-64e1-4623-9772-d678553ba7b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "121ca634-cabd-4b4c-8171-34f2bcb3b5c1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6381a57-6de7-460a-ba86-f8a609d88725",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0e43326e-79f4-4a6a-bcf2-a00491738dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80915ae-6cd3-4c8f-9d7a-399c83b23d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dae1fd57-9889-4edd-9df6-095af0b90c37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "068b2078-f274-4d8b-aed7-762b7475d21b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9371c7a4-5de0-4540-85b8-2fbb594fc3ed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc4aba02-80db-439d-bd55-03d776c8e3ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8553c61f-79f6-4df6-915f-34b250cd9c5c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08816d4f-856d-415a-8955-6051585bb3f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8755b714-0420-4187-a9ec-b03310e7d85e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e98ec7ed-a002-4e9a-9d27-3c3d6c480299",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "730bc7be-ccb4-4651-9d5b-482e05779cae"
            }
          }
        ]
      },
      {
        "id": "3c2125ed-53c3-48bb-a590-68b01e1e11d5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c8e1fa8b-eaf1-4604-8fcd-6159634ebef4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "449810ed-0347-4bbf-bfc5-1782baf1ffee",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "10811011-c7f4-4948-8ce4-b292e3d6d9b2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0f0f23-89df-42a2-b0d0-5ad4db41efb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212d9551-bb12-4388-a7d5-45970279b7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615e846d-523e-4f13-bd01-84ce4871c95c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbb7f48-49e7-4066-9fef-290e7127b973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae72a6b-fd40-4797-bb9b-7a92d0178bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c20b91-b03c-46e1-a9e4-37624bb468fe",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b6bc18-d6bd-40f9-bf7a-17e2b0993a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705718aa-fd6f-4f1f-8bf7-71fdbe2c3c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115d8069-22c0-473d-8a98-c5621f2d70c6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab765c69-c14e-446b-bdf2-42f882a5c5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7820c1-03a1-4fc2-a111-5c82194e9b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e727736-0e6a-4aed-9aa3-4e8ff15da78a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e840bf-0a63-450d-a399-5d47bc32d9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e65ad7-26c7-450b-b7f1-43072daddae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afe0f13-6e8d-479e-a18b-8b485d669578",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730107b9-59ff-4cef-ad83-2796fdafcb5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b236aed5-2f47-42c8-8f4c-ec7ce1d77015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b607d2-70f9-4697-a741-7df2ed53258d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace655a8-9dba-4887-974b-b5ca3b7bf3f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a0fcc8-d815-4422-8231-e2b85f1287b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb64557-cc16-454c-b72a-4badbaf8fa75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2f4fe4d-0828-49f2-a350-4940941c3fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ab92cc-15a1-4c19-b7f6-4cd4b64a5cb6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f805d26-a5c3-41ac-a218-f4a6306d9e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "503b1252-eaab-4d8f-9280-94fdd5176c39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63511623-910c-475b-9550-856201213466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31cb7e93-476d-4570-b734-c4dcfe83e3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ad54e3-d687-44b9-a717-b10ee9c5e20d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cadb867-2a89-4ff1-ba19-fd716d8027c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b723d323-9233-4f0e-a86b-ecf34d4a8740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "472bf624-516e-499e-a01f-97bbf493f404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5477386-f41b-406b-972e-e2e68b6ba59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcecdbb5-0641-463b-9291-89dc5d8d8134",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f526d34e-7959-4736-83f6-b249111cf092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a2aa10c-5572-480b-8256-35a7777ff1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a781958-6099-4975-b8de-f6634e5481f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c2c4c4-9a00-4ab1-a976-65878b26a5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a76459b-3f12-40f6-93a0-3bad77c74028",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c59760-c43a-4352-a279-28fa9ad33fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bbf873-5fe0-42ed-8d12-e0cebc297686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be022060-63e7-46aa-b64c-18bbec119246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde7cfcc-6055-4595-87b6-d98efa8d3b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15d2c7a-e939-4c41-90a3-8bb140660e79",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056e4ce7-2689-4455-b300-a9add6fc2c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d438d3-4b9b-4ec8-a040-117546884f4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab76362-631f-46d7-b5a3-3bc5a113f1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2fd541-f19b-4988-ae25-91460e5c7892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3504f75-0ed9-4767-a311-ebb55321bebf",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94738fba-2edd-49aa-bc64-55d583d52afb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "335ddc5b-e936-4f0b-b151-18296293eec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "402cbf26-fa2b-49cc-a905-24981cbc0eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40fff3e-0a0a-4423-8c06-0e7941874f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8427f2b9-9f1c-4de5-9a85-7691b043daa7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcb973a-b5dd-45e5-a765-314414a59373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c75d020c-09a3-4d30-871d-d41739d29571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7988f95d-38d3-42da-a515-ce570edb59e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "695b6339-9368-4ca4-be44-15b4590671a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761b4aea-09da-4346-a0fd-81180e716afd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd5e827-cd2c-47b5-b6ef-efda4dc474f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2f71f4-1ab7-43d9-b786-e8419f42b2fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd5c017-1049-4ec5-b401-a2e493a79a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4973417-109d-4f25-911a-29d2d150ed9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dd76dd-67f9-41a5-ba84-4a150f331593",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c196010c-4875-4490-9602-9b3e215019c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "430fa363-416d-4fd8-a6f5-647db23e4611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e984d08-3852-4bfb-b75b-639f5b624e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42a4c9c-326a-4d68-bfc8-cd434240944c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8d11f6-6a44-4e45-a59c-5240bb308f91",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29484d0-abcd-4778-a6c4-3550ef2c5106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ed71d4-1eb9-4dce-be10-06d8b02af517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a3af49-edab-49e7-b534-e334b3253713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09aedc3-eb78-43e5-a0a9-fe2d9cce4dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d367e93a-13d4-4fa7-ad5d-bbccfbff23a9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a952787-581c-4238-85cb-6a975d82eae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e156c6-deff-47f4-9dc0-fce706b9a823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bb8906-0145-4d4d-a68d-a2bb458052b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1203b032-fd79-41d4-8455-20f5c34a0bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af515a5-cde6-45f8-84c8-7b95bcb599e5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95585e5b-5e73-442e-8b1a-0982d8273a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492c41ae-a220-40ca-8b21-b4907b4c5edb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "595119a8-bb04-4a64-aec9-d6cd8e22facf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c399cf4-b175-48ff-b4fc-70e5fedbb331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab32f39-31b2-40c0-a8f1-d90afcad7f7b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c36bc7-2cda-43c6-8fa8-b7b3a25a1dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "514d50b3-7d68-41af-8795-322c18ffd502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9731ba7-b4eb-4b76-9419-0058719e82e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b96d7ec4-4d9d-408a-9895-4e55a8aa5f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66c94ef-0704-4202-a006-53cbfad36a20",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e6ccc4-32a0-4a0c-9b5c-21b15de5826e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34295cfa-2b51-471d-9a65-de29530abb37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7527e11-dbb4-42db-be1b-e2097ff98f5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee7bb62a-42e7-446f-87a7-c66c24931e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb27e18-b7c7-4e55-bb04-27ffc9516460",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb88695e-8d83-4e3e-bc85-2681cfca9a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d9e671-648e-4d6b-b942-acec5a049434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e64098f-a761-4cb6-b1e4-b13c2d8d3eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d16656-f8c5-4bf4-9145-1d77d35f8d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5456cbe-2811-44e0-b1f0-3f9aa73d5bf0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5aae8a-dd13-4068-a222-e05f5637af77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939da36c-1775-4711-b4dd-b3772c53ff41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1c63fb-6b0c-4ce4-935a-d6097d328d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c038f267-134e-46ca-b6df-4a14d4923955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc53394-f7ca-49b6-81cf-9ec1d59d9cf9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7487f7f-054e-429f-9e4c-8c08bbc8e834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b117da0-fe19-4fd7-9752-3df708c010f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017839b0-e160-4156-8dfb-f51ca83e02d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "568707d5-afa5-4de2-967c-d8e850163eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbb4a55-efa9-45b0-a2fd-91b8fb50bea1",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fe58d2-9c0c-4cd3-8b8d-0b5dce1bccbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28af03e8-f91d-49b1-a948-266ccd0ef238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674f336a-35b8-42b2-8ddf-dcde1e836657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6ad19d-f930-4579-a56c-5dbb71d4de77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea052406-e231-476e-90ae-ccde10485dac",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a876a7-489d-44cc-a68f-9c8885460f18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a21f4ef7-07c5-4010-ad5e-e6e9833f07fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ed2937-ad60-4488-9fae-472c0877b79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1aee517-713a-4be7-89e1-8c13b65be7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb300b35-e370-4ce8-a529-d5815dd60d54",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed753b0-4340-407c-a4d0-a89d5a92fa14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e36e7f2f-f4ef-44e9-b48d-a7554b24de8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ea146e-ce20-4ee1-b41c-cc16d9ebad6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a69492-9afd-4292-bd67-051f1671504e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f18b01-891e-48be-a58d-7dd4aa64e308",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2c108c-3950-42fd-96b4-bd7501a8d71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38638e71-dc89-4942-9258-737bde9f9ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8abd66d-5e73-403b-8e0f-c9e5b6c5324f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f59299-cf0b-47d4-976e-3c8161ba108d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c825c93d-6a34-43f9-9d89-5444561c86e2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89329df-f664-4b5d-b7d6-aced71dec507",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5e155f1-3c7b-4947-82d9-b1d20567b2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73d306f-321f-47d0-9e00-393defc451d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00062de-cc05-4e02-b48f-663b23ed13c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a55989-d8fe-4a46-befa-a289aa8dccbb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68bc2daf-5257-4c69-94b4-de49f02d6dd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb454de8-46a7-4777-a928-3a7a7cb5c8a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0f37d2-c592-4112-8ef2-85d112f6eafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4df9c8-b1b7-4254-875d-c84beda0dd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d57652f-66ae-4486-80c3-1aad9361df4e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44f1853-8f49-4a86-a714-986a6e86c384",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ae767a-73fa-4a38-917d-ce487118c4ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8416b02b-dfe9-457e-bb00-7b1078e6f286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e87d7a75-3079-4e97-9264-1d4647a7b998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8947a0a3-16df-492a-9103-eb905025d90a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15baeab-4de8-4b06-92ff-84314538276d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0b5cdea-cb78-4050-9d94-f0bee53996c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d67515-6e7c-4fc3-b80c-f274ba19142c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee209c11-e54f-41c0-893d-bcfe624d6fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b1b21b-3d0c-4fb4-b609-87eb462a5901",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31aef71b-2cb7-49e6-876b-5fc36aa58cc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0426d9eb-c4c3-446c-8a4d-005d64381748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328e10a0-c722-4b13-b8e3-5fcf4ff48f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2600e3-2f71-4138-afe5-3a1a68a58ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b60c6c7-6f22-41ae-95b6-b8e74a646b71",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff69db9c-990d-4d9e-9b52-374e93e86fe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "349dff74-3f20-41c3-a282-20d105b1f00a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f394f0e-d091-4f52-9853-6e900c07bb08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2793ebed-ae94-48c5-a54c-0b9b311e8ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c95f94-7a90-4db2-8d01-8b10473baf65",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3192aaa4-c4f5-4fb8-a010-ebf5e1a7e3cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae9be11-6858-446b-8940-8212515aa591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df94ddb-70b8-42d4-8245-5609f5672c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "757c1b66-ba73-4fcc-b7ab-94dc6c14edaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe3ac0a-40e6-407e-9a2d-7eccf7a5c21d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4ed44a-680f-4332-b784-e80114e6a0d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1173e0fd-dd18-4af9-a4a5-8a0a7cf51546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7710a01-1f1f-40c6-996f-cde83cf243e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1a08ed-b512-4454-b7e7-6607870cb7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e80f8b0-7330-47b6-b243-1f90847f74b7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c4a9b2-f276-4767-9081-022a56ee95fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a08fe4d5-458b-4e1a-a22b-a6fafa6ba556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "419d0e75-b60e-4b01-807f-ab733a81eed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfbbebf-5740-4ffe-af80-755cbaebba86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9066dbfe-276c-4b26-a8fe-1ce83ffe9a39",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01eaa80-406a-4464-bf57-a14258e028aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda2dc46-ad84-4594-8588-792e42c89e01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fce035d-f962-4530-84ee-ce9dc795146e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0411cd3e-c2f7-4033-ac70-b4dfd09722e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244f2168-7371-4474-9b96-9cb52273b9df",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9181f218-d2cb-40af-83f9-10eb58b93172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e0693b-5c86-4767-94fa-4547d19848c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8c5222-5ea4-4211-a01f-c2f4cb1df979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1e8484-b006-4097-a7d4-32be6c3f58d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1e3476-9df0-4ae3-80b8-cbbde917d107",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5a73f2-bfcb-49c2-bec8-4f3b307c5206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3209a3b1-2b6b-479a-86ae-ac2b9e2a82ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0582b85-2f16-4c11-8d45-fe8d9674d069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c9bb0c-56f3-4cc4-baa6-27624c8f7ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4d41ed-aa0b-46e8-b851-7b1019c30a33",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17353fff-f884-4d1c-99a4-cab28d5fe84e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c209a5-bf42-4796-8d11-15f8cc9b38db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea976d9c-9f33-4487-9820-28824e09e9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2562f5a-db7e-4e83-b6bd-a3d57ccd550d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c3411c-55b5-4c30-9c16-b07c360d519c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f55ba87-a61c-42b4-ae3e-f4d32658f516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc5b391-cf0d-44b5-8f6b-3f7f13a985c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "924bbd57-0702-47c4-9279-38932415a4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5c5690-8cf4-4a06-95c9-c86a3612c378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8372002-61f2-4841-aab2-3fb5c0768239",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8e58f1-2525-4970-a1e8-a264bf551b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5864bdb9-f333-4758-a253-0e052a35bd5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eab66a7-297b-4ff1-95d0-46eae33b4c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c4ba0e3-f15a-4881-ad6c-c6225fe47b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32631d3-7042-4bc6-93d7-4526564ef9ba",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9646d202-824c-4a0b-bfad-3377a9fb8604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d754e573-5c75-4ace-856a-44ace61b3202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9daee959-6e17-4c7b-ba8c-5b2b9c9109be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9042639-3209-4707-bf2d-2e42c20e1c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa09928-2d4e-4b1c-a28c-a6cb02bbdce9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32ce12d-767b-4f02-b612-1a3c6f4b7dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8632a287-944f-4d47-8e3e-2f0cc7fc0267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7408142-16b8-4e52-9dfc-3b6bddaea168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045a38fd-39ce-48d3-babc-806fc3951fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74306d2-4c19-4be8-b907-f4c4802fb550",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e352c70e-7aa7-4710-80f1-73b2dc9dbfea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab2aae5-d9a9-4d9e-802a-256319da3540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f4000f-8067-4da7-b367-8a48e9d2c08d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bffc8088-5cb0-493b-b7c6-8e0660c46cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2670ce12-2544-4937-8fba-016729657838",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f627a5-47c8-402a-adb9-51189f3bb84b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ad7fba-9ef9-4aec-a85f-4c1b2760709d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86453882-d3e2-473e-a6ca-e979681851e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd42aa39-eb77-45b4-a22d-ecb72d0100a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f432dae-1dfc-4414-86a2-e246a1978542",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac30e2d6-5ee4-46f3-bfbd-824a63598a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4be324-2aed-407b-acdd-cd4438d0f1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e2ff12-78e3-44e5-97e9-aed37ecb818f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ee575b-2d7d-4d12-a280-ea3b403f66ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcec0587-5063-4b44-91b8-b5c633374a5c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62cccaf-ad77-4cab-b6d7-4fc6e77aa6b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9570cd9d-329a-4fbf-bc98-ba257f8a396f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bd30a0-ad41-417e-ae2d-46a278494e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580b1fe4-7b40-48fa-b2d6-8efd64ec297a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f90f0b0-89ff-456d-b92f-eea0bee00ffe",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714ef485-b1db-4a6a-9c70-6d95c07b2a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96c078de-1162-477c-8c07-c7872d879b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5541537-fd2f-46d1-ad7f-778f8d7f5bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b96696-e460-475b-aa45-441e90a4b9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7d527a-faeb-4116-a5e0-c84cb99cbd8d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3e43c4-8280-4ce9-9f63-68259736c6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264eb944-0c94-4491-bb74-6870f138a222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38204308-008a-4c4c-b530-0f887371a2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bccd602e-bc6d-4f70-a344-1cc93d989f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff48934-c185-4a34-bea8-992c08c141d3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5357a7-5756-41b3-a9b6-a5f56af86550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33bd5d0-5783-4655-bcd8-a8ea23720880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ea11eb-a10c-45b8-9e0f-b169cbbb9475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76e22358-9af9-4057-a40a-516fa7253abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991ccae0-b8b3-43eb-ba0d-5b0a7a84547a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0019fc84-e37e-4c74-ae74-89d355dc0707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a209c4c3-4f27-49b6-bd87-2477e1ce00fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5fdcfa-18b9-44e1-afd1-f0a801d015fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02f651c8-7e91-4eda-b968-181eaac365d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab47dbf-1383-485a-931a-3ae938dd82e5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce83eedd-f707-447f-af6d-9ae6b45ddd04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f3e222-7176-4959-b00b-7a33005bc73c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5313a587-6293-45be-936d-8a2e0b772fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2859052-1ec3-4d88-9cf7-8519b68d9d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4582a6-1561-473f-8c98-394ff37115fd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f675995-bca5-43ce-8ff1-f725c7e833d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569a3211-2f42-47a0-9c8a-f23cef7d73d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb16490-a92a-42e5-aeb4-0e87907f0afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df44eb2-0648-4102-bddc-28bd62443b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc670088-f980-4a30-8e78-fd489d2e5398",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391e444a-6cbf-4a5a-9f5f-7527ce5140a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341a6e8a-fa46-4aeb-8bf5-e62ae6576686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7b00ab-3bdc-413e-a1ba-f49bbeeafdf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98390b17-4660-4827-bb2c-fec858525ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce35a908-ccd2-46d7-97ef-ab3c0f3d1348",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd4368d-c63e-440c-933b-f1cf9a602670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faff75e1-5122-4198-b6e2-b59985f90032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8ae899-b77b-4792-a20b-95873fa3a10d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14bf96eb-5ac3-42cc-b264-b2b1daed5ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee7476c-38ba-4b86-b926-060aa42e51b9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e3232d-c902-4a5c-960f-0f5e7ab6d205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca5afb6e-abee-435b-b1fd-aabf348f4f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef6735a-3f09-4ff9-9146-0a3503ee99c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa881bb-ac92-4d51-9e08-e6fc91e6f157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04864579-bf28-43c6-8911-54be1fb96c9e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62cab22-3f72-4c8f-8fa8-76f7ac9f718c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca77079a-024d-4157-a04c-5391179d4994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa0489c-073a-4fb7-bd00-2c603468aea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a853cc6-71fb-4d1f-b09c-57f305ade431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd07f7a-0dd5-42f1-a6a9-c91bb4d4aae2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28126917-8d7e-468f-b011-a07822619d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c77ff2-8727-4ed3-9941-ab24dd0f5c00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e8e6fe-1694-4470-a36a-360fcf20dbc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d3a977-e4b8-4a21-a533-feb5034ad5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb1085c-4760-4244-ae0a-a184c4a133ac",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5019bf07-bc36-4fd0-8ec1-d5a20e2c2115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626f37e2-0aa0-4185-8d09-9616aaf5b7d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a2e539-39bf-49ea-bad4-8ee3ed163cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b51c07-c7ce-464d-8fa1-d4e74c0fb2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422fac9e-d5db-4a2e-8f1d-7b12b719af42",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037d210e-a8b4-470d-89a5-5c1df00c44fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0b4e76-61c1-4b42-8d2b-67575c6bbc4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b14c7bf-a011-4473-9380-5e46ea49011e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c383e1-765a-4730-a35b-c00197e76d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b843e41-e95a-4502-ba03-c223162ffbee",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d844a4e-d672-4af5-aaca-c4622a0571c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7913934-c556-4901-be72-c359b63794a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "700588cb-1eeb-461d-9095-6a64ce20d0c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a26678d-59ad-4c9e-878f-b18ad400d6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512a552d-2f7a-446f-a378-fa7fa3466c66",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eccf9580-af71-488b-8bb4-de0f8d5f874d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ab90e5f-287a-40f6-b167-9b8c1ecf9fc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e36a944-d125-4b4d-9a70-2786a24e6d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4222b365-ba41-4bea-8b0a-5d5ef291db49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362117fb-58ca-479e-a5e1-6fce8b48221e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3cfd45f-e8d9-478e-a542-34a00e3f33b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4d9dd39-c890-4c59-bb7e-2b892258ea54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e121bf0-d43f-47d1-accc-a159f5d67b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1ba545-e2db-4267-9eb0-bd75e8093bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cf4714-2a3d-427b-b23e-9f39c17c1eef",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3310af-9ce8-47d8-9150-c4550883e558",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9db92a90-e0e2-49fb-ab30-27db0c522aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c13c26d-ad30-4d3f-b120-f938df8f8a6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6480816b-30da-4165-b606-4132f2fd9612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeaa9e06-247d-4788-87db-25f2597f4ec3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d1609a-0aba-46ab-b1c0-c6e435389845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff45d76-5c6b-46f2-b2db-1c82139ca31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c103e09-d32f-4135-b3f6-80f86033237a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f17e61-faf3-4a5b-b932-b136c2bb88a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bd217a-e847-48a4-aee3-583e5e2674b0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2326bc07-7827-4d96-bf30-31a55861ff2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e87c64cb-48e6-4909-a876-e64c50cd5836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89fc97e-79fc-4e79-a375-f3963f5d3e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1d6021-1c6e-4aca-ae2d-8afa77704549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8975eaed-a6b6-452a-a800-063f94e13622",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9049fba-2551-4a2d-9b8e-74c0a15d5097",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63538172-49fa-42aa-bfc5-e3ea9591f85b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "309763f8-0f6a-4bf0-8d1f-2f7b60ba14e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26cf608c-941e-4530-93b0-8e4da7379662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac804a0d-7b21-4bad-9fc9-d749e665c8db",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5048a596-f8e8-4de7-8a15-892073450647",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47c0925b-cf7b-4210-94b7-21cfa02dad28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c30859c-6b1d-4cce-ac67-7384f02296c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e69b27-7197-43f7-ad85-85fcb3d04591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4e4940-542d-4a46-979f-546225818687",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0973e5-3cd7-4b4f-8bcb-dafc703a6af5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c6c52bd-5751-4ed6-b4e4-d0c2f2422416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4f74cd-99cc-4a4f-ac8a-6f74f7195264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95287c9a-9062-4051-a385-033717f9af9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c882085-a30a-47ec-9d8a-9e330d0ed683",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13c864c-b837-4f0d-86dc-ba84259841fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d61dbfd-de38-4445-9d56-accaff2f0d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46c1867-e2da-4e7a-8673-891a7328db1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf86c8a-d22f-4904-8177-cf388a21878c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6b6b75-ef5b-46ea-ad15-8e41a04a7d42",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56584ec1-aaae-4af5-8846-d4d2f67add44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3335aa2c-11a0-4adc-a6e6-f0deafdb620f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a1139a-112d-40a3-b19d-9e4996bc2158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749f4fd4-57a2-477f-9c68-bbb886689c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d0f06f-1bac-4c06-8ba6-1955bccb02e9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e6f047-3036-47ca-b30c-48cd794c2b6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "544ae34c-3fae-4061-9325-93e78c164cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee068e11-e442-4f0f-8c41-a0d6ef361b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3183eae-09a5-49fe-9edf-020f38c8fe26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd649f9-77a9-4f3d-b181-50af15ea3144",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65315518-fd26-4919-8a9e-f3965ac6b5fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b696ef4d-d2bc-4233-b2b5-d29b1969a428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "231b41ee-24ec-434b-9356-77695132f414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f73ac6b-3ae4-47c1-b5cb-609f242f71e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab45844-5e6c-48d6-bdc6-a1dade66c8ac",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a3f7e6-32b1-48db-aca5-ae7a37f3c4f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "816ee61a-3d2d-4baa-ba06-07bfd21b9728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65de142-e918-470f-a9b5-699e3d09a2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46909ea8-d761-40b3-b4ab-da216813b5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19d6087-df9c-489f-97ac-7911fb06e49e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7242a78e-a094-42a8-91a3-aae0fc0b6847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51046988-da6d-462f-9755-c35485710180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c63242-b70a-468e-84bd-088362c5d86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f313c40-ea96-4ab7-b673-8195a9c842c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ea3646-2c3f-41be-b6ac-2dce3f158edd",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0b34f1-322c-4430-8859-30d8bcf96d19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "716e0ea7-36af-4a44-9af8-768cea5ece27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1950b0-f979-42e5-a567-232dd6b6bafb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad6f923-483f-4d03-8b54-52d36dd95f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe6b92b-91c4-46fa-86b3-23efcf7a85e7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4928b916-413e-4900-967c-dc049ee6cdfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "275371f6-d90b-4652-971b-18f1ec00c914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d45b39-b6d9-43b0-853a-3d17605b4ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c8d7af-5fce-4b81-bb7a-dd1289038418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121a5f8b-4e26-4ca8-8b5f-48a1606e0e5b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03263f77-2ec0-425e-81ec-a28c7c669734",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91fd978d-ca83-4e0c-a103-a3e8929990c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6f9142-8214-44ac-8aa6-48c683052aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279f4941-dbf4-4446-82f2-d68b9d9d504d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66816670-253a-41e9-aaf3-4dc346ec2d75",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a804dc0a-5485-409c-83d4-eb3958a47def",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39e28c95-d9da-4bd5-b90e-41a22b39b034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead04f2e-f250-40fb-8496-0d8cf8e87304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4734cb21-8aeb-4b1b-90af-e83928c2e615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c846e272-9281-41bc-881d-d0f9b20443ba",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5eb2dd-3ff7-4001-a4fb-449c7b1a8b38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f019f958-5589-4969-b238-409282b0b638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1a3871-0999-4413-9ae6-0ada998eac8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584c372e-732b-430a-a660-b2a88b64a30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc934b97-0b09-4055-8c6c-2aa85e6edb6e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26baaa8c-0ac8-4e0f-8b09-28c9189a5449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66af7353-42e2-43f1-9b6c-881a3cc13d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f4b2dd-89a5-4fd0-ba2c-95d7b7d452e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76759ed9-a408-4798-bd0e-fe29981142b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779b21ab-2e22-4349-b457-6a936f635e63",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e07a3c-c725-43f6-9150-fcd1039bbf7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f0ac3d-6202-4790-990c-afddd7081abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f890bd-72fa-4bc9-83f6-c88f21166b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b626e8a-948d-48de-829b-4a6ec0d4e8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d755e32-d977-401e-893a-486e868cf938",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fa4c97-a225-44d0-9128-065edb07d57a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "815f0672-8745-4bf5-bbab-ab8dd44fbab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efcca2a-6f09-49cc-bd0d-8e99e48dc42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd4b891-60df-43fb-a514-124aef456545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9970b4b5-94bb-4a57-8f0e-aab031c6e6e4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29f5cb5-955e-452a-a136-26e18bbbfb15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad24a8f7-0526-4b19-8705-7df4858fb558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28c75f8-7d20-40bd-bf42-8c5fb8ffe0e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69fd89d-a845-4ad5-bb87-f408144f7ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c7d85d-bac0-4c75-9a95-72ecefb3f9fb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9285ec3e-2306-4832-a605-965f57dcfb4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87f3cd45-f7d6-4388-975f-9f4e39a094d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "873b6544-6a8f-482d-acf1-b5fc7f19738e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7900c21a-4857-4041-9d3f-2c2e7869ab03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada88c5f-476c-42d2-9bdf-c36b427e0786",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76afbcb-222b-46ee-8b89-fda5ae538732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f98eb409-5bf1-404c-b58b-cf045c486cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9cfeeb9-06ef-41de-a193-e32239ae2e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be867ed-1b23-4f30-a02a-cf81a62aefa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5954c9-538c-4f1b-8b83-1efaa62b2854",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcc1da1-74c6-41b8-811c-bb638ecc8760",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68341b87-0955-41fa-8887-993631decf82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfa7993-30b0-4b3c-b0dd-4577e03731f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3494ebc3-fd5b-4c4f-9317-0c24a2dfe257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b8b981-13bc-41e3-b5bf-527b179b8709",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dd4805-df37-4de1-9243-b34fdb1df491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28c5905e-59f7-435e-8a49-fc6a8431d48a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7dc2590-ef7c-4a45-a820-30444ce59ccf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603422c3-0bf1-4729-9ccf-afd68e12be17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc74ff2-7ca9-4f7e-a7d0-79c76306509e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed241987-c5a4-4abf-9ac9-056703e8fd14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "902c2c4a-c1ff-4dea-b1db-662e1a1fae22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968be6b9-0162-41bd-9ae7-ddfb9a78b06b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1724dd5f-6a6c-4b38-bf6f-48cd73fa09eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9023db9-0003-4df3-aaf4-307c6c475562",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68634dd-55ea-480b-bea3-2e583f910013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "613cd4b1-a953-427d-b0fa-cf55c2a24155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "891d01ea-d679-42ba-b67e-c99df33d391e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53be0e75-9ce3-47ed-b6db-5257a362c276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f0d96a-451f-4305-bf33-6bc42b143a17",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac7b58a-f74b-4851-8c4a-374907dabe20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6758963a-cfe7-4e97-83b9-47ccf255fecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d8eb848-2c19-4acc-b32c-ba791e2aa552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7e574c-2ac5-48b4-bf9e-4a7422a43d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbc98cc-15a7-46c1-9a87-69ac0378da85",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f65461-826d-4363-84db-181279549f37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "550b7f92-cb20-4c30-8105-c03a0c97a178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fc410a-e5f0-46b2-a68f-cb6b56ea7b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0062a242-e8bf-4e83-9630-9596e9462ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4a2f4b-f2d5-4a0f-a1dc-7e07685fe8b7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0403017c-21eb-40c2-ad36-05d180b7b592",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6ed99c5-0dc9-4248-a6fd-0beb220d3445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fc1f06-ae63-451b-bd2c-0aa74087247f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b27999e-0d3b-4a7f-9890-5a43c03b9a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce47727-a76b-4f3f-8bf7-5196c8bcb518",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cef95f4-c701-45ec-bd57-ad5cd929418f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "442ef2df-0112-498a-bc18-af993cbe45fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fdf811-9685-414d-9112-6290d874c98d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8f0c25-17b3-4199-8447-e3bd1cc36a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11ab2aa-5b92-455c-8da2-58f0d8639635",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724f63c6-175b-4300-887c-2f47631d8ae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "269a165f-358e-409d-b3b7-3db22d0282c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf514e3-f13d-4ca3-b7c4-39d8bd20484b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b7fd39-3b7b-4851-8e87-2517edd4e76c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0678302c-ad62-4421-8a23-9e0369a47f12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cc24e18-e105-4009-bca6-3c9cc4856068"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64da2c2f-1a2c-44a5-a321-0b8d8d208be7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6cd1ba3b-914f-456b-9d75-8d6c5f3c78ee"
                    }
                  }
                ]
              },
              {
                "id": "ec7d0ba9-6c88-401e-8e5e-f0fd58157a1b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc1a299f-16b2-42a7-bfa3-1844667fd413",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725258e6-2424-4778-9b18-4ddb885dd412",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "87527bdf-63dc-4cde-8ef9-330fdc347cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99b72f8-7d45-497a-8e1e-2b9ac11694d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40761230-1485-4e3d-987b-bbd3f5b485bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "520cee61-4e32-4453-9ae0-d3a38f489e48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a4026dc-aea8-4839-a281-96809ba80824"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "093102fb-e574-4522-baba-5c7d9cfcfc50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cbb34cb-5b81-4743-805b-628382f5899a"
                    }
                  }
                ]
              },
              {
                "id": "45063728-74e4-4cbc-b38e-fd8efcded4d4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1554cf6f-b014-40ed-a978-ddf088b9a760",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a1d9a8-e227-4ffd-848d-d4a2c7e6742e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4e7ac7a4-f0f5-4fde-8275-d02e815dc8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be426d8-dd71-4d96-b746-ee2823116960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6731fe86-5954-4387-bcd9-640abe4dcf39"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2b962abc-0829-4c94-a633-2bc3136076e0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "68e54ecd-b282-4334-b383-1162dfacca54",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97e7442f-0baf-4a83-9e34-f17acd239e47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b3b68341-1c01-47ff-9887-d85a56f9106e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82bba64d-87ce-4d9f-af45-93adb5be94f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fce31a2a-c5cb-4da4-ac2d-c0dab3520ba6"
                    }
                  }
                ]
              },
              {
                "id": "194220cc-e70e-4407-94bd-a49bf0ac01ed",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e132848d-1a28-47aa-b323-8b5aae321a60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bd7ebd56-0734-4f4f-938f-43cf261bc8fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac26fa6d-10a7-440d-aab3-7a2e3b52e4f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "979a99c0-94f7-466b-a15b-5580386e4fa3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90573a62-3d93-447a-92ed-d275b60de33e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "54bfd917-5310-4d0f-a3a8-75bef9460a6e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4694bd29-4afa-49b3-af7a-3a5edf457576",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39af507a-1f43-44d8-ab87-e9ee6cd058b1"
            }
          }
        ]
      },
      {
        "id": "98558646-3fda-43ac-b735-3bb245418ae6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ae7986c7-7d6d-4b85-8f19-a791d98f8e9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d7d6b82-275e-4b7e-a69a-861ffea2a871",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3414bdf-2ade-4d44-bf39-fb67264fcc69",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c2a379-22c2-4515-a445-ff5da6a436da",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "04921c9e-c374-4bed-b8d6-6576d3a6b2a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a317ceb-9c0a-4ece-a94d-b49f4626c53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd456d39-af15-4f86-9ac8-2bf2c95f8a12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3780bfee-f384-4af4-8fe0-79db7c0fcdbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "819f8475-739c-4506-881e-ef9c1e8b610c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6272fa0-550f-47bd-ad6e-120fc4a2137f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb9f8bfe-ed58-4491-8ef0-772fe494c24c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cc10174-2a25-4ba8-847e-df9426a3c580",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "346ac08d-5f83-4cec-9c94-5e6fe2f444c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11b89031-aa87-4fc4-a05f-bb71a61eebc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6515699e-8399-410b-9203-5506ccd0196d"
            }
          }
        ]
      },
      {
        "id": "09bc86ae-45f8-4c68-88eb-cd85de721234",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2efb42b4-3e6c-436a-b0ae-189c3be52e80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cfc01297-89f6-401b-8d86-b6dd1e8ba90a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43e54bda-9a67-49f7-ad74-eb33835833b7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27a9ab3-5624-43aa-9a97-fe59e3bf0a3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ca02610-c851-46d7-b757-051165ff4c7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd05a3c-6444-4cee-821d-3131733a8060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1538c305-a7db-45c8-81d0-e7b2dd07762e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9387dca4-1881-43b0-8af7-ce9796c75c86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa476d8b-d301-4a52-9685-0b35324426d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ca99bda-2047-4d50-8036-84bf38f146ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f4959c2-978f-4b55-bc01-63db71fa2010"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab5392b6-25fb-4ea9-86d5-079a0c13779c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8aaa4e7a-48e4-4d89-b82f-56a2297d447a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cba8baa0-18c7-4a2e-b30e-be743b93bcc1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19c0c622-5c05-4fed-b1c5-8a9de0bce4fa"
            }
          }
        ]
      },
      {
        "id": "2fbf2cf8-5180-4885-a628-a7cc18a2c652",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "888098c8-e55e-4b5d-b888-5c37c1f1bd3d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cab246c8-e43b-46d8-aa80-59072adfa243",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6afa3562-f570-4c4b-a782-fce4899e23e8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39420ff9-b33b-4c89-b309-83dc3db35f87",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5908c73-abe8-4795-8ea1-bb025a1e8afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81c8264-49e8-405a-9763-08e3ae767493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5bb4bcf-1d56-455d-8679-8c137cbfc70e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44288389-e69f-4447-a19b-713cb9f3af8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b83f96e-9a1c-4169-933b-c10d23c6f291"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "73d0f37b-fc9a-4995-b801-fc870c940db9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e96543a7-2dfc-409f-b9fc-97e9586ea437"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f46f97cf-078f-4b7c-bf43-22d618f48829",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "63c2500a-fa3e-45aa-ae58-bc38c10124db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bc9cbf8-9632-4b59-b77f-f55eaf220a08",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9b351f2-e19b-4bc9-b3c7-cea7c1c61181"
            }
          }
        ]
      },
      {
        "id": "849b8089-cb82-4bb3-b626-396651bc6c00",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "438bf82f-7504-494e-b97a-2eadc019697f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0c792c2-950f-40f3-8fdf-8e12b31e3c0b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c00b5c8a-e0ed-4b76-8769-30de29c902b8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17848a12-17a0-4c71-80a3-f81f0eb5d616",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df4fe914-ad50-4126-a29e-8f50709156e3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 479
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 641.0569105691053,
      "responseMin": 10,
      "responseMax": 1124,
      "responseSd": 162.0986250430948,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685493732328,
      "completed": 1685493900671
    },
    "executions": [
      {
        "id": "77bbbac8-a31a-4d1f-ad01-c58d89d2dce0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7048140a-506b-4899-864c-22ffa8015d21",
          "httpRequestId": "3d8e4f55-aca7-410b-9d54-37f0b40ee1b9"
        },
        "item": {
          "id": "77bbbac8-a31a-4d1f-ad01-c58d89d2dce0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "be7dd67f-2839-48c3-a372-61d8c51cbaa0",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "b2798631-78df-4182-8707-61ace018f958",
        "cursor": {
          "ref": "cbfd8294-2722-4aa4-bd70-2974411610d0",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "181d6928-c8ce-4469-bfc0-45263362d623"
        },
        "item": {
          "id": "b2798631-78df-4182-8707-61ace018f958",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "40b1950c-2fdb-4e49-b5e7-0a5a80dd5108",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "089d7bb0-da2a-4d4d-a857-8e6f43821359",
        "cursor": {
          "ref": "5911f60a-ea99-4927-845f-77129769ad24",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "23bf9230-b4ca-4567-9d39-2f827f2d51dd"
        },
        "item": {
          "id": "089d7bb0-da2a-4d4d-a857-8e6f43821359",
          "name": "did_json"
        },
        "response": {
          "id": "f9111411-3374-44ae-8e2b-3f24689784b3",
          "status": "OK",
          "code": 200,
          "responseTime": 1124,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9849f929-39a0-4cbc-9cac-bbecae045a06",
        "cursor": {
          "ref": "b357d415-4c7a-48d1-b145-0fc5002d26de",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d2081fa0-e5bc-48ac-b915-4583c538bf38"
        },
        "item": {
          "id": "9849f929-39a0-4cbc-9cac-bbecae045a06",
          "name": "did:invalid"
        },
        "response": {
          "id": "974b9e22-5350-436a-8a64-e6ecceb6430c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 763,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9849f929-39a0-4cbc-9cac-bbecae045a06",
        "cursor": {
          "ref": "b357d415-4c7a-48d1-b145-0fc5002d26de",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d2081fa0-e5bc-48ac-b915-4583c538bf38"
        },
        "item": {
          "id": "9849f929-39a0-4cbc-9cac-bbecae045a06",
          "name": "did:invalid"
        },
        "response": {
          "id": "974b9e22-5350-436a-8a64-e6ecceb6430c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 763,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4874f913-c350-4d4b-b617-6103a769d4a6",
        "cursor": {
          "ref": "a4c404a0-94b0-4057-a907-13259e2a5a2d",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "07cdc26c-71b0-48bb-bd2d-9313e636c977"
        },
        "item": {
          "id": "4874f913-c350-4d4b-b617-6103a769d4a6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8694b59d-18b0-46ce-b474-fbfa1e0cd19c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 869,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "cf867d17-330a-4820-9c26-d9973645d747",
        "cursor": {
          "ref": "67ecb5ab-71d9-40a0-a28e-07850246b547",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "86fc2e43-1258-4485-82e0-ac13dba2caf3"
        },
        "item": {
          "id": "cf867d17-330a-4820-9c26-d9973645d747",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "11a862fc-eedb-43e4-82c9-ebf5a04e061e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 765,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "d3edae9a-89dd-43e2-9935-8acd1158e51f",
        "cursor": {
          "ref": "d5d96fee-ff75-4107-89b5-9021fd96050b",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "45b1ec68-0c87-4397-9d35-645c16db10ef"
        },
        "item": {
          "id": "d3edae9a-89dd-43e2-9935-8acd1158e51f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "833b263e-8988-4677-a34d-01e0162b1f08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d44e946-a570-47a6-8db8-5d7d5d2c3dfb",
        "cursor": {
          "ref": "1c80210b-04df-4f6e-9111-d89a6abc824d",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c05368b1-e370-4536-9769-9d84515f3a58"
        },
        "item": {
          "id": "5d44e946-a570-47a6-8db8-5d7d5d2c3dfb",
          "name": "identifiers"
        },
        "response": {
          "id": "72b4ced0-8549-4111-9dff-11c3deffa1f7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 727,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f61795ef-4e1c-453e-b92f-a6429ae2b7d6",
        "cursor": {
          "ref": "1324a15e-29e4-4598-9c16-ba84aa710c77",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "be288c31-abc2-4ee4-a7af-ab81f5cf3b3c"
        },
        "item": {
          "id": "f61795ef-4e1c-453e-b92f-a6429ae2b7d6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b23f0215-35b4-479d-8775-297afc25147e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 725,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "4258fa8b-cdea-49aa-ad33-5048838eb509",
        "cursor": {
          "ref": "2cdeba43-bf4c-4fbc-b523-fa198b337004",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d8a7fea9-69b8-4518-9787-777cf5f98f0a"
        },
        "item": {
          "id": "4258fa8b-cdea-49aa-ad33-5048838eb509",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d03519d5-ebc0-4d03-8b97-e630fd128279",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 752,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "08589224-f595-490b-8bed-9851bb15b851",
        "cursor": {
          "ref": "cc43c5e4-e643-414b-a8f3-9ece6fc761ff",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b644549a-9521-427f-a4ac-e8e72f2dd6d3"
        },
        "item": {
          "id": "08589224-f595-490b-8bed-9851bb15b851",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7af156d2-5abe-4b50-a75f-f239a3c4d60d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 738,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "21a43a57-7bb7-4e46-a129-321e579586cd",
        "cursor": {
          "ref": "dc57cdcf-f5bf-439a-8f17-4c8a81c2dd29",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ef9532a3-4752-4175-a8ea-7e5094181a38"
        },
        "item": {
          "id": "21a43a57-7bb7-4e46-a129-321e579586cd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9d8a14dd-5df2-43f0-a8ce-1bde6f70bd52",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 746,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9564487a-60a3-4a86-8540-dac9d4c6dba8",
        "cursor": {
          "ref": "3a0da043-bd2f-42f9-a50e-926be74de68b",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "582ce3bd-91db-420e-b023-8fbdf3572955"
        },
        "item": {
          "id": "9564487a-60a3-4a86-8540-dac9d4c6dba8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4b587f82-bc2f-46f9-af8b-65ffcbe08f04",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 757,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "c596e691-af96-416e-82c7-2f76bcb7c377",
        "cursor": {
          "ref": "cda6de49-ba29-4975-bf83-5a9aa4c85146",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "edf7b818-ac7f-4f47-9e4d-1bfe7f2e6b50"
        },
        "item": {
          "id": "c596e691-af96-416e-82c7-2f76bcb7c377",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9328c4b7-10a5-4416-b04d-f25850d58c3f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 741,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "07fede70-eb1e-4b0c-b29b-b1447d50ad3e",
        "cursor": {
          "ref": "bfe7fe87-e654-46d8-af16-8f2269b9d42b",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eca345af-530e-4c16-adc0-d0baa20609ef"
        },
        "item": {
          "id": "07fede70-eb1e-4b0c-b29b-b1447d50ad3e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a68ef87f-d4ba-4785-a9f0-23c5acaf2c6f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 743,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "71d8652e-04fa-4e29-9934-9366d9d1e787",
        "cursor": {
          "ref": "b6f0d4be-bd30-42f8-b281-69eecd887bc3",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "52293a77-69bd-4ff6-b1e5-256420439871"
        },
        "item": {
          "id": "71d8652e-04fa-4e29-9934-9366d9d1e787",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "be15cf15-2a7a-4283-b3b3-3b7c2ca84b91",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 759,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "fcfbecb3-d423-4657-9af1-2951df268caf",
        "cursor": {
          "ref": "6149af7f-9841-44f1-9503-f4ef2d77fb87",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d016251f-1ce7-4bec-bb95-5754e3352513"
        },
        "item": {
          "id": "fcfbecb3-d423-4657-9af1-2951df268caf",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d6a839fc-a872-42d1-aaca-2940a8bffb2c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 748,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "fe1e3af5-9ea7-43e4-bb10-aa11070498ad",
        "cursor": {
          "ref": "953efaa6-f388-48e5-afa3-05d339b6d863",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5f82ea29-c95a-46bf-9bd2-439ae87e5247"
        },
        "item": {
          "id": "fe1e3af5-9ea7-43e4-bb10-aa11070498ad",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a820d847-2be7-4cea-9fd7-6f08ba5157cc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 737,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "dc9ed20c-9815-4db9-92f1-2aa205fd9cd1",
        "cursor": {
          "ref": "f0b8ff96-4573-4977-9e41-fbc626e88010",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fe3ff6a4-88a9-4269-a90f-9c56dd31d641"
        },
        "item": {
          "id": "dc9ed20c-9815-4db9-92f1-2aa205fd9cd1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "410322fa-0fe5-46c1-89ec-7a745ab1a932",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 763,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "9333ddb1-84e3-4d5f-8980-592c04ad2279",
        "cursor": {
          "ref": "ae243c1d-3dc4-4637-8150-0ff766bf19a8",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8529ed16-b6a8-42b6-9a01-aed022459078"
        },
        "item": {
          "id": "9333ddb1-84e3-4d5f-8980-592c04ad2279",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0488d7d5-5ecb-4cac-b117-a0454b834e95",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 781,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "fb65ba5f-314f-4674-a45b-67ba2088da73",
        "cursor": {
          "ref": "9607ef30-2012-4638-bdaf-92ec3de62a2a",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "27ef8627-dd0f-45d7-abc1-90ad1b40ec5a"
        },
        "item": {
          "id": "fb65ba5f-314f-4674-a45b-67ba2088da73",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4033cdfe-2dd2-47c2-b25e-d2222d9ef0b4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 738,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d5b085c4-9b8f-47b3-91e8-3477051da5a7",
        "cursor": {
          "ref": "d4f0e0e2-cef9-4f0f-a949-c0c2e3676f56",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f9a30239-6cbd-4801-bc8f-1079fcbee05d"
        },
        "item": {
          "id": "d5b085c4-9b8f-47b3-91e8-3477051da5a7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8bee0889-4298-4208-9fb9-2db21579fc65",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 730,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e74f8da7-9ab8-4e48-b80a-5534c1dfb430",
        "cursor": {
          "ref": "f5e8c55a-d3f7-4bf6-b13c-7fa3bc875f92",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2ed33dfe-1a83-415a-9e47-0ab549f15f39"
        },
        "item": {
          "id": "e74f8da7-9ab8-4e48-b80a-5534c1dfb430",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d4cd72e9-7192-4a6b-b4fa-650dc95fdd72",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 752,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8cf31aa2-2a70-43f4-bbcf-f0e5762c459d",
        "cursor": {
          "ref": "beaa2d75-c37d-420c-9a3d-a3dace6910d5",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "33faf866-a81b-49d3-9cdb-b4f06a145ee2"
        },
        "item": {
          "id": "8cf31aa2-2a70-43f4-bbcf-f0e5762c459d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "97db3e46-a9d5-436b-ad4d-143d9ff28af4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 760,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "b7e4441c-4ba8-46df-93b7-f89cc8c87511",
        "cursor": {
          "ref": "116776aa-9704-43b7-8dc3-c61a2fa14bd9",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2199be7b-f988-4f3e-872b-3251fcae4fd6"
        },
        "item": {
          "id": "b7e4441c-4ba8-46df-93b7-f89cc8c87511",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f68fd403-c57b-4d9d-8fef-598bf79f69c0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 743,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b3b430f2-2405-4786-a20a-6ecbfb33f3b8",
        "cursor": {
          "ref": "bd601223-438c-4a30-b17c-0dff3cb4ed42",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cc5e052f-c266-40c3-9ddd-7cb53c4c83c9"
        },
        "item": {
          "id": "b3b430f2-2405-4786-a20a-6ecbfb33f3b8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c78f7bfa-dcf7-43d3-85dc-0f032af78c41",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 750,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "df75edca-f292-4bc3-bb22-c12b2310f9e2",
        "cursor": {
          "ref": "44b8313d-f6b3-481b-84b7-85ff9213ef97",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "be2f46b0-534b-467b-996c-33efde0d2ce0"
        },
        "item": {
          "id": "df75edca-f292-4bc3-bb22-c12b2310f9e2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c85faf09-f2ab-4057-a785-67f4d6a3352d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 744,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "b9bfbde4-f638-4928-8039-9877de0f5b6d",
        "cursor": {
          "ref": "bfa916b9-ddb9-4cb2-9b53-5f2806a8ee4f",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6439e95b-5420-4132-a67f-4f42f6b9fc3d"
        },
        "item": {
          "id": "b9bfbde4-f638-4928-8039-9877de0f5b6d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b0058f49-ce1f-43c8-b05f-b5bed70e6193",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 747,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "6688f869-330e-4d46-b753-1be6a5016999",
        "cursor": {
          "ref": "4b9a3ac6-fa3e-49fa-b924-f1fb1aeeecd7",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "60cfd893-7303-4c19-8102-f984faff7cd1"
        },
        "item": {
          "id": "6688f869-330e-4d46-b753-1be6a5016999",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "75f57eb7-e003-479e-b443-f7641d48b92f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 768,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "51cce811-1d46-42b1-9313-f99bc854ad6d",
        "cursor": {
          "ref": "5d553b17-50b1-4788-920d-0a6b93643460",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a0c8a095-5398-4eaf-ae80-f7738308d1d4"
        },
        "item": {
          "id": "51cce811-1d46-42b1-9313-f99bc854ad6d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ccbeafb9-ba33-4f7c-99a6-bbf13c6b4794",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 761,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "7de1b29c-947c-46e5-b18e-451c476a16d9",
        "cursor": {
          "ref": "92d7153e-9440-4afa-a104-cd858d9db872",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8dac4818-d575-483a-a69d-c66163150940"
        },
        "item": {
          "id": "7de1b29c-947c-46e5-b18e-451c476a16d9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4c13b431-4653-413f-9354-46c9b2178f73",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 744,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "f9f1028d-52aa-4e8a-8267-bf6266a68d61",
        "cursor": {
          "ref": "82890326-6036-47dc-bf4b-bc3d203af3dd",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7d7de49a-cc92-46be-9257-cc017d5d5aae"
        },
        "item": {
          "id": "f9f1028d-52aa-4e8a-8267-bf6266a68d61",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0827b1d5-d3c7-47d1-854e-022ff0afc0b1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 758,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "0e6c3ef9-148c-4d4f-9a63-c7cf2bcece3d",
        "cursor": {
          "ref": "0c83e553-07ab-4138-9e9d-3ffd410754a1",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5f864bd0-c5b4-4f69-a4ee-942d33be0dea"
        },
        "item": {
          "id": "0e6c3ef9-148c-4d4f-9a63-c7cf2bcece3d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1f50e49c-efae-4db7-986c-1fda9a59bffb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 735,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "81f44d5e-ce94-42e6-843c-bde54c53c741",
        "cursor": {
          "ref": "489df378-8c52-4878-8a20-27171507e779",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "dd8a5b1e-74ee-44ab-8e68-82ac34583b43"
        },
        "item": {
          "id": "81f44d5e-ce94-42e6-843c-bde54c53c741",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f7e91c58-1dd3-4710-99bc-948f1fe99ee3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 737,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "de58b411-3479-4994-82b4-fb08e02fe338",
        "cursor": {
          "ref": "425d9dd1-74fb-41dc-b551-200d53db4c67",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bf4c1f7b-5e7c-4898-bebf-2d2f6035658e"
        },
        "item": {
          "id": "de58b411-3479-4994-82b4-fb08e02fe338",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a166e0e1-da1c-4a9c-874d-d1ad1ca6a908",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 745,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "efefc61b-ffaf-437a-8fb6-f27efc72b648",
        "cursor": {
          "ref": "09f7ab9c-d7de-4356-a629-44f0fc678b83",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0a646afc-a53c-4b7d-9de9-42fb44121106"
        },
        "item": {
          "id": "efefc61b-ffaf-437a-8fb6-f27efc72b648",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9f8bf5ac-7756-483a-bda3-1e96dfadcc41",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 744,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "fad6e5df-50d4-4e52-882c-982d1987661f",
        "cursor": {
          "ref": "fde57b48-74ea-4743-95a8-5ac68a7263f9",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5c6569ed-9b5a-4556-8b47-5ab820530b7f"
        },
        "item": {
          "id": "fad6e5df-50d4-4e52-882c-982d1987661f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f3e0fd71-fff9-4056-b4de-95f56568bc85",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 743,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "cd8ec149-4ac7-45fa-b6bc-2e548c64f004",
        "cursor": {
          "ref": "d02e195d-cead-4307-990b-851a5c0b1e2b",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c6aed1a7-e15d-41e0-85ab-bd8bf2736a8c"
        },
        "item": {
          "id": "cd8ec149-4ac7-45fa-b6bc-2e548c64f004",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "71077733-6f9c-463b-a181-8b13d73c4655",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 759,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "9b64ee32-708a-44c7-a10c-4364907c06ad",
        "cursor": {
          "ref": "ae05206b-3a94-451b-ade5-e20d6998fc79",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "818491e0-686c-4d81-878f-e73a7c5575b3"
        },
        "item": {
          "id": "9b64ee32-708a-44c7-a10c-4364907c06ad",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "dbb567fc-0622-4dcc-a0da-f2ba11ffbe68",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 740,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "77729b26-75dc-4ca8-b539-b55fe5d5def8",
        "cursor": {
          "ref": "361a3424-c55e-48dd-9b95-e6f34a585275",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e79ea1e7-a1f3-4c9f-b363-a1c5f2f96c0d"
        },
        "item": {
          "id": "77729b26-75dc-4ca8-b539-b55fe5d5def8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "22a454db-80c3-4d63-b6eb-230e0aef3b75",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 740,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "475caa5a-3a5f-4e25-8549-4f5d2d811312",
        "cursor": {
          "ref": "a03ef0fe-bd0c-448c-8bf7-5cd52a0ec86e",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9d3fc50a-5fc0-48f3-81dd-9b0c4ca22d64"
        },
        "item": {
          "id": "475caa5a-3a5f-4e25-8549-4f5d2d811312",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "add3b0af-f018-46f6-b064-7016a7d7967d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 751,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "62af3edc-64a7-4c2e-9b37-0e47c1e11868",
        "cursor": {
          "ref": "74b174d2-c93c-4371-911d-c12cf9f6ad5f",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c96e0c22-3be6-4595-b5b6-e1d7c796c4ab"
        },
        "item": {
          "id": "62af3edc-64a7-4c2e-9b37-0e47c1e11868",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5776a03b-8ace-4d6b-8e49-ef8bb490b48f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 759,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "495b7f1e-2ad6-46c9-907e-e7ce35e1cbe2",
        "cursor": {
          "ref": "7fc1ac97-f468-4f91-a1d0-ae535cc14997",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "679f36f7-3d71-4fa7-aa4a-333bced3864f"
        },
        "item": {
          "id": "495b7f1e-2ad6-46c9-907e-e7ce35e1cbe2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5c524c62-4437-4d32-8e4f-71345c0281c7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 769,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "290c3569-78cd-4ca3-9e7f-5c952ad504fe",
        "cursor": {
          "ref": "4232c44d-e887-4893-adbd-b7a14b8fe671",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "94f41494-8af2-4a65-a17d-3b0263dd9422"
        },
        "item": {
          "id": "290c3569-78cd-4ca3-9e7f-5c952ad504fe",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "766a38dc-1e78-4f82-813c-715fb1c55343",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 738,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "26cb91fb-fe04-41b9-8d88-326b77375f83",
        "cursor": {
          "ref": "5614f717-1ef4-41bc-8c65-efa626469db7",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8c95226a-d5b0-40be-b7b9-daff265baae6"
        },
        "item": {
          "id": "26cb91fb-fe04-41b9-8d88-326b77375f83",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "79f910e0-5185-4c0b-b334-17143ac17cf3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 769,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6f702c29-698a-46af-9d3a-8618a55f7549",
        "cursor": {
          "ref": "d1e9da63-94b0-482e-94dc-39c98eec1db1",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0b4c8834-0216-4cce-8f53-7863480e8882"
        },
        "item": {
          "id": "6f702c29-698a-46af-9d3a-8618a55f7549",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b19ef2c5-3d28-4310-a259-efd974d55357",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 740,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f4a0ce98-af12-4b12-abbc-83706678f462",
        "cursor": {
          "ref": "06106342-5a8b-4bf8-9898-9134dabde7e5",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4130b0eb-0f78-4d3f-8901-ec3a270645ca"
        },
        "item": {
          "id": "f4a0ce98-af12-4b12-abbc-83706678f462",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fcf9bb44-a512-42b1-a8b2-5a8037a99ee1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 752,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1e3a21f6-ce3c-483a-b0dd-642b2ee27d8a",
        "cursor": {
          "ref": "5a91638d-1d1a-4b4f-a7b5-67baee012366",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8615e96a-149f-4ddb-9ddc-153943058854"
        },
        "item": {
          "id": "1e3a21f6-ce3c-483a-b0dd-642b2ee27d8a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "85d1408c-25aa-4bf7-9372-fcb8e0df0379",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 729,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "11d1a2c0-10b1-4358-9318-25134ac24b65",
        "cursor": {
          "ref": "3c663948-4c8d-4d89-bcac-083b8dc0a695",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f1976e66-3078-46a7-8115-e608c7ed0dea"
        },
        "item": {
          "id": "11d1a2c0-10b1-4358-9318-25134ac24b65",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a753e51e-9bf8-4487-a4d1-da9e047d1b0b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 728,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b70dc0a9-61b7-4d00-9c17-e71b9b49ede1",
        "cursor": {
          "ref": "a2d9c632-733f-4439-b6c7-c42afa106dfa",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "49325649-2de7-4bac-87f2-367e3732c7eb"
        },
        "item": {
          "id": "b70dc0a9-61b7-4d00-9c17-e71b9b49ede1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e7e4e4fb-ba20-4e89-9989-2c967168ce79",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 762,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "bafbddf2-47bb-4693-adfa-cd4a0e745092",
        "cursor": {
          "ref": "e26b7faa-7b43-4c1f-a998-1e89e61288e1",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5b3c81d6-cdf8-4316-a2e4-dc258f4e9758"
        },
        "item": {
          "id": "bafbddf2-47bb-4693-adfa-cd4a0e745092",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "211be27d-f219-4a01-b4ad-c93a2bab00c4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 739,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "44ec149f-bea1-48a3-8a85-cde89d0155c7",
        "cursor": {
          "ref": "af036fca-9c1f-4568-abbe-08ddd2e7ab2e",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "be333fb9-d3bf-4ab7-8eb2-b4151b943513"
        },
        "item": {
          "id": "44ec149f-bea1-48a3-8a85-cde89d0155c7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8e32e6cb-5d75-4c18-afaa-3d1d28f9404c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 748,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "56967ec1-7cea-4981-abe9-8a1582b34158",
        "cursor": {
          "ref": "fc1ff013-110c-4f0c-a4df-a892bbc99746",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3107f3bd-1c4b-4b5d-8e12-ef9e05da2e5b"
        },
        "item": {
          "id": "56967ec1-7cea-4981-abe9-8a1582b34158",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0a6b5a55-e4cb-4802-b7f7-561848ea17e7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 757,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "6aa1d0d4-2649-4955-b594-96dbef3f2d7d",
        "cursor": {
          "ref": "095b360a-99a2-4f8c-92e8-6cf2dea6a71b",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9b4ef937-4e4f-4518-9cc5-a1f04e3c9102"
        },
        "item": {
          "id": "6aa1d0d4-2649-4955-b594-96dbef3f2d7d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "efc8cc2c-1812-4960-812f-bb99c781fc80",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 774,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "612c7031-2f5a-4a35-b4bc-fcf41ed38cd9",
        "cursor": {
          "ref": "002bdb35-6a07-4b00-9c3f-79b77c133947",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6fbcd7b2-98dc-47ec-8587-adaf562a5eb4"
        },
        "item": {
          "id": "612c7031-2f5a-4a35-b4bc-fcf41ed38cd9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9e4f3497-8460-4bfe-a594-ba7e17169079",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 747,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "29c0728c-60de-4c80-8f64-d7b2c908db04",
        "cursor": {
          "ref": "1056833e-269f-4b2a-a0c3-0944b1ec0bab",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "43517230-889c-4edc-8768-204314783ab8"
        },
        "item": {
          "id": "29c0728c-60de-4c80-8f64-d7b2c908db04",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3b5b5d18-e59a-45bb-bb39-18be6fd14792",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 760,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "49938fa9-509d-4008-9b63-8a904bec1e37",
        "cursor": {
          "ref": "15fd6de6-5224-407e-aae3-c400f5337ecd",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dcb087ce-1f40-451a-ad26-37444b41a517"
        },
        "item": {
          "id": "49938fa9-509d-4008-9b63-8a904bec1e37",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8686ad29-1ac6-4244-8948-a1211f0297ec",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 740,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "2c1aa349-43ce-4da6-8fc7-cf11b4d6977b",
        "cursor": {
          "ref": "1f1d599c-edb3-4f24-b532-83d0ae26fc65",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a1db2113-b96c-49df-876a-51acf6c98542"
        },
        "item": {
          "id": "2c1aa349-43ce-4da6-8fc7-cf11b4d6977b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b9700a9e-3021-4a0c-bd76-7aed437ca38a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 757,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "2354ed2d-7150-4531-8d48-1c6c84f5dd6b",
        "cursor": {
          "ref": "a5f92a09-6b13-4413-83e4-435f69b81ea1",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "61f278dc-2bed-47d4-bec6-ff2e9a6f74a8"
        },
        "item": {
          "id": "2354ed2d-7150-4531-8d48-1c6c84f5dd6b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3c6b5a9b-574e-4150-a3f8-0dbe55d4d804",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 737,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "38ba33f3-5fa4-47fd-af81-b930295343da",
        "cursor": {
          "ref": "bb029636-4706-4c9e-872a-5f0869b5614e",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "589b20fd-b896-4e59-844f-4b9882c7dd8d"
        },
        "item": {
          "id": "38ba33f3-5fa4-47fd-af81-b930295343da",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0033f977-416a-4471-a5ff-73295112131a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 790,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "9a50d7e4-7354-4162-b640-22e2af413203",
        "cursor": {
          "ref": "e0fc9d63-331f-4a22-9b13-28031acfb6ce",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "16d38684-1224-48d2-9b61-9131ca4b95e4"
        },
        "item": {
          "id": "9a50d7e4-7354-4162-b640-22e2af413203",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5125fd1c-02b6-479d-b47b-dba3074fca02",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 779,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "16b6392f-fda9-4c32-8826-1fcd61032336",
        "cursor": {
          "ref": "f6f2fff0-82b2-40e0-b9cd-11eecbd05d7a",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "15b10ee7-b1e8-444c-bdb9-ec3f6e00f21e"
        },
        "item": {
          "id": "16b6392f-fda9-4c32-8826-1fcd61032336",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2519ae16-16cc-4652-b8fb-dcc1bbd9c511",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 750,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "8db98111-d9b5-4e7c-9fbf-d24e966c3424",
        "cursor": {
          "ref": "1f6486d6-4aec-4bdb-9ea0-4f7897a52e33",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0b33ed2e-c7c7-43d7-83d0-bd9bff0dad7d"
        },
        "item": {
          "id": "8db98111-d9b5-4e7c-9fbf-d24e966c3424",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "11cc6893-0cee-466e-9d87-21ee58366003",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 770,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "76dcf165-6dea-43ca-9612-5c97ddd041b8",
        "cursor": {
          "ref": "8543d017-0f37-4f7a-a8c1-4e5bd49ec8f2",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b13825d1-d9bc-46e0-b279-e8bf18c8a60d"
        },
        "item": {
          "id": "76dcf165-6dea-43ca-9612-5c97ddd041b8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ac9b8d07-76af-42b9-ba29-45be4fa526c4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 789,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "d6d452fd-9ce7-48b9-abf6-260e4ce125d2",
        "cursor": {
          "ref": "9481e8fe-d330-48e6-873b-21b9fdf54309",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ecd5dacf-aedd-4e6b-8025-bc4e783b0aee"
        },
        "item": {
          "id": "d6d452fd-9ce7-48b9-abf6-260e4ce125d2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "68158617-0fe3-4a21-8cd7-adb6d649ff15",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 769,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "032b640a-58b0-4505-b5a8-bbd353f904db",
        "cursor": {
          "ref": "ac7b6de3-9a2d-42a7-b6fe-d77b5038ec7e",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "05c99ef5-6cc3-4fa8-8d6c-744f7076c848"
        },
        "item": {
          "id": "032b640a-58b0-4505-b5a8-bbd353f904db",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d901f469-1b6a-4f9b-b695-3fd9c5d75547",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 758,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1414d76c-135e-4880-9fdc-fd84e01bd887",
        "cursor": {
          "ref": "5c4cea5a-f9ff-4c37-8423-529ed24d98bf",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "68076b31-42d6-43a1-bba6-7425700ccbb5"
        },
        "item": {
          "id": "1414d76c-135e-4880-9fdc-fd84e01bd887",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e53032fa-8d33-47ff-a8d3-d23cdd80cfdf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 759,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "39c1673c-daa9-4ab8-bd8a-28b8232b6446",
        "cursor": {
          "ref": "a87bdfa4-5cae-4c9e-9b0e-b5045eef94bd",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2a55fbf1-a018-402b-9da3-8a4d0cd51157"
        },
        "item": {
          "id": "39c1673c-daa9-4ab8-bd8a-28b8232b6446",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ee8a1059-3dba-462d-97fc-4c4a8a37a782",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 770,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c5f591fa-dee3-4979-904d-040370b2f29c",
        "cursor": {
          "ref": "b65a875a-5770-44ee-9dc8-f59ad2d49861",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3b1d5178-01b3-47d3-adc1-888235298706"
        },
        "item": {
          "id": "c5f591fa-dee3-4979-904d-040370b2f29c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0a234b26-b2b8-4345-84c9-43786d6f7e1b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 751,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ded46052-d2b4-4d93-ac51-5cf083f49827",
        "cursor": {
          "ref": "852167d9-e16f-42d0-94e8-953c19f70afa",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1b05f302-8357-46e3-beea-e894a1e75428"
        },
        "item": {
          "id": "ded46052-d2b4-4d93-ac51-5cf083f49827",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "25f48bb5-eb6c-40bd-8d54-47962a2f0df6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 745,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "56174f55-d073-47a2-ab12-72854cc7d1a7",
        "cursor": {
          "ref": "a6823310-ca37-44b3-a976-0be23e363463",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ea24279d-b95b-4648-91d5-c29e00b729c9"
        },
        "item": {
          "id": "56174f55-d073-47a2-ab12-72854cc7d1a7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9173c3cd-ad6d-4793-b98b-d7963e425d5e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 754,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "13685337-0cd2-41ff-863e-abcfd76ce447",
        "cursor": {
          "ref": "0975b27c-cf74-4eee-bc31-0fe613e645f5",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e5f58d90-c90c-4dc5-9459-8634f1be8c34"
        },
        "item": {
          "id": "13685337-0cd2-41ff-863e-abcfd76ce447",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d4d3f31e-1863-47d0-adc0-bc7f63c78040",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 761,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "d61025fc-86db-4d57-b3b6-130803a21d89",
        "cursor": {
          "ref": "e0c3afae-fcb4-487a-a937-81aabed93d13",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ae0732d6-01a2-49d2-a5e1-fd1e6ef0f518"
        },
        "item": {
          "id": "d61025fc-86db-4d57-b3b6-130803a21d89",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "413f0a5f-4d33-4cb5-833f-641b292bd54a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 762,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "bde59a99-d977-4f51-9118-1aaaf02abb8f",
        "cursor": {
          "ref": "7a7b6be6-cb2c-4103-96fb-846af8f8a770",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8de6d398-121c-41b9-82d6-cf728d3421b3"
        },
        "item": {
          "id": "bde59a99-d977-4f51-9118-1aaaf02abb8f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cd4ff517-20b7-4891-a73a-d3fa337cdf27",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 746,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "d7aee883-a31d-40a3-882a-d0c44ff30552",
        "cursor": {
          "ref": "e7378cc1-2b3b-430f-b12e-c564aa2ce403",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "629d2b46-d37a-4b5a-90e1-341fa1602620"
        },
        "item": {
          "id": "d7aee883-a31d-40a3-882a-d0c44ff30552",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "19986336-edc4-4fd7-ab17-f5590d296f7d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 749,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "1d99e319-b3c8-4628-8403-8797cd141b7b",
        "cursor": {
          "ref": "9f58ecf2-04ed-4411-a5d0-c628210ac972",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "eabd113e-aac8-42fe-83e1-2e351acffb12"
        },
        "item": {
          "id": "1d99e319-b3c8-4628-8403-8797cd141b7b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "73852bb7-3705-4d97-8942-f701fa62cc6c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 746,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "3afe2cf7-1a5a-4699-8f15-9435f8481445",
        "cursor": {
          "ref": "4aeaa019-b6e3-46da-990f-b55c0137b0bc",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eb050f6b-245e-4ec3-af6a-0bf7845351af"
        },
        "item": {
          "id": "3afe2cf7-1a5a-4699-8f15-9435f8481445",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "69c919d2-1aa6-478f-80b6-5750c15d7957",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 745,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "072589b4-c027-4b0f-bff9-fe27796a8022",
        "cursor": {
          "ref": "c424ab5f-4f0c-4fbb-8373-dd2d047e36fd",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7aef3156-3b84-411f-9e7a-858f30dc564f"
        },
        "item": {
          "id": "072589b4-c027-4b0f-bff9-fe27796a8022",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ae4d514e-f7c9-4827-a0f0-b1492b876a63",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 759,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "2185ea4e-ba28-455f-8611-b0a5a72341c2",
        "cursor": {
          "ref": "b3b82443-7e90-4396-9a2c-e836b35bad65",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3ea6f93a-117f-451c-9e22-c9d6071285a0"
        },
        "item": {
          "id": "2185ea4e-ba28-455f-8611-b0a5a72341c2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "313e62ee-d7e1-4a61-b22f-9a4fd52a09fe",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 777,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "0d27788e-d0eb-4a7e-9f0f-000eac8a4023",
        "cursor": {
          "ref": "e9d04043-22f4-4582-bd16-c2b9f1072bed",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "220c965b-9b27-4838-afdd-c8861c3d81e9"
        },
        "item": {
          "id": "0d27788e-d0eb-4a7e-9f0f-000eac8a4023",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c19276f7-3130-4fad-8990-0f64d45972e6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 763,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "0d9a4832-a3da-4dd6-929e-1105c3b0216a",
        "cursor": {
          "ref": "5d98b888-94e3-4614-ba9f-4de6c433992e",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6197cbac-5381-4811-8425-959a77ddd5f8"
        },
        "item": {
          "id": "0d9a4832-a3da-4dd6-929e-1105c3b0216a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0e36aa12-2f1c-4271-8436-8ac6d95f93eb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 769,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "d9c91ae6-6d8a-42d9-b57b-2ca1ef3135e5",
        "cursor": {
          "ref": "659a6a93-3267-43a4-9e25-15ba4c2a3f25",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7c6ddfdd-6cc3-4d65-b71f-e40b02267f60"
        },
        "item": {
          "id": "d9c91ae6-6d8a-42d9-b57b-2ca1ef3135e5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "df26acfc-dfcc-4874-bcbc-d380a1d61a8b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 760,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "811d94ce-8c7e-4d6d-b503-b05926835a56",
        "cursor": {
          "ref": "678ae449-fc23-49e8-8760-d2352dfcd6a5",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a7ad72bc-db13-49f6-91fd-f2fbb23bb4d4"
        },
        "item": {
          "id": "811d94ce-8c7e-4d6d-b503-b05926835a56",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3d1a4f69-7035-48fc-9c41-298e0d87109f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 773,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "3645109a-64f0-4adf-a66f-bf102599302c",
        "cursor": {
          "ref": "22dc8138-65d9-4795-b69c-3ea601c5ef46",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fc41d572-d5d1-431b-b295-535165b8e3af"
        },
        "item": {
          "id": "3645109a-64f0-4adf-a66f-bf102599302c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2ca69967-76ad-4adb-9c12-4a7454288281",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 750,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "1f935b6d-799b-40d3-85c3-402a2fec0cfc",
        "cursor": {
          "ref": "44d3a313-4d8b-4572-8ba9-8a2e8034068a",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8a00552a-ca8b-4904-ac7c-03ddc18870fc"
        },
        "item": {
          "id": "1f935b6d-799b-40d3-85c3-402a2fec0cfc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "784e3882-03be-4429-8a97-91072e3cafb4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 762,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "299a4a46-b829-451b-9f95-d5b37a061516",
        "cursor": {
          "ref": "e4ddd0bc-c921-4284-8307-8fe07844ae48",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e0c3afa9-60a5-4af8-a4a3-c77f35d4d319"
        },
        "item": {
          "id": "299a4a46-b829-451b-9f95-d5b37a061516",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fc0d848e-d3ed-4b0d-a871-e8b345dd4e63",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 746,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "7d95c653-4385-449f-b643-2a0d61bf48e3",
        "cursor": {
          "ref": "25170be2-5054-4cf6-94fb-9135667432e1",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "427dced3-8342-490f-8add-f2906b0fe057"
        },
        "item": {
          "id": "7d95c653-4385-449f-b643-2a0d61bf48e3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4af0523b-4f7b-49ac-aa2b-10100aeff5e0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 764,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "4d47dac0-c088-49b8-8d1c-f9e12c240170",
        "cursor": {
          "ref": "ed37da6f-b65e-4831-a280-965f96ff8680",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7ad3ac72-8522-4019-96ab-92e8c32cf4b8"
        },
        "item": {
          "id": "4d47dac0-c088-49b8-8d1c-f9e12c240170",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e96ae765-5aa7-4a63-b41e-2204f5160cf7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 749,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "4d7d7270-3596-4ec1-8765-5642bdb48b03",
        "cursor": {
          "ref": "aa6a139b-7bd1-4f8b-8e0f-6f4a9986cdbd",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c8e8618f-6791-4be3-9927-6f3895e9a143"
        },
        "item": {
          "id": "4d7d7270-3596-4ec1-8765-5642bdb48b03",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cb3bbe79-4be7-405f-b569-e07d607a5e2a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 752,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "f6f03a9a-1df9-4869-a315-508bf70b6382",
        "cursor": {
          "ref": "1953bd62-57c6-48d8-b132-b5b12abf9e0d",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0a1637bf-631c-4115-b048-85c0108606e9"
        },
        "item": {
          "id": "f6f03a9a-1df9-4869-a315-508bf70b6382",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "024d41fc-cf11-41ba-b5c7-aa84b3d7390a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 760,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "273f39d0-aa7a-4815-a435-45f1757b9293",
        "cursor": {
          "ref": "8d0a6658-ff18-4000-b5a1-f66c391a611a",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "791351a8-99be-4b8f-baff-47d728644dd6"
        },
        "item": {
          "id": "273f39d0-aa7a-4815-a435-45f1757b9293",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "80d1b34d-686f-4c83-86b7-d3d2cbdd8e6f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 747,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "ace542b6-c5c2-4ee1-9e98-a46cf6101787",
        "cursor": {
          "ref": "8f66e3c2-4766-4d96-92a6-0d837a821b11",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "314d5a6b-2e26-475b-9267-741009b0ffcc"
        },
        "item": {
          "id": "ace542b6-c5c2-4ee1-9e98-a46cf6101787",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b9603d58-d015-46fd-8385-97758e7df47c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 743,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "8eda4eb9-c019-4e5c-8edd-ccd9dab8c882",
        "cursor": {
          "ref": "f807a4be-deb9-4631-9e88-78304221fe88",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6fae5179-d101-4286-bb91-c3539fb1cc21"
        },
        "item": {
          "id": "8eda4eb9-c019-4e5c-8edd-ccd9dab8c882",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "34996cf0-d831-4fac-82e2-fb9d5f47c883",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 767,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "ad1ef71c-266f-49f0-8332-108a5e2a60cc",
        "cursor": {
          "ref": "3f7a4fd0-437b-4388-bb85-e08e7783185c",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9ead1db7-c420-4c8e-a35a-4cf98658e052"
        },
        "item": {
          "id": "ad1ef71c-266f-49f0-8332-108a5e2a60cc",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "164a4e17-a0f0-479c-9ba5-748eca651640",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 748,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "9d90a908-1106-4ecb-8637-4a16d2ec9f46",
        "cursor": {
          "ref": "bdd84266-30f3-4d90-8eed-a3f5db7a7eb6",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "de59370e-f1a2-4b87-b00f-138a4cc928ff"
        },
        "item": {
          "id": "9d90a908-1106-4ecb-8637-4a16d2ec9f46",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8dc063ea-3fb5-4661-937c-c1cac2339d8e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 755,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "5a258002-68a1-4a10-8f62-43c55ed9b4ed",
        "cursor": {
          "ref": "6c34d722-0476-4849-8257-03fbc65ee0be",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e67aa6ee-2531-4b66-ae53-271b95d42c44"
        },
        "item": {
          "id": "5a258002-68a1-4a10-8f62-43c55ed9b4ed",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "978ad588-e053-49f7-b703-559cfae32f76",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 756,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "15216ced-85b3-48e7-af88-9fd9ca0edd9c",
        "cursor": {
          "ref": "64ce4f1c-d9e9-4a0d-8a83-229f360a1a76",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e7fff99c-aaff-40b7-8009-1e771a1fc1df"
        },
        "item": {
          "id": "15216ced-85b3-48e7-af88-9fd9ca0edd9c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0b611efb-d09e-481c-b7a8-3a40776f4e7f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 734,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "a4dd21aa-dc57-4c0c-a3c3-10fe0646ffa3",
        "cursor": {
          "ref": "8fc3403b-8861-4d41-bb8d-ed64730b23d7",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6acc46da-e65a-4c63-8d74-4ae9cc3e6f34"
        },
        "item": {
          "id": "a4dd21aa-dc57-4c0c-a3c3-10fe0646ffa3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cb903c71-b7bb-4f45-81fc-f00a3e55f689",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 746,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "3a7c5528-a3c0-4c43-aa4a-e466f49e6b68",
        "cursor": {
          "ref": "7df2a21b-90e9-4b90-909e-db68ccf78a1c",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1cb6b856-dfd2-45c9-a745-a9dc223aa2f2"
        },
        "item": {
          "id": "3a7c5528-a3c0-4c43-aa4a-e466f49e6b68",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "03a48837-9cc2-4a29-a3c6-54cd4c3e7e22",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 761,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "b1e6b48e-6aaf-496e-97b5-4f052b4a92ad",
        "cursor": {
          "ref": "bef9df7c-be83-46a3-9c1c-679c6b63a025",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "67d49641-d93f-400a-a516-8bcf65f67e28"
        },
        "item": {
          "id": "b1e6b48e-6aaf-496e-97b5-4f052b4a92ad",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e6571d65-45a2-45b0-ab68-46c133e1299b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 770,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "58a73c45-fe19-496b-98e7-ddc2c93fb22c",
        "cursor": {
          "ref": "2b6fe279-cea8-49dc-b17e-af78f8e85fe1",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cfa8012f-ff94-4977-8e73-5c719ffeb101"
        },
        "item": {
          "id": "58a73c45-fe19-496b-98e7-ddc2c93fb22c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e45e784c-0c02-41e1-9fba-c7ba88a1dfec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f630ff7-5cba-4fd0-8bdb-133443cd2edc",
        "cursor": {
          "ref": "c00dbf4a-4e3b-43f7-b5c0-edb887ab1d7b",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3b996b92-41ec-41b4-928a-db731ffc92c1"
        },
        "item": {
          "id": "1f630ff7-5cba-4fd0-8bdb-133443cd2edc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5c93623d-939b-4cd5-851e-f804d1e442b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 746,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "c3bdbc91-d3d3-4bce-a625-6b7a6e71990f",
        "cursor": {
          "ref": "e421020a-31e7-438d-aa3e-aca9cae9030a",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5846ade5-18df-4aca-bad8-bc1f741a5ead"
        },
        "item": {
          "id": "c3bdbc91-d3d3-4bce-a625-6b7a6e71990f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f923c090-c4e8-442c-a621-422e293fecb0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 754,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "688e28ab-d388-4e0b-84ac-39aac8adc7e8",
        "cursor": {
          "ref": "581d8410-69df-4582-a3d0-6ddde3be22a2",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "53cbf38e-30f7-410a-8a04-ee418187bc96"
        },
        "item": {
          "id": "688e28ab-d388-4e0b-84ac-39aac8adc7e8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "187f1318-0c92-4f95-82c2-94b45219393d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 795,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "9cccfa0f-0a6a-4eb2-a2d1-c99cb1b813d5",
        "cursor": {
          "ref": "70111777-dd5a-4a2c-af76-2e57cb26f289",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7c0c92c1-6b20-4a0a-b634-a0cc448019e3"
        },
        "item": {
          "id": "9cccfa0f-0a6a-4eb2-a2d1-c99cb1b813d5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "aa10dee1-cc2f-439c-83a9-c816dc653239",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 760,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "bb7ecdd5-5dab-46cb-b9eb-0f98a73bbdcb",
        "cursor": {
          "ref": "d060b71a-5b71-4b39-a84c-2027726a162e",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9097fa39-7348-43bd-a1f0-42165b5acb95"
        },
        "item": {
          "id": "bb7ecdd5-5dab-46cb-b9eb-0f98a73bbdcb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5c8a0ce8-c486-497c-9aaa-28c4054e88be",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 741,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "4d2ba53e-5dd0-4c65-9e7a-d9c8d93e9bf4",
        "cursor": {
          "ref": "eb087990-baa5-497d-a078-6bc34488ec13",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8e964961-ed2b-49cb-ae2f-f5f4fbd976c8"
        },
        "item": {
          "id": "4d2ba53e-5dd0-4c65-9e7a-d9c8d93e9bf4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "717a9e52-6069-4530-a09d-69009486be43",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 749,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "fc2182bc-16e3-48ea-a73e-745424cfc5e9",
        "cursor": {
          "ref": "a98e780b-abc8-4569-bb92-04df421bd3d6",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8b0aaec0-7185-4a37-9195-5ba0dcd5d3bc"
        },
        "item": {
          "id": "fc2182bc-16e3-48ea-a73e-745424cfc5e9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3be3357c-6fcc-4541-bf88-3fe3337cd6e3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 750,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "e3644dba-03b0-40e3-a0f9-0d10ac6bccb9",
        "cursor": {
          "ref": "93d5d0a8-7cb1-4a86-883f-7efaf06cd3e1",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "154a851e-49af-490e-a134-52daf8a80a2c"
        },
        "item": {
          "id": "e3644dba-03b0-40e3-a0f9-0d10ac6bccb9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "08c93105-47ab-491d-8326-8e50975dcafc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 755,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "17912f57-4e75-4bc7-8bf9-aa21164dfc57",
        "cursor": {
          "ref": "6894cc17-3f24-4732-8170-2fd1da67bb38",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "da53a736-d880-4396-9f41-13ab6400a6a0"
        },
        "item": {
          "id": "17912f57-4e75-4bc7-8bf9-aa21164dfc57",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7a2d95c4-bf61-42e7-b560-56f8f055db95",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 761,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "b133525e-46c4-4a51-a0ef-464d3b3da5dd",
        "cursor": {
          "ref": "1209132f-532b-4f7b-8e02-b77ae210fc35",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bc2449d2-36a7-4d7d-832a-07c8fe93b065"
        },
        "item": {
          "id": "b133525e-46c4-4a51-a0ef-464d3b3da5dd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5bde515c-08dd-4a93-8031-fe41e394eaf3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 769,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f8bd533a-32ff-440a-a7ef-e6e259bcb55f",
        "cursor": {
          "ref": "5e2e8aa1-7c41-4139-8d84-1505d9af7403",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e21ce233-2ea1-4210-9118-aec1ea784e4a"
        },
        "item": {
          "id": "f8bd533a-32ff-440a-a7ef-e6e259bcb55f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d227db89-ff51-4bdc-a487-74ec76b46a4e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 748,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b373f3af-f5e1-4470-bb54-cc7c3f869f9f",
        "cursor": {
          "ref": "e9148522-a5d4-44db-9993-89b44f56c058",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2aac5734-33da-4ba2-b416-76ba640f234d"
        },
        "item": {
          "id": "b373f3af-f5e1-4470-bb54-cc7c3f869f9f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0583592f-00fb-4264-8cc4-ca67530d11e7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 762,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "37ab047b-4f0d-4ed9-a45e-bcd82cd26a38",
        "cursor": {
          "ref": "8450d9a5-da0d-4b44-9dee-2c7ecb4215cf",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "02bab374-a495-409a-bbdf-7a796235c404"
        },
        "item": {
          "id": "37ab047b-4f0d-4ed9-a45e-bcd82cd26a38",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "029adb47-8265-4ac0-b2b8-22397a1b4593",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 771,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6d741ac4-ba92-4927-aede-99258d51c443",
        "cursor": {
          "ref": "f1dbe0e2-3331-47e0-bd62-70810f7ee88f",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1af86955-3c5d-4cbd-aa61-0314e69289fd"
        },
        "item": {
          "id": "6d741ac4-ba92-4927-aede-99258d51c443",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "414d2f88-6b62-4052-8a2b-dbf2700171c9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 767,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "24cdc62e-1aa2-4ea9-a486-ed4dc612edd8",
        "cursor": {
          "ref": "8d46d980-76aa-4fcd-86d0-bfb0f113c408",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c03c14bc-6434-4aec-aa8e-f9c88c6e5033"
        },
        "item": {
          "id": "24cdc62e-1aa2-4ea9-a486-ed4dc612edd8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9a78cd24-53bf-48d2-ace1-8b7ee724d8ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 775,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "9d5aeedf-47c9-4cea-8537-4f1231ab3459",
        "cursor": {
          "ref": "2746d8d1-af5b-40c9-87f6-6547b8f290cb",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b1f1ef89-a080-4663-b3b8-1f461f47fc03"
        },
        "item": {
          "id": "9d5aeedf-47c9-4cea-8537-4f1231ab3459",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "03d14ade-70ca-4fcf-864a-454a7be1f4e1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 797,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "6d3c50b7-0e59-4cde-822a-62fc5866bcba",
        "cursor": {
          "ref": "0983722d-3e84-4d6f-ba08-abaf28535193",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "89bfd1cf-0148-4a9d-9626-8bc8faf7bada"
        },
        "item": {
          "id": "6d3c50b7-0e59-4cde-822a-62fc5866bcba",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3d865fc5-9e43-4378-904a-aa518dbb9b19",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 763,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7f5b9289-5dfa-454c-a038-7e9e905c7cde",
        "cursor": {
          "ref": "1ced04ae-14e6-4234-849f-e0767ec958f6",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bc7be6db-3750-4970-b8eb-132b60413e58"
        },
        "item": {
          "id": "7f5b9289-5dfa-454c-a038-7e9e905c7cde",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d4f96790-a2f0-4620-a081-2c16d3fa12f2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 749,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "eaf106d7-d5ad-4ce1-9394-ef5b9629767b",
        "cursor": {
          "ref": "84738181-70be-4ad3-99e0-ed9337724ef9",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3cf4455b-e68f-40d9-aa5b-057b5c43078e"
        },
        "item": {
          "id": "eaf106d7-d5ad-4ce1-9394-ef5b9629767b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "86fecb99-6c27-4e5c-a74f-d2a7fd4a8866",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 737,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "32387b1e-d4a2-4f69-a013-d884ae34d222",
        "cursor": {
          "ref": "19fadaf4-44de-4153-8864-95d251739f3b",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b8399796-4560-4404-83b4-7b40589069a7"
        },
        "item": {
          "id": "32387b1e-d4a2-4f69-a013-d884ae34d222",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d9b6c24c-3146-4469-b57e-11992cd6a233",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 749,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2e1eec5f-18f2-4582-a5b4-f4feca7e7eb5",
        "cursor": {
          "ref": "6344b8bc-b07a-4143-945f-49e5b95c6e6a",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "554e752f-6282-41a3-aafd-50c438937980"
        },
        "item": {
          "id": "2e1eec5f-18f2-4582-a5b4-f4feca7e7eb5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "261067a0-64f2-4992-903c-e8d1c65b687f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 774,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "572ca51f-d846-4d94-b862-ef93d399a7af",
        "cursor": {
          "ref": "42384b68-5a5b-423b-9ee5-cbb472f7e7da",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "da37d762-c9c4-48ed-a9de-0213db936e03"
        },
        "item": {
          "id": "572ca51f-d846-4d94-b862-ef93d399a7af",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9a466e11-a93e-4d7e-96f7-1de9001b9304",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 772,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "5713bd19-fba3-488b-b417-9968017c76d1",
        "cursor": {
          "ref": "b58fc78b-1e18-4043-bb83-1ff2e157607c",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4bb4ab76-12d4-474e-9935-48d1937aac6c"
        },
        "item": {
          "id": "5713bd19-fba3-488b-b417-9968017c76d1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f94d735c-2598-4dbf-9e76-4c6566e86090",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 756,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "ccbafa26-4127-4293-8ef2-1b5aeb6f3ec2",
        "cursor": {
          "ref": "a7bba4df-47d4-42b6-a6f9-941ac33d9fb2",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "696d5d7c-ce04-4fcd-a319-c756b1ef7610"
        },
        "item": {
          "id": "ccbafa26-4127-4293-8ef2-1b5aeb6f3ec2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9a4983ba-40ba-4ab7-9d78-35b442ce7ea9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 753,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "b9968174-69e8-412e-8c5d-01553c53442d",
        "cursor": {
          "ref": "42d9ca92-fbdd-4d38-86ca-7ce2bf699727",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "95710aea-9a89-4f6f-8b22-c84bd25c9b34"
        },
        "item": {
          "id": "b9968174-69e8-412e-8c5d-01553c53442d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "12729550-93e4-4a77-b009-827dcb14c8e5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 741,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "a44307ed-53a1-4c8b-a272-dc010847de34",
        "cursor": {
          "ref": "4a29479f-5a8e-4bf2-bf55-acc497ffcf68",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "31c7b9b6-dadb-4ad6-8592-0952f4371777"
        },
        "item": {
          "id": "a44307ed-53a1-4c8b-a272-dc010847de34",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1e4cd3c3-abe5-4197-86ee-7ab5791b2879",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 744,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "d532368d-5982-4832-992f-bd663b7d2c0e",
        "cursor": {
          "ref": "076248a0-8e45-4a91-8de2-465cb9b69a62",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9f781f9c-1d15-4956-a8b4-d4328d49bbc6"
        },
        "item": {
          "id": "d532368d-5982-4832-992f-bd663b7d2c0e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b31bd66f-15a9-4f46-8ade-f5540cabfce1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 738,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "ba233976-aa05-4dc0-8d9b-c626ba018816",
        "cursor": {
          "ref": "82f9bfc2-57bd-4e97-851a-91eacb3444ae",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "334bea55-f60c-4e8b-8e66-0b2433e45fba"
        },
        "item": {
          "id": "ba233976-aa05-4dc0-8d9b-c626ba018816",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e1982bab-4303-4307-a79c-8815df121108",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 777,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b1f5ea0f-f71c-40f6-9a14-f314ad65572f",
        "cursor": {
          "ref": "6224898a-d12b-4479-9fe1-07f75f782b17",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "28fa7dea-ef9a-42ae-91fb-6d2e0d61096b"
        },
        "item": {
          "id": "b1f5ea0f-f71c-40f6-9a14-f314ad65572f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a8843b95-02bd-4761-b6e1-5a4345c7bd11",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 758,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7374f658-e364-4cbe-a347-d5d2d675639a",
        "cursor": {
          "ref": "77a69c58-7ca4-4dfa-af7e-cd05312c70e7",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "464ce607-87d1-47de-b119-56e83f255018"
        },
        "item": {
          "id": "7374f658-e364-4cbe-a347-d5d2d675639a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3a77b9f4-d5f1-43b4-9f89-c39a8f9a2b6d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 734,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "7748a31f-3bf2-421d-b4e9-d8bcb6ee1f81",
        "cursor": {
          "ref": "ce36a3c3-7d0d-445d-bcf1-899b06509f09",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ef8272b1-0fbe-4c1f-94e2-59deef898efd"
        },
        "item": {
          "id": "7748a31f-3bf2-421d-b4e9-d8bcb6ee1f81",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d4a2e7b1-d149-414b-82e8-4776f5685259",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 766,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "a9f7dd5b-745b-4f4f-b69a-360e47c44bfb",
        "cursor": {
          "ref": "8739d866-b8b6-4f59-9f71-c24c05bbc03e",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f5893824-1f26-4335-85a8-2a255d9f3c0f"
        },
        "item": {
          "id": "a9f7dd5b-745b-4f4f-b69a-360e47c44bfb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c08ca51d-4553-4a9c-9c30-a21dfe8417f5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 725,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "ee56848a-c98a-4c58-8496-f26f8cff174c",
        "cursor": {
          "ref": "7aef42fc-9a09-4ca6-8a3e-e1cd21eb3179",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f370978b-835e-424a-9242-985e80c6cbf0"
        },
        "item": {
          "id": "ee56848a-c98a-4c58-8496-f26f8cff174c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "afaa17b4-ef0b-4e8d-8a8d-2597abbc18b7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 737,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "8d767d48-3447-4b45-81f4-3f80adf0d6f5",
        "cursor": {
          "ref": "14acdc33-ffa5-4580-a71f-8736b1f7acab",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "42c659be-391b-4a46-bb47-1031121a616f"
        },
        "item": {
          "id": "8d767d48-3447-4b45-81f4-3f80adf0d6f5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4224d3a1-d553-43b5-bbc6-0b5dabfaf765",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 781,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "0700930e-cad2-4051-8d9c-96060f367240",
        "cursor": {
          "ref": "82337443-9e27-4fed-bf8d-bb9307ca6d48",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d809b741-dfa1-416b-abe0-0586ed6bce1f"
        },
        "item": {
          "id": "0700930e-cad2-4051-8d9c-96060f367240",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "79e49010-bb83-4cf7-994a-f9cf1622b97d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 750,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "46dc108a-c140-4630-b879-907788ecdb28",
        "cursor": {
          "ref": "448c7936-146d-4dfc-b6ce-93c8de95eb8c",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b5b3cbef-cdb1-4a0a-ab20-de412e59a7e7"
        },
        "item": {
          "id": "46dc108a-c140-4630-b879-907788ecdb28",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7767f8f5-3903-45ed-8bc4-cf108dcda3de",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 755,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "566a5693-8453-40d1-b858-c98351ab1e78",
        "cursor": {
          "ref": "72569156-5859-45ad-910b-18ae07f347ae",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9142c0c3-6876-42ef-8003-580537674ade"
        },
        "item": {
          "id": "566a5693-8453-40d1-b858-c98351ab1e78",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4c418a58-c2b5-426d-bf47-5e640590d937",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 746,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "42599e1c-14de-4d63-98fd-d37d304d6fcd",
        "cursor": {
          "ref": "da150f8e-1b53-4849-b4dd-67575594f64e",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0111da7c-7f06-47c4-ad5b-7fac845a0406"
        },
        "item": {
          "id": "42599e1c-14de-4d63-98fd-d37d304d6fcd",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "fe30e2c5-9b8b-4c78-b5e2-044af23dacc8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 766,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "121ca634-cabd-4b4c-8171-34f2bcb3b5c1",
        "cursor": {
          "ref": "a72c5d74-99f0-438c-9895-71b6918681fc",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "47cb2b71-9c42-47ee-bbf2-9f548028171d"
        },
        "item": {
          "id": "121ca634-cabd-4b4c-8171-34f2bcb3b5c1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "786aaf2e-5dc7-45cf-ae09-a839100ae314",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10811011-c7f4-4948-8ce4-b292e3d6d9b2",
        "cursor": {
          "ref": "22185af9-eb0d-4abe-899a-0cb7d3764048",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cdb33b7f-4ae4-465f-832e-c41119213e8d"
        },
        "item": {
          "id": "10811011-c7f4-4948-8ce4-b292e3d6d9b2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c014be5b-61f9-4f65-8655-84ae5eee83af",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 560,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "615e846d-523e-4f13-bd01-84ce4871c95c",
        "cursor": {
          "ref": "7c6a8e38-94aa-4fe5-a3e1-5eee97b19449",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c89f6c8e-57b8-4719-aea2-e432b559ce42"
        },
        "item": {
          "id": "615e846d-523e-4f13-bd01-84ce4871c95c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "593a3381-62d6-4765-acd6-e41c7bbaf2ff",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 541,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "34c20b91-b03c-46e1-a9e4-37624bb468fe",
        "cursor": {
          "ref": "b873474e-5ffd-4c8d-a723-7838629c8a3f",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a8012bf4-b055-4ed8-b6f4-80380998b49e"
        },
        "item": {
          "id": "34c20b91-b03c-46e1-a9e4-37624bb468fe",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d8156771-e7db-4d8b-a442-d121d017cd5b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 548,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "115d8069-22c0-473d-8a98-c5621f2d70c6",
        "cursor": {
          "ref": "cf137165-ac59-4947-a11f-5ace6f8029b0",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e65bdb65-4718-494b-95d9-d2cd13c03ea7"
        },
        "item": {
          "id": "115d8069-22c0-473d-8a98-c5621f2d70c6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f56e08ca-ba4f-4e45-910c-654895fdf560",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 542,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "8e727736-0e6a-4aed-9aa3-4e8ff15da78a",
        "cursor": {
          "ref": "61592068-bbc7-4aa0-befe-9fe986989c2d",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "031271c2-5410-4162-96b3-dd9444563cbf"
        },
        "item": {
          "id": "8e727736-0e6a-4aed-9aa3-4e8ff15da78a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "dec06138-e8a0-4e99-aec8-a030509f2cae",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 546,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "6afe0f13-6e8d-479e-a18b-8b485d669578",
        "cursor": {
          "ref": "d1767baa-1fa8-4c60-a54c-5f68c92e0e06",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f2c4d7b7-a40c-437b-bbc1-9a26b4f799b7"
        },
        "item": {
          "id": "6afe0f13-6e8d-479e-a18b-8b485d669578",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0ca670a4-d0e2-496f-a9a5-34149ef1fc7c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 549,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "46b607d2-70f9-4697-a741-7df2ed53258d",
        "cursor": {
          "ref": "f39714d1-a0f2-47a2-993c-b0c2f47ea0c5",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d06abae7-db04-49bd-96c4-98b57716ab48"
        },
        "item": {
          "id": "46b607d2-70f9-4697-a741-7df2ed53258d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "057bd97c-ce43-44e8-a38a-880aa0263908",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 528,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "54ab92cc-15a1-4c19-b7f6-4cd4b64a5cb6",
        "cursor": {
          "ref": "1b6b2b68-f930-4843-b0c2-8a8282e75674",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b14a9531-e0e2-493a-9d78-4669483ec6cc"
        },
        "item": {
          "id": "54ab92cc-15a1-4c19-b7f6-4cd4b64a5cb6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "02c7957e-e544-491a-a946-008bf1350812",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 534,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "f5ad54e3-d687-44b9-a717-b10ee9c5e20d",
        "cursor": {
          "ref": "16064ec9-dbb4-4db7-96b8-7cbee0221cf3",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2998beb4-76e9-4598-836d-87eab8cd820c"
        },
        "item": {
          "id": "f5ad54e3-d687-44b9-a717-b10ee9c5e20d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d9b2283c-fb63-44dd-890a-31e4dd2c4a2f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 535,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "bcecdbb5-0641-463b-9291-89dc5d8d8134",
        "cursor": {
          "ref": "03fcbea3-1c61-4d20-bc1b-3e0b28aff6fd",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a55e2d30-9451-4ac0-8744-1814e722c00e"
        },
        "item": {
          "id": "bcecdbb5-0641-463b-9291-89dc5d8d8134",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f82f071b-7344-4e6f-a3c5-b12aa278889d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 541,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "6a76459b-3f12-40f6-93a0-3bad77c74028",
        "cursor": {
          "ref": "2348df90-31a8-4d10-adeb-8bbbf45e03b1",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "87e59d9e-c2ea-4e47-8120-13f8c60e118e"
        },
        "item": {
          "id": "6a76459b-3f12-40f6-93a0-3bad77c74028",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c5c5d2ff-d45b-4f76-84d7-5082be193492",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 543,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "b15d2c7a-e939-4c41-90a3-8bb140660e79",
        "cursor": {
          "ref": "56c0a3ea-99b1-4bdd-a30e-a9388eda6d92",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "534b4c07-db76-4684-88fc-6b8e0d69ef02"
        },
        "item": {
          "id": "b15d2c7a-e939-4c41-90a3-8bb140660e79",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3686f349-c233-4951-99c6-33bbfda43ed9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 525,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e3504f75-0ed9-4767-a311-ebb55321bebf",
        "cursor": {
          "ref": "a0db7a44-69e0-43b8-875a-2f22cca809fa",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0f6742cd-c615-4e52-aa80-4c85a77d1ec3"
        },
        "item": {
          "id": "e3504f75-0ed9-4767-a311-ebb55321bebf",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "90db9d9e-181e-4a7f-9194-92181a780eea",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 533,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "8427f2b9-9f1c-4de5-9a85-7691b043daa7",
        "cursor": {
          "ref": "c21f2790-abec-4f3f-92fd-a2f57075d01d",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e56bf4af-f5ea-4e1b-9e32-7bab4176dcf4"
        },
        "item": {
          "id": "8427f2b9-9f1c-4de5-9a85-7691b043daa7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8e40964d-d3c3-4d7b-adb1-6c975458562c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 527,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "761b4aea-09da-4346-a0fd-81180e716afd",
        "cursor": {
          "ref": "3a383260-0647-4544-8161-0b65c75dfac8",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "85f90726-d90c-4167-bf3f-fe09d5d59706"
        },
        "item": {
          "id": "761b4aea-09da-4346-a0fd-81180e716afd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1b9a72dc-2c13-4b0f-9c36-6aa06518f8e9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 527,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "20dd76dd-67f9-41a5-ba84-4a150f331593",
        "cursor": {
          "ref": "4bfca3be-b34a-4d2a-9971-c489f03ab0e4",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6ebbbdeb-13af-4c08-946f-6d0afba54c8d"
        },
        "item": {
          "id": "20dd76dd-67f9-41a5-ba84-4a150f331593",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "80fd368c-670b-4c39-af57-7888ca2ede40",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 539,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "fa8d11f6-6a44-4e45-a59c-5240bb308f91",
        "cursor": {
          "ref": "9567f97a-ff36-4914-b9df-34b0d528af79",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c6f3f594-fa67-43bf-8f6c-60c5550abce6"
        },
        "item": {
          "id": "fa8d11f6-6a44-4e45-a59c-5240bb308f91",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0a179e4c-298f-43d4-9a65-db3d932c4498",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 531,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "d367e93a-13d4-4fa7-ad5d-bbccfbff23a9",
        "cursor": {
          "ref": "bfa77432-3c07-40e0-8274-351ccea9afa1",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "61341fd7-0526-44ed-a8fc-b3b153708969"
        },
        "item": {
          "id": "d367e93a-13d4-4fa7-ad5d-bbccfbff23a9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f8ce54e4-8075-47ac-b307-9f836ab8f786",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 547,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "9af515a5-cde6-45f8-84c8-7b95bcb599e5",
        "cursor": {
          "ref": "be024ac6-a98c-402b-ac3e-2482be9d9095",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cc2c27a6-d87b-4e4d-bbfe-717a138f4ce1"
        },
        "item": {
          "id": "9af515a5-cde6-45f8-84c8-7b95bcb599e5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bb16ca9f-c0d8-4280-9062-174de9f92564",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 522,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "0ab32f39-31b2-40c0-a8f1-d90afcad7f7b",
        "cursor": {
          "ref": "3ff06e4e-cade-43f6-861c-8a69cde40810",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "70df64dc-1be6-41c8-becb-65d81ddb8f58"
        },
        "item": {
          "id": "0ab32f39-31b2-40c0-a8f1-d90afcad7f7b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4297320f-f107-4c44-be72-41bda3870984",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 556,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "d66c94ef-0704-4202-a006-53cbfad36a20",
        "cursor": {
          "ref": "538fd289-261c-460c-b690-6837105b9b13",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "de960e54-d60f-4411-bd62-4543428a00af"
        },
        "item": {
          "id": "d66c94ef-0704-4202-a006-53cbfad36a20",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7f5db5ad-f675-4d24-9e4c-1fb6f61b1913",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 538,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "9bb27e18-b7c7-4e55-bb04-27ffc9516460",
        "cursor": {
          "ref": "96aa6fe3-2c6e-4a33-82ec-909efba023c2",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ca758301-8718-4165-9cba-fa1ce78e374d"
        },
        "item": {
          "id": "9bb27e18-b7c7-4e55-bb04-27ffc9516460",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2252f9e4-225e-479c-bb89-e76f9940d5bd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 523,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f5456cbe-2811-44e0-b1f0-3f9aa73d5bf0",
        "cursor": {
          "ref": "f818e877-a3b3-4bd9-b26e-4b1612942281",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a362ad22-eacc-4408-94c5-6aeeb57a61a5"
        },
        "item": {
          "id": "f5456cbe-2811-44e0-b1f0-3f9aa73d5bf0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "11cca950-4778-4148-bb2a-f2413b3c6698",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 544,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "8dc53394-f7ca-49b6-81cf-9ec1d59d9cf9",
        "cursor": {
          "ref": "6a00e60e-180c-46dd-a501-8c51166354ed",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fd5da210-9349-4170-9551-25548f3a7079"
        },
        "item": {
          "id": "8dc53394-f7ca-49b6-81cf-9ec1d59d9cf9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6523affd-4ed6-49be-bef6-7d99c5ee8503",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 524,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "9bbb4a55-efa9-45b0-a2fd-91b8fb50bea1",
        "cursor": {
          "ref": "02b41f8f-7ad9-4fac-8089-4b2f10aede5e",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2eb187c2-5cc7-409c-abd4-8140d7335ba7"
        },
        "item": {
          "id": "9bbb4a55-efa9-45b0-a2fd-91b8fb50bea1",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "13bdd660-fd55-474e-92f8-fed70e8c841e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 543,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "ea052406-e231-476e-90ae-ccde10485dac",
        "cursor": {
          "ref": "d3bb0029-9ec6-4eac-833c-3322c1c32cdb",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "91da6d49-09a1-48d9-9c8f-607bf24e10ea"
        },
        "item": {
          "id": "ea052406-e231-476e-90ae-ccde10485dac",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "569a9022-4164-4357-9bf2-5b385fc03c24",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 550,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "cb300b35-e370-4ce8-a529-d5815dd60d54",
        "cursor": {
          "ref": "c93ebc16-364f-49cd-bedc-7fbfcd5ad082",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0c5a3626-ef11-4681-9573-c597baa8de3c"
        },
        "item": {
          "id": "cb300b35-e370-4ce8-a529-d5815dd60d54",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c229d449-305b-4f99-81d1-1a7064997251",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 535,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "f2f18b01-891e-48be-a58d-7dd4aa64e308",
        "cursor": {
          "ref": "0ec18136-99d8-49f8-8f3b-60398d0dcb86",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "da0ebd74-3cd4-48fd-a2b2-5b19f8c56ce6"
        },
        "item": {
          "id": "f2f18b01-891e-48be-a58d-7dd4aa64e308",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1dbbe7d7-e3a2-4c0c-a80b-124528566ef1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 533,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "c825c93d-6a34-43f9-9d89-5444561c86e2",
        "cursor": {
          "ref": "15d64c5a-11ad-4ff0-b650-1c9cae84ff1d",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bed1b574-9a1d-40d2-8edf-7add7f551492"
        },
        "item": {
          "id": "c825c93d-6a34-43f9-9d89-5444561c86e2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "59bf2f75-27b6-4fe9-95cb-95df4c9d88a5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 530,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "19a55989-d8fe-4a46-befa-a289aa8dccbb",
        "cursor": {
          "ref": "c2a04211-663a-47c0-a32e-9c554b546afc",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f70556eb-5736-4361-9d4d-b09f16fa151c"
        },
        "item": {
          "id": "19a55989-d8fe-4a46-befa-a289aa8dccbb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "037bf40e-c698-4b20-a090-d34a8fc5c66a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 529,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "7d57652f-66ae-4486-80c3-1aad9361df4e",
        "cursor": {
          "ref": "8094bcbb-d854-46c5-90ee-fc9bf481dd2c",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e2717f31-e173-41f9-bf90-38e3f5645e19"
        },
        "item": {
          "id": "7d57652f-66ae-4486-80c3-1aad9361df4e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "da79f930-1cef-48be-9712-68717ddcb7a7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 530,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "8947a0a3-16df-492a-9103-eb905025d90a",
        "cursor": {
          "ref": "96009018-649e-4e9a-bda5-dd68a55a5c17",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b963dab5-a99e-4c43-ae7d-a348e00849b3"
        },
        "item": {
          "id": "8947a0a3-16df-492a-9103-eb905025d90a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c686adfd-404b-40ab-855c-fc5e493c9c89",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 540,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "96b1b21b-3d0c-4fb4-b609-87eb462a5901",
        "cursor": {
          "ref": "c2f3fcfc-e942-45db-9ebc-babe9ca49663",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "28b900cd-0720-48b7-80cd-c1b397fb9840"
        },
        "item": {
          "id": "96b1b21b-3d0c-4fb4-b609-87eb462a5901",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2c064b5a-8c63-4867-9276-122b3df66aaf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 529,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "3b60c6c7-6f22-41ae-95b6-b8e74a646b71",
        "cursor": {
          "ref": "5910afd1-0901-4b97-a1a3-5f76df271c7e",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d554db1f-4a58-4d8a-acdf-06bce3caeec0"
        },
        "item": {
          "id": "3b60c6c7-6f22-41ae-95b6-b8e74a646b71",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f9d4a8d2-15d2-4f84-bf7b-ee164f934392",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 530,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "87c95f94-7a90-4db2-8d01-8b10473baf65",
        "cursor": {
          "ref": "180bc8c1-4e8a-44f6-bd9f-e99328521c6f",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "53764e28-6f41-4b82-b4ba-bc46002b3a2e"
        },
        "item": {
          "id": "87c95f94-7a90-4db2-8d01-8b10473baf65",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4538b563-8d24-4d1d-bd8d-ed910096239f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 534,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "efe3ac0a-40e6-407e-9a2d-7eccf7a5c21d",
        "cursor": {
          "ref": "55faf3a6-5fc3-4283-8232-2286f0469d0a",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9c2e89ec-65d0-4547-a796-247598777416"
        },
        "item": {
          "id": "efe3ac0a-40e6-407e-9a2d-7eccf7a5c21d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2b540e64-fd75-4950-8133-797790c086a2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 542,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "7e80f8b0-7330-47b6-b243-1f90847f74b7",
        "cursor": {
          "ref": "503dc0ec-39c3-4ce9-9ca4-deb4f9a577e0",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7491017e-e7a6-4ee6-a8e9-0781b274b61f"
        },
        "item": {
          "id": "7e80f8b0-7330-47b6-b243-1f90847f74b7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b6500639-15fd-41cc-b706-a4d37ef51a5a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 538,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "9066dbfe-276c-4b26-a8fe-1ce83ffe9a39",
        "cursor": {
          "ref": "03bca85c-6dd2-409c-8bac-9a5b2c1cae2b",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "20cd5da6-d99c-447b-8a33-78f79368269e"
        },
        "item": {
          "id": "9066dbfe-276c-4b26-a8fe-1ce83ffe9a39",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4949359c-5313-40f9-a410-e0627044ef0f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 528,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "244f2168-7371-4474-9b96-9cb52273b9df",
        "cursor": {
          "ref": "8b634860-cd10-4732-9700-2628ba4a18bd",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "375af13b-eba9-4501-9f7c-af0301f52340"
        },
        "item": {
          "id": "244f2168-7371-4474-9b96-9cb52273b9df",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "77408a3e-0f7c-4778-b203-f18678407636",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 527,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "2b1e3476-9df0-4ae3-80b8-cbbde917d107",
        "cursor": {
          "ref": "19af35b8-73e2-4ca4-acde-6f61d5762f6d",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1ef8a477-203f-420f-99a4-f9f9c4247528"
        },
        "item": {
          "id": "2b1e3476-9df0-4ae3-80b8-cbbde917d107",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "325ef208-c26a-4021-adcf-c6a9d284a45a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 548,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "fa4d41ed-aa0b-46e8-b851-7b1019c30a33",
        "cursor": {
          "ref": "ff956444-c836-431c-853d-f4f5a3ecf71a",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7a8ac06c-e4bd-4844-b1aa-0e8e411584bb"
        },
        "item": {
          "id": "fa4d41ed-aa0b-46e8-b851-7b1019c30a33",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b873f03e-36d1-4f96-8661-a18478133949",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 528,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "a5c3411c-55b5-4c30-9c16-b07c360d519c",
        "cursor": {
          "ref": "54677bd9-4a1b-4716-971e-6b8f0336401f",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "16624294-7752-4747-9185-d883482a2b15"
        },
        "item": {
          "id": "a5c3411c-55b5-4c30-9c16-b07c360d519c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d3071fae-7ffb-49c3-98cd-6d3cf2dc23af",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 540,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e8372002-61f2-4841-aab2-3fb5c0768239",
        "cursor": {
          "ref": "68a7c4d9-477f-446a-84b1-97515a07a3e9",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7674cc69-0896-4c89-b7b9-9a1fb2911713"
        },
        "item": {
          "id": "e8372002-61f2-4841-aab2-3fb5c0768239",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "325db65a-e206-4130-b2ef-9efdaab1756b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 541,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "c32631d3-7042-4bc6-93d7-4526564ef9ba",
        "cursor": {
          "ref": "64bc0513-af1b-4488-9e46-17934728cc29",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6db2b10f-92c9-4f10-8818-158fe00e1637"
        },
        "item": {
          "id": "c32631d3-7042-4bc6-93d7-4526564ef9ba",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "15f08bb2-17f0-4686-931e-a754aa8d862f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 541,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0fa09928-2d4e-4b1c-a28c-a6cb02bbdce9",
        "cursor": {
          "ref": "1638349e-3657-4110-bf28-32008a8616c6",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "925db385-e13e-4ee1-9e13-f95eaffd29ea"
        },
        "item": {
          "id": "0fa09928-2d4e-4b1c-a28c-a6cb02bbdce9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "40ef4209-5c5d-43c2-a661-584395968d6e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 525,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b74306d2-4c19-4be8-b907-f4c4802fb550",
        "cursor": {
          "ref": "c61c68b1-3bcf-4a6c-8a7c-c0d6f2298114",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "349a72a0-5b54-4e53-bed4-46f31d92aa7e"
        },
        "item": {
          "id": "b74306d2-4c19-4be8-b907-f4c4802fb550",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8ae086d4-9ed0-4938-a878-be796f61a249",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 522,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "2670ce12-2544-4937-8fba-016729657838",
        "cursor": {
          "ref": "e0a4573c-7997-46ff-ba97-725639f72160",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7e43b46a-f723-49f9-9f1e-7b32a66328be"
        },
        "item": {
          "id": "2670ce12-2544-4937-8fba-016729657838",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a5139cdc-1a9e-459d-9cfa-b2444ddeea93",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 527,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "5f432dae-1dfc-4414-86a2-e246a1978542",
        "cursor": {
          "ref": "e5d77c97-67e0-4803-8b0e-f4fe83bff3af",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1b4f70ca-bfe3-4175-a586-e232f0f0fd35"
        },
        "item": {
          "id": "5f432dae-1dfc-4414-86a2-e246a1978542",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ad86e8b9-019e-4720-98c8-f37568ffd801",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 557,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "fcec0587-5063-4b44-91b8-b5c633374a5c",
        "cursor": {
          "ref": "9bc21522-2397-4be0-a306-a3cfba170e9d",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "85ce6c4f-0ec6-4f57-b536-8944e39d460e"
        },
        "item": {
          "id": "fcec0587-5063-4b44-91b8-b5c633374a5c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b345dcbd-e518-4a35-ad6c-7ec18e2384ed",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 537,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "3f90f0b0-89ff-456d-b92f-eea0bee00ffe",
        "cursor": {
          "ref": "1692fa6d-ca7c-4217-9bf1-aeb9838e7586",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "77cef401-c350-414d-88c7-546aa2310a44"
        },
        "item": {
          "id": "3f90f0b0-89ff-456d-b92f-eea0bee00ffe",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bda8148b-0993-4596-8ff8-583bb948587d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 530,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5d7d527a-faeb-4116-a5e0-c84cb99cbd8d",
        "cursor": {
          "ref": "4926f450-2b85-4ed3-a1c6-80f6447f5a21",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "657a1fad-6805-4e66-90b9-c38a98135a83"
        },
        "item": {
          "id": "5d7d527a-faeb-4116-a5e0-c84cb99cbd8d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "130fc866-1e2b-42bb-8168-f53a009df2b1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 539,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "3ff48934-c185-4a34-bea8-992c08c141d3",
        "cursor": {
          "ref": "8c16f366-2960-4f82-89c3-ad18155b73aa",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "166b0731-363c-4432-94a4-785132156506"
        },
        "item": {
          "id": "3ff48934-c185-4a34-bea8-992c08c141d3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b9425306-7b3d-4586-abe6-70cd00cf1bf2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 524,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "991ccae0-b8b3-43eb-ba0d-5b0a7a84547a",
        "cursor": {
          "ref": "a8c0ce3d-5a58-4f52-9210-df2433eb7bd0",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "058f4bd6-15b5-4ca7-bb86-3f083ee00814"
        },
        "item": {
          "id": "991ccae0-b8b3-43eb-ba0d-5b0a7a84547a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "acad2238-1d1c-4af8-b585-6519a46ec177",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 529,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "0ab47dbf-1383-485a-931a-3ae938dd82e5",
        "cursor": {
          "ref": "92074df5-6728-4c81-aeb4-5d60aec5ad52",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a4effa67-2a28-4123-8506-a42b98321c95"
        },
        "item": {
          "id": "0ab47dbf-1383-485a-931a-3ae938dd82e5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fe1992fe-f81b-4671-829a-464cd84502ce",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 532,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "ef4582a6-1561-473f-8c98-394ff37115fd",
        "cursor": {
          "ref": "5a245e79-1144-4811-b733-e8dabedbb0dc",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cc403406-5d93-4e2a-a998-c5a5759b878f"
        },
        "item": {
          "id": "ef4582a6-1561-473f-8c98-394ff37115fd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f8b746c0-3051-4639-8129-ec683ec43a29",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 536,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "cc670088-f980-4a30-8e78-fd489d2e5398",
        "cursor": {
          "ref": "147ce5c6-2f70-459c-aae4-263d8d323642",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c5d8551f-7d1f-47ff-be07-46a3a9d7be83"
        },
        "item": {
          "id": "cc670088-f980-4a30-8e78-fd489d2e5398",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1dea6301-0a71-4870-89ed-ed6c973026fe",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 535,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "ce35a908-ccd2-46d7-97ef-ab3c0f3d1348",
        "cursor": {
          "ref": "aff399c3-c0c4-4d82-b608-af89414b1ca3",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "47543bfd-7896-4e6e-887d-8f531ead2e2f"
        },
        "item": {
          "id": "ce35a908-ccd2-46d7-97ef-ab3c0f3d1348",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "66e178ac-7cf9-4960-9246-521ddbc52108",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 532,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "0ee7476c-38ba-4b86-b926-060aa42e51b9",
        "cursor": {
          "ref": "3e54d544-14bd-4096-bd86-d9c7778f67ed",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a99721cd-2689-442d-999b-224acddaeff5"
        },
        "item": {
          "id": "0ee7476c-38ba-4b86-b926-060aa42e51b9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "31e18371-dd4e-41cb-be40-b743329b6db4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 541,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "04864579-bf28-43c6-8911-54be1fb96c9e",
        "cursor": {
          "ref": "90f75a95-79b6-4b05-b115-39f242bee69d",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5892cc63-5154-43bb-a251-afc119a3ba8f"
        },
        "item": {
          "id": "04864579-bf28-43c6-8911-54be1fb96c9e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "21882531-da23-4de0-a4c9-ae76b744ba7c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 533,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "7bd07f7a-0dd5-42f1-a6a9-c91bb4d4aae2",
        "cursor": {
          "ref": "ba03a547-50c6-45db-a883-a9892e81ae00",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "490424cf-2d40-4d1d-a001-993f88ddff18"
        },
        "item": {
          "id": "7bd07f7a-0dd5-42f1-a6a9-c91bb4d4aae2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6f97837c-2de5-484e-99a0-b2ee0526683a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 541,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "2eb1085c-4760-4244-ae0a-a184c4a133ac",
        "cursor": {
          "ref": "c562af38-06b9-49b1-b93c-17e7cc38baf3",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "739da40a-e85c-4d4b-baa7-fa4531f62ba3"
        },
        "item": {
          "id": "2eb1085c-4760-4244-ae0a-a184c4a133ac",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d5f7afce-39cc-4b04-8fda-a9a9c7975700",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 533,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "422fac9e-d5db-4a2e-8f1d-7b12b719af42",
        "cursor": {
          "ref": "b7250af4-2d0a-488d-a408-604470eb47e8",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "85378b15-728d-4903-be9e-233c58e55be3"
        },
        "item": {
          "id": "422fac9e-d5db-4a2e-8f1d-7b12b719af42",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d55ebe95-422d-47fd-9801-72c3cd75057f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 539,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "3b843e41-e95a-4502-ba03-c223162ffbee",
        "cursor": {
          "ref": "c8f90019-39c5-409c-a894-a0faaec4ac70",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3c3afffd-5b46-484a-9294-cdd0eb1cf8ea"
        },
        "item": {
          "id": "3b843e41-e95a-4502-ba03-c223162ffbee",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "16dffef4-1728-40b3-b4dd-1c7c481b6480",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 532,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "512a552d-2f7a-446f-a378-fa7fa3466c66",
        "cursor": {
          "ref": "4aacee29-b670-41e0-8f10-e4e9d1ddf6bf",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5758ac88-8bb1-4af8-a4e1-3af73b81ab36"
        },
        "item": {
          "id": "512a552d-2f7a-446f-a378-fa7fa3466c66",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dfdf9b72-2a7a-4989-9524-42197d5b9c27",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 527,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "362117fb-58ca-479e-a5e1-6fce8b48221e",
        "cursor": {
          "ref": "ff342059-edfd-4d03-942c-bdd224cae311",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "51b3cb92-986f-46b4-ae39-50063886ada8"
        },
        "item": {
          "id": "362117fb-58ca-479e-a5e1-6fce8b48221e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "91701ac6-e169-487f-86e0-43dc26c3cb68",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 540,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d6cf4714-2a3d-427b-b23e-9f39c17c1eef",
        "cursor": {
          "ref": "ac3b9d6d-ccc7-4fa6-9942-1ebe72deb067",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "069832da-efcc-497e-9e01-4f0dbd179678"
        },
        "item": {
          "id": "d6cf4714-2a3d-427b-b23e-9f39c17c1eef",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "20712b76-e2cb-44d9-930a-6dab8a3d0cab",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 536,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "aeaa9e06-247d-4788-87db-25f2597f4ec3",
        "cursor": {
          "ref": "930120fb-44c4-475e-bd7f-4c6180d731cc",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e3099d1a-7aaa-4254-a298-79c337aa926c"
        },
        "item": {
          "id": "aeaa9e06-247d-4788-87db-25f2597f4ec3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "12b0c6aa-190d-4575-b525-bd80431c1a5d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 541,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b6bd217a-e847-48a4-aee3-583e5e2674b0",
        "cursor": {
          "ref": "360c6562-0d4e-4ba7-b3da-99744d73a2c4",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "31f502fa-424b-4d26-bb21-91cd8d129930"
        },
        "item": {
          "id": "b6bd217a-e847-48a4-aee3-583e5e2674b0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "61898f90-7f2e-4e2e-9e08-8077bee671f7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 527,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "8975eaed-a6b6-452a-a800-063f94e13622",
        "cursor": {
          "ref": "2ba8bba1-082a-4801-9701-172b1c2ce194",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6ba87f07-2038-46c2-9cdd-4c8a7e342b11"
        },
        "item": {
          "id": "8975eaed-a6b6-452a-a800-063f94e13622",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d06c7845-d0ae-4182-9a7d-21f6498bf1eb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 541,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "ac804a0d-7b21-4bad-9fc9-d749e665c8db",
        "cursor": {
          "ref": "2d471a4f-1749-4d9d-a442-9e9c85750760",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "af8e199b-83c6-49db-8e62-30a05a3fd4e5"
        },
        "item": {
          "id": "ac804a0d-7b21-4bad-9fc9-d749e665c8db",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "33858563-f0af-4dd3-b50c-3d39db1f8acc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 547,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "aa4e4940-542d-4a46-979f-546225818687",
        "cursor": {
          "ref": "9952f42d-ac39-4371-adbc-ddfbee563932",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a8caa745-7317-4d33-a981-cdfb07c4d340"
        },
        "item": {
          "id": "aa4e4940-542d-4a46-979f-546225818687",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "eae4fb74-bd17-4b25-be9d-e8d320a36b6d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 531,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "8c882085-a30a-47ec-9d8a-9e330d0ed683",
        "cursor": {
          "ref": "44589ee6-b006-408a-a80c-1139bca8bc64",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d43df4ad-11b5-4420-a53c-b097d3de9574"
        },
        "item": {
          "id": "8c882085-a30a-47ec-9d8a-9e330d0ed683",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c76ad125-0f70-4d72-9dbc-6b3eb8b4e9d8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 539,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "8b6b6b75-ef5b-46ea-ad15-8e41a04a7d42",
        "cursor": {
          "ref": "f7609192-84ac-4eab-8e58-7b7f20d021ed",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "374e65b5-4ff8-457a-bc13-035dbc22061f"
        },
        "item": {
          "id": "8b6b6b75-ef5b-46ea-ad15-8e41a04a7d42",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "841e4c41-f9d5-4eba-9c5a-46336248e6b7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 536,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "53d0f06f-1bac-4c06-8ba6-1955bccb02e9",
        "cursor": {
          "ref": "9fd51000-7766-492d-80e9-deaf3caf709c",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ad4e9e99-1841-4b46-8c8f-ad9559e298a4"
        },
        "item": {
          "id": "53d0f06f-1bac-4c06-8ba6-1955bccb02e9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c37d52df-e398-4493-a05a-311df8da7497",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 540,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "2cd649f9-77a9-4f3d-b181-50af15ea3144",
        "cursor": {
          "ref": "6f9693e4-78c3-4e3d-ba9c-e7e55532a702",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "534aee87-755c-4bb9-9fd6-5214779656ec"
        },
        "item": {
          "id": "2cd649f9-77a9-4f3d-b181-50af15ea3144",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b487072e-8fcf-454f-8f37-14fd336fb071",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 545,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "cab45844-5e6c-48d6-bdc6-a1dade66c8ac",
        "cursor": {
          "ref": "23b0851a-85aa-432b-8804-9a8bde4ace91",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bca1c585-90dd-49fb-ba9c-2592bc069f38"
        },
        "item": {
          "id": "cab45844-5e6c-48d6-bdc6-a1dade66c8ac",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3f2d0d8e-6675-4101-96a2-52ccad4d857e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 536,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e19d6087-df9c-489f-97ac-7911fb06e49e",
        "cursor": {
          "ref": "ffdfa78d-328d-425a-9864-55e4aeecdf31",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f4ae5957-1dfc-486a-93a4-b578793ad9af"
        },
        "item": {
          "id": "e19d6087-df9c-489f-97ac-7911fb06e49e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6aaf5db3-66e3-4a56-a8c5-b7dfcd6bb12a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 544,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "41ea3646-2c3f-41be-b6ac-2dce3f158edd",
        "cursor": {
          "ref": "e1ed9956-4c3c-472a-b688-a854ff17c8c0",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "04a20b0a-71f6-4e38-bba3-d3a9d99671a3"
        },
        "item": {
          "id": "41ea3646-2c3f-41be-b6ac-2dce3f158edd",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d5ec7da5-243b-4d58-bc90-683a222c6496",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 532,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "afe6b92b-91c4-46fa-86b3-23efcf7a85e7",
        "cursor": {
          "ref": "a4593561-c640-4d98-a7bf-775f1e2ba38d",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0c4b12ef-cb9e-4ef0-9686-a57f9d1f97bd"
        },
        "item": {
          "id": "afe6b92b-91c4-46fa-86b3-23efcf7a85e7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9eeb88e2-3627-460c-b6cc-996224ffa987",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 531,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "121a5f8b-4e26-4ca8-8b5f-48a1606e0e5b",
        "cursor": {
          "ref": "6e71fbb8-dd43-49ea-9f28-2743e8ed8adf",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6f2aacde-9518-4dec-a144-6f28d98318d3"
        },
        "item": {
          "id": "121a5f8b-4e26-4ca8-8b5f-48a1606e0e5b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a12df161-1b7e-4b22-950b-cd005e387cd5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 545,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "66816670-253a-41e9-aaf3-4dc346ec2d75",
        "cursor": {
          "ref": "058bef6e-7e65-410a-b3b0-8d40a74db931",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9d3634b1-4ce7-40b8-b4a9-93da6500ca84"
        },
        "item": {
          "id": "66816670-253a-41e9-aaf3-4dc346ec2d75",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a93d49c4-5c10-4c42-ba3a-c7234d9bc22a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 524,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c846e272-9281-41bc-881d-d0f9b20443ba",
        "cursor": {
          "ref": "3d08a1fb-1616-4219-9d13-6e9a88dc167b",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e29b5cb2-99d9-4a53-9aa3-79e48557a9aa"
        },
        "item": {
          "id": "c846e272-9281-41bc-881d-d0f9b20443ba",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3b35107b-da1d-4b0c-8a11-cd5e18578265",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 529,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "bc934b97-0b09-4055-8c6c-2aa85e6edb6e",
        "cursor": {
          "ref": "7294099b-9824-4bc9-bb28-9363b1087158",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3bb0809c-84f4-41d4-81af-284d8e140210"
        },
        "item": {
          "id": "bc934b97-0b09-4055-8c6c-2aa85e6edb6e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b63d4a4a-ea28-4820-a99c-db0acb38b34a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 538,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "779b21ab-2e22-4349-b457-6a936f635e63",
        "cursor": {
          "ref": "601e4c5b-ca6e-4a95-965c-8541a93deaaa",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4d547e3b-db19-48d0-9809-833ff68e0ede"
        },
        "item": {
          "id": "779b21ab-2e22-4349-b457-6a936f635e63",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c0e36de4-25aa-4e69-b5bf-7b646e58702b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 537,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9d755e32-d977-401e-893a-486e868cf938",
        "cursor": {
          "ref": "03e41878-97ab-4435-ba5e-d00a42947b0e",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f6dc097b-562d-42bc-b25d-50ca4de45d05"
        },
        "item": {
          "id": "9d755e32-d977-401e-893a-486e868cf938",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "28f5d808-f52b-468a-824e-8a6c8461bfb2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 534,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "9970b4b5-94bb-4a57-8f0e-aab031c6e6e4",
        "cursor": {
          "ref": "25e21c0b-03d9-42c5-b507-ceb22977e1e3",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a8e6872a-678d-45de-95f5-b7e5eeb9b25a"
        },
        "item": {
          "id": "9970b4b5-94bb-4a57-8f0e-aab031c6e6e4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8731fc55-9321-4dc3-90ea-5c4157a6358d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 549,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "f3c7d85d-bac0-4c75-9a95-72ecefb3f9fb",
        "cursor": {
          "ref": "b9a184b8-b195-4ed4-8776-e9862ac6d419",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f9639bdf-8779-4af8-8dae-908d27dc7858"
        },
        "item": {
          "id": "f3c7d85d-bac0-4c75-9a95-72ecefb3f9fb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7e92c43b-659c-41e2-ac96-b19ff92d4e2c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 544,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "ada88c5f-476c-42d2-9bdf-c36b427e0786",
        "cursor": {
          "ref": "52fb2e02-37c5-4edc-8592-e1a13b466e12",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f3f89f22-0a96-474e-8529-0c6286630db6"
        },
        "item": {
          "id": "ada88c5f-476c-42d2-9bdf-c36b427e0786",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1c725d57-9e9a-4175-8ef2-f5aae474d385",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 530,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "8f5954c9-538c-4f1b-8b83-1efaa62b2854",
        "cursor": {
          "ref": "1e044910-e7c4-4819-bd7c-14e01662edbc",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5289f68a-cfeb-4b72-a592-27e5f75850c7"
        },
        "item": {
          "id": "8f5954c9-538c-4f1b-8b83-1efaa62b2854",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2dfa00c2-ea2c-4b8a-8fc1-36e41d65fe14",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 547,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "80b8b981-13bc-41e3-b5bf-527b179b8709",
        "cursor": {
          "ref": "9c16b11d-3d60-449b-a307-9ad4c9786bab",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "90950505-889b-4297-9f82-bdb45c05fbac"
        },
        "item": {
          "id": "80b8b981-13bc-41e3-b5bf-527b179b8709",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "59115610-054a-426e-a863-b669f1d17198",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 535,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "ebc74ff2-7ca9-4f7e-a7d0-79c76306509e",
        "cursor": {
          "ref": "5047e947-77da-499c-80e0-6c2f4fe3b62f",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "20f34b6e-aaa8-4025-a45e-a392dfaa006b"
        },
        "item": {
          "id": "ebc74ff2-7ca9-4f7e-a7d0-79c76306509e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2306571c-a081-43f1-a3a2-1ef7505447e7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 546,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "a9023db9-0003-4df3-aaf4-307c6c475562",
        "cursor": {
          "ref": "ab8c1a56-1086-4651-90e5-e4ada20dbe1e",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "aa21ac89-96c6-4321-947b-32ef189771d6"
        },
        "item": {
          "id": "a9023db9-0003-4df3-aaf4-307c6c475562",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fb1de244-3019-4724-8e0b-7db864098698",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 542,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "a9f0d96a-451f-4305-bf33-6bc42b143a17",
        "cursor": {
          "ref": "52ac62d0-5fed-40bc-8d70-559a8349b87e",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "85087b2d-a994-4bc7-894c-065e73d7360a"
        },
        "item": {
          "id": "a9f0d96a-451f-4305-bf33-6bc42b143a17",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "048f8a5f-2ac9-4957-bacd-39e72695d4b5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 533,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "fdbc98cc-15a7-46c1-9a87-69ac0378da85",
        "cursor": {
          "ref": "142007f8-f5c5-484c-a2ff-8f13902ff3aa",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6a95ad83-d5c5-4102-9925-e703686d42a3"
        },
        "item": {
          "id": "fdbc98cc-15a7-46c1-9a87-69ac0378da85",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5c5bdd94-de30-471b-9a89-2a616194a552",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 530,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "7d4a2f4b-f2d5-4a0f-a1dc-7e07685fe8b7",
        "cursor": {
          "ref": "2f6769d1-8432-47fa-a787-682e540963e2",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6bc35cfd-54c9-41b6-95ca-2ca5d641ebd1"
        },
        "item": {
          "id": "7d4a2f4b-f2d5-4a0f-a1dc-7e07685fe8b7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7e8aa561-4053-47dc-9664-cd81ddcf8c68",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 531,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "6ce47727-a76b-4f3f-8bf7-5196c8bcb518",
        "cursor": {
          "ref": "2d6d1a27-270c-40fd-973d-4ca9de69ef79",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1574522b-721d-4a4f-bd3c-7cd5e37f1f2c"
        },
        "item": {
          "id": "6ce47727-a76b-4f3f-8bf7-5196c8bcb518",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "27688223-f592-48e9-a211-ff30287d2766",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 552,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "b11ab2aa-5b92-455c-8da2-58f0d8639635",
        "cursor": {
          "ref": "94e5660c-3074-413f-92a7-f0c6302ec240",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "30a5c828-8dae-412a-ad13-9b58cc8b05b6"
        },
        "item": {
          "id": "b11ab2aa-5b92-455c-8da2-58f0d8639635",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b327c371-49a5-4740-9f69-5348f9d17aba",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 532,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "fc1a299f-16b2-42a7-bfa3-1844667fd413",
        "cursor": {
          "ref": "f5e0e352-148d-47cf-82a0-19071b647d7e",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "dc9c132d-c055-4773-ae55-0a357929df40"
        },
        "item": {
          "id": "fc1a299f-16b2-42a7-bfa3-1844667fd413",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "180bfd41-212e-4f7a-b2f7-f1f23de6ff50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1554cf6f-b014-40ed-a978-ddf088b9a760",
        "cursor": {
          "ref": "b53f5971-1117-4c62-ad71-71cfd0ad1869",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d003a7b6-ce4d-4018-b237-3ceb5cfa5f87"
        },
        "item": {
          "id": "1554cf6f-b014-40ed-a978-ddf088b9a760",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a8483e91-4e91-4aa3-9d25-b364db368755",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 537,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:239)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:239)"
            }
          }
        ]
      },
      {
        "id": "68e54ecd-b282-4334-b383-1162dfacca54",
        "cursor": {
          "ref": "89fd825c-630d-4bb2-b506-86ec5a447dc7",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8999c938-4816-466d-9e31-949d696bc608"
        },
        "item": {
          "id": "68e54ecd-b282-4334-b383-1162dfacca54",
          "name": "credentials_verify"
        },
        "response": {
          "id": "84c1e55a-ea03-46c0-820c-2c7ab00e6b72",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 537,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:240)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:240)"
            }
          }
        ]
      },
      {
        "id": "194220cc-e70e-4407-94bd-a49bf0ac01ed",
        "cursor": {
          "ref": "4487e598-a895-4433-90b1-ee2771215edb",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c646a6dc-5512-416a-88d5-610de576eae5"
        },
        "item": {
          "id": "194220cc-e70e-4407-94bd-a49bf0ac01ed",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0893ff9d-bb7d-48d7-812d-b1d9b1a6ce7b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 524,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:241)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:241)"
            }
          }
        ]
      },
      {
        "id": "c3414bdf-2ade-4d44-bf39-fb67264fcc69",
        "cursor": {
          "ref": "b3a4f08c-9dd9-4458-b964-8f9caaa616b2",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "dcf96b0f-b756-4777-8344-78c93afceda3"
        },
        "item": {
          "id": "c3414bdf-2ade-4d44-bf39-fb67264fcc69",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "50dce125-811b-45c5-94f7-0b3bbf390bb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3414bdf-2ade-4d44-bf39-fb67264fcc69",
        "cursor": {
          "ref": "b3a4f08c-9dd9-4458-b964-8f9caaa616b2",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "dcf96b0f-b756-4777-8344-78c93afceda3"
        },
        "item": {
          "id": "c3414bdf-2ade-4d44-bf39-fb67264fcc69",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "50dce125-811b-45c5-94f7-0b3bbf390bb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e54bda-9a67-49f7-ad74-eb33835833b7",
        "cursor": {
          "ref": "5e3f35e9-d01a-48ce-a00e-24c988537bf5",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b707e0e5-cc86-40d0-9e7e-f520f8109112"
        },
        "item": {
          "id": "43e54bda-9a67-49f7-ad74-eb33835833b7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c9cf51e5-40e1-4ad5-9aad-8b1211e4f119",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afa3562-f570-4c4b-a782-fce4899e23e8",
        "cursor": {
          "ref": "3810786d-09cf-46be-bd39-eb23415e2934",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "51d2cd71-2d30-48f4-bb96-215f7f142924"
        },
        "item": {
          "id": "6afa3562-f570-4c4b-a782-fce4899e23e8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "beea24a9-987c-417f-95bf-c52dcdf49066",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}