{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "54dd3772-372b-4eef-8093-a694284aa9d3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "17e94da5-b66e-45e2-bb72-7d5299c4fe39",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6bb06112-19c9-47d7-9692-94488f6982e2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e4771716-f466-4838-b38f-d69dbf086d3d"
                }
              }
            ]
          },
          {
            "id": "5605b7b5-5024-4ef4-8065-512db7cfcd43",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4441b7a0-07fd-402d-99bf-624e20b15b13",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2bc840f7-b8fc-487f-bc67-56b265abd76a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1b51d82d-6ba7-4056-b809-c76f5c21d678",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e6e2d971-595f-4d21-8905-83dc8303a1a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62be5704-9909-4793-8390-517afa85badd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0838dc59-37d2-4222-911b-fa06f867025b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a34139d-b515-4870-b6ec-8bd4a21e5c08"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f431023e-bce6-4acf-a67a-04f5504f1c5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "03b05073-d665-4376-87e3-f6cc62de3c86"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "668da6f6-f0c0-49d8-95dd-93be9e4f8e65",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0845bb29-38b0-4bf5-b93b-ac4d527ee62d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "622b3827-ea20-4db4-b704-0aa46b95528d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "377f59ad-f7ce-41ff-9a60-77685d7b5f8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fbcb2004-a63b-4994-bd4a-dbcf61c68e1e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "befad83b-f70d-451d-b177-e3e540bc9719"
            }
          }
        ]
      },
      {
        "id": "3f117a4b-59ff-48b7-bffe-1c166c20402f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "33e9843d-390f-41a8-b0bf-88dafe9bb9e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db77e527-6bad-4c55-a62c-72b01e48cc2e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e0c7420-b522-4fa0-96dc-be9ea14d7d68",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232a86df-02b1-4424-9db8-2f28d6d0e003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee94a218-d186-4514-b203-4847414e50ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa6daae-69c2-4c44-9839-21c03de6660a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656fe1fa-7dad-44be-9c51-d851dea78ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1595990-8132-45f0-9907-58894313c130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f677209d-2ed7-4abe-85d4-a82e85f8003d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0184a072-0801-4c20-a820-7ed8bcab2754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "921a0b3d-17c5-4ce1-9b80-b287e7cf9634"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3e2d0d4b-f2af-4e64-8b94-26b6528b8ec0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7530ccb-6de7-4116-9303-d44df31ed9a3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca72604-5bda-4a65-953a-3a3f66854e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a6610c2-2ebd-4c30-b97f-b04f23c66bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbea7ae3-457f-40d7-8328-70531cec766a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e0db0c-ea65-444b-83df-607c13d52126"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fd24b289-c45d-41d7-ab88-fad9e5b9777c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b9964e12-004d-4b06-824d-9adf0e7ec86c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "659364f4-d349-4175-a8cc-69ea4c02d7d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d9f0c94c-a665-470d-8624-b1b5503781d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f19cc3cd-9d1d-4cda-836e-13fba3c2f884",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "878db865-a328-4532-82c5-f3a9e79e003e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3f05089-a738-43b4-9519-cda563f2a258",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b9850de-c7cb-4b61-9417-69125bbb8acc"
            }
          }
        ]
      },
      {
        "id": "62382823-b6ab-47c4-a132-a479e8bf9ef7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e603b4ba-2c2f-46bc-856a-618f7e6e7c14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c845309c-ef69-474a-a513-4b0f697b4b0f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6fac31f1-967d-4d61-a446-8556d3d71dce",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f10296-8eec-4f28-b1d1-70fc7f90040c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8e4e7a-cadc-4c5f-a30e-0c1a342ae82e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8feb290a-4e3c-4285-a4d7-14ce342eb3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66de6f39-0d85-46f6-b563-51ab4f00a9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f199b3ad-1b6d-47bd-aea4-0fd93b5649a5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6223f6d6-fb4c-49de-a049-f1db3bdbefed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4def8ec1-c820-4e87-b70f-4d32ce57cc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0361252-85d7-4484-9a7d-01be59aca20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ea70892-c711-4682-848e-adb4b96ccb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d21ce204-a615-440d-bef9-9c27d5a519a5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809d2743-6204-4622-9321-ff37c6107f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114a680e-797b-4909-8c7b-367a06ad0064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8ce87b-31e3-446e-b705-f1710371364c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebf1cfe8-8035-476c-a3bb-d6ec7adddf22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b15e5e-1746-4db4-bf1e-af2034544e93",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d769b3f-7674-4dd5-b6a3-5b441eaa0ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507e3961-75ed-4d8c-a5db-3868017bbb56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4317f87b-1757-4ae3-86e5-286e6034d929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ac631cc-cba1-407f-96bc-3619a52f4d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fdc2e5-09da-4ddb-b1b3-4f03a397aa81",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abffe234-f3b7-42fa-b4bb-28740d7e5750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c12519-ecb9-4944-84cf-8274e5b5423f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8e06c5-b223-40f6-bb95-e2bff7bfa155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48c73b61-e49a-4e11-8b10-ea9d0c5cd8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b10f277-3b40-4de1-9151-2539040dbd17",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5379047-648c-4915-9569-a77d5d49094b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8438205-1bbd-4461-93a0-62e4455c6bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ecd833-f3f3-46b2-a33e-32a3faa7e73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dde1099-7909-4340-ae32-77b98719dc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f209191-ccef-4f83-948f-3957aa9e6175",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be82e90-d6aa-48d3-af03-1260712293e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60178861-a032-4704-a658-d3d68aa83fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0d920b-0104-4bae-afd2-0df6997cd111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4682edf-759c-46a5-ae27-5225ca0a0056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28954ce8-f457-4d8f-87e6-eb3e4f6453ed",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336c984c-fcc7-483f-ab2c-1b765bd53fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4969d702-6815-4fca-9081-57afaf9301d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1786036b-2b7c-4745-b6fe-cf1a0d44fb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e1c752c-407f-4709-a0a6-f0ef3f494e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85351e4d-5cf6-489f-a04e-cf821b3af0c2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2745e22-dfb5-4cd3-84b3-eda1d02aa734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496ddcbc-a246-46b4-9340-0486fdb6abb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491ce01f-7f41-434f-b236-f46a38d0fb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf02362c-52f2-45bb-a0cc-1aaca792c076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e85762-8950-4996-82b0-225f80113e92",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a5f545-ec5e-4b43-994a-000ed6123dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a28ac316-4b1f-4255-9352-dd6b9401e257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a25bed-204b-440a-8cf4-c35c6517979b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e33b7bee-64c6-4684-a667-66e9c54bcec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940479ee-60ef-4377-b2a1-d5f5950eb833",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8faeeae0-b082-4abc-8845-041eb3944e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00f9964-118a-4036-b674-8288484421a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8197277b-61d8-4613-b315-fd8e22fd7036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14cca8ed-3a47-4875-8ac6-b1e79b11955f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725d998c-1bfc-4dc4-8dcf-aac79f8fe562",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b606d0-58f7-4d10-ba16-672c267010a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74136f08-d821-4d49-8a2b-46617fcc1aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed69cf0-7ceb-4aa6-a434-fa1bc2f838d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a5f45cb-c649-4b6d-9073-e6e5ea8b0a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18119428-8bc9-4017-91cd-ed42cfc6e90c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a322e4a-8dc7-4708-83b6-72bd733fc674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e2618d-9938-4876-8c09-0a948d0bff24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266dcbfe-380f-4385-babb-7820d265d91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf0fc061-0cba-4bd3-8ed2-2e75575d915d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84949ec5-d77f-402a-ac60-791046a0990a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c7452f-5b7b-4a3b-9e54-07eaafa2c31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c075b2fc-1167-4ff0-9dd4-74af50acc402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5dcade2-435e-4343-875f-59c02004433a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5db67e58-c9bf-411e-8e5e-343787944ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3034f70c-c455-417c-8e3a-4d493949e387",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0837db0-0c01-44a2-9f0a-accd59db033c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7545778-b2a0-414f-a44d-dec647b2447b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4a6958-de47-4747-812a-a71811bd0d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3e9ef6a-30ce-415a-abb2-ee5aa21eaf62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3066293c-97cb-44e4-aa4b-11097b3954e9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c622f1e2-4bdf-44f8-87c9-054ff26224c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad69c3ec-586d-4ebd-9f80-6d3ae1ccb6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6e2083-1bea-4494-8820-061cb8932e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c55e601-46c5-47f9-9697-ea77963a6b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e06a8a-0e3a-4a40-a095-67e95c29a74d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44249eb4-a27b-4962-b5d6-0033b0a0b155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d0aa7b-80b5-4291-ab83-22e9f360553d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bc1358-b82f-4472-8f99-b9c24dd1531d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fa3eb19-0fc1-41f6-b9f3-797322ed97c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf58a7d-0a61-4338-ae8c-3cb7d0abfbec",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d76f741-d5db-4f93-869f-837be1636645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec4dda6-823f-449d-8f53-10c1b37e6cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7540fcf-ae96-4938-bc43-6f7d568e7f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fe78be-9051-4391-a4bd-29703c748ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f4a87e-4827-4e97-b473-ae8be0d3bf26",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d692217-7de7-48c2-99e8-ebe3765d1008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7b37ce-1165-4fb0-bac5-9a6daef08194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f678fde2-248b-426c-b37f-a36d4d9210b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ff4c77-a9f7-4180-a0d5-f92eeba6b2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a141168b-d902-4a15-9518-d3e0704a8d81",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fd335f-227c-41ad-9b81-0a056973b67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e05a24f-b9ac-438f-a006-9bf2ebab3c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cc42a8-fb32-4a48-9f4b-cabf3fce5ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c49da92-77e2-4419-b0bb-2e78962cac3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea22702-2202-47ef-b851-0007647cf23f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a8a8d8-9b50-4258-a366-7d71b948503a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e6a4a8-6a55-42a5-9c06-effe72401a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00ef0e0-95f6-4d3a-a0b6-779683ea1686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2907b275-0678-4780-8a16-8129986cd111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4176aaae-8e4b-46e1-ba80-648439639644",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c66e42-03ae-4732-9920-0dbb2f04635c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97f8088-e2d1-4377-a2e7-f946fa16bf1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f056fb6c-e1ec-4dde-bc6e-814df47a5411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4fec9cf-28a0-4047-b5d2-b15f6d6d7ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4554b0b0-d80f-46b5-a472-ad06f975f028",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1a7833-bda3-4737-a689-4a6eac0086fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc49754-0fc4-4b74-9ccb-d0fb5628dcc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f2c7fc-dd07-4e01-a7e6-ad27e7c9cc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "148d33bb-1bb0-4874-bb94-212866bf486b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1052f75c-224f-4bed-9568-ef4a44641d65",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bb53aa-5ec0-4cfe-a292-00e392fd7a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a04ee619-a05c-446b-9004-9edc45fece2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b219061-abfe-405f-876f-76a7f047d2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a52f391f-dacf-42ce-8765-b2ad6baacdac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35eb2839-aef1-4aa9-8144-615b575d612c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c23be01-e302-4f67-86c3-c507c3fe21d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d65e10c-8b40-4a18-a033-67b0ef6e8fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd241397-f091-4953-9e46-2ee5a395307b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "791870da-e636-48a3-be5e-23803e99ef90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1232ce7b-05c9-4513-8028-23eecaebf722",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5611fb41-921d-42d6-bd22-412014dd5a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e4dbb8-d7d0-41dc-aee8-bba0572e121e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b125d526-b030-4f4e-90c6-5542a92da396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "361d4931-9768-4635-909c-a979b91e6b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f447d8e7-7ca7-4be0-909a-9d8937b92e92",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1276aa10-821f-4fec-91d4-4567aeb27783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e493f4a-820b-4137-8b63-3171b7975580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c7ca89-f686-4175-84aa-3518e4f3428c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea571f9-b5c3-4571-bfa5-6be3a5e95b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a5d669-e362-45d0-b151-cabcb59c4dd5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7f920b-6734-46ad-83c5-5d5d80f4ee57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf36907-2066-4dc9-8d8d-3d70b1b4631a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a7c746-5d42-4a18-84f9-6768c537b691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fef3e4b9-8809-470c-b7fe-526c2416a448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21295894-b337-42d2-a5f6-edca0e43b5b9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca4ce02-cae0-4710-801b-5f9204bfc383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f613e3a-afda-467e-a0ef-fd8ff124f37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c77cc7-b1b3-4472-a713-9e2d9b036ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8ef027-a16f-490c-80a1-6ff67363d1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124b9f95-7a1e-4ddb-8aed-05784b4eddb3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8426a7b0-dc07-4573-9cc3-8d58bfa79a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f12f5db-7471-4c6a-b35f-bea7f173884d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d055e8-84f2-40a3-bd37-232993cf1e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "26d25abb-7354-4c2c-a734-127940ad28eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301f186e-abeb-4710-8406-82dd20d4af10",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589da472-832d-4724-a5b9-196802dbff48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8748eaaf-c422-4e62-9a36-6af474b31abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7c80c1-312f-4d1e-a728-719d48917859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c8eacb5-70c2-402f-9541-51523024278c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cce21e-fae1-44a4-9f3a-bc8f9027988d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893325a7-7570-43b2-9220-b0b12bb03897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3b5523-61e9-46ee-95e0-593bd99afd1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755b0fbe-ab77-465f-bdaa-0d203bdf596b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b278144e-4bdf-4649-a915-e7ed4222bf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0f5896-06de-4834-9c39-6e6f844e598c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3c8c29-73c7-4094-9407-72dc128c5100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516d0c9b-3863-40a6-aa80-cb4f62f0da09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff1cfe0-6aea-4c21-bda4-fdc46deb9b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2c454f-cd7c-4a53-b98b-ad2a41b0b794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c937e1b-13e0-4e5f-9052-972fddc4b173",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1fc31e-571f-4d5f-9461-615c3ee3e479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5c8ce6-0cba-4b32-b0d1-1fba829241c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc9f715-9920-46fe-a92b-3cb83391338f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd6433f-5cb9-43fd-a411-d1c77afc04b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a850f61-b52e-42df-874d-376fe84d720c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc75c33-610a-4495-be2c-7179556f0674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63581af0-6ef2-4bed-adde-aaa56ecd618e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3016b91-74e4-4386-8d92-0cb50c0c179b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "da9592ff-f0d9-4398-a5dd-3d77c43392d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744b6b48-9e7d-45ee-9e09-9e4b0d2467c2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a60abf-e015-49eb-bf5b-9eb9ed15a828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ddc42456-131a-4605-a503-7bcc5e619bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25dbc8a6-fd7f-40ca-b0b6-5b1e1a099948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14904a1c-304c-43b6-827a-e487c7edba29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4562e4-05e3-4930-86a6-b171d36b2456",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df46b324-0f23-4ff6-8d2d-e6b0b5d86f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98378803-247c-487d-b133-ed7a657c0336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0d41e3-029a-4230-9bf5-12a0a49234b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c90478-7298-4a67-be1c-686b61abf565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974a5a72-2c6d-40f4-889e-2b739c21af1f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f428cd1-8c68-4e8a-ade4-45e38a55b5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb4e3dd0-87db-4ff9-b852-e2c100a2bbc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27d9459-99df-4463-8541-fedfc11b08e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c5700f-80dc-4601-af5c-b0d2ea733bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd1190c-8c39-43e9-82b4-1d12e9fcd335",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3933aadb-0c46-467e-b5f8-e7ebbe1994f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9239157f-1dab-40b2-b6e3-e519bf9dd81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f544aefb-a52c-4b7e-8642-3bf4a8fe00ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "447ff9b3-4ad1-4d88-bcd1-f7b31d7d6d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be2b8d4-9576-4d3b-aa84-fc3f32d5792c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b73071-11ae-41ca-b43f-f67b72b108d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "392635c5-ce4e-425a-b4c3-f58c47cfeeb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196d8b4d-a311-456a-b712-74a302682989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f0b03f4-9b49-4eb4-af71-fbc8036b1c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c84995-d9bf-4c14-b556-704c46ad617a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1023a77a-dce6-4d6f-a7d9-aff43c397bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52db09c-fb0a-4d75-ab78-4f0fca2b096c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19317602-3830-4cf0-a5fb-2e8d3f187613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8630457f-4523-40d4-9929-7a09c68c39c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b78e0f-8452-4616-a275-69c130e56e1b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dfd928-99fd-4d33-9059-319c899ea625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88448747-b055-43f2-a08f-49cd8295c825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7d9c87-c671-490a-a17a-08c7ed0946a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f132b685-ce38-481f-a706-c43bd146165c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c93d74-ab91-4ae5-a2d2-757fc0e4bbac",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de580b0-cbb3-45aa-9f10-c283d919508a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b463add-8ed5-4ff7-a746-b27776a0106b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a320af-55aa-4510-aa25-5d9f8380177a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "894a9377-d4d3-4a30-bb7d-d194ebae0948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80dde36-3c76-45f6-804c-5092364f169b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72976469-03ec-401e-bcf4-e09c86c80c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d79a87-e92f-48d1-a94c-d10ac8ae2a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d127bdef-849d-49ed-aa22-81635ce84d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "028d9897-8386-4845-8e56-05bbba881feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ed8264-cd7d-4c3d-8792-203c7669179b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097d82ac-0042-43b5-8e2c-944ada1ce42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5ee540-cf76-454c-a805-869232b7d88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68add563-d27a-48b5-a553-9eba8de2ee23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f696aa22-44ca-4d42-ad08-5deaf2a6ad63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3509b605-d611-4970-b164-f3ca4c715094",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b85c0c7-902b-43d0-a50c-d0909990d805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ffe4f2d-d844-4fb6-a0c4-ab95fd99201e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c2141b-32d9-46ac-a4f3-43eaa3ba8eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "619dc9d1-e103-44cf-9e46-9cdee09ffb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75431403-80cc-4115-a7ba-fd90ca0388b0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548309c2-cdfe-4e8a-a0e9-a993954507d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dbded0e-8d35-49c6-b0f4-9fcec4c619ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8d4c1f-3bc7-4902-b131-4dc02153fd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "444f3b35-49df-43eb-b2aa-446a71eca841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66929201-5805-480e-8eff-ad0eec9dd2d1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75e1b21-1cf8-48f1-bfe3-26f0e74c0cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0535c84-8cbc-476c-84d6-fd47e0232dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0edd45-3e22-4d91-8b62-692b37e4a603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56fdd9e4-6d6c-4696-b320-9fc35da391ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0120837e-b82d-45ce-9a6e-1e1cb4adfc00",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4704a518-6237-41d1-a0ac-2740d1d75851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791ea542-3865-472a-b366-e87b09c3d5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cc51b0-c10d-44af-9778-3439aa357bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c06cfd-499d-4cd6-b83d-f1d69e6a9744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b39d6c-2a91-495b-be66-3e16b86614cb",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2abd7f-aba6-483d-8522-447730491e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431aa5e3-355a-4a88-9a6b-9a2ae8a8fbe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e47ca6-7ce6-420b-8a61-0d4b1c1d8b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b175ac0-1da3-4eb7-8a18-88c01e1125a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365bf9b2-af0f-4ec5-b902-c9f140d60af2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298b1eec-c4e8-4e9c-9759-bb6f937861ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15f467c0-2acb-4beb-b800-29ddc3573c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5deeb96-8c95-4356-8f3c-f37a6f62e286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3735ad0a-3f4f-4811-9855-c068538252e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56925e8-1af9-469c-9d7d-4c885f3b8f66",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125b60fc-b66d-42f1-adb5-2fdb3b78e207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99376945-63e4-4b6b-aa44-16fc2ade8ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902c8acc-5c8e-4ce2-aecf-b9bcb59078e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b92c13a8-ef66-4be2-8975-af4c1bbb5ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62995266-d89b-42bd-a0ca-c7b7598a4e12",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcf9bc3-35af-4a01-928b-d5fbbc81829b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14014fec-27fe-4ccf-bb15-b7c5173de9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a325effe-4b6f-473c-afb5-b95cfdd71f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16f7ff10-defd-4604-bc84-04fea9148c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfd49e5-8193-418d-a367-8c0dfe92ffdd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46de648e-7694-48a9-bd6e-2ae77eb3098d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8550323a-577f-4f4e-bafc-9014e0d627d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ce2101-ba1d-49f0-9a76-d83b17dd0298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3539a9d7-3542-4f67-9f31-8cb22de50dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4870485-84cb-4deb-811c-ba61c15b3dca",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929cafee-cf3d-42a8-a46e-2bee17bdd733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23584a7f-834b-48d3-80ec-7096e5f4ce27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fc9dff-8fca-4d00-ac69-7138eb519c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d311e77-210f-416d-acfb-ef8130c49234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93ee635-9a20-4ef6-b9c6-cf1d84c88724",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "832489fd-2755-44f6-a89a-c0624e287c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f73cc4f-1cc6-46d9-aa64-728d6dde7a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f424d6fc-1f64-4ebf-a991-e2f144edc5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d95fdb5c-1310-4224-b42e-b75432ddbc7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f737b139-9096-4f46-81ff-c5f9b626c4cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6db3ab-59b2-40b4-82e7-9645c191bc9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc61770a-203b-4464-beef-88bff1e13b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee319f2c-85a5-4ee2-8467-a97b98d9d62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f94e20f4-b7e1-4833-8f1e-78f97545e0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737f3480-15cf-4787-8744-f869287f81ea",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad85dd48-97b6-4a5f-b9a3-98113c04e861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437fa52b-ed87-4d80-8fc9-c0c326fac3e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498fbef1-1948-4d22-8ef0-13975ff38718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ead963e-fe24-43f3-8876-b2c985daf3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280e2be3-5a5f-4ff9-8451-1a048995577e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10ad9c7-7cd7-47c4-8c6f-cda85eae2a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c267b447-2a56-4ddd-a501-fdb13bc8a112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4258bcac-59eb-4555-b012-ae77bc724f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f64b0d3e-2b70-4b84-a454-5c35533b1eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107377c0-6f6d-4ca7-ac94-bb6d25102565",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08aa820c-5e17-4224-ae92-9496db914353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47d2a07-d9f5-42c6-ac9c-769f628e7840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c96839d-397b-4e95-81e2-51c7c21affd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "94f63ae6-a6f7-4523-af0e-84f499120efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effc7539-3281-41d6-8c1f-3285be344058",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a009b38e-8c04-4ed0-9054-7ec529de5ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fc9f64-4d98-463c-b06d-32f192d36e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310452e5-8fd5-451d-8738-b1235814203f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a6b2a94-e924-4b4a-b516-9a67cca50589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7a18f0-8b65-4e07-9af5-2f9b372e2d59",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88463d9-3d5f-4245-8985-0e92e93e026f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb35979-0e87-49c5-9506-afcde4b15fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516f51c3-0feb-4590-8577-e2d8bf4cbb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d95a3ca-9505-42c4-8e63-ed1028140c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fac9d6-a234-4ad1-afb2-0ae749524595",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70091d19-5703-4ddb-9750-cc3c3452e613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4f162b-0f8d-4921-b1a0-40ac19149e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981ebe26-7956-4a16-ae8d-bbf68fdae0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f39e6008-fbdd-47f2-a6ce-1adc4126ebe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af8b004-69fb-4f6d-8373-68817fac28fe",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e06751a-0402-4c4c-8bc3-57aea1e037df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17dc9034-0b33-4f23-9d8c-328516880ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d3dd23-d6c9-46c0-9c58-1870d86bf4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26cc84b1-b5a0-4d09-80a4-139972caccc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4e7a48-8465-4420-8862-548263c515ba",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c78aa9-20df-49d9-92cf-9d7ca62cb11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea00da2-ea72-4a5e-8821-c6fc03e90965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dca7751-f4d9-462a-8adf-8307c351b961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3398ea35-260d-4301-ae13-c6317dffb174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c36a39-ab35-45ac-bbc7-5527c49cd584",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f87664-d103-4c17-b7f8-8e4abd097a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c7ed6a-4c5a-4a4d-b606-70c00982873c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4479e695-f49c-448f-a791-9d1b4c7d07fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "892f0268-030d-42bb-9c6d-acd02a2f9ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f733c63-d040-4b89-a32f-754cf818844b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43121e1b-db59-4835-b944-71ef29c678a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d41fe69-d88e-4c66-a17d-333c2b7b06de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efb73c2-c3c6-4c3a-a17f-e7b04fe270d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e04043c-fd6f-42f3-a2c3-48b2d183a73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b99b13b-c7ab-4bb9-9296-b146107a6c72",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66eea752-b684-4b06-82b4-efdc66d45870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb3b372-26e4-42d8-ae46-caf4346b35d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686ecabf-b1a1-40e3-a1a2-51115f7ca539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3834b34-0330-436b-a1fa-eb33500e9784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524d1106-5f4c-4f7e-bcb4-382ecfc3a9d2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd2eb2a-b8ac-4e39-8889-23c8abcf1910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a28a511-725f-4d90-8a59-5694ea3cb0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ecb380-2ae6-4000-86c7-ebb7c28a23c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b314c1b6-6da5-4536-9253-2d6e61a4e473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2215e4bc-c3b7-4474-857f-1d84db9e3fc6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a882f39-d1aa-4eed-9e5d-1616d330f470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e805acb1-5f1d-48b5-b2d2-e89dd2b736e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bf5908-cdaa-4c69-9027-c77304dc4907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9079b0-0967-4bcb-8929-3732d34393d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80db1e35-4dc7-4081-9007-749ba24de477",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c220f1-8f14-4423-a173-9a5766d6bd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74b3149-9abd-41e5-9fc2-5c79a181d02d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bcd756-becf-4d70-9e96-7a9e36d010e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6701a7a-f651-47d8-8e4d-4d1401985667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a4ca47-c801-4374-8993-1c85db696a32",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3916614-5fdd-4f1b-9acb-fa2dc4e2ca0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eabd8b9-aa18-4902-ade1-c5c9c3593c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115aecaf-7836-4ff3-823c-3954259a43ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7390db6-c053-4663-91bf-563f67504890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43f68ad-9ece-456b-9c32-4d62b5e8603e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a292d3-c768-45df-b5a3-6f064c0c7d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e837fcf8-8fb8-462b-8030-105e3680ea6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c10961-180e-48e8-afb7-814713627856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7e422c5-22d0-45d6-ad52-c196dd343bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d87424-a1e6-4a1f-b681-6b8ea7dcd777",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce8ad3d-165d-420b-a950-eadca86aca0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23158781-8552-4080-8916-abe1f4f00707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352fad1b-e0c4-40d8-89c4-4c8ea2e7aeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34488c2f-2aa5-49e0-b9dc-6aaea92faee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f079eae2-d1bf-4e04-9e77-1d5174094bdc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cc0d92-e2d7-4cef-8675-5c7594abe450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e17c0d-6011-4c73-a775-ce140a2af4d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa2578d-10df-49ea-b22d-c4c57d857b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "96cb2627-88eb-4162-8d6f-51ae1b55a108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e25286-9261-4b2c-84a2-c7deb7aa646c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4ab0ee-4ed2-4e7e-a80f-8fe6ec5f1ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d265ae-65af-40e6-96f4-b4f3f856ae9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efde74b6-bb83-49b3-99ef-aa7583c3ea95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6657d40c-84cc-467e-88f2-3055a5758c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132cb161-d3ce-40e7-b719-454b74177c44",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f28f44-d4e0-4a38-8022-8135915b1e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f206cb9e-3ab0-4c95-8ed8-c4796b8ac0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6fe077-cdf7-432a-a78c-03ef7a73e7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec5beae-14d6-4ce9-a8b7-913e3cd92528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9208b6-43d8-43c0-bdab-3e76f486229a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa81b695-b8ca-4a6b-b519-07cc8bb6ed9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7369769-5be0-4e04-bf3a-a8f1794d8a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff21c852-1d24-4670-8a38-3725619942ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d43122da-3576-4cc6-af6a-f9f5da1fcb63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d038465-843b-4139-a4aa-d5d5592210ab",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a428e46-efb6-4944-b96d-a7bffc6d4801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62836253-14c2-4ae7-8bfa-68edb691c6bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89507e56-e97b-4b3a-88b9-02e7187f3db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d18fb099-ddcd-496d-93f6-42eea4fee916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13734248-0174-4005-87dd-b2c8697bfe4d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1b56a2-e718-460e-bd39-be2a5182da13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9707b385-6251-404b-8fc8-1d32d8098436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b50577-51ec-453e-b894-02f1eecd7321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c78cdfad-908a-43f1-b521-4ab80ea0bb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f6e184-7ccb-4627-81f1-eacbe35f2a42",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803c08a2-5f70-45db-b4e4-84e40e9ee3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508b3b9a-0031-4a80-a083-ecc70bba95bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b689b2c9-06c7-4ed3-80bf-1fad4d81fd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ff67f1-ca42-4dc6-a3ce-7690e00ed70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae21921-f7f8-479a-9cce-5ad55bced694",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3d31c4-f8c8-4d4b-b409-0b58dec4542e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425a0129-6e4b-4021-91bd-42828a048a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a85cbf-db19-432d-b2d7-810a24fa75cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "732bc01f-f178-4091-99a3-97c0151599ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e40f3f-f029-47ca-9150-155e8883e1ba",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0fdbf1-e817-4f09-a6f9-6c95f312a8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d6e1882-b9c4-41c6-9c56-677f1865c514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f316b06-9caa-496c-a48c-b8cdfd3d8fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42eccaa0-6d60-4485-9bef-a05688140df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefa1fd9-85df-42a3-859a-4a8127fd5aa6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e74c2c-af73-40e8-bf66-cd784b16c540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b41b56-f5ec-4f98-b0be-d5612cea435b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb72a857-b917-4b59-b9ee-e4a92d4e819d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19954c78-9399-436a-912e-0d1ace5245a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ba9afc-a478-40dd-b0a5-1f402c148341",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172fa8b4-3bfc-491c-bec7-4476e54f2f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b10090-a7d2-40cb-b3c0-510dd2867ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b72809-dac4-47d0-8345-617c9915784e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43bec57f-c3e2-431b-92d4-f3d9aa74acfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e606ca-bc67-4562-86c1-1135d5e8c39d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5942960-a8c7-49f2-bdd3-d2f27fc06f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678ae44c-c820-427f-a372-a96e28a10c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c364fb55-858f-4af2-af70-0ffc83c4f25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a57bf949-20aa-4d53-b988-85f2ea92ca28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bedd21-853b-4606-a122-8cfd80827311",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b89d3b-abe9-4abb-9fe4-e48cf254e098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131950d9-0771-4615-9f6b-c3d5044b5574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25e7f06-9896-4d3f-9285-26d725a6881c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c20ee846-65e8-4f32-b533-493cab6cff19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4c71e4-06fd-4751-8dc8-305aec739b50",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e871b531-7ea1-45bf-9699-3714f7983044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c91b90-6dc1-4ec4-affa-e94e23ef2bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599fdae6-7aa8-494f-a317-3e722c617cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "318fcf5c-78e7-492c-9c0a-80d9faa8ceaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925b282e-f263-41b0-a4d1-9e0ba3a3caf4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893e02ac-d478-4dde-93ab-b5d907677cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4092906b-6268-4539-920b-496932b464ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d9feb6-7244-4809-9816-bc20153c23d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c0e4af-d5d3-4d71-a85c-03a64351c9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43300950-936e-42a5-9977-23c8b7d325a7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf87d34-de2c-42b8-be6d-c982cc47f3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "009f9cf4-7293-45c1-8a2b-1cad68e08f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb9fa27-aadb-4e22-9955-5bcbfe3b69fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dde969c4-1a9a-4e60-be9b-cc6234128fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92676935-eccc-4434-bae8-e9935afcc3d1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4cd88b-39fe-461c-8400-f06463e9ee8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51b5aaf-0f8f-47c8-90fd-9c3983db4648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93dd6135-6fec-401c-9668-2f7ca3696944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "14a712d8-7ba4-41a5-a27f-508d290ba9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb27123-348e-461f-ae7c-8522c5279f6c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279a7e32-c0c9-4f40-b4e1-2c0e2c0264c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5303d8fa-20e4-419f-bbea-24891559fc6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f699f6e-8049-4a04-90e1-6e2e8c27fd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b8011a8-de20-4af5-bfbb-02c00e7a12ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d954829f-a239-439c-8748-41558b3229f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70a70a45-9154-4e9e-be4f-b5be23485078",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63053a4-4777-44cd-ae0e-38630b3281ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4618a5db-7b3e-42de-b1bc-9f49282f8961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbf8f95-c83e-4951-9ca6-c00129c8303f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe662955-484b-456c-89a4-a5e0eb432046"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e43b2712-0f0d-4e71-87b4-f564781128cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62333161-620f-47a6-8867-f7a41cf1811a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8df946d9-ec46-4d92-8bd3-baa17b1b2bf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2449cdb-5500-471f-9c40-e17f658fd09d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ed511092-fa8b-4d20-b7b2-2d793c6b62a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c09689b-d8a7-4dd3-8b08-f1fc51268092"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b48f4cce-90d8-4669-ae9a-42a9b95ab7cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c46a572-9295-48f2-9caf-3e85b3b29bd5"
                }
              }
            ]
          },
          {
            "id": "5befc993-cbbf-4acf-8019-2333a2c8b1c4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2d54f90f-1e82-4616-9005-e5d618582602",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dc8d55e-bd7a-4f28-863f-ebba9f722148",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "788aa930-f236-4ac0-91c1-33343e387263"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "871437a5-d335-468b-bffc-13ba5c1652ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0fd0e54-ae0b-4a76-be78-d37d589a5e85"
                    }
                  }
                ]
              },
              {
                "id": "99bc96f7-1424-4d4f-b0cf-4f345675c5b0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9da4a30-6c82-4e92-8edf-4d95abc43fca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6bc08de-b218-4d38-b278-c422ebfb7a8a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3aee577f-faac-49fc-a18b-562ab907f962",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b292603b-f368-402a-bddc-c12175002909"
                    }
                  }
                ]
              },
              {
                "id": "cdc867cc-8e50-4b44-b607-a96386a7a04e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5143592e-1dc7-43fb-adcc-d4503bbddc0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e19a92c1-5daf-44ae-9d35-731df42821e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2016ad0-4a46-4be1-ba84-7ad013428e82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e5613d95-dcf6-4868-8723-999913a261a8"
                    }
                  }
                ]
              },
              {
                "id": "27c390cc-7d00-404b-bfe1-bd78ebb0f93c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bba4eb04-48cb-4cfc-9e14-c59a83e6f35c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fcd20b33-34ab-465e-9f65-a853c8486cf8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d88db4c-fe00-4b0f-8d18-b9aa65e31c18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b16b9f83-f580-44a5-9c94-bc71b9b97446"
                    }
                  }
                ]
              },
              {
                "id": "3e48a8b6-6483-46be-993c-c2d25122e11a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8805d91-8efb-4d1b-94cf-26d3697313f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3002ea0-3f97-44df-a707-13e056ef7eeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ee092ed-76a6-4440-b19d-a83415847e39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4960dcd5-bbbd-45de-9b27-c40350b0ebb1"
                    }
                  }
                ]
              },
              {
                "id": "70efe653-8577-4f80-b872-0d004a79e4b0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da3fce3c-5ee8-4aa0-88d8-ff62c9bb689f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aac7c7eb-073f-4cdf-a899-5c9b88a45491"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e30b781-4e54-4ac1-a197-37adb3b5514d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ffb555a0-e4e6-4879-8b8c-fa8c6943a836"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f60f8df4-b167-4c58-ab13-e60b7f9e7956",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5859410b-e82f-45f3-a0f2-75591342b23c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2bf63e9d-035b-468c-93a8-6f2eab3c575d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b20629da-4b6b-4124-875b-4340977bea86"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78f599e6-4c5d-413f-9a69-b93346a6ca95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "efd4aef7-fd52-49ca-b84f-bedea6da4266"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24e31c95-e803-4654-9011-1ee35c5aa7b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4b7064d-495b-44c2-b0a0-dc236ad11edb"
            }
          }
        ]
      },
      {
        "id": "ae467446-8b69-4a55-a4a2-12a86d736409",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9475c8fb-e8bf-4b17-ab11-e7b5db2398b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66bd70d7-3f7b-4078-8860-943607562481",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84852aba-dda8-49aa-b3ca-0bcb69e7b977",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35be797c-bf3d-4e70-aa25-38579aa82630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bac7061-866d-4390-adb2-9a47ee83a29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5565c356-8167-4d5c-8574-680269bf15cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5569c30a-b7c0-48ee-8160-d2c233cddd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19dee6be-3859-4fe8-bc47-e9df0e07404d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401cae02-4930-4a96-aca2-3d40c0970bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1e1815-8050-4ace-b09a-2933803cb9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbebc1d4-c46d-4f57-8726-aac6c9a8fa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e29b0e6-7a6a-4ebc-8e73-943a3113ad3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c1db98-ef73-4768-9ded-9aea7b1e0f58",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c2763f-b88c-418a-bfd2-678c6f5b7a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f4bc33-2bcf-4d09-8d00-5d23591f700c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9fb1f4-dda7-4370-8b44-7c985ae219b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc26f9c-2802-4897-ab12-cfdf5b4e8f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc15b4b3-e22a-46ec-94be-eb5c76970969",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f1635a-6a64-42ea-b22c-8cfab03625cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a1c3e5-897b-49d2-991b-cf8fc8c72d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fc84b2-5936-42f2-b7fb-a2121c553c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9e6982-405c-4990-a363-bd368691d3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895ae017-8fd1-4748-8d11-232472748af8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f705a6f1-8d38-4357-bafe-f74cc7aabd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b089da-9929-428e-87bc-41c643e5e4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a875e935-01ed-4e1b-a06c-89ec616c9b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d1952c-43d3-47c9-827a-a562b7ef039f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29852d38-20b5-418e-a23d-2fd81d76330a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39747264-12b8-4018-9cc6-0747346db368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11528a2-124d-4001-9fcb-31d14e497feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76e242e-920a-4138-82a4-5caa3910e728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e02630c-ff51-4c12-94b6-f9d96d6aec7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c0e99e-7186-4a6d-bf2a-60d963377693",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c88ba1-2456-4414-b4a3-fc109c998235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e42ee91-a462-46e4-b18a-28b3d4394207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348427a7-ad47-4d21-b303-dc57ad19bb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "46b20208-665e-4df8-afec-e04385056abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c80f9af-1cce-4703-9c4e-585378b9ff8a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8fa5d5-7b7d-4aae-bb0f-1db47903b922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a9c509-4aef-4c09-aab9-68d5b1675c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753d1bd9-b400-4301-9cfc-1a6187ce36e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8283fd-1a20-4b7d-84cc-350ccd012a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15614832-71a6-48d2-8b23-687a54423dda",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf220498-e10c-43ec-a4a5-b6b595d056d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2731868-368f-432a-824c-79a9db841ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddefabdc-60d5-4ba6-aead-1332938eb310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd7cc9f9-c719-4818-b475-a488abbe1339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78662a5e-17f4-449d-9788-b26fda6cf590",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d50d940-68f4-49b2-8ee9-cfe08ef7b3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a60707-ed33-4e9f-ad61-db0fb9455eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ba6b36-ba2d-4d61-9276-04e56b6ee352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b1bd49-74db-4579-ad94-aecb1c82ee99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7121b6-095a-44ec-9059-9638523573a2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7353b1-e023-4b9f-8703-5db5dbf5952c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41a41e3-b8fa-4351-9ae6-2da9fcf7249a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51252e45-fb55-4412-80f5-aa1853b883a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "aab820b4-636b-4d31-ab56-cd455203d21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9a2aa4-f6e1-4871-b2c4-ac273d04ff7b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27a8fd2-09d1-41c4-9657-bfcfa243c58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6acc6d-79cb-4b46-9003-d16c97b8e5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0797fa-0214-4918-b7c9-6094abef7655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b11058c8-d2aa-4b9e-ab9a-c16723bcda68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88198580-3da0-4103-a7f0-fc26834b2bea",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b551a5f0-4c38-4e46-a59f-90013728a678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703e4858-6b73-4045-b0aa-447856f6c7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae9bb74-601e-43a7-8e0a-92d68ee081e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1281428a-1ebf-4d71-a390-f97c52fa7450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612d4840-9d5c-4dda-ac97-5a2186744a17",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68385886-8591-466d-a55e-3a0f5f706ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc00acf3-44eb-48a5-a731-66e1e0de76c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09092176-b4b6-44eb-995f-2701d05ebaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fcfbdb3-fdd3-487d-8d97-50f9ac95630d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6fdb1f-c68e-43c7-a4dd-0a139a3a828b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4882fb5d-22da-4c7c-a02f-e9bcfb2fcfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54836c9-6d0b-43f6-9191-7b846489ed97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe358ce-721e-4edf-9de0-ae0ca71d3ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6c8e5db-5b1c-43f8-8384-6e3517ceafe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6e517e-bd0b-4365-a660-b4210058a63c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0def44f3-4326-4371-94ef-314f67ec4178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b29c4d32-0c72-412d-8c26-595a3040203a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae10da8-7676-46fb-b16c-a67b8f1afb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7266e69-13c3-4229-8102-3cca625ad23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad74bcb-2910-4e56-bd3a-865b1ccf7f19",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d088d0e-890d-43a6-8651-fc15366fe521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c130188-a7c4-4a3f-85c6-a46a422f9f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdc4a1f-bc9a-4c00-a3f4-5b5d8ab0622d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f05f8534-ba94-4e2f-bf6d-1c5d2401c577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9063545c-eb8e-42d7-9ee6-5f3acdaba200",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d4f2f3-4348-425a-8478-088790ebecd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72921a44-be42-4407-b384-081ace50a6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd507084-fca5-4407-bf7c-03ab72effeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cbd7420-56b2-4cfc-98fa-36349f005d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad50f936-9804-449c-90be-fcf34109a5eb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fa6bb9-94a1-4308-8158-1d006d4ad428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f0f46b-6b9f-4256-ac91-d1dc9ef755e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0a09df-18c6-4b96-8a21-c79447a9fe8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e16277f-4fec-4960-b301-e0aa32dd2864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1ad7de-02a9-4b0b-8e22-aaafe225a487",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "652daa30-0086-4daf-b2b8-64b28acc2bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba53e90-c996-4918-bbbf-485824485ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961d5f48-6f47-463a-8d8c-eec6a5334d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcec6777-d051-4a50-82a6-862842982106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88ccb68-881e-4698-8c42-f8a08f7971d3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "876a6798-8b33-4041-842b-395ddcd0b307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be6e1d3-09a2-4f47-8980-d5013d52db3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2077d2d3-90b6-4fb1-9b01-b55bff1eed69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "303e4da5-b0f4-4bbc-a56f-ed2cb4927e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9122a878-f8ed-4ab2-944f-39b895f2c0bc",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5f0bea-1d78-4464-80e2-d58256b26d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c011315c-e5dc-418b-a1b6-3902823f4c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106186d3-14ea-4971-a4a0-a0569cb8eae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f24a4b8-99fd-4bbf-8e78-a7bc8869bc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b39f5ac-195f-46f1-9e82-0571559c8238",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce778015-84e7-420d-9150-3da2820631cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ffa924-3221-459d-bc17-dbb345a8e31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b643b620-4fd8-4dda-b467-6475d74aa767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c69a1b4-3f35-45c6-9599-b6c87b6dfc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ddde2a-f1e5-411a-b249-c9311a958ede",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d17a9b4-368c-4162-813f-79f58e5e85c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db097a13-ab48-4110-bb53-4b0490158036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f10e5b-b945-4366-8e2e-d651899923ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1199ef5-79af-4f0b-871c-2415607f46e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfe1d46-b4c5-433e-b096-a3ae81528c7f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37b06ae-bc94-495a-9e3c-befaad56a347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c5984e-623b-4b80-9c4a-1241af75dff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ffb9cf-39bf-4529-aa44-36826cfdab3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ccca725-1601-4b66-8a38-c852434f13c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7fe6c2-be86-464e-aa59-4c69574f2791",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ba3a7f-7883-4631-8834-d710b3e1e0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f757f29c-2ff9-4343-8d49-c287fe888a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5227829c-639b-4848-9139-b98c8b4e4ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "610c3b9b-b1c5-48c9-bbe6-7870798e9e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02e56fc-779f-4a7f-b4f4-fc64b0156618",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4122eb-69ba-46ba-872b-af907f39a81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65ceec6-f4b1-4c3a-8616-01e455c761d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81f92d3-8825-4d46-b52d-1cf188b41528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "553223b8-0eb0-41a7-bf8c-9afa330f90e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5b008b-cc17-4044-8c5c-d7d84f0a328b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7be43f-1002-4c49-8b57-69516a2d8e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a502b0-578d-4a51-9abf-912ff7d3ed45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d535dd05-37ff-49c8-8fa6-b522cd4a5d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7462619e-17d5-4b41-847d-451684c2c686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697d1c60-5ad4-4b10-9ee4-b031bc2e8b8d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c251795-9037-4afc-b5b5-2c08f9a84c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6adf16a6-1b10-4b3f-a134-7ec071fde834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3655fff1-e1d0-4206-afd7-6be8253c03e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d3085f-ae92-40fa-8780-dc320c01a1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1468ee8-043c-4b53-a671-1e56b33a9977",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b1ba63-e324-483a-88a1-fc961ff0495d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f14125-78f5-4017-a5cd-e705192b0c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bba20c-5c07-4bdd-8047-a9d5d12c545e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52dd9eca-dfef-4a89-afaf-46a668dca2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2393ed16-e795-4039-ae55-38989c2e2fd9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7442e3-7ecf-4599-8609-e0373cfbdd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07cd14c2-c46e-4e71-94ba-27d13bce6699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4781f0-28bf-4b94-adb7-9ffe8b471ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b747e49-7c94-4665-aeab-78de98653d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e416770f-a1ed-4845-9188-c4e99234b3d9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f279efcf-5f7a-4b9c-84da-85758e13c432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d14589e-be29-4730-a293-248d51eaef15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30901828-deb3-4481-b7b4-74b8d5274195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2846249-5f6e-4ced-83d2-9ddc7ee06272"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6ab25ce0-3bf7-4fe7-b541-a8685a1e48e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0607c299-8126-4a60-ad88-e9e61b24b287",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5e63da-6400-4723-a17e-db8e15b3003e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b20833c6-3174-4557-9594-2f8644b2d41d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac9f636-8b04-4ad2-a124-2d7fded2d29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40cc928f-5957-4346-82c9-09df0c987e24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d547285c-4f2b-4052-9c0c-8d087935bd78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ef4c095-fc7e-4ea0-9074-c11e598a9f04"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0695baa-f002-44fa-bc73-95020d7b27d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38a45220-6ff1-41b6-a40b-735768265354"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfaee797-f7d4-44b4-8543-6f9ecbd2e0c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e08aaf14-6122-41b8-b14d-bce78e21403e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d5bafa53-2cd7-4b28-8007-02eca18e6291",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9afba3b3-e149-43fb-90f2-033c81bfbba6"
            }
          }
        ]
      },
      {
        "id": "c699fbb8-38d3-40d0-b8bb-8bace9894377",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "24bf299f-fb6d-487c-a2d3-caca399ef363",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cafac15c-675b-404e-9631-3700b9fcf677",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1515e424-cbd6-4b51-a6bf-cd2f9dea6aa7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e633f246-73b8-4a72-90c6-11212de73c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621ebf27-190f-4692-8048-d68160a8e8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7feacd76-1c4c-4408-9084-eee2c5a630b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "54634502-bd93-479c-8543-ec66cc6a0626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125070bb-19b1-4b9c-89f4-3248a2e8d248",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1eb63ab-95eb-439f-9f52-3a1eccfdfeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362c391e-82a4-451e-a673-c69bb8e4d25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dee357e-fb5f-4e1f-9ad3-4dc4df4428ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8184627-ad85-441d-9e7c-66fd33040251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a47ce4-b357-4c45-9fda-aa57b33ce1ed",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdbad2e-bfb4-439e-92c6-dd12a025c98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dec732d-da52-4f9e-b523-5935bb9d9244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd76f73-5ae3-4edd-b081-1ea6d9de78b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c477934-9099-46d3-81dc-e65683741cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b105d3f-a10b-461f-8b0f-f62f1cfa4349",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962224c0-db64-429d-a0cc-5d07b379c904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26cb2fb-4ede-4789-a283-570df418cfdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e829bc4-bee5-458d-8bd2-4595992cb1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb6570a-8a2a-45c2-a8fe-b12a3dacc28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb51a7c-2b88-453b-9abd-a59e427ec7f9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa79f323-222f-45d3-8401-5ac704cb5d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc5040f-a173-49e9-b5d4-10ffcc40d404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a85005e-2e28-4b34-8ae5-f568360b6a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c011fb63-5574-490c-afd8-8beca4a5bf97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265b910c-28b4-4d61-b1a6-3dfcfffb02a9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799709e1-f6af-45eb-9360-8c49edc30aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa762a35-149e-49ca-ba9b-bbca1bbc6143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d08d322-ef36-4c50-9bf4-0bf7611364a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "46e9ea86-355b-4aaf-811e-7fa099be4fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b9acfe-5522-4868-8d90-4c5f2db6b1df",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0489e220-f9b3-4b7c-9a9f-c42b90890ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbd38cf-f122-4d7d-bc49-054f64f15311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9897589e-40fa-4de6-8ed6-78d7041ae777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "37cffc4f-f603-4de4-8326-430d589eb2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf04489e-fbbf-4709-a23d-72f3dd1ad32e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516ab1d6-257e-4528-af38-4f6037577d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98914a60-0877-42b0-b597-7e037104445e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d6d300-40d0-45ea-bb5a-0a517107a90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "776ca7b9-ba73-4501-870f-d2c66e596c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58effae3-bb8f-4625-9871-ff64f8c2054c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a164979-40b5-4117-b369-c337b236dad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd552a7-dc8b-4d7d-aab3-3219fcaf81c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9f0e11-9a7e-4c77-ba65-1c17c1f2026d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57a8b799-e7fe-4c69-a108-c1f366ceebcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee684385-2c5e-43fb-ae2b-a72c4d7c94bd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dbd97e-bfa5-4f5c-9888-d76e83076c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4b7101-2a60-4af4-a55e-30e032f4af89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4333d908-cdb4-460f-9c7e-8215b1b6e799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "893d4323-04fa-481e-b338-7d6d3e78e487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d870ed-318b-45c2-b383-9279c6bf8ad3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0e4ad8-126c-40cf-9a64-d446fc488517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cca77662-8662-4060-9088-1b089bb8ce3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5044f7d2-1a5f-4b03-8fdc-f81a61d2d11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9806b5-7122-48b0-997b-78ddb6dbfa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62649961-e727-4d47-b0f9-d5bc48e642fc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914a271d-e198-42aa-aa14-92ae499238a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33729e8-9f50-4c61-be41-36082159cb6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7439b7-cfee-44c7-b5a1-ea25092b59e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f28607a8-fe57-4b3d-8af3-555ba16e23e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8224db02-1038-4ba9-be7e-b99e6c1e543b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15702d4d-8c2f-4467-851d-1cd5f2c245e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82b50bf-3a08-47fe-85ca-1584f99548c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a3926c-69a8-4629-8c0c-103ed78a8a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5ff7cb-232b-4f70-953b-4aff51be12cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4c53e2-b257-41ca-ad7e-23f1cd3277be",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec696154-bf49-4f10-a707-3f7cc2326582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98d29e3-0ae9-4865-b1c2-8595391438fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e6a89d-2537-4a39-99cc-2593d030f9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1805538f-ac30-42ca-bb98-e8b9565b74d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6096727c-4974-42ed-b09f-20e1a780fcfe",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "216a1fd8-1ef6-4d9d-9568-80c02c749dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50aeb86-a847-4c00-9145-dd01a36fed12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3042e496-32ff-40e4-b499-a83ce45d5695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8bbbab-23ef-45ce-9ab9-90aa9b3d7961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b1331d-b84d-4b21-8461-b8f59ea32081",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dad65c-44c2-4244-a9a8-f36db7ffca68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8eaaa4-cf22-4d2c-9c98-ac1bc35c9ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80838ea-38ac-4a45-ac7f-f2184d1aa7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "820e2291-1ce3-4478-976b-3bdbd234513c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098ecec8-f05f-4f83-b0f2-877e99fc7d44",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e5ec78-c1fa-467b-919d-9820045b12da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0debec6-f88d-411d-9eed-5b2f41a11153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c47573-44a3-46e1-b048-d76afca3b737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc24da39-94f3-44a9-80c7-2555945de203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c59a9b-81a9-447e-8108-d40d338ce0b9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3227d24-9c15-4556-b928-1f695e373761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7698da61-7006-4ec1-a5e6-bcf1c70e733f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6cdd6d-048f-4318-8352-acab1b496ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f09ce01-f9d8-42ea-8773-dbeb8eccb0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db111f5-15c0-4134-a7fa-b625a2e439bb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7625b8-23bc-4c10-82b1-6eae8ac6dc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba580ee-6f37-4224-abe8-e6932296b416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc398f1-16a9-497a-bbeb-1c997f1705b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c18bd1-a85a-4795-bce4-5c0bf0cbf967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d462252-b574-4b63-a0e2-bc7bd02de676",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d52720-f115-49a0-86fd-2fc12568f47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0805860b-f528-4b3a-b3a4-5fbb41205b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd7ed68-3070-472f-92a1-92ccc3ea63b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f87f3601-5502-4267-95b9-8d3eefd9194e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5573b973-6422-433d-b7e6-4e0152295073",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90e1fe2-81eb-4805-8a39-43754a7be79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe12c3d8-86ce-4d20-ac04-af3cd01ceb11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6b809a-33f4-4756-bcd1-7f4a7a3b06b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d5bed2-c146-4e68-bdbc-e947c3f8d3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00729b7b-29b9-4dae-b604-5aaf7d7ac4fd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47b8245-195a-439f-bb48-6b382f77d462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49200db-7c93-4d47-ad66-6c1e5ec5e3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4727872e-2b7b-4b06-addf-7e9d874b8582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d52666ea-1b3d-46de-91e6-ec46aac8591c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecce2df-b714-423b-8f4e-7883c6993a90",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a6e839-d39b-4ad5-8266-0589e70ecfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd42dd1c-ffea-434b-b67d-792a5f593ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb4783c-0073-4bd6-b200-f4028ba0a9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16d9fe03-5061-48a6-a9cc-20f87350c097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34577c8a-403e-462d-9f61-43531f401b47",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c51004-1740-41d6-b584-f07c2ae9937d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "484e929d-9ef1-4e42-b95c-c9eec9374552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944454a0-ea8f-4489-a50d-55062df558a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "315e9e88-1414-49bd-a7bd-f2013d515bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ad53f2-1324-4c65-b666-e2bb4e618c2a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9b5026-56eb-41d5-af73-80b4b8673a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2cb23e-0656-4e21-9327-4409560cdc6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c753a5-1d25-48b2-a108-80cba29e7ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fadcd0e-9e75-465a-a524-1cca0d5ff5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b603e6f-bb76-41c0-b2af-86a2752ceab5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8bf526-abb6-4f9d-ab54-bad1216f6834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3323ca2-0349-4bd6-a505-d73e8dc0550e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bec95a8-08dc-4873-9c0a-1b0e58e6063d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acc79531-b081-4b38-9f15-c72fb065f044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d98ea8-2e67-48a5-9e33-1816d1772ab9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06234db1-5036-4204-917b-d3cad94d7f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7119c6c-599b-4838-b21a-6db04f7713f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1eada0-fb82-4d4a-9972-3e873ffc25f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6928efb-0758-498d-bd89-30fcbda7c66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10097168-ee6b-45d3-9840-08b87d9e7b72",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef03683-c9ad-4a18-a8c6-45c802467b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056274db-3fec-41c0-bfa1-f20fc8f474e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b2c2c1-de08-4c78-b04b-ea10bfa76502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e170b8a-753f-4c8e-bd22-82e54f79e1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7b48a4-858a-4220-a387-3ae4bc608252",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac01aa0-09e0-4668-ba24-d95ab27eb22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121dea4c-f451-4fd0-af3d-ff60d817da19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3261ee88-669a-4fca-8ef8-0b1886c608ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a9953b-0e45-44cc-83db-06119940fed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048352ec-9585-47a3-9d06-c89772d0f032",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a75a1f-524f-4e77-82e4-2d838d8f2b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a8af22d-ee3d-44e9-ab64-7786cbd676ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc8a9ac-a475-4129-8221-142eac9d892c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2361d0a-eba4-4e5a-9f8e-3487d73edd2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2a0f00-49db-4d7c-b4ed-ce7830b3e843",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e21617-b8e9-4cfa-a448-9b99acd4d694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146d3e8f-bbd8-408e-b85e-b2ca035d5e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ac582c-5fdf-4ef4-8d99-266a632608e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5c270b-a516-4679-8974-3f80b954a6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2c03ee-d34c-45c6-8a43-305d2d0b7da0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697d6209-79cd-47a8-b6b7-30ffd3badab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd8ab2b-3674-4391-8b2f-54870113e8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d53d5d-9053-47b4-a927-c4884069f290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad30ad08-48f6-4a09-8208-07fcd5f44465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58787d38-869d-42a2-bb4d-42db6bc20042",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8462bd-011b-47a9-9986-98694b9b8525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b89933-2ea0-4c32-83ed-79f897ea2b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a27468-46d2-4a6f-8db7-7ea430ea4f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6db601ae-79f4-4dbf-96f1-f0e5808b1255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8030d7f0-6890-43b8-8e5e-fef1ea527749",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ff8b56-317e-4de5-af1a-49a9efd579d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1dc4c1c-73c7-4e34-84cd-7ac707536d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75db339e-b6b3-49ed-a288-54380c8ad9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2bd0451-b57c-45ab-8af8-0a46f53b5b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b235a41-429e-4e77-8ba2-6e384439a925",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6d6543-0807-4fba-89c8-f55c6515c7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813da2aa-cc1d-48df-aafb-65a52fd5727b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f532478-c572-4b5d-92d5-8427ad23d9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21d8742e-f8d5-4894-89af-d55fb31b3080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc57e7e0-1218-46bf-bdfb-0b4948348695",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b422cd8-7da2-429a-9054-2ec673bca4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba3a8b2-1d10-4650-97bf-be9d0e4516d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab21962-fc54-42be-b36e-5e00174381f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32d2526d-d7f3-4537-97f6-31f8304c7f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b590e93e-42e3-4b01-af9b-18bb2a8bcecd",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c6bffb-de1c-417b-a85b-c514e3c20045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d647db3f-fdb8-481b-bd93-d975fb26854f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f87eee-69cc-45df-a0c8-eb6e7b3780c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72cd1c1e-adb7-4e28-b2be-49da127cb81a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b0243510-73fd-4071-b268-b3e1ef886e94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b2ecf474-072f-44fe-95ff-607f062df6d3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de14cd9b-dcdf-4dec-8edb-9e1343bf30ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "00fb6481-8846-46f6-9aec-9158e04647e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4eaa1e-0cb3-4697-aad3-92bb3898cada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7004ca00-e9b2-46b1-94f6-ddbab1a4c386"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc33fbcf-7a58-4b0c-a27f-df7cade716b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41e89f7c-c9ed-4db6-946f-b3abd4b67859"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "932b67db-5960-4f60-9e27-63fe4dcf4608",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9d6ef9e-2419-4bce-b1fa-4442195d043f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d5541b2-de0d-40ad-a4de-2af5d45acd27",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cb905313-73df-452d-abce-32265126c8df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e889f54f-086f-4faa-be06-0f5d596ab479",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f03b090d-32c9-4d04-85a8-87eca605f728"
            }
          }
        ]
      },
      {
        "id": "e0af63d5-1103-4b1b-b3d1-0aaee0ca291d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2155be36-06c3-4035-8d0b-51b845422e33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80c764f2-4666-4fcf-a283-97d22821ccb9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "584bf839-8d54-493f-9b6a-c37ee43d9e92",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9da139-d7a8-4d09-a1ad-bdb719cbaba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701bc1f9-ad8c-482c-93e3-266479d81301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9965fe-fbf5-46ab-841a-7d76e941a358",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cf1e17-fec3-4d35-8155-0598b72061cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838c69cf-715a-43bf-95c1-7410bdec2e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1782f98f-c8c5-4d9d-ab6e-304cc62ee87a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efbe670-9bd2-481c-8fd3-0fa4809015cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c9406b8-3ed1-407f-a2f0-7bc09cd24e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad8a465-fc10-4453-8850-d9106d2f62a2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6632e9-e959-413c-8864-22934b1ab9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5477815a-3513-4b89-b95e-24ba2e27a362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d66a2de-fb17-4d3d-b156-abbdd772d6cc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f99e54-492b-4cce-aa4d-252663da8adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6a8250-067d-4d7c-a7b9-0615871ac3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4412b757-c1d5-4841-9b05-252e0e949ce8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7970f858-9edd-45f9-91a1-81a206189c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60eb0d7a-6a03-419f-aa08-32ae5ecddbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c55f272-f4f7-449f-a29a-de8b348a1363",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b501198-a734-4c7e-b41f-e82bede110bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24346ce7-e53c-4de2-8cd8-3ae98735f5a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8d517d-0b21-418b-923d-21e3b0b89dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435e514a-6487-4271-b273-ce8ddc732904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873197b0-57a6-450e-a1a0-0baf39e2fec1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3a04e0-c5b4-49f8-be1a-c5bfb6d528eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15f4d936-616c-4938-ba7b-dec9931d0b0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16d7db8-9be1-4228-bc3d-f527cf61a2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920cebe5-4e52-4053-b111-f417c9c51b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0bbbc55-436d-49c0-a213-169341a7dfeb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4d3d28-a833-487e-bdb6-36f2b294a9c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24e9edd7-67c7-4119-b944-37991780e20b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530ff6a6-17f6-4b7b-a14b-6117ce30d15d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e84dae7-e62c-4e28-ace8-b9c054c2ff32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e8b3c6-a217-4007-8505-43895c1a360d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bef8fc-7ddf-46c8-9afd-7b9e4340fcac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1729eef3-0314-4320-8d58-e21135910bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "487a3e3c-c52d-4a5e-98aa-a19117ca1dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75299d53-9513-4c61-bc89-da4df1ecdad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15cbe17-f3f9-41d9-b3b7-0a45875486dc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce556e7-3ed2-4039-a0b0-2ecd8509514b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6f02e2-18be-4ed4-9524-63f6bfb3a659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "241fc46d-0742-4c02-bcd5-25a478f75bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3197107-0ab7-4c9c-a83a-c4e68c508c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775206f2-3de3-4270-b6d0-cc5c52074330",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88321f81-21e1-4dec-aa5f-edc6545a34c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b98ef58-7be0-4208-bbc7-0b5429e39e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df98547b-77da-44a5-98eb-77ea116f05d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1061fa62-a12c-418c-ab13-4d11771e98e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee019cab-7d17-4d98-98fa-50153f373157",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0147393-bcf2-4d29-b156-d0b07d781fa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ae1f8f-48f8-47e3-b437-12542324f743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d7dd28-2adb-4a8d-883d-e1adaae0dd85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ddf538a-24e9-419a-89d6-d26b3152aabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32c81ee-1fc5-41f0-bc42-8ba577ebfa79",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a082ad3-dbd2-4693-9382-166c47d85242",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c563e1d5-f4a7-42c0-bb51-727002a36c83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da138241-03be-413c-ac01-57fa0af81c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc24aa9-da94-4d10-8536-11d3359b868f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098570ce-7081-4c8b-af7b-1334ef6ba858",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91f9c9a-570b-4a19-9645-38bd4b3a2bb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64f9358a-bd32-45fa-bf85-703985ca0f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2d13ce-19e8-44ba-abc1-0cacb672206d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7780c060-bae0-44d3-a61d-5dead2a347a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1470f6-7b20-42ad-9ec1-e46d81a4cf2e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9050100c-7c6c-431f-83ad-07c68048aaa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c25aef64-c39d-4838-868a-8ba1db19846a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb787984-8dc3-47e2-bc20-b8cfe337ab65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62fe6687-7cbc-4e7d-8a23-053396a11cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96614162-3adb-4927-b463-e9a1e10b507d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cff5ccb-a0e9-46c9-910b-449b274340da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c879080b-06e1-4e17-ae6f-50363ddc257b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3ec676-fa36-430b-98e5-5abc4daa9783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f428768d-8077-4d29-a58f-00aed1125a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259b9cc8-f035-410c-8705-b05622e00473",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c4263b-f559-4095-b8ad-4eb422573ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd2915b-f9f5-4380-a9b0-29c87db7f238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153c944d-edef-4184-96dc-d8018b0b9da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b34ef1-fd60-43b2-972d-244903a7b986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd47270b-20a1-4d00-bb18-87ba17ad7aa4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7c3150-5dd1-4dad-8950-5cbedaab3244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5efe0cd-e527-447d-97de-60469213a241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3efb521-a94a-4f46-99eb-ee95abbdf67a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e17cd33-d6bd-4878-a2c0-6f0ae5ae93fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22cbded-bfea-418e-848b-ae033d08e8a0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c3ab92-cf65-4530-a07b-cee3e742377c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890f701d-a85e-40f3-9b86-a8a1176a9f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20b299d-5e2d-4367-a023-691b34ea326d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aebd6ad-cd14-4e3e-bac7-3e4265d765a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b21e27-1e54-42d5-ae71-3600098a51d3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13024c63-1ad3-4bbe-b3a9-dfab6d2b99fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c54d51-f4aa-43a5-a604-05fbcbc365b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f8a7f7-255b-46cf-bc9b-8e4e34feb64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d4a59e-9591-4d89-8372-0434e509c716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef25290-3e70-4c09-be3a-183c28eefb03",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429381eb-1899-45e5-891b-6f2f76257f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efea1e47-8faf-4755-9f0a-23b225d8b206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7e8577-22ed-4b03-8d11-a199d8f01fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b9dc701-256d-4a52-b46d-7de33694aee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41581686-526c-4e21-8e67-8d16d51f2f43",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825ef802-776b-4045-9e54-58bf9bf3ced6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e575d7d-d26b-4458-ad86-d40c4d48f180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7413533a-f959-42be-8a57-eea1aef73e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282eba0e-2257-47e3-ad51-8901b83584a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1a6891-e017-4202-b2e0-d7638fed4533",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffe76b7-73cb-4c2e-ace6-05bbeedc0d58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0f44911-ed67-4c3d-aa51-6f88e194458d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cc356c-c6e8-48f4-b394-bd28e90b2c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1756e64-be75-4a62-8a1e-dd853ec324fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f009c238-b207-4981-a264-753ad6aa0c79",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955235e4-c301-4bc3-a50a-d441b294655a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "106835b0-a694-4ffc-97c6-bd9584d6b89b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd04a177-c270-47c9-8ed0-1eb6c42c6da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71b1532-dd3d-48d6-bfba-a1ef6a4f2db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f034980-3351-43ec-beac-865242473aa8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f21d15-aeff-4f76-a081-a59a1079caea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01099d6c-3e63-43da-a39e-c1732d2420af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b9712e-727f-4c88-836a-cfd84fe23913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b517cca-039b-4157-b558-2197ceb57050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c074f5c-79a9-4a1c-8e08-ed2cd00bea06",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbbf7d52-6082-4593-838d-e67f060c8640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e3baa09-c155-4980-96fd-1ed1264d7e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74a67d0-2600-4f9f-8ac1-0aecc312b9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "832dda82-3be5-4725-85bb-f256303ab545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd6eb24-2b54-4d60-a3ca-647b7dbce9b9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74590f41-4ab0-4264-805a-b6788251d358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f68a6e0-6a59-4b2a-8c3b-5160f86fbfca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c027681-6b82-4d7c-9e1d-a275466a5dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "294fe1fb-52ce-4cc3-a034-4868cd067284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d747896-80e6-4ba9-9877-db4881d5c8bc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c355935-063b-4ff3-86ec-01d348696b91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e8a338e-b701-48ac-9f60-62c0e9b63f9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc0c27c-af6c-43e3-bac8-cf8eb5a286f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34c62a9-c117-4aa2-aa87-0e6cc5227e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430cc82f-c3c4-496d-82e4-ab8f95e6d16c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23125c5a-9b9a-4828-8e97-26cddcf8fbce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b8422e7-2079-43a9-b18e-096e3fcbd221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b769243a-988b-4619-82e1-fa0476d466bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b249ea-cb9f-406a-b533-90d272845cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e01008-d7e3-4625-8ae6-b850918a8564",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f679188c-f580-424f-8a5a-37300bdff5a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4199f03-e922-466d-ab01-a3ba2883a6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4dc1e37-5cbb-43e3-be78-0a7649f762b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdfed0ff-4a98-49f2-b649-8d9006389f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b24373f-fadc-40cf-93d0-0cc9cdada5ac",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0539efc-2e2e-4ca9-b3ef-ce2c0032f858",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93eb5f24-680f-4b65-806d-6132d81ad597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11c7bd4-a093-4813-9781-332b9b768b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0981828-e71b-4ab9-abb9-af2c04d4e739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37e2d42-655d-4177-aa5b-918ea825fe8e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3b2c17-10d3-4495-afa4-783fc749da9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7755941a-86a6-44ab-b7d5-417cb8f91a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f7d4c1-c834-4f0b-84f5-26fd827c94aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af9373a-352d-4a3d-acdf-8b17a7a8aff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34759800-de46-4441-b123-5cfa0cc36e5a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafbc853-dd21-462e-a7fb-93fba9316865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86503ed9-4d52-4baf-a339-3eef35f64b67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2399aa5f-72c7-4e70-ba9e-739625336975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b693ea06-1027-4895-a0e6-8705cfa8d393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce142e01-2f2f-4ff5-9669-9348096269ce",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264e0e81-a98b-4ddb-a200-486f1cb51521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d686f7a4-a245-49ac-82e1-b297df44326d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cb56b6-a55f-43cf-8b04-f1211dee3b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a58e0e-86e8-4d1e-a4d8-85e663e8eb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1b8599-643a-4e33-b845-6dea9ec7b3e2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bceb80-432e-485a-9f2a-bc8cdac911f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebcd19f-a7f2-4f25-b843-7919ede7f67e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c98c58f-23e2-47b3-a771-89ab7a83b75a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee844c77-cf34-4334-bd43-edcae5da5f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128cdf0b-5c07-4fd1-a1d5-e607ecf2d54f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce55f452-10bb-4f35-a9bd-f53bb31d01c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4df8b1-dbba-4b6e-8da0-6f7fbf1430ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42d667d-a5af-4c76-8f9e-fef65ce98a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f658773-1aea-422c-be03-916bb6ffdc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d5ec0b-f7ca-445a-b204-51a9f828ab21",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ce0a69-5725-48cc-89c1-f9a84c9b3aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a13f7bf-f94c-49a5-b1d7-a6766c6aaaa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f5f083-c5fb-4e2a-b8c6-5996ffa4619e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152bd133-c405-448a-9f64-3a342f2de2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6507e92-3004-46ae-9ee5-eb00479123a8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d148ee-5dbc-481c-b807-f669b79cf6b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e34c8f1-5e19-47da-8a9d-fef8c0ebc2ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df03105d-5274-4df3-8696-bda446212220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f8be5a-70dd-422e-ab71-8856c5d67a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51929480-f878-4f31-9f8c-cb3dde99778f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373526c8-7033-49c0-a4a7-172b26477ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d46d268-b95f-43bd-84d2-3b1f45adc7f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7905c10d-9d1e-41a1-9347-cf2e39ef6d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f605ffd-2545-4f58-883f-20ebffa5e087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef3d2a9-bac5-4e18-a911-341e2a31c1d4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7727a7-473a-449d-b2e0-47b2f1c310b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80e4fff-bc43-4eab-a545-789723d50e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfc01af-cefc-4d68-b3c6-932ba2bcd4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603c9203-f2f1-447c-96a8-8d405d3fafbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01993b23-f9aa-4f87-a130-ca539d62bf66",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa932e2-493b-4fba-b798-77ad27360d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77fa4bd-86ef-41f7-ae44-c08446353518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c08664-f2d7-4ce4-9be6-d084725435bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b80484b-159c-466c-aec6-23077461e6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c50ec8f-c4ca-4d70-a52e-a72c295a1c2d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff25251-bcd1-4758-aeb7-e932a4eb2ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4820e8e8-e636-47e0-8744-974341a37715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83d3c3e-eaac-4f4d-9ff3-e98bd2c8549a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac72259-21ae-402b-8ef2-3cbc8306c80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10964cb8-60d2-431a-bcd6-436ad0789cb6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42fff7c-0411-47c2-9f45-52a7b98bfe09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b261ce0-c58b-45e4-8940-746a1e4511e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7d3f9d-b398-497d-9c0c-585d37fed191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "294890aa-a9b9-4ae5-8b8c-8449e39bc26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186875f3-4f29-475e-a405-5cc0292225e0",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99325b6e-8ab2-4516-923d-a69a9792e97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9de9a61-d5a9-4ac2-9a9c-cd1685ec935b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08482e30-cac7-445f-96df-405e352f7d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "032f9c4e-bf03-4e4e-be0f-eaa0ae011063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42f611a-12a4-4180-a9ed-781cb36de4e2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d182fe6-86bc-4ca0-984a-8e84bdb1345e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a62e81-d340-431d-9114-a362b48e6034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af6b8d3-3fd3-4454-8e2a-d2309c8ef82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f832ce47-c0dd-499d-b56b-adf41ffe24f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b548d1-e1e4-4645-961d-507566ed8160",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4008dd18-935c-45e6-9754-e1c7379d5b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e6fd4b-1865-4954-81fd-f3a6ddf63c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072626cd-2637-401f-b628-8ae7f1e3700b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbec2e37-c56f-4fdf-9e83-f02e945785b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45f5015-fa6a-464a-b54f-49ec8b0f9425",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a24c72-b896-4388-bd0a-4ede4f7c99b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e7fab64-b595-457f-a33b-1c6dd069b0ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c500fb-95bd-4fdf-83d8-e171672470b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffbb234f-0c8b-4a22-bce8-bc89eab459c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102d2428-40e7-4f36-a435-9fec1a27d077",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6fdbde-7820-45fd-b77e-3f893fa74102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c45d7d-3bae-4527-8aca-e9f017076557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ea9640-c8f6-4d06-835e-2842145e09d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5314de7-b395-4d65-8617-2d9c0994d5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddd8bf3-3a3e-429a-b2da-8d5ec12664bd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5f0dd4-2844-4492-9195-ac805bcc31bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb102fc-833b-463e-a415-beb1397f9405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a954c27d-210e-4b2b-b76f-815fe8003eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad028036-7767-457a-a7f7-a3685e593a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce273a5-a321-4ba5-807f-f306ef569a1a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4155a5d5-7a94-4148-89fe-bd092f26e595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4129e854-d293-406f-b840-3631b9162a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804f616e-3c55-4286-9680-5d4935082b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225db258-4e31-4fee-8577-9778c0df3ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1784552e-48e8-446b-ad36-8921a692cd55",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86832451-e886-4d46-80ff-bfa79ff32576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba9c21a-b264-4667-966e-97900f4c6074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4522d866-68a2-4aec-a67d-ef999f9fa4bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4283607e-4e76-4523-ad16-97ad54f8f07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7097de6e-277b-4cd1-8de7-a65d9a353312",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65750911-c34b-458a-b19c-df47b94651b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0dbf406-0b94-4577-b547-81eda6f7233e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b64da33-3351-4148-a679-d12aa9148126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ed1825-daca-426b-8c6e-40994aa01937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33d495d-947a-4ff5-b7e5-381756010db6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b1f58b-a3df-4629-a5fd-1a8be2ce64c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297c2510-14bc-4d50-a232-112c57e79b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7864f3d-7dbc-4c4a-897a-344b591836d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502c1fc9-9460-4164-9f45-bc19f88545ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6194e7-9514-4e5a-8769-e3d852caaa31",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c1f179-a7dc-43fa-86b4-603c20416e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162eb90c-b50d-4d1c-971c-8a46698fc8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef0692a-ad86-4723-9ab4-ea1f36c57a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf3253d-669e-43db-ba68-b3b37ec45116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238bf9e2-1f6d-4922-b40e-71159b54e5d0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a7dc3b-959b-4b39-98c9-62a0d90d3a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b64a3b7-ab13-451a-aecd-44685c4f2271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0a03b5-dcfc-4e57-8a79-10149c15b180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae834e7-a8f3-4617-92aa-eb6c29b44730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abca30b-05e3-47c9-ac87-53da5ca0c1b0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d5ac7e-4fb3-469e-8bff-92a8f8e5e933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f14c77-e6ae-4f6b-9033-86e0afaed298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffddc117-8d27-462c-bcf8-9751dc8e0180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728bd0c3-a634-4d72-aac6-df28153858da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc1f340-6994-497f-94e3-ebc9bf95e402",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da910c73-ffce-40fd-83f3-5dd272fa57f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47ad343-8cfa-41ff-9255-17fec18340f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4839e940-6bfd-4bc6-bb77-007e3b7e1a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e88c7b-02e0-41b9-9435-4bb0235aeda5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2f8b4d-8b05-4bfa-91ce-c0035c47fe7a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37264427-0d2d-4623-9026-bd691c0c53c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5957db4a-c6fa-47e8-bfc6-e577ac075752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d1e716-89b3-49eb-82b9-aa9e05942a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e900be-5d7c-4f1a-b4f0-b8579489fad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542a330b-ae9f-4821-8936-574beccd070e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a438a4ed-d1c3-461f-ae77-659d23946add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb40316-a664-47fb-9080-ace01a8ff120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5771dbba-d319-4887-a471-0b50fcd85515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30bee7cf-7bfc-453f-9790-12896f837753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f117d6e4-49e2-47d0-a3e2-eefdb33eccb0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5850043-e775-4179-a11b-7e3efc8859be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e53092-c093-42da-9ac0-876c3fe9d0c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc59743-2ad8-4767-85d7-ab9ee21e0f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b9c191-8ea0-456b-bf4a-ae2e1007ec16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c9caa8-b9a5-4bdc-85bb-92146ae7a652",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f526dbc-161b-44ce-b1d7-1ae39c4a6d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d180cacb-f6a9-4e0f-b409-379bba3f08db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "847617e8-b16c-46cb-90cd-764eac3b94c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1cfecdc-3edf-4726-90c2-51f1b2d03e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49550d4e-303d-42b0-b1cb-3f1ca51ce745",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce644060-a7e6-4e84-a03b-fb11d0a19077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e89dbed-21e7-44ed-a778-b402cd621a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36f7d6e-3a3a-412c-83f9-85d18d732fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723941bb-e671-4852-9a35-4d8c1691b7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2e052b-5e68-404b-bb1e-3daf6f70ee7c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effc408a-e73e-41a5-9426-f60dfe25d033",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c16524d-e432-4b11-86a9-b41bb5b9cb52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bf17be-4b14-41a7-af7c-ef5d4b4a508c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815662ee-c190-427b-a5b2-2fe52161ce9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55218853-226d-4a71-ad87-75334192c925",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de408f99-b14c-414a-b391-eb0fba35f5ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ab2af80-88fb-41f5-a489-04fdf20fa89f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0af1b7-0805-4d9a-840b-019798480543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06462ec5-1ab4-493d-afbe-1298bc90e56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9160e0d-96df-4038-bc89-f09f344e13c7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3057ac-3485-4b8a-af40-36f9aa44f12e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5724120f-673e-42ed-a984-e7293328a7d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e62a4ec-98c0-41ec-9b78-4c6ea1b20057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e0687f-bfee-4311-8548-8562abca8e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040d6221-717a-43d3-adac-427f2ac87b79",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d761b2a9-ea34-4d3e-9aa9-eff6adf12d03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "035162a8-1c9e-4577-8876-c58135d19848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66825bd5-1e12-42f7-a26d-098fd0ee930d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f41d436-8cf7-4538-8a86-859b48bff986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5577c88e-1445-4ac8-9633-50b9ad30996c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04ea605-2acc-49c5-93af-3d205f38d072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca81d644-0e91-43cc-98ac-d39e6e7a499b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9656dd-7d03-4af7-b509-b3611dc6b31d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1230d82-5405-43a3-9153-37cf399825bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6205edf3-ee54-47d7-bde8-7c9c3022d104",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe262c0-76ca-4586-ae91-6b39b0974b3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc747fa4-26f6-41e3-b874-d359740f4b29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c923da-e305-418c-9afd-6f8b9e090a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d5959ae-bfa2-4384-81de-21678b476032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccfd709-b40d-43d1-8a90-5e390bba8182",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f67a0e-5066-4d3d-bb51-db9e7c07a2d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53069e88-4912-49e6-8b77-5caf1799a4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6aa675-aa7d-43f6-a6f3-0ed2efcceb10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87162dd-e059-4b03-b5b5-380837ddf9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32f15dc-3bdd-4f53-82d9-272f073b98ec",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688d5810-01fe-4b05-bcae-f7e7f827cf2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78b90cf8-4a4c-4af5-85f9-17aacbc490df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a005ce75-eaf2-4b5b-8b36-75f5e95168fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21adbea2-e78a-4be9-b864-b531fc3566b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a755d05f-4656-40e9-a329-10c6d7334c33",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb5bd99-ac6f-4255-b802-42e5ff3240d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "227c387b-be59-49bd-9930-77356617a2a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55bba1c-b2df-41f3-b9e6-fd50cafb9b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2c6b97-3fa6-427b-9080-6dd5116747ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e0b671-6fdc-48e1-9e71-df9a40d21c8b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254d1e2e-1c19-45ad-b4e0-34c263183de2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66d15e34-80be-4d38-ab27-f53babb02674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c398e3ad-119c-428c-92a9-ab4491b50e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5733f88c-db48-4355-b467-0d2ce48593f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b9eb63-d44b-4698-93d5-f5f8f33cd39c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b5bef7-adad-4694-8611-66a072c7231c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "297e2f3b-967e-4263-9332-58cb6d483ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1965eaf-abe6-44f2-852b-202d43819d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a3a7ff-ce50-41d1-80be-04b62633a485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce72078-3325-4f45-bdf6-e96f060ce82e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2490f0a5-fcf6-4484-8e00-c6a7f2525e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3c14391-203b-4d84-ba62-602e66e0db27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64641a7-5109-4581-8ebe-d3cbc0411511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192538a7-7fe2-47f5-8942-1b8540554e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f45d1d6-ff81-4a51-823e-41fe0c6bc152",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f1739a-d1a8-48f5-a25b-fae0be81fcc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0bdf3d5-caf2-45ea-adca-6fa50faa7c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3653a62c-4631-4bff-86ae-757d0f9c88a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e205ff-f45f-4ace-b21d-8e3300079124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3f321d-afd2-425f-82e2-cb6594c0347b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb47711f-c53c-44b9-a6e1-e0f8d1d0a5b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "360056cf-2e3f-4659-87a1-71bbc1088cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a18f83-1394-4a44-a1b4-b5c170d031b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca9ba8ef-a3ec-4efb-b746-c35a60953f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30adc54-6670-4f53-b2b4-2a56b4b0b80b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4d7ba3-5a38-4463-84ad-c719bb3fd472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3947ef0f-0f41-4f47-9da8-b63a34dcdbcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27cac06-d0e7-435d-808c-4557e835a07e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b1bb7f-f068-4f0b-8b49-524480ccd978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0232bed4-7626-457e-9074-3beea170365a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d4024d-2cd7-40ae-a023-0fd03a492913",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e464fee-5f2c-438a-8fc0-9102ea8afd7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbadca25-0083-4889-92d9-656177b329c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2d6554-54fd-49d1-96dc-470e191c01e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295f82c9-11c8-47a8-be64-cb917c1e4ecc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e573004-30bd-4b39-b7f6-9413762ce7fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d9f960a-40e6-4d63-93e8-065b4e5f4d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf30d77-205b-4714-8ffd-888115b38dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf5a2b7c-03ea-4ea6-a620-fd291e7cedfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfdcac7-2803-4e2b-8544-14975ec899b7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e33e300-2180-4d50-966f-02e9c51b0b71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8243fc5a-434b-485f-8ffb-c786a674807d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3935c3-4f4e-4068-8ec0-aca7f7b4dfbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a70230-d9d8-4f95-ba99-8a1f7cf4147c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19644b7a-00aa-45f3-a400-d73585190b11",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e871f2d-1da9-41e6-bfa1-6f541731ed04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ea9ad1a-b433-4f49-afb9-a2dd77771c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14144c6b-5125-4858-bb73-dd8956045a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6149ec66-a523-4a16-9c7d-704627fefce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08ad758-9c23-4fed-bed5-5e41c0bd6930",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eebe6f8-156d-4055-8567-195c19eaa7ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9029006-6ace-4922-b768-0f09c474748e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bbe80c-f60a-47ea-96da-251a523b4e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802d4a5d-81ce-45d0-9d00-697f26f658d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b2301d-addd-4dcf-a661-73ded8e61b71",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99b84cf-fdc6-4d87-8511-f17e08685e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00fa4bc2-4696-4964-9731-6448a228ee8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4999455-b63a-4e5a-a8e5-f41416972835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20dfb72-c851-4bc3-b630-83f4d8c87d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75278ac9-77db-4005-b4a8-c8f9932147ad",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb6b9eb-de38-40ba-a162-cffbeffcf263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1edfe5f-0d4c-4ae1-ab45-e5eb2e057c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07f8811-d144-4ef6-a80b-72c6814bbc9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a70bc32-8dcf-456c-bb7e-e9ad8fe83b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bbec49-1769-42dc-80ee-268aa6025ae8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcbda96-a515-4713-be51-7b035f54fc3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0ea4fa1-faa1-48c3-b8cc-9d68e1b87db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1159db5-0551-4780-ad97-9aae35487cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ed5f57-ab25-4cf3-a50f-8a24803dcfc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab690bed-6833-40b7-9ab6-8e31c944f075",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1170dff-e95e-419d-96b2-d7f762c1a59a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31a3de98-4f27-4b26-8ce5-92f1ef96f38a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b2bf3e-0eb8-4405-9329-c511bbf1e6a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "741dd9e6-0e37-464d-8a17-ffa822b43ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f9fa87-6f61-4d56-a5eb-b15f5e29eac8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df69a9d-4da2-4d36-92c9-863d7faba5a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a5bda59-d107-49e9-afbc-11fd5ac2d7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1d758c-5301-45b1-9faf-35c970a7b12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee634807-5975-4109-8b9f-b75f4c090fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0866bf3c-813d-4b04-aca8-f2b64d96df9d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017c7543-9c5a-46d8-8b70-d16443e8251e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfd1400d-82c8-4253-ab37-de2fbd920ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715e61ff-e503-4c09-afb6-7d4bda756585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59e9aba-3513-4d48-9815-5d7efeb7663c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f67528c-3723-4fac-80eb-af37b54e7598",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26efa38-b9ef-4c98-8672-031e0c55872b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f438add-f067-4779-b84d-887511caec5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701bcf2b-77dd-4f22-8037-753c8e183949",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028af63a-fa52-4261-a071-b0ac34a61c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6760bab-35d2-4ea9-b753-bd86664773b9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc2f280-a652-4a4c-b3c2-99346b91b46a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98167388-f493-43cf-8a7b-4709c37abdc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7c3523-d7ad-434c-83f9-c07c0ce2073f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d30dee-0462-4346-b133-839bf5722b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70f8a2b-da50-48ee-b8ed-f8456818b028",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39294ccd-7229-48c3-9f27-9c2032b16887",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb94c28-13cb-4b64-b65e-220c00c2f9fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bd3630-8a4d-4e81-9742-aa14c78c34b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04bf4f6-8640-4b6e-a0c3-aa773678c7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf19400e-0e6a-46f0-9a09-5cef0f6db560",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d26278-a0c9-4c16-b700-e692375b3f77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83d7beea-5140-4cea-9d8d-6077dc379744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5019a2-548f-4ce1-b054-f48c8b720160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a6f909-b04a-4ce1-8371-430ba871cb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b0bca8-c84a-466b-9dac-014016746487",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c4b1c4-e197-452c-a35d-e1e821371e76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47f071fa-cfc8-4ed4-8972-20fc4d479fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6aea9f-690d-4d4c-89c2-e20890c1c73d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722e49e5-3b09-4b4a-a6f8-305b2f336bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db92b3b9-7170-49ad-b869-e6dee9b0d07b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12b7a16-3093-437f-9f0a-1fd6ceed831c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cc65cb2-fe7e-494c-9815-178c2e79df17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78e768e-2a4c-4bc4-8b72-4bdc2283a706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e6e974-1c37-4bbd-a426-0f41bccfc15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f731e9-c352-4fab-a32d-a28afdf78c9b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84806bcf-c1a5-400b-94bf-43fa8b6b7cc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "541f2db5-49c2-4740-b09f-ff978d16ea60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1137c3f6-ff66-4025-a0a1-30fb562826b5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c1610c-9a80-4c14-91b8-accf3b42ef7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97dc5f22-69be-41fe-939e-2c7e55f20326",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11dad26-de6a-41a9-93e0-9335a9cc5e99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "169a9835-1717-4741-ad1f-299a65c3562d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d35cc4-1fc2-43d9-8bde-5bdf86e275c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa1bbff-1988-4b71-9bd1-54bcf3e4210e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24bae275-aabd-46f6-a44a-8bd26d5dac27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a68a1f6c-6a1e-459c-956a-f93c5e88268e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "000983ae-1ca4-450a-bfee-a71f745fddd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "214452b7-9f4c-4445-9b4e-3c695b33a9f1"
                    }
                  }
                ]
              },
              {
                "id": "9e642512-eb53-43e6-b09e-da3427ffa9e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3f8e6be1-6798-4595-813a-f9ba6fdc578f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70a16ab-e2e4-4e96-9990-4f9f14a97af8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7176498e-0280-4c0f-9b0b-a0cddc23fba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a043b123-ca9d-44d5-9d27-a35b578e9836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9a693e3-fda8-42f8-841a-4b25b724b7f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad082089-5bb7-4e71-90b6-4440c1624bc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d2e0e6d-daf7-4746-a471-ca8b9550af3a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e3b18f7-d1b0-48ca-8974-63249d680b88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87657efe-6487-46fe-81ae-5d229de470e6"
                    }
                  }
                ]
              },
              {
                "id": "d0014899-b7db-4547-9076-76d996981006",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2df450fe-ee59-4169-be03-2758fc0bd822",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2b7f6a-7e35-4428-99d5-15af06b2c94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7e54ec50-ca94-4d5c-8439-f9b9262b1b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cbc60b-c6cd-4220-87ba-befdc90aea3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0382c5d4-3fbf-4557-97ab-e31a31459a49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5e2a4cdc-c139-4f4a-99f6-acd2d8460316",
            "name": "Positive Testing",
            "item": [
              {
                "id": "88bb3f10-bb06-44f3-b1ff-6523d2b26a58",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50f0a1d5-15e7-4b62-9936-c83efbe582a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b53670d4-7d2a-4c11-828b-de4aab2c53f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0a7efac-fba3-49a6-9cdd-1539812fa5da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e76bf9b2-677d-42ca-ac7e-fb80f0738b82"
                    }
                  }
                ]
              },
              {
                "id": "a61c032f-5445-43c4-8893-80b245db1c66",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25dbf9ab-4f32-4bfd-a851-fa0ccf3431d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aff929fb-1cb7-4bc2-afbe-d92b3752cc8e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e434f71-8a75-4ac5-9439-e7bef8fb2321",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f92dbf87-9cf4-4241-93e7-22313309c206"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "898599ed-d12e-4f57-afb1-0882c3ab9fab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9c562260-b39d-4eaa-b821-c577a91c2c9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ee9a40c-0d39-4380-bf8f-9f3b59284558",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "135d8dbd-4a98-4a9a-8b03-98fee8ab5589"
            }
          }
        ]
      },
      {
        "id": "bb79e504-5a5e-43c3-8616-eeae4e8718b7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e27514af-9796-41e2-ba28-fcff9c983516",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f3af902-e365-42eb-8de3-98e6f87ce6b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62a4649d-4464-4c4f-9504-73beb2b7a569",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1e701f-0779-478b-bc19-13c7ee98dc6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cb531462-2c21-41db-b607-bd844f30f148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cfd4b5-79ae-411a-b82b-dbf78b2fec37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2aec4d83-70dd-48bd-88fb-162e975a0194"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35c66f49-2878-4a71-a120-532b39abb764",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e40f0c61-dd28-4ecd-a110-10f6ebeab498"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8426e4fc-efc4-42fc-8d1c-9ef239276d8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6520f13c-57e9-4277-83af-1ba369c319f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7df81b41-9374-4119-81ba-085b20f423e2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4507ba8f-6901-4067-a883-f1d366720849"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2265e73-e1ca-4f1c-a18b-a76f7cffd577",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d7c572c-bdc1-4de8-aa89-9940aa30a920"
            }
          }
        ]
      },
      {
        "id": "3c131618-8373-4444-8cc0-2bc7ffd2b33f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "60c0a9e2-d245-4977-97a2-68a7c5555b95",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60d4496a-b117-4170-9cf4-46906f4baafc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c4778e46-cba5-48dc-b53e-35b4975f2d5d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baed59e7-5014-437d-8b7c-3672d3a76c67",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "450f4778-9f82-40ef-836f-bd33609a8d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce74b82f-28a0-4ce7-aaef-73b4be07a4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1ad912f-6e07-49d0-8f7f-af88f337ea0b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d88cbb6c-464b-4de6-a31e-72a14a95d623",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40c15f50-e51a-43c7-bbc0-91c0289fae26"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfd7ebaa-dfec-40c6-a7a7-945ee840eef3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71c23cd8-b835-4920-b941-e5205d71f0ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95a84515-9d70-4198-bb37-ac591deb8103",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2969cef4-8c9f-4c86-a703-df71f10308fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e050ff63-4ede-44d4-8d96-69f72fed9301",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5514175d-8b98-4d8a-8726-eaf24986844b"
            }
          }
        ]
      },
      {
        "id": "8d113b4d-d8d6-4865-9c3d-3d5170c1ae9c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d88051b2-6929-4598-bcf5-34f6546dde58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8b65ccc-bc9a-46c5-a639-8550dd4237d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f280b19d-f0ea-44c3-86ed-919e23d198b5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192eb9d3-e07d-4baa-993f-bf2b246fdf79",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1d717ef-2c4b-4375-b585-0bbef4b150d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93eeac59-eeb2-4acc-ac05-95b23efe4604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34d7d1b1-d6cd-46d6-96ee-d08c20358643"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8cd3522-e861-42a5-820c-e61d9be4eb4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "324d3fee-d744-4537-81c0-6ab4d1e29630"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a78cd7a-4180-4720-a1f1-05f7d94d50a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61e1cf74-578e-49e1-9afd-bd51415968fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53baa7f8-27e1-4c16-a9cb-dc0251e9a5f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "576c3664-083f-4937-91ae-549babfb94be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28379277-d8a4-4fc5-b2e2-8a1337fc5929",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de581ebd-4bee-4960-95d0-b3919b9fc637"
            }
          }
        ]
      },
      {
        "id": "10492ce1-32eb-4eca-aafd-fc63b7050460",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1678f4e3-afd8-4de7-98a1-31807b1931f0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7268ec6-a488-4b2d-b0f5-6957e0d33b2e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "632cc09d-8eb8-49b1-b49f-539e32806d03",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42f03b4a-bf90-4b81-a3d5-0fef76344182",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ddb9155-9701-4b29-9698-9ac8b45daead",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 319.0281690140846,
      "responseMin": 21,
      "responseMax": 8808,
      "responseSd": 892.0014916906468,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688172742458,
      "completed": 1688172845026
    },
    "executions": [
      {
        "id": "17e94da5-b66e-45e2-bb72-7d5299c4fe39",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0d038748-c74e-48c8-80f1-3cf9bf470995",
          "httpRequestId": "1df9db24-5288-43c1-b4ee-913f2f6222b7"
        },
        "item": {
          "id": "17e94da5-b66e-45e2-bb72-7d5299c4fe39",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d87aa5c7-f2d8-4038-b5d4-8580047c2378",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 0
        }
      },
      {
        "id": "5605b7b5-5024-4ef4-8065-512db7cfcd43",
        "cursor": {
          "ref": "8992916e-3faf-4f5d-bdd4-bf4b8354aaec",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e04daa14-49dc-4491-abe5-a94f0165bae5"
        },
        "item": {
          "id": "5605b7b5-5024-4ef4-8065-512db7cfcd43",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a3b2a9ee-39e7-4ff8-95aa-ee7ae09ba727",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "62be5704-9909-4793-8390-517afa85badd",
        "cursor": {
          "ref": "d6ce8873-e8b6-4f4c-9747-9aef54073295",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "613873fb-211b-403d-a7e5-03935d86223f"
        },
        "item": {
          "id": "62be5704-9909-4793-8390-517afa85badd",
          "name": "did_json"
        },
        "response": {
          "id": "a8466c41-4530-4b76-bc2c-d7d3afaf3bb6",
          "status": "OK",
          "code": 200,
          "responseTime": 538,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0c7420-b522-4fa0-96dc-be9ea14d7d68",
        "cursor": {
          "ref": "1a234662-3e79-4c43-a169-7f1b22592756",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "11d6a0ee-1f42-463d-ba68-c2a4e7f92679"
        },
        "item": {
          "id": "2e0c7420-b522-4fa0-96dc-be9ea14d7d68",
          "name": "did:invalid"
        },
        "response": {
          "id": "2387113b-4edd-4e6c-8877-87c7d86c60fe",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4237,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2e0c7420-b522-4fa0-96dc-be9ea14d7d68",
        "cursor": {
          "ref": "1a234662-3e79-4c43-a169-7f1b22592756",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "11d6a0ee-1f42-463d-ba68-c2a4e7f92679"
        },
        "item": {
          "id": "2e0c7420-b522-4fa0-96dc-be9ea14d7d68",
          "name": "did:invalid"
        },
        "response": {
          "id": "2387113b-4edd-4e6c-8877-87c7d86c60fe",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4237,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5aa6daae-69c2-4c44-9839-21c03de6660a",
        "cursor": {
          "ref": "6f40e5cb-62ac-4f32-8bf6-76f76b182fc5",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "50ee438e-35d0-40f8-872f-4acb90fe7a15"
        },
        "item": {
          "id": "5aa6daae-69c2-4c44-9839-21c03de6660a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "82c744c5-5737-408f-a495-e177915d4561",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f677209d-2ed7-4abe-85d4-a82e85f8003d",
        "cursor": {
          "ref": "8e66bfdd-0c33-483f-adff-bb8b15244ae8",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6908bb44-982d-473f-8699-d6370171953b"
        },
        "item": {
          "id": "f677209d-2ed7-4abe-85d4-a82e85f8003d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "86508096-844a-4fd2-94d0-8d197d147897",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7530ccb-6de7-4116-9303-d44df31ed9a3",
        "cursor": {
          "ref": "386fa012-f8df-4baf-b3c8-c5f125a03420",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e546ad53-c84e-4bbe-9c60-6e840801d1fa"
        },
        "item": {
          "id": "f7530ccb-6de7-4116-9303-d44df31ed9a3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "33bcc1e5-9ef3-4842-862f-5a65c20a0db9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "b9964e12-004d-4b06-824d-9adf0e7ec86c",
        "cursor": {
          "ref": "31051a48-83ad-4d15-8952-00d895564888",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "11d0c089-1eb0-4997-9046-62c374ad9f74"
        },
        "item": {
          "id": "b9964e12-004d-4b06-824d-9adf0e7ec86c",
          "name": "identifiers"
        },
        "response": {
          "id": "595334e5-9f3d-4c62-941e-796baa18bcb5",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fac31f1-967d-4d61-a446-8556d3d71dce",
        "cursor": {
          "ref": "b3e0a29d-ab8e-4b96-8cd7-c99474638c19",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bc3b1d6f-bfa9-44d4-9915-3dcfb3e1ac5c"
        },
        "item": {
          "id": "6fac31f1-967d-4d61-a446-8556d3d71dce",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a5a5122b-ab1e-469f-a91c-05e07e90ec05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f199b3ad-1b6d-47bd-aea4-0fd93b5649a5",
        "cursor": {
          "ref": "7d8e99f6-59ba-4bf8-90a8-d6e0503a43ab",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "636d07c6-5567-46ee-bcee-a47c2ac56432"
        },
        "item": {
          "id": "f199b3ad-1b6d-47bd-aea4-0fd93b5649a5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e00bd894-a631-42d0-9387-2d82f8da6e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d21ce204-a615-440d-bef9-9c27d5a519a5",
        "cursor": {
          "ref": "ee63035a-6ef3-44fa-9551-0baaed5fa8af",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ca281aac-e8ac-416b-971e-124bc0afbbc5"
        },
        "item": {
          "id": "d21ce204-a615-440d-bef9-9c27d5a519a5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c99a47cc-ea08-4f32-b826-c4a67fadc473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b15e5e-1746-4db4-bf1e-af2034544e93",
        "cursor": {
          "ref": "4cc9acaf-93e8-4897-8fdc-deb9c0e30287",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4d6ec95c-de32-4c19-935a-991b45711c45"
        },
        "item": {
          "id": "35b15e5e-1746-4db4-bf1e-af2034544e93",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "229f42da-015e-400b-bf12-aa59826c817d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fdc2e5-09da-4ddb-b1b3-4f03a397aa81",
        "cursor": {
          "ref": "1be9cc6b-4f92-4fdb-b76f-9e9cb68e5aee",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1cd5b811-a91d-4bd9-b4b7-4652b451033a"
        },
        "item": {
          "id": "b2fdc2e5-09da-4ddb-b1b3-4f03a397aa81",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3e2bc7e1-56a8-409b-90db-1ae79851b748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b10f277-3b40-4de1-9151-2539040dbd17",
        "cursor": {
          "ref": "380315aa-8de9-4f5c-b88c-376ee712f82a",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f9a20493-7ac9-47c1-b969-f2efa9114e62"
        },
        "item": {
          "id": "1b10f277-3b40-4de1-9151-2539040dbd17",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1e43b5de-20c1-4f7f-a77a-27e779a061c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f209191-ccef-4f83-948f-3957aa9e6175",
        "cursor": {
          "ref": "25ab8711-cde7-4efb-9299-12ece4e8b486",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1d9f1312-03cb-4129-a4ef-b596fe2f097e"
        },
        "item": {
          "id": "8f209191-ccef-4f83-948f-3957aa9e6175",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "83f53de1-f70b-474c-8165-d877b396913c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28954ce8-f457-4d8f-87e6-eb3e4f6453ed",
        "cursor": {
          "ref": "20bf28d1-74b7-48ea-b3eb-3891b53f7aee",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7dc3f1fe-3d34-4ffa-9e37-0fb232d07ad6"
        },
        "item": {
          "id": "28954ce8-f457-4d8f-87e6-eb3e4f6453ed",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8f1cf3e8-2e44-424e-934b-3d8d57ae4100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85351e4d-5cf6-489f-a04e-cf821b3af0c2",
        "cursor": {
          "ref": "2b848f9a-8696-40bf-90d2-4b947b9ca40f",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4ab557d3-ff21-46f2-9cde-bad02491ea2c"
        },
        "item": {
          "id": "85351e4d-5cf6-489f-a04e-cf821b3af0c2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f6da1ebe-a315-42f2-951c-0a6021e98711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e85762-8950-4996-82b0-225f80113e92",
        "cursor": {
          "ref": "d18176dc-1bc5-4355-ac6c-10143513064f",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "726c60f7-792e-4c9a-86a3-41a12dd418af"
        },
        "item": {
          "id": "38e85762-8950-4996-82b0-225f80113e92",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "59663a06-cbf1-4746-a931-c79bc212ecad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940479ee-60ef-4377-b2a1-d5f5950eb833",
        "cursor": {
          "ref": "1420a2e3-3180-47e3-8a4b-38149571b4c1",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "14205cac-3fa5-4543-b206-be217dd0b1a3"
        },
        "item": {
          "id": "940479ee-60ef-4377-b2a1-d5f5950eb833",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "db545f00-e1f0-4ae6-9c9e-74fcfe69be64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725d998c-1bfc-4dc4-8dcf-aac79f8fe562",
        "cursor": {
          "ref": "7ab67f2e-7f1c-4966-a6da-92f51d7e9f4e",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f9a40d1e-d6a0-4cc9-9893-da95ce593ce4"
        },
        "item": {
          "id": "725d998c-1bfc-4dc4-8dcf-aac79f8fe562",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "da73d9fb-f6c4-4f1b-9edb-fb36da3d2183",
          "status": "Created",
          "code": 201,
          "responseTime": 829,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "18119428-8bc9-4017-91cd-ed42cfc6e90c",
        "cursor": {
          "ref": "9d76408d-27a2-4147-9245-7d7c58195bd7",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "00f8b161-ee98-4b91-921a-3fff37bca135"
        },
        "item": {
          "id": "18119428-8bc9-4017-91cd-ed42cfc6e90c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c43869ea-a91e-4f7f-b190-90b90f27a7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84949ec5-d77f-402a-ac60-791046a0990a",
        "cursor": {
          "ref": "134d173c-59d4-4ac1-b3db-b0d3edd9d1d5",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "96d2d387-fa4c-4a67-83e5-44e8a5395d63"
        },
        "item": {
          "id": "84949ec5-d77f-402a-ac60-791046a0990a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bdde3013-5251-4d0f-97a4-3e588c1754a2",
          "status": "Created",
          "code": 201,
          "responseTime": 8808,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "3034f70c-c455-417c-8e3a-4d493949e387",
        "cursor": {
          "ref": "13be3276-19e8-4918-b951-4ca6cf507b85",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0f80bb64-2c47-4a4f-8e38-43ebf4bde815"
        },
        "item": {
          "id": "3034f70c-c455-417c-8e3a-4d493949e387",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "46f7f183-fad6-42b7-8aaa-6e12e3863cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3066293c-97cb-44e4-aa4b-11097b3954e9",
        "cursor": {
          "ref": "6cae9e25-02b3-49d5-9bc7-dae5d9bf06ae",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ef82e7fc-ca0f-4aea-bf9d-00fc94cfe7a1"
        },
        "item": {
          "id": "3066293c-97cb-44e4-aa4b-11097b3954e9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "64ab29b0-89ed-473d-afe5-25d322419e93",
          "status": "Created",
          "code": 201,
          "responseTime": 3540,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "52e06a8a-0e3a-4a40-a095-67e95c29a74d",
        "cursor": {
          "ref": "18bac143-34f8-4f11-a6d7-c568a35014f9",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d8944a10-146b-4b4e-bfc5-40b665db134e"
        },
        "item": {
          "id": "52e06a8a-0e3a-4a40-a095-67e95c29a74d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "547c0ea2-d220-4a53-aaae-2a14b50e861e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf58a7d-0a61-4338-ae8c-3cb7d0abfbec",
        "cursor": {
          "ref": "ff180cd0-2d32-4598-af98-9474f1123b76",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "81da1dfd-9907-4fde-9a74-f140850984ea"
        },
        "item": {
          "id": "dcf58a7d-0a61-4338-ae8c-3cb7d0abfbec",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fac6a4c6-7981-4f9e-b71b-d8ee3e62e7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f4a87e-4827-4e97-b473-ae8be0d3bf26",
        "cursor": {
          "ref": "5950d871-dcb8-4b8f-a11a-763604db45fc",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4dc45305-5cf9-4847-a42a-991a5f7cebbc"
        },
        "item": {
          "id": "98f4a87e-4827-4e97-b473-ae8be0d3bf26",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cbb4f1b2-6567-42d6-9def-4e968b2b72ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a141168b-d902-4a15-9518-d3e0704a8d81",
        "cursor": {
          "ref": "4233fb5d-78a8-4bd2-97ae-75ae57317771",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "06213aaf-d4b5-449b-9bf6-87b20faf3d6d"
        },
        "item": {
          "id": "a141168b-d902-4a15-9518-d3e0704a8d81",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6dcbfc50-ffe2-4d96-ae64-2b9361ce1876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea22702-2202-47ef-b851-0007647cf23f",
        "cursor": {
          "ref": "9d854b00-f923-4a29-9f81-1768d6274d93",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "761dd5de-e007-452b-ae72-0a491fc4155d"
        },
        "item": {
          "id": "dea22702-2202-47ef-b851-0007647cf23f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "93a8306b-4ec9-4bcd-9aa4-baae4e6cd246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 751,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4176aaae-8e4b-46e1-ba80-648439639644",
        "cursor": {
          "ref": "f8be0ac8-e783-4be8-b1dc-46bf1d9806c2",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dd15da34-2daf-4d2f-8761-6256d4fd8db4"
        },
        "item": {
          "id": "4176aaae-8e4b-46e1-ba80-648439639644",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "099f5658-656b-4e9e-949d-69b32e5fc0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4554b0b0-d80f-46b5-a472-ad06f975f028",
        "cursor": {
          "ref": "6745850c-2382-4f1a-806f-c541cb67dc9a",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f9e868d7-a17f-4b12-add5-c2b825726709"
        },
        "item": {
          "id": "4554b0b0-d80f-46b5-a472-ad06f975f028",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cf2bafe3-a4c0-4fed-8b18-f44558103d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1052f75c-224f-4bed-9568-ef4a44641d65",
        "cursor": {
          "ref": "9af8b59d-77c1-41fc-b313-00fc4c84aba4",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f415754b-e520-4b14-8c84-57dc203cd5d5"
        },
        "item": {
          "id": "1052f75c-224f-4bed-9568-ef4a44641d65",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "af60d357-509f-4631-b3e3-f173af10055b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eb2839-aef1-4aa9-8144-615b575d612c",
        "cursor": {
          "ref": "950a6c22-6920-4df8-b9d1-5d4ce899be3b",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1aa20547-36ff-4dcb-857e-492b154fd1fa"
        },
        "item": {
          "id": "35eb2839-aef1-4aa9-8144-615b575d612c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c1cd1360-65e6-4e53-9953-6cb950540e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1232ce7b-05c9-4513-8028-23eecaebf722",
        "cursor": {
          "ref": "e40bd409-9bcd-48f1-8067-ae7513ba438b",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "57c7ab71-f3b6-4a5e-a7bb-5700368173af"
        },
        "item": {
          "id": "1232ce7b-05c9-4513-8028-23eecaebf722",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7f65ce88-c0be-4862-80ad-075e11829c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f447d8e7-7ca7-4be0-909a-9d8937b92e92",
        "cursor": {
          "ref": "5fcd513e-4a9c-4c6d-a8d9-7c962e59fd55",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cd1b1e16-a12b-4f09-9383-a46f97e395e4"
        },
        "item": {
          "id": "f447d8e7-7ca7-4be0-909a-9d8937b92e92",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "06d8be02-f9d5-4f9a-b91a-3dd7daad8b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a5d669-e362-45d0-b151-cabcb59c4dd5",
        "cursor": {
          "ref": "17f31709-0977-4502-878f-0cac26c05633",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "56f10aea-faf2-4a36-9d91-f846d85c5d67"
        },
        "item": {
          "id": "74a5d669-e362-45d0-b151-cabcb59c4dd5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2d7779ab-51f2-44b6-96f1-eb304e0e6c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21295894-b337-42d2-a5f6-edca0e43b5b9",
        "cursor": {
          "ref": "0021b9e2-3e06-4725-b9ae-5d4e540b8187",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7a2a4911-c1f6-4b42-96e5-e240fe365ead"
        },
        "item": {
          "id": "21295894-b337-42d2-a5f6-edca0e43b5b9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3536fd6a-e548-4521-9b4b-aaec542b9828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124b9f95-7a1e-4ddb-8aed-05784b4eddb3",
        "cursor": {
          "ref": "bdc60d38-15cb-4bfd-a0ec-b6c518f4c5c6",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ba21ebf0-9e54-4243-a733-149f1084242f"
        },
        "item": {
          "id": "124b9f95-7a1e-4ddb-8aed-05784b4eddb3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a626d65d-ef13-4677-b858-a2f23dccac45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301f186e-abeb-4710-8406-82dd20d4af10",
        "cursor": {
          "ref": "5639ad53-36b9-4d0c-8c86-363bcaaa89f2",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "45e11cd7-ae46-45ae-96f9-9d75fa65d8fc"
        },
        "item": {
          "id": "301f186e-abeb-4710-8406-82dd20d4af10",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f3c3a418-cd13-4ecb-a295-ee679b3015d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cce21e-fae1-44a4-9f3a-bc8f9027988d",
        "cursor": {
          "ref": "88cfca11-8a0d-42ef-a97e-75928573f0d3",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "88e50766-94bd-4a1c-8ab0-2e707485206a"
        },
        "item": {
          "id": "72cce21e-fae1-44a4-9f3a-bc8f9027988d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "078c0b7d-d4a1-4a67-80ea-1cfb4e10eb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0f5896-06de-4834-9c39-6e6f844e598c",
        "cursor": {
          "ref": "8bff5602-ac70-4d99-80cf-f04611f57218",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a6535b61-dc09-4ee0-b12b-13869e4e40f2"
        },
        "item": {
          "id": "cc0f5896-06de-4834-9c39-6e6f844e598c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e820fc09-7d9f-4937-a030-aba4da554779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c937e1b-13e0-4e5f-9052-972fddc4b173",
        "cursor": {
          "ref": "e1265dfb-e1aa-45cf-b6f3-c851c0fb6c6c",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3a74c133-9ecf-43a5-ba32-7fadda6e3937"
        },
        "item": {
          "id": "1c937e1b-13e0-4e5f-9052-972fddc4b173",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b5348628-1f9b-4440-b37c-9a08eaeb60c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a850f61-b52e-42df-874d-376fe84d720c",
        "cursor": {
          "ref": "269aa6ae-ed61-4529-8b37-1ad8a67b668b",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "df09945a-9fbf-450e-a853-f9dfe8f3510e"
        },
        "item": {
          "id": "6a850f61-b52e-42df-874d-376fe84d720c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cdaa2848-2702-4c01-8d1c-2656f68c127f",
          "status": "Created",
          "code": 201,
          "responseTime": 2671,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "744b6b48-9e7d-45ee-9e09-9e4b0d2467c2",
        "cursor": {
          "ref": "ee744e91-003a-421b-b681-1f1479391978",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "81079124-31eb-40f9-8953-50a0955fc51d"
        },
        "item": {
          "id": "744b6b48-9e7d-45ee-9e09-9e4b0d2467c2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "47b09128-c999-4d97-bdd4-290647ae53dc",
          "status": "Created",
          "code": 201,
          "responseTime": 2949,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9e4562e4-05e3-4930-86a6-b171d36b2456",
        "cursor": {
          "ref": "569e7eda-b833-409a-9a40-52f5495033fa",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5cbc099a-859b-4213-b69a-28e63fd9c8ff"
        },
        "item": {
          "id": "9e4562e4-05e3-4930-86a6-b171d36b2456",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "122a8fa4-6026-4aa9-9226-5e02ee8ac1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974a5a72-2c6d-40f4-889e-2b739c21af1f",
        "cursor": {
          "ref": "98b719f6-8732-44a5-8fec-ed84c256390a",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "19b67269-243f-43eb-9c28-559355f461ff"
        },
        "item": {
          "id": "974a5a72-2c6d-40f4-889e-2b739c21af1f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "328beb24-1640-4053-b4b2-35433b4ee2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd1190c-8c39-43e9-82b4-1d12e9fcd335",
        "cursor": {
          "ref": "f163d087-e7b2-4cd0-8db9-c2bd0b9639ab",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "134f0c49-b4ef-4151-a002-6361f0cccc44"
        },
        "item": {
          "id": "9cd1190c-8c39-43e9-82b4-1d12e9fcd335",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9f9c6d22-86ec-452a-82ec-dba529dc2759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be2b8d4-9576-4d3b-aa84-fc3f32d5792c",
        "cursor": {
          "ref": "0fe91970-6310-4563-a06d-c13ec6738d9e",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d1299cd5-c9ea-4904-99dd-574d7b201cfc"
        },
        "item": {
          "id": "3be2b8d4-9576-4d3b-aa84-fc3f32d5792c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3e72d8b5-fd0d-400b-9548-6f1ab551bed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c84995-d9bf-4c14-b556-704c46ad617a",
        "cursor": {
          "ref": "6b4dc287-848e-4fc4-a545-29a6134e59a9",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ee60d883-c130-447a-b57d-5f2a42fe306f"
        },
        "item": {
          "id": "38c84995-d9bf-4c14-b556-704c46ad617a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "293be4bd-75ed-4498-b5a7-73935a0cba9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b78e0f-8452-4616-a275-69c130e56e1b",
        "cursor": {
          "ref": "07695fc2-2e55-4610-9570-8f408ae6dfc4",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "47cf0de6-6faa-4baf-abdb-72f75035c2cf"
        },
        "item": {
          "id": "76b78e0f-8452-4616-a275-69c130e56e1b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "72123213-3903-4b05-aad3-c952d9ce24a7",
          "status": "Created",
          "code": 201,
          "responseTime": 2692,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "80c93d74-ab91-4ae5-a2d2-757fc0e4bbac",
        "cursor": {
          "ref": "c9fee3c0-3c5d-465b-9d25-44f955733926",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dfab7f8e-27bd-421b-a588-86e8759fa771"
        },
        "item": {
          "id": "80c93d74-ab91-4ae5-a2d2-757fc0e4bbac",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "07bc7a7f-1081-4778-b004-37092f9702b7",
          "status": "Created",
          "code": 201,
          "responseTime": 2615,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f80dde36-3c76-45f6-804c-5092364f169b",
        "cursor": {
          "ref": "05c6c0de-698b-456c-aede-45a38f96a478",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5d4d4ae0-e019-44ad-8dfa-8ad76d532c50"
        },
        "item": {
          "id": "f80dde36-3c76-45f6-804c-5092364f169b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "40107b9c-1cf5-4536-9ae7-f3178fe2b103",
          "status": "Created",
          "code": 201,
          "responseTime": 2731,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "58ed8264-cd7d-4c3d-8792-203c7669179b",
        "cursor": {
          "ref": "ea03f333-0182-4ce5-9d39-76dbe256ba21",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a70608c8-0e46-4909-8665-4f876a5ea48d"
        },
        "item": {
          "id": "58ed8264-cd7d-4c3d-8792-203c7669179b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5d429800-b73f-4430-8002-e2b21a59f6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3509b605-d611-4970-b164-f3ca4c715094",
        "cursor": {
          "ref": "75fc5cdc-f4a4-4444-9530-37acd06cae4c",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8e50cae7-7960-48d6-9ed7-0285c74a2d72"
        },
        "item": {
          "id": "3509b605-d611-4970-b164-f3ca4c715094",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d4b1d4fc-17f1-4834-b6f0-b19c16c1b839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75431403-80cc-4115-a7ba-fd90ca0388b0",
        "cursor": {
          "ref": "cd5dff51-2aa5-4967-b5a4-01a28cabd118",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e24d5730-2b33-423d-958e-ff095f92392c"
        },
        "item": {
          "id": "75431403-80cc-4115-a7ba-fd90ca0388b0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "79eb93b0-0d7b-41d9-b3ae-110f48ac5271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66929201-5805-480e-8eff-ad0eec9dd2d1",
        "cursor": {
          "ref": "118b1164-6eca-491a-b6a7-b45c91de14ae",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "80b14ae2-1189-4240-874b-30f11ebadfd0"
        },
        "item": {
          "id": "66929201-5805-480e-8eff-ad0eec9dd2d1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bf2a8334-61ea-4160-894f-5e2fc1db7d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0120837e-b82d-45ce-9a6e-1e1cb4adfc00",
        "cursor": {
          "ref": "1c7ba32c-fef8-4b40-9984-898cdb00cc26",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "db114af7-26ee-4672-91d7-8efa5932fedf"
        },
        "item": {
          "id": "0120837e-b82d-45ce-9a6e-1e1cb4adfc00",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7606329a-9dfe-4322-a2ba-682c268ac245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b39d6c-2a91-495b-be66-3e16b86614cb",
        "cursor": {
          "ref": "f4121505-5ffe-4669-b22a-3c20994a5e6b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f135fa52-2218-4f66-8d29-5e7d2e940509"
        },
        "item": {
          "id": "15b39d6c-2a91-495b-be66-3e16b86614cb",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dffb304a-da3f-4d76-ba35-d1bde7b55a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365bf9b2-af0f-4ec5-b902-c9f140d60af2",
        "cursor": {
          "ref": "8c653952-acf7-401e-87b9-595431a6d055",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f91c065f-eb9f-433e-8d61-f9792debbeef"
        },
        "item": {
          "id": "365bf9b2-af0f-4ec5-b902-c9f140d60af2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "453130ed-1b42-485f-88f2-687896756987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56925e8-1af9-469c-9d7d-4c885f3b8f66",
        "cursor": {
          "ref": "7efff516-c648-4cb7-a9c5-22e0f6351327",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fa350b21-92e5-4785-920d-cae1f5465295"
        },
        "item": {
          "id": "f56925e8-1af9-469c-9d7d-4c885f3b8f66",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2a08d89a-4d35-4609-9f3b-ad827db5f953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62995266-d89b-42bd-a0ca-c7b7598a4e12",
        "cursor": {
          "ref": "f56e15e0-fbe8-42bf-b38d-5b21fa7fae51",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9cf712b5-046f-4b4a-82a1-7ca65c997eb0"
        },
        "item": {
          "id": "62995266-d89b-42bd-a0ca-c7b7598a4e12",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "19651d38-45aa-4b5b-bc2b-809d5c648f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfd49e5-8193-418d-a367-8c0dfe92ffdd",
        "cursor": {
          "ref": "0d234574-bcf1-4a39-93c0-3ef275f003dd",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "096be088-87f4-4a35-8bdb-9e8502f3382a"
        },
        "item": {
          "id": "5cfd49e5-8193-418d-a367-8c0dfe92ffdd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0e16c40e-117f-4609-891f-57cbd0784d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4870485-84cb-4deb-811c-ba61c15b3dca",
        "cursor": {
          "ref": "77af5b50-8a08-4d78-ac94-600ee4eaee00",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3a6b6fa6-374c-45ca-8cd0-60a76dca2029"
        },
        "item": {
          "id": "b4870485-84cb-4deb-811c-ba61c15b3dca",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4a81fc20-03f5-447d-9bc5-eec9ffeafd9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93ee635-9a20-4ef6-b9c6-cf1d84c88724",
        "cursor": {
          "ref": "48ef4934-20e6-49d7-984e-9cb092ebcdd8",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "37475e81-25d2-4bb1-8093-918418386ebf"
        },
        "item": {
          "id": "c93ee635-9a20-4ef6-b9c6-cf1d84c88724",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "522cd93d-f046-4d17-9336-a0e40b8d16c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f737b139-9096-4f46-81ff-c5f9b626c4cf",
        "cursor": {
          "ref": "41baa55a-ee62-4ea1-9f9f-92cbbcea0871",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4602f16c-6907-429e-bff6-40690c252c46"
        },
        "item": {
          "id": "f737b139-9096-4f46-81ff-c5f9b626c4cf",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2588aa84-707f-4cd9-bf8f-7e3677c12a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737f3480-15cf-4787-8744-f869287f81ea",
        "cursor": {
          "ref": "a6812854-e1ac-406f-978c-9520fd817a4c",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cceefb2c-7291-4fd2-9357-0cb37eb8263c"
        },
        "item": {
          "id": "737f3480-15cf-4787-8744-f869287f81ea",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "27ad3332-681b-42ba-9d12-17705da1b21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280e2be3-5a5f-4ff9-8451-1a048995577e",
        "cursor": {
          "ref": "24e8c42a-8401-49dd-9bdf-e91cc192f8b8",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "eabd77cc-e489-40c4-bb7e-6bca05252e3d"
        },
        "item": {
          "id": "280e2be3-5a5f-4ff9-8451-1a048995577e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "becccf57-b511-4402-a5f6-96077d701c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107377c0-6f6d-4ca7-ac94-bb6d25102565",
        "cursor": {
          "ref": "2c852d8a-9691-4857-9a75-7c7654d24280",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f42780d4-1d70-4af1-9c6b-5586aba5de1b"
        },
        "item": {
          "id": "107377c0-6f6d-4ca7-ac94-bb6d25102565",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0eacb866-b38d-4ded-a297-267929f5f464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effc7539-3281-41d6-8c1f-3285be344058",
        "cursor": {
          "ref": "0bf642e2-19da-4b91-a4be-3218d8a5506c",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6962f675-a6ed-4cff-82a1-3c6f0aec6e20"
        },
        "item": {
          "id": "effc7539-3281-41d6-8c1f-3285be344058",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d20a2691-85c0-4e12-9cda-db910b095973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7a18f0-8b65-4e07-9af5-2f9b372e2d59",
        "cursor": {
          "ref": "cbbbe069-3d59-4879-aa31-8d77e5f368cc",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "addf6528-b3f7-4c1c-a1d2-6bff7aac08f0"
        },
        "item": {
          "id": "ac7a18f0-8b65-4e07-9af5-2f9b372e2d59",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "907f14be-4495-4508-b9cf-20ac0d49c6d4",
          "status": "Created",
          "code": 201,
          "responseTime": 2907,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "c9fac9d6-a234-4ad1-afb2-0ae749524595",
        "cursor": {
          "ref": "9084684e-e745-47a7-9fc1-b1d5850bb5e3",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "087c1db6-f310-4bd2-b4d7-e8c42225317d"
        },
        "item": {
          "id": "c9fac9d6-a234-4ad1-afb2-0ae749524595",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e5a8386a-9240-4492-9b42-26e77d09efa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af8b004-69fb-4f6d-8373-68817fac28fe",
        "cursor": {
          "ref": "800cf06a-5ada-4fc0-8ec3-442124dd0b75",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "de4c3a64-7bcd-4f26-aaaa-6af7cb663b93"
        },
        "item": {
          "id": "2af8b004-69fb-4f6d-8373-68817fac28fe",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a9064317-bbda-4285-8f49-4547f2301dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4e7a48-8465-4420-8862-548263c515ba",
        "cursor": {
          "ref": "b6d132c0-fb9b-4d4b-b2f9-aebe959453fa",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6d69f018-3ec2-43a4-a08b-a1d3141f9223"
        },
        "item": {
          "id": "1e4e7a48-8465-4420-8862-548263c515ba",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "60a2dd41-8c9f-429d-9493-250a5f61b040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c36a39-ab35-45ac-bbc7-5527c49cd584",
        "cursor": {
          "ref": "63fceed7-af86-4c3b-bafe-45e01d807a9b",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "41c2605d-6739-4ca3-aa79-12aa04012a26"
        },
        "item": {
          "id": "58c36a39-ab35-45ac-bbc7-5527c49cd584",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3d7fda9a-b0fe-4575-97bd-cf01b8146a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f733c63-d040-4b89-a32f-754cf818844b",
        "cursor": {
          "ref": "6fefb03f-7d21-43d5-bfa0-a9c6afabae3c",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c5301ab5-03cb-4f87-b487-a9be1091f588"
        },
        "item": {
          "id": "3f733c63-d040-4b89-a32f-754cf818844b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "17959848-65fd-43ca-845c-6b2cafa9570f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b99b13b-c7ab-4bb9-9296-b146107a6c72",
        "cursor": {
          "ref": "b0ebf2ff-3b21-481a-869a-1c8051dfba6a",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "207f4ecc-f3f3-4f49-bab5-c6a5683a24f5"
        },
        "item": {
          "id": "7b99b13b-c7ab-4bb9-9296-b146107a6c72",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "48ed2f28-1805-48ff-8aee-cb2aa1731d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524d1106-5f4c-4f7e-bcb4-382ecfc3a9d2",
        "cursor": {
          "ref": "6f9bc59b-f5c1-49de-8d96-a949c658b8ac",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4669618f-0128-4868-9443-542b4d01142a"
        },
        "item": {
          "id": "524d1106-5f4c-4f7e-bcb4-382ecfc3a9d2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0930aa00-51e6-4b6f-b812-73578364602b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2215e4bc-c3b7-4474-857f-1d84db9e3fc6",
        "cursor": {
          "ref": "570e991d-8bf9-450b-a078-494e2999fbaa",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1e090dc3-3971-4f0f-923c-6793b30fba42"
        },
        "item": {
          "id": "2215e4bc-c3b7-4474-857f-1d84db9e3fc6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d8a27535-ec41-4a8a-bdb8-084d45549bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80db1e35-4dc7-4081-9007-749ba24de477",
        "cursor": {
          "ref": "88959f17-92aa-403d-b2f0-9325d5bcda0b",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "92171e14-f78a-4590-8ac5-5d234e622cb4"
        },
        "item": {
          "id": "80db1e35-4dc7-4081-9007-749ba24de477",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "dbc6c0e9-f6e6-49cf-b7f3-915e873cbc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a4ca47-c801-4374-8993-1c85db696a32",
        "cursor": {
          "ref": "36882245-4e59-4d83-87ae-43182bd8f1bc",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ad45734e-b4e7-4351-95d6-13e913e3bbd1"
        },
        "item": {
          "id": "f3a4ca47-c801-4374-8993-1c85db696a32",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a91dcf6b-e386-4b30-a23d-c6d54ee1973a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43f68ad-9ece-456b-9c32-4d62b5e8603e",
        "cursor": {
          "ref": "0b695fc6-d259-4ee4-a56c-79f79a3d49b2",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "85bbe87c-1ef3-43a6-8529-81c9cfc3849a"
        },
        "item": {
          "id": "a43f68ad-9ece-456b-9c32-4d62b5e8603e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8248c4fb-4389-4d5a-a6b8-b1ac759d55bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d87424-a1e6-4a1f-b681-6b8ea7dcd777",
        "cursor": {
          "ref": "e62ad9db-d099-4dd5-8ffc-b18bf8333ac7",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8105144b-0062-4f26-8c48-2703b71d85de"
        },
        "item": {
          "id": "02d87424-a1e6-4a1f-b681-6b8ea7dcd777",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "38c74588-367d-4792-9074-6b13b64873da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f079eae2-d1bf-4e04-9e77-1d5174094bdc",
        "cursor": {
          "ref": "9bed8058-4a5e-4f3a-b9d4-6891301f837c",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f586b69e-bc12-4709-bc6f-901e232d79aa"
        },
        "item": {
          "id": "f079eae2-d1bf-4e04-9e77-1d5174094bdc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7883d189-7e8b-477b-85bb-9e7ef5f1daf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e25286-9261-4b2c-84a2-c7deb7aa646c",
        "cursor": {
          "ref": "5757d84f-dff3-40d9-ad04-8f46a61cdebe",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1723c31a-f939-4474-8be2-eb1b4aa18c60"
        },
        "item": {
          "id": "44e25286-9261-4b2c-84a2-c7deb7aa646c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e8868b8d-ca9d-45a2-b808-c8b4ecc898e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132cb161-d3ce-40e7-b719-454b74177c44",
        "cursor": {
          "ref": "91c8f5df-e503-440e-b50b-8595758e8bb1",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2aa90301-4cc1-4217-a545-591f10d9a825"
        },
        "item": {
          "id": "132cb161-d3ce-40e7-b719-454b74177c44",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1422796a-39a9-4637-a231-7fd6a372ca35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9208b6-43d8-43c0-bdab-3e76f486229a",
        "cursor": {
          "ref": "a2925ff6-56f3-4d32-9d7b-59c3248997c9",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c6d3501c-8115-4a94-b7fd-ab3feb00f1c1"
        },
        "item": {
          "id": "9d9208b6-43d8-43c0-bdab-3e76f486229a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "09b9318a-2a9c-4dba-bb25-ab17f27ccb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d038465-843b-4139-a4aa-d5d5592210ab",
        "cursor": {
          "ref": "6ff99a55-2a26-473f-81f6-66703c37c5fe",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1a90a004-7145-446d-b0ef-ec95d088f114"
        },
        "item": {
          "id": "9d038465-843b-4139-a4aa-d5d5592210ab",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "83b0a1fc-a01a-412e-902b-3901bf370b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13734248-0174-4005-87dd-b2c8697bfe4d",
        "cursor": {
          "ref": "b645ea76-f9ce-4e46-8f9e-85b258734ce8",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e74374ab-6a99-4dd2-a79b-50deda40f2a4"
        },
        "item": {
          "id": "13734248-0174-4005-87dd-b2c8697bfe4d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4efa3d09-8960-4a19-a440-46d89420f298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f6e184-7ccb-4627-81f1-eacbe35f2a42",
        "cursor": {
          "ref": "42eb0593-549d-4bcd-baee-a994645f10a0",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "770ce57d-bcb1-4bcf-9264-cbbec137f8be"
        },
        "item": {
          "id": "51f6e184-7ccb-4627-81f1-eacbe35f2a42",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f43b65f0-f2f1-4083-90bd-a2e8b664f67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae21921-f7f8-479a-9cce-5ad55bced694",
        "cursor": {
          "ref": "ca7773fb-0586-4bf5-967d-515f24e7012c",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "02e38aca-4c2d-45ee-95ad-9e8e883e7091"
        },
        "item": {
          "id": "1ae21921-f7f8-479a-9cce-5ad55bced694",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e30fdf17-1546-461b-9330-92c87aff3a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e40f3f-f029-47ca-9150-155e8883e1ba",
        "cursor": {
          "ref": "091224ba-b4f4-49df-98c1-b17ee935f31a",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2e1c406d-dfc3-416c-8faf-97a91c9de9ca"
        },
        "item": {
          "id": "12e40f3f-f029-47ca-9150-155e8883e1ba",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "05532605-fb9d-475c-80b9-a049583eed01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefa1fd9-85df-42a3-859a-4a8127fd5aa6",
        "cursor": {
          "ref": "6c7a84cc-8c97-45b4-95bd-84c1e6fc11bb",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "61828259-3a6f-45a4-ae92-9185c02de4b5"
        },
        "item": {
          "id": "fefa1fd9-85df-42a3-859a-4a8127fd5aa6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8387557b-ee6c-4b9d-b98a-be89d5dfd107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 350,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ba9afc-a478-40dd-b0a5-1f402c148341",
        "cursor": {
          "ref": "ad2896b3-58a5-449c-9dd2-02455bf74c49",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4d328cbb-9846-4952-ab00-160acd7a25ce"
        },
        "item": {
          "id": "99ba9afc-a478-40dd-b0a5-1f402c148341",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b00cad26-d3ad-44e7-b364-d7310e06b518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e606ca-bc67-4562-86c1-1135d5e8c39d",
        "cursor": {
          "ref": "cc7ec5b6-dc48-431f-ad59-9628588d32f0",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "75823fbd-744a-429f-8b7a-e9bb38879154"
        },
        "item": {
          "id": "23e606ca-bc67-4562-86c1-1135d5e8c39d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cc69a988-b1f0-4c54-baf9-b75644375a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bedd21-853b-4606-a122-8cfd80827311",
        "cursor": {
          "ref": "c86c5fdb-51b2-44d1-bb9f-ffa1c74222e9",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9c6e6a50-9204-43ee-819b-5f2fab1dedd3"
        },
        "item": {
          "id": "b0bedd21-853b-4606-a122-8cfd80827311",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c29ad428-8f49-4359-8822-28f7aa228ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4c71e4-06fd-4751-8dc8-305aec739b50",
        "cursor": {
          "ref": "52bd9adb-6d88-4f4f-8d33-157bce6ea884",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9b5dfba4-1bd1-4c82-8f3c-49ff3a0ae109"
        },
        "item": {
          "id": "3e4c71e4-06fd-4751-8dc8-305aec739b50",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0a420654-89a4-41a2-81da-e51fce133e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925b282e-f263-41b0-a4d1-9e0ba3a3caf4",
        "cursor": {
          "ref": "90dd5a03-fe69-44cc-9f06-7f934935b974",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "10e5df76-6671-4c69-9ad9-4129f91529ec"
        },
        "item": {
          "id": "925b282e-f263-41b0-a4d1-9e0ba3a3caf4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "68c2bca3-e54f-432b-9d0f-78496e14425e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43300950-936e-42a5-9977-23c8b7d325a7",
        "cursor": {
          "ref": "2c5bd0fe-56a2-4a02-8774-c2d20ef0a06b",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1517461b-44a1-4bc6-8721-d383270beea0"
        },
        "item": {
          "id": "43300950-936e-42a5-9977-23c8b7d325a7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1cb50fd3-2ec8-4d8f-8ed1-106d7a814124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92676935-eccc-4434-bae8-e9935afcc3d1",
        "cursor": {
          "ref": "fa039b5c-eaa9-473b-834e-278a1f0d1e76",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cbb6f919-db09-4313-89b9-f0c9ede10008"
        },
        "item": {
          "id": "92676935-eccc-4434-bae8-e9935afcc3d1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "26d8e647-c19b-46e2-ab4b-65f94304fe83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb27123-348e-461f-ae7c-8522c5279f6c",
        "cursor": {
          "ref": "acc0b492-720f-4e49-afdf-a2b91dda30d6",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2d77c084-9d00-4e83-b8af-54c2d40f7a32"
        },
        "item": {
          "id": "2fb27123-348e-461f-ae7c-8522c5279f6c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b73ea2eb-cd2a-485c-ad7a-830596646043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a70a45-9154-4e9e-be4f-b5be23485078",
        "cursor": {
          "ref": "684a5f64-bfef-4aeb-8954-1951df1b9cbd",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ddc2ea59-6542-47c0-8370-fd470c89c786"
        },
        "item": {
          "id": "70a70a45-9154-4e9e-be4f-b5be23485078",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "98486d24-1b98-4fbf-99c3-77fef64346a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "2d54f90f-1e82-4616-9005-e5d618582602",
        "cursor": {
          "ref": "103a84f7-6e70-4767-99aa-5453083aaa3c",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "224b5a1c-3476-4128-bf59-f29cf4002d9b"
        },
        "item": {
          "id": "2d54f90f-1e82-4616-9005-e5d618582602",
          "name": "credentials_issue"
        },
        "response": {
          "id": "48a679e9-6f4a-4cdd-8cfe-b50c1bd699a3",
          "status": "Created",
          "code": 201,
          "responseTime": 2745,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bc96f7-1424-4d4f-b0cf-4f345675c5b0",
        "cursor": {
          "ref": "31816f96-58f5-4493-927d-f8a875829717",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "aec9036b-5894-426b-a4e8-df4ac5c197c4"
        },
        "item": {
          "id": "99bc96f7-1424-4d4f-b0cf-4f345675c5b0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2efa2bb7-6825-47d8-b90f-b3a9ca03e91c",
          "status": "Created",
          "code": 201,
          "responseTime": 2953,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc867cc-8e50-4b44-b607-a96386a7a04e",
        "cursor": {
          "ref": "d3c0df0a-acc5-4b5a-96de-67af420af193",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8f83303d-60e7-4f25-a929-5d875a52c59f"
        },
        "item": {
          "id": "cdc867cc-8e50-4b44-b607-a96386a7a04e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e5e9f598-9fcd-4283-93f4-3d5f6101b772",
          "status": "Created",
          "code": 201,
          "responseTime": 3445,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c390cc-7d00-404b-bfe1-bd78ebb0f93c",
        "cursor": {
          "ref": "8dc73619-e1d3-4515-9576-102a71b57305",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fc751bd5-6e64-486a-86c0-e3b32a594df2"
        },
        "item": {
          "id": "27c390cc-7d00-404b-bfe1-bd78ebb0f93c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5ed39dc0-d763-424b-a155-39099763d034",
          "status": "Created",
          "code": 201,
          "responseTime": 3843,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e48a8b6-6483-46be-993c-c2d25122e11a",
        "cursor": {
          "ref": "30ef93ff-27b5-424e-8de9-0826d84b1bd6",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "013802a8-f03c-4e12-8695-3e0396809520"
        },
        "item": {
          "id": "3e48a8b6-6483-46be-993c-c2d25122e11a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f6a08b88-8aab-4aa9-9636-7d36c5c8d93b",
          "status": "Created",
          "code": 201,
          "responseTime": 2790,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-01T00:53:28Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-01T00:53:28Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "70efe653-8577-4f80-b872-0d004a79e4b0",
        "cursor": {
          "ref": "45abcc01-56ac-4f0b-b56b-dd035e10a512",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0bca9731-a328-4f6b-93a1-76f9f4ce63b0"
        },
        "item": {
          "id": "70efe653-8577-4f80-b872-0d004a79e4b0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a5f96ceb-92ef-49d7-9b3e-cb9f9977fe2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "84852aba-dda8-49aa-b3ca-0bcb69e7b977",
        "cursor": {
          "ref": "624f1af3-2f6e-4509-a304-df693809d393",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8f44551b-451b-4ee5-b3da-c589efe493c5"
        },
        "item": {
          "id": "84852aba-dda8-49aa-b3ca-0bcb69e7b977",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "458e24de-e886-4f3c-bcd3-247dc100f492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19dee6be-3859-4fe8-bc47-e9df0e07404d",
        "cursor": {
          "ref": "f0e4c8d8-eb22-405d-b65c-54032a904a3a",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "91b781d6-583f-48af-b75d-513e598ccd01"
        },
        "item": {
          "id": "19dee6be-3859-4fe8-bc47-e9df0e07404d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f66579fb-ed17-445e-91ca-0574306b8127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c1db98-ef73-4768-9ded-9aea7b1e0f58",
        "cursor": {
          "ref": "60e06d58-42d5-4663-9871-c676e3116607",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7edfb4fb-311f-4321-83ae-c2002b8960fa"
        },
        "item": {
          "id": "38c1db98-ef73-4768-9ded-9aea7b1e0f58",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "68240a26-a846-49b0-9ae1-4524819b0742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc15b4b3-e22a-46ec-94be-eb5c76970969",
        "cursor": {
          "ref": "bd1519ce-98ef-46a2-bf39-30503e7d84aa",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0b8cff70-af13-4089-90f4-7e6416b9ea3c"
        },
        "item": {
          "id": "fc15b4b3-e22a-46ec-94be-eb5c76970969",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9e23535e-1a09-40dc-82aa-c32d7aa0083d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895ae017-8fd1-4748-8d11-232472748af8",
        "cursor": {
          "ref": "7a2c8fdf-46ad-4caf-a54d-27d1b9a6f876",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "31b8acdd-d113-4bff-a0ee-3ab7f18731a9"
        },
        "item": {
          "id": "895ae017-8fd1-4748-8d11-232472748af8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a5f9300c-ddaf-4fff-a9e5-34e3c5bc8cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29852d38-20b5-418e-a23d-2fd81d76330a",
        "cursor": {
          "ref": "03b4456c-49b7-4ffc-9d7c-eee76ba3a5c1",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a4f6f0ca-0334-439c-839c-8e26e8d48346"
        },
        "item": {
          "id": "29852d38-20b5-418e-a23d-2fd81d76330a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "81658b05-727e-4852-8840-7d1711a5b2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c0e99e-7186-4a6d-bf2a-60d963377693",
        "cursor": {
          "ref": "7d3ab09f-ea31-4fa2-afb7-c948296634e8",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "eb0a19ca-9998-45a5-860c-f5b13b4376d0"
        },
        "item": {
          "id": "f1c0e99e-7186-4a6d-bf2a-60d963377693",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1ea66450-aacb-4094-a976-816ec18982dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c80f9af-1cce-4703-9c4e-585378b9ff8a",
        "cursor": {
          "ref": "a5a1b6ca-47b0-45c4-881f-9c692a8cfb69",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0ade8ba5-423c-4c16-91c4-ea695c2b9423"
        },
        "item": {
          "id": "5c80f9af-1cce-4703-9c4e-585378b9ff8a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0ffb7e4e-6f86-4fab-b415-1cf9e8f0a809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15614832-71a6-48d2-8b23-687a54423dda",
        "cursor": {
          "ref": "333cb9b1-9ed2-4392-82e0-029715c209ca",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "da0917c9-719a-4b03-b013-4008e3d4f79b"
        },
        "item": {
          "id": "15614832-71a6-48d2-8b23-687a54423dda",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "19c90ca2-c2e6-42a4-9054-137421405231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78662a5e-17f4-449d-9788-b26fda6cf590",
        "cursor": {
          "ref": "50d66b3d-d341-400c-a4c0-c0acad539332",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5f4dfb58-27d8-45a6-9804-fbd10de7029c"
        },
        "item": {
          "id": "78662a5e-17f4-449d-9788-b26fda6cf590",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6d8ae225-b779-47d0-9897-44598d4b1a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7121b6-095a-44ec-9059-9638523573a2",
        "cursor": {
          "ref": "fc571adf-bd2f-4c2e-8b05-630adc1aff31",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "47ff6e97-e0b5-4b14-a35d-02ce13d7cef5"
        },
        "item": {
          "id": "9d7121b6-095a-44ec-9059-9638523573a2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8b3ab536-1f15-4fdc-b598-9a24fbb399fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9a2aa4-f6e1-4871-b2c4-ac273d04ff7b",
        "cursor": {
          "ref": "2f4c5734-1cdb-4ae5-90bc-6d77bbd20a78",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "53bdb05d-4486-42e5-af74-9b0b04c3a1c5"
        },
        "item": {
          "id": "6d9a2aa4-f6e1-4871-b2c4-ac273d04ff7b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d692280e-6360-4941-b586-855714a3d8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88198580-3da0-4103-a7f0-fc26834b2bea",
        "cursor": {
          "ref": "71c53688-ef74-456c-b350-d5594c4c397e",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "493934a7-25b9-4087-8153-c3f487bf6bf3"
        },
        "item": {
          "id": "88198580-3da0-4103-a7f0-fc26834b2bea",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "891484d9-b3f3-4d83-9b82-d289f7ef23d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612d4840-9d5c-4dda-ac97-5a2186744a17",
        "cursor": {
          "ref": "a6f1ca88-a9f7-452b-bb25-3cdca93feb4d",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "033deb7c-736c-402a-8139-93fc3205ad7d"
        },
        "item": {
          "id": "612d4840-9d5c-4dda-ac97-5a2186744a17",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7de541e3-1c1c-4e9c-b0a8-7dd6a8ec517e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 819,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6fdb1f-c68e-43c7-a4dd-0a139a3a828b",
        "cursor": {
          "ref": "4cd5a4a1-93a7-48fb-8fc9-8d8501fe2d8a",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "58423513-9378-4af3-8146-e0d3eebb25df"
        },
        "item": {
          "id": "1a6fdb1f-c68e-43c7-a4dd-0a139a3a828b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f867bcb2-2c26-4cb3-997b-c20bb703bcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6e517e-bd0b-4365-a660-b4210058a63c",
        "cursor": {
          "ref": "51062907-04ab-405f-a8a7-c9e9838e405c",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c80d0add-11df-440f-b827-353d27fbd8c8"
        },
        "item": {
          "id": "bb6e517e-bd0b-4365-a660-b4210058a63c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "93d746dd-65aa-4669-a3e5-5ff0c168de2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad74bcb-2910-4e56-bd3a-865b1ccf7f19",
        "cursor": {
          "ref": "e76adc08-b568-4f1e-955c-7c01b4ac96ec",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7d47b3a1-656d-4fb0-b4c7-b04dc6ddcedd"
        },
        "item": {
          "id": "2ad74bcb-2910-4e56-bd3a-865b1ccf7f19",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f2f95753-e6de-4c5f-b7a9-dadac8d587b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9063545c-eb8e-42d7-9ee6-5f3acdaba200",
        "cursor": {
          "ref": "70f68491-acad-47ba-9e6e-ebee99336724",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3fae5cea-a226-4266-9847-8347f06f856a"
        },
        "item": {
          "id": "9063545c-eb8e-42d7-9ee6-5f3acdaba200",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "caa0c935-315f-4523-810f-a0c447f08a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad50f936-9804-449c-90be-fcf34109a5eb",
        "cursor": {
          "ref": "89a7726a-928f-41a7-a435-3990272bcc3c",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "87ea392e-447d-4686-944c-e9f8dec59048"
        },
        "item": {
          "id": "ad50f936-9804-449c-90be-fcf34109a5eb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "41f900ca-e7fe-44a5-b26d-79d0af88c9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1ad7de-02a9-4b0b-8e22-aaafe225a487",
        "cursor": {
          "ref": "dc7cfc86-7078-40e2-b291-36a88cdee56e",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "65a2238a-3aca-4be3-ae9d-d989ea30c069"
        },
        "item": {
          "id": "ad1ad7de-02a9-4b0b-8e22-aaafe225a487",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "52304206-ff17-4c1e-8e09-37f0e928f43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88ccb68-881e-4698-8c42-f8a08f7971d3",
        "cursor": {
          "ref": "2cba118b-c0fd-405d-b300-d0a456fdbff6",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f21f9770-d361-4a47-a3ce-0f494d22da60"
        },
        "item": {
          "id": "b88ccb68-881e-4698-8c42-f8a08f7971d3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e4c00596-0e97-452f-9c33-8e74a18f381d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9122a878-f8ed-4ab2-944f-39b895f2c0bc",
        "cursor": {
          "ref": "13c9a1f8-81bd-42b7-9a4c-2bc37466c10c",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "feee98f8-20d5-4cb2-897a-158759c89b9e"
        },
        "item": {
          "id": "9122a878-f8ed-4ab2-944f-39b895f2c0bc",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0a0cf4fc-49fe-4d7e-bcae-35943858c383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b39f5ac-195f-46f1-9e82-0571559c8238",
        "cursor": {
          "ref": "5ca4dc0c-6e13-4058-979e-54db5ce28e18",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5bf30af4-bed9-4573-b415-175f95f345e6"
        },
        "item": {
          "id": "0b39f5ac-195f-46f1-9e82-0571559c8238",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "21166d60-e206-40b9-80cf-dc218dee2240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ddde2a-f1e5-411a-b249-c9311a958ede",
        "cursor": {
          "ref": "a436c4fa-5f6e-4f92-94a6-76ddb18caa5e",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "35538001-2975-4f1e-98d9-d6664b448a79"
        },
        "item": {
          "id": "d9ddde2a-f1e5-411a-b249-c9311a958ede",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a0bd67de-6d04-46ae-b85a-7a180a8581ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfe1d46-b4c5-433e-b096-a3ae81528c7f",
        "cursor": {
          "ref": "b0bc0bee-23cc-48ee-83dc-9c41070bc5b6",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "03cc2bbb-eb9e-4aa2-b842-e45484b32f46"
        },
        "item": {
          "id": "9dfe1d46-b4c5-433e-b096-a3ae81528c7f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f69ba6fc-ab4a-4a56-9283-1a27fd29140a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7fe6c2-be86-464e-aa59-4c69574f2791",
        "cursor": {
          "ref": "9bf7c76a-0872-485a-ab93-04a62aa09fae",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e862b4a2-9fbc-4bdf-a5e8-e5435bd5aa82"
        },
        "item": {
          "id": "df7fe6c2-be86-464e-aa59-4c69574f2791",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5209791d-feee-44bf-8101-23f891ccb00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02e56fc-779f-4a7f-b4f4-fc64b0156618",
        "cursor": {
          "ref": "fe580a38-943e-4a17-9124-5e68486b0631",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "24b3f0d3-a794-4f18-9aa3-a10c158b4028"
        },
        "item": {
          "id": "e02e56fc-779f-4a7f-b4f4-fc64b0156618",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fe1c2bc8-7de0-4adf-bfd8-e764bb4b22dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5b008b-cc17-4044-8c5c-d7d84f0a328b",
        "cursor": {
          "ref": "5bf390ce-53c5-4c8a-a04a-b7fb49d98b31",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "de6b61db-0aca-44d1-aad9-b83ee86f738d"
        },
        "item": {
          "id": "3e5b008b-cc17-4044-8c5c-d7d84f0a328b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ed1957ee-deb3-428e-9a97-0fe93cb27c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697d1c60-5ad4-4b10-9ee4-b031bc2e8b8d",
        "cursor": {
          "ref": "0cc1b6f8-e521-4cdb-a882-2ce934976a6f",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f68df68b-cfd2-4f6b-a9c0-b3697be109e7"
        },
        "item": {
          "id": "697d1c60-5ad4-4b10-9ee4-b031bc2e8b8d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "be58e74d-11bc-4022-93f0-9b804b115c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1468ee8-043c-4b53-a671-1e56b33a9977",
        "cursor": {
          "ref": "6fd2d044-27bf-4aa8-978f-594e8a84e38a",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8d7eb2b0-8fea-4b76-be44-b6b1ce25220d"
        },
        "item": {
          "id": "d1468ee8-043c-4b53-a671-1e56b33a9977",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cc3d6092-83fb-48d0-8887-c93e925b2497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2393ed16-e795-4039-ae55-38989c2e2fd9",
        "cursor": {
          "ref": "1e31ac45-9222-474d-a97f-603ee421956d",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "168249c3-ea35-4f4d-9a8a-f9b7183723d0"
        },
        "item": {
          "id": "2393ed16-e795-4039-ae55-38989c2e2fd9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d0ccc4ce-8303-494a-8aa4-b4447901a99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e416770f-a1ed-4845-9188-c4e99234b3d9",
        "cursor": {
          "ref": "35a11a30-8688-45d9-8f33-ec09fb344b2a",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e1256438-f4c9-4c57-849b-0cba97a02774"
        },
        "item": {
          "id": "e416770f-a1ed-4845-9188-c4e99234b3d9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "997f4d6a-c911-47aa-bf5d-5a724da2c056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0607c299-8126-4a60-ad88-e9e61b24b287",
        "cursor": {
          "ref": "a75205b0-68ff-4c92-9155-58fb18b98efb",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "27ffa97d-2f93-4c71-a2c0-7f01ac8e68ba"
        },
        "item": {
          "id": "0607c299-8126-4a60-ad88-e9e61b24b287",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6834db58-36c0-4c95-892b-cc52e42be558",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 161,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "1515e424-cbd6-4b51-a6bf-cd2f9dea6aa7",
        "cursor": {
          "ref": "a9414760-b0a2-445c-b9d7-a5bf7c183f0e",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4c216474-a608-4d97-8d83-fd5385d3b594"
        },
        "item": {
          "id": "1515e424-cbd6-4b51-a6bf-cd2f9dea6aa7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f4fb63b1-31cb-470b-a83b-cbee37439720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "125070bb-19b1-4b9c-89f4-3248a2e8d248",
        "cursor": {
          "ref": "3a02eb93-402b-4cad-960d-f2acfb7d398d",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0e300590-abfc-4587-ab1b-3dac4b96c87e"
        },
        "item": {
          "id": "125070bb-19b1-4b9c-89f4-3248a2e8d248",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ef40e649-04bd-4e10-a6ad-61d0e2ddd3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 448,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a47ce4-b357-4c45-9fda-aa57b33ce1ed",
        "cursor": {
          "ref": "cf71d1b2-ee8e-40e9-88e2-90a649175432",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "312071cd-2481-4ad7-97be-6a00e6b7bf7e"
        },
        "item": {
          "id": "19a47ce4-b357-4c45-9fda-aa57b33ce1ed",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "126dac92-e98d-4f4f-90ce-3e85a014512c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b105d3f-a10b-461f-8b0f-f62f1cfa4349",
        "cursor": {
          "ref": "04775c3b-79e0-42c2-b87b-68d8eeeb991d",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "97bc009e-aab0-4e3c-9ca3-af81afdd3bee"
        },
        "item": {
          "id": "3b105d3f-a10b-461f-8b0f-f62f1cfa4349",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b65d35d0-fbaa-43fd-b91e-428cc25974f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb51a7c-2b88-453b-9abd-a59e427ec7f9",
        "cursor": {
          "ref": "e3680641-bd26-4fc5-981c-200dd8efd7aa",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "19647039-346d-4663-a2cd-38893a944f36"
        },
        "item": {
          "id": "deb51a7c-2b88-453b-9abd-a59e427ec7f9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f3a3edad-3e43-4da0-a5de-1002d0284645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265b910c-28b4-4d61-b1a6-3dfcfffb02a9",
        "cursor": {
          "ref": "f35492a4-471d-45b4-8f9b-f66e6e2d86c0",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fb6c3f6b-e690-4e2f-87f6-29e9d5e56d1a"
        },
        "item": {
          "id": "265b910c-28b4-4d61-b1a6-3dfcfffb02a9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ea3971de-97ea-48f2-8cc4-0d7dcdcb3442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b9acfe-5522-4868-8d90-4c5f2db6b1df",
        "cursor": {
          "ref": "5af90bf5-d852-46f8-b5c6-b37774d1b3de",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "95b8a56c-523b-4179-9858-f0bba113b800"
        },
        "item": {
          "id": "64b9acfe-5522-4868-8d90-4c5f2db6b1df",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e58916c6-0df5-437c-aa0c-5838c78f64a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf04489e-fbbf-4709-a23d-72f3dd1ad32e",
        "cursor": {
          "ref": "354465af-3cf8-4468-a28c-96160479d475",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4cd3afc7-e417-4df9-a1f0-000ab6448fc1"
        },
        "item": {
          "id": "cf04489e-fbbf-4709-a23d-72f3dd1ad32e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "68c60f3a-af89-45a7-bacd-24656c94a13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58effae3-bb8f-4625-9871-ff64f8c2054c",
        "cursor": {
          "ref": "8c8c2652-835d-4c4e-a744-612c6517426b",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b0bab818-7615-4c12-b1ce-58422de321bd"
        },
        "item": {
          "id": "58effae3-bb8f-4625-9871-ff64f8c2054c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "24753079-1b00-4c2c-b6ab-314d017cc521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee684385-2c5e-43fb-ae2b-a72c4d7c94bd",
        "cursor": {
          "ref": "8be7bed6-557a-48ba-8e95-9b3f40a5e626",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "947d3268-d1d2-4c08-b6a1-10850bfe43d0"
        },
        "item": {
          "id": "ee684385-2c5e-43fb-ae2b-a72c4d7c94bd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9e5b05a7-5f47-46b8-962a-3a87b1b63097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d870ed-318b-45c2-b383-9279c6bf8ad3",
        "cursor": {
          "ref": "460650b0-f0d8-4b7b-9eb2-ffeef60a0994",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "90a4748f-d6d5-4ed7-b255-cfdfb48827ad"
        },
        "item": {
          "id": "70d870ed-318b-45c2-b383-9279c6bf8ad3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9b884d8b-322e-44b1-88fc-7ef45049ac9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62649961-e727-4d47-b0f9-d5bc48e642fc",
        "cursor": {
          "ref": "ccc2648a-f0ca-43af-a9b5-29aa6bf7cd82",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0d75095d-5179-44e8-840e-d48cf18adead"
        },
        "item": {
          "id": "62649961-e727-4d47-b0f9-d5bc48e642fc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e0d652c8-00d8-4309-a36e-befd00b21dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8224db02-1038-4ba9-be7e-b99e6c1e543b",
        "cursor": {
          "ref": "edeb8829-9e69-497f-b96e-9a4beeaa591b",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6b0e700e-f2bf-46f8-8688-d97b0303d285"
        },
        "item": {
          "id": "8224db02-1038-4ba9-be7e-b99e6c1e543b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "490c2109-bf19-42aa-897f-f79043c58e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4c53e2-b257-41ca-ad7e-23f1cd3277be",
        "cursor": {
          "ref": "46b78680-8703-43da-ab03-99708f478244",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2037587f-37f8-4294-af95-2009af5eedf1"
        },
        "item": {
          "id": "4b4c53e2-b257-41ca-ad7e-23f1cd3277be",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "67b343c3-db15-4e1f-849f-47f653da061e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6096727c-4974-42ed-b09f-20e1a780fcfe",
        "cursor": {
          "ref": "ed0ee434-6a6c-407e-b428-98e1f4e408f3",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "172e97d6-8584-479c-ba60-f5839a7d5c58"
        },
        "item": {
          "id": "6096727c-4974-42ed-b09f-20e1a780fcfe",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "eb7a1229-a350-425f-9b0d-65a4b8973100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b1331d-b84d-4b21-8461-b8f59ea32081",
        "cursor": {
          "ref": "4727e3e7-2c71-449d-803b-b54759489026",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f9fcfd51-c87f-4fc5-b3df-4cd8ec9b8d29"
        },
        "item": {
          "id": "e6b1331d-b84d-4b21-8461-b8f59ea32081",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ec626ad8-624f-4a24-b0a7-b35060703991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098ecec8-f05f-4f83-b0f2-877e99fc7d44",
        "cursor": {
          "ref": "3f2b5db4-b04d-4fe4-83ed-acc62dd9da89",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3f10bcb5-1120-433b-8b1d-5ea4b63b7c3e"
        },
        "item": {
          "id": "098ecec8-f05f-4f83-b0f2-877e99fc7d44",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0a9f422a-1a8a-4163-b584-7c2a3863042e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c59a9b-81a9-447e-8108-d40d338ce0b9",
        "cursor": {
          "ref": "884717db-5491-4896-aff2-22bfd8a9dc03",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "40b9194f-fcba-4531-9708-dffb549855b6"
        },
        "item": {
          "id": "68c59a9b-81a9-447e-8108-d40d338ce0b9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "16afe851-9e56-4c8c-90bc-e056bfac7e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db111f5-15c0-4134-a7fa-b625a2e439bb",
        "cursor": {
          "ref": "b2f02cad-dfc8-4665-8444-1960683e0f82",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b3a35152-2b35-4f6a-ad5a-a4f9c76d7d30"
        },
        "item": {
          "id": "2db111f5-15c0-4134-a7fa-b625a2e439bb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b7e4ade6-5e11-4552-b282-f06390362a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d462252-b574-4b63-a0e2-bc7bd02de676",
        "cursor": {
          "ref": "7d37819c-266d-4a21-b3f9-f61740dc3947",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b0e7fd9a-170e-42b4-8e17-5ace6f4c0d70"
        },
        "item": {
          "id": "8d462252-b574-4b63-a0e2-bc7bd02de676",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f9db670d-385d-4571-9f40-1c3bf6c14edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5573b973-6422-433d-b7e6-4e0152295073",
        "cursor": {
          "ref": "969d53c1-7992-4900-905d-f09a814c0303",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7987b56f-ccaf-4c46-b312-4fd4dc5f9b9b"
        },
        "item": {
          "id": "5573b973-6422-433d-b7e6-4e0152295073",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c54e4bec-d2d1-4205-bc46-abbf5128f335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00729b7b-29b9-4dae-b604-5aaf7d7ac4fd",
        "cursor": {
          "ref": "8c334579-2ced-42a6-a16e-2e2308c8c671",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b0589c74-1f67-4253-9ee1-f44ddf6b7605"
        },
        "item": {
          "id": "00729b7b-29b9-4dae-b604-5aaf7d7ac4fd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "50217e41-b19a-4435-bfd6-9afee1e32378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecce2df-b714-423b-8f4e-7883c6993a90",
        "cursor": {
          "ref": "b52369b3-f5b1-4bb0-9bae-b5f23c850f1c",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0bac540f-5002-4066-bdf6-be3c4d1cb024"
        },
        "item": {
          "id": "eecce2df-b714-423b-8f4e-7883c6993a90",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "11d9cf8d-8765-4454-8bfd-69edea1b7f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34577c8a-403e-462d-9f61-43531f401b47",
        "cursor": {
          "ref": "27c9fb3b-39ce-4e9d-bcc8-9f1f3e63555c",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "48d36a9c-590a-47c9-936b-e55055ff271e"
        },
        "item": {
          "id": "34577c8a-403e-462d-9f61-43531f401b47",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d82e41ef-06c0-4bc3-b408-03f48a42be88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ad53f2-1324-4c65-b666-e2bb4e618c2a",
        "cursor": {
          "ref": "a74ed532-b714-4992-947a-3c36d056e36e",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "134629f3-46ec-4dac-9b60-4c34eee3fa78"
        },
        "item": {
          "id": "f1ad53f2-1324-4c65-b666-e2bb4e618c2a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8239e6ae-e315-4605-90f3-bf569662642b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b603e6f-bb76-41c0-b2af-86a2752ceab5",
        "cursor": {
          "ref": "e77d628f-3342-49a7-aa36-5434e9c2c9dd",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f34ee89c-5e02-4d8e-aec9-1357ef755356"
        },
        "item": {
          "id": "4b603e6f-bb76-41c0-b2af-86a2752ceab5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ad05713f-68fe-4c1a-acf0-436e3a075830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d98ea8-2e67-48a5-9e33-1816d1772ab9",
        "cursor": {
          "ref": "6e4af89e-52f5-42f4-8b7c-a4f19685bc33",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1299595f-5b55-4306-95e3-3002379ed125"
        },
        "item": {
          "id": "a7d98ea8-2e67-48a5-9e33-1816d1772ab9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "10c93b10-9063-42a4-9bb2-c8fc2c977074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10097168-ee6b-45d3-9840-08b87d9e7b72",
        "cursor": {
          "ref": "363f6643-0981-4ef4-b90a-76dd2965a8b4",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "87de3c9f-c9aa-4451-b46e-2c224c60cd31"
        },
        "item": {
          "id": "10097168-ee6b-45d3-9840-08b87d9e7b72",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "973d57f4-e552-4bcf-963d-fe24c8bb8e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7b48a4-858a-4220-a387-3ae4bc608252",
        "cursor": {
          "ref": "3677661c-9f38-41d9-8ff2-269a78ebc615",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8a092cc5-c529-435a-a8e1-32165de762b9"
        },
        "item": {
          "id": "2d7b48a4-858a-4220-a387-3ae4bc608252",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b1e2cfee-262b-4d5c-91a3-e60cc37de548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048352ec-9585-47a3-9d06-c89772d0f032",
        "cursor": {
          "ref": "1ffb80f3-0d58-454a-aef7-53892d33478d",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "90e3f88c-4df5-4dcf-ac0e-b872472c96ec"
        },
        "item": {
          "id": "048352ec-9585-47a3-9d06-c89772d0f032",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d424ef0d-7424-4939-933c-47730e95717a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2a0f00-49db-4d7c-b4ed-ce7830b3e843",
        "cursor": {
          "ref": "6f78100f-e4f8-410b-8938-597653d214b6",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "27f9306f-4a76-4a7e-b12c-48930d5c780f"
        },
        "item": {
          "id": "7d2a0f00-49db-4d7c-b4ed-ce7830b3e843",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9b9451a9-a1c9-4504-926e-ca0926279244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2c03ee-d34c-45c6-8a43-305d2d0b7da0",
        "cursor": {
          "ref": "8da6d457-ca84-4287-b6ad-f2c44798bb55",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fe5992ef-48dc-48da-8678-44699c430c2b"
        },
        "item": {
          "id": "0a2c03ee-d34c-45c6-8a43-305d2d0b7da0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c0fbd124-67cf-431f-bedb-1e982b77df50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58787d38-869d-42a2-bb4d-42db6bc20042",
        "cursor": {
          "ref": "96daa456-e18b-42c5-938b-d973bd778aee",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1e4eb335-7cef-494a-a830-b13b4a0df33a"
        },
        "item": {
          "id": "58787d38-869d-42a2-bb4d-42db6bc20042",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "eaf165a5-b7b1-451c-8ffb-c17bed3402c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 488,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8030d7f0-6890-43b8-8e5e-fef1ea527749",
        "cursor": {
          "ref": "94d2ce2f-5d4e-4911-9ec6-2b4dce6b9085",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c45b9f86-7ce8-416d-a910-4625c6326a62"
        },
        "item": {
          "id": "8030d7f0-6890-43b8-8e5e-fef1ea527749",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b9804249-440d-4936-81c8-052c7a82d064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b235a41-429e-4e77-8ba2-6e384439a925",
        "cursor": {
          "ref": "c0328263-1beb-42a3-9428-4dd7c6a2c2aa",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d4420e4d-1524-4a65-a4a2-91f6f97256d8"
        },
        "item": {
          "id": "4b235a41-429e-4e77-8ba2-6e384439a925",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c808ef8a-399e-4638-b9e7-162f8417bacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc57e7e0-1218-46bf-bdfb-0b4948348695",
        "cursor": {
          "ref": "09ee5720-d511-4aff-9f63-6ce364d8668f",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "55c8a9d2-9843-48a1-a030-9e818a6ac85b"
        },
        "item": {
          "id": "fc57e7e0-1218-46bf-bdfb-0b4948348695",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e5233950-06ed-4796-9891-69208848bd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b590e93e-42e3-4b01-af9b-18bb2a8bcecd",
        "cursor": {
          "ref": "27d49b91-ff16-4963-9418-fa75af3130fc",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "74f3e4b0-b177-4e23-8630-10938a650982"
        },
        "item": {
          "id": "b590e93e-42e3-4b01-af9b-18bb2a8bcecd",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d0bf9f3f-890f-4fec-b7b9-09a4e0752fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ecf474-072f-44fe-95ff-607f062df6d3",
        "cursor": {
          "ref": "c2b92a9b-4c2c-4fdd-bfb5-f9436f09e118",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "263de453-aedc-4e2e-9ced-65ba715efd2f"
        },
        "item": {
          "id": "b2ecf474-072f-44fe-95ff-607f062df6d3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8dacdded-cb92-40a7-be6f-7c05a77fbbe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "584bf839-8d54-493f-9b6a-c37ee43d9e92",
        "cursor": {
          "ref": "b584929b-7fc3-47d2-8810-ed63da782d64",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "415d60d3-7e62-4c66-b7b8-321201aaebb9"
        },
        "item": {
          "id": "584bf839-8d54-493f-9b6a-c37ee43d9e92",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "82b9d9d9-757c-46d7-9517-8231ab014222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9965fe-fbf5-46ab-841a-7d76e941a358",
        "cursor": {
          "ref": "f29abbb9-f390-416d-b73b-c258db08f69d",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2810e511-4d76-4e49-9443-555b85ea9916"
        },
        "item": {
          "id": "2a9965fe-fbf5-46ab-841a-7d76e941a358",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d8b6d016-9274-47d2-b64d-38991f7dd4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1782f98f-c8c5-4d9d-ab6e-304cc62ee87a",
        "cursor": {
          "ref": "b88a9515-6746-4174-b4d1-295d171d10ec",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9917092c-5b5d-4805-8673-7393ab946bc0"
        },
        "item": {
          "id": "1782f98f-c8c5-4d9d-ab6e-304cc62ee87a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7f029cc5-ac30-4eb6-89e2-4422c99e4301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad8a465-fc10-4453-8850-d9106d2f62a2",
        "cursor": {
          "ref": "a4fdc7bb-8a37-4c86-90fb-0fdee10df6d2",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e7f0121c-fb6b-4bdb-8872-8eb319192da3"
        },
        "item": {
          "id": "aad8a465-fc10-4453-8850-d9106d2f62a2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "27dba55c-3af2-4be8-bc3b-2f8755a1035c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d66a2de-fb17-4d3d-b156-abbdd772d6cc",
        "cursor": {
          "ref": "1b0d944d-4bea-40e1-8db6-d3796756482c",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "103fb3b2-ffdb-4aa3-b231-8c90a3fad6a1"
        },
        "item": {
          "id": "1d66a2de-fb17-4d3d-b156-abbdd772d6cc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "33e770c1-ba05-4603-aeba-05f5b75e641c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 615,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4412b757-c1d5-4841-9b05-252e0e949ce8",
        "cursor": {
          "ref": "d921191d-a15a-40a7-910a-40c413f7c3dd",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5684e0d7-4345-4cc3-86c2-52a0884f02c1"
        },
        "item": {
          "id": "4412b757-c1d5-4841-9b05-252e0e949ce8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1bfb7701-9ea3-4a59-9313-8a4cce933db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c55f272-f4f7-449f-a29a-de8b348a1363",
        "cursor": {
          "ref": "12d218e0-389c-4617-98bc-552fdda3ba37",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "091f10a1-93bc-4a6c-8ab2-dd198e2ccf4c"
        },
        "item": {
          "id": "6c55f272-f4f7-449f-a29a-de8b348a1363",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "13fd821f-0d7e-4a98-8bc6-35d6fe0f694b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873197b0-57a6-450e-a1a0-0baf39e2fec1",
        "cursor": {
          "ref": "2eb7c874-9603-4b61-a315-1c82a8adf244",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "388c4e7b-b037-414e-92ee-5f67af38f009"
        },
        "item": {
          "id": "873197b0-57a6-450e-a1a0-0baf39e2fec1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "16520312-8e07-463c-b2cd-3b1001e9045d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bbbc55-436d-49c0-a213-169341a7dfeb",
        "cursor": {
          "ref": "0d57060c-e508-4bef-a3cb-c2689ee316e7",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e512e526-3830-4360-b7bd-1f8f56b2e6c9"
        },
        "item": {
          "id": "a0bbbc55-436d-49c0-a213-169341a7dfeb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6cbaea85-cd85-4601-b636-cfe0e4f06f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e8b3c6-a217-4007-8505-43895c1a360d",
        "cursor": {
          "ref": "1b57a030-4041-429e-bf01-445ccf4ff08c",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "15d75d84-019a-4439-969c-a592cee2f54d"
        },
        "item": {
          "id": "10e8b3c6-a217-4007-8505-43895c1a360d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "11630534-cc89-431d-927f-4f5a77aa67a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15cbe17-f3f9-41d9-b3b7-0a45875486dc",
        "cursor": {
          "ref": "ec921d52-06a6-42f9-b15f-fc538824d058",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4ca16982-72b4-42dd-93d1-beca4d2811c8"
        },
        "item": {
          "id": "b15cbe17-f3f9-41d9-b3b7-0a45875486dc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "93a1bcaa-0cbb-4ea5-b03a-1e3475b012be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775206f2-3de3-4270-b6d0-cc5c52074330",
        "cursor": {
          "ref": "6170c46e-e519-4444-8932-a10c7002d066",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "92d60f4b-663a-4950-91a2-1ae4bf684d4b"
        },
        "item": {
          "id": "775206f2-3de3-4270-b6d0-cc5c52074330",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f3823797-5b28-4e11-a543-db40727cbb22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee019cab-7d17-4d98-98fa-50153f373157",
        "cursor": {
          "ref": "fc00d045-56c1-48ac-b072-2bfb28bba122",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "33807ddc-01a0-4caf-bba3-7dfef19fd196"
        },
        "item": {
          "id": "ee019cab-7d17-4d98-98fa-50153f373157",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ed3ce6d3-9f28-432a-af80-37bf42cbf241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32c81ee-1fc5-41f0-bc42-8ba577ebfa79",
        "cursor": {
          "ref": "3ea1c4cd-4ea5-4260-8265-fc3eabd3d3db",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3e8feef8-d0f4-47f5-983b-ddf385feccd6"
        },
        "item": {
          "id": "f32c81ee-1fc5-41f0-bc42-8ba577ebfa79",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e5c9e083-412f-46bb-9dd0-04e6946313d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098570ce-7081-4c8b-af7b-1334ef6ba858",
        "cursor": {
          "ref": "16900667-24f8-4cd1-ab6c-767527f1e973",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c8c0e701-9a40-45f5-b994-e12dee33bf00"
        },
        "item": {
          "id": "098570ce-7081-4c8b-af7b-1334ef6ba858",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "385d43e0-9797-4413-98c7-ea34a52a6ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1470f6-7b20-42ad-9ec1-e46d81a4cf2e",
        "cursor": {
          "ref": "5880fdcd-f535-4fd7-9eed-5c146d82508f",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8ed34835-4a14-493e-bc33-810f617f7371"
        },
        "item": {
          "id": "4b1470f6-7b20-42ad-9ec1-e46d81a4cf2e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "22b0ec1e-a4e1-4bf4-88d5-9a3096fc6a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96614162-3adb-4927-b463-e9a1e10b507d",
        "cursor": {
          "ref": "d11e5d38-b661-47f7-8e9a-dae7367ea37b",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "81876a5e-a716-4733-be0c-0982c5e0b2ea"
        },
        "item": {
          "id": "96614162-3adb-4927-b463-e9a1e10b507d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "587fe3b8-3673-482e-87f1-c42f371e5db2",
          "status": "OK",
          "code": 200,
          "responseTime": 678,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "259b9cc8-f035-410c-8705-b05622e00473",
        "cursor": {
          "ref": "41e12e2a-5366-4561-8ad2-5d2805e0be04",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "421e59cd-e2bd-438a-b07f-6f234ebdad8a"
        },
        "item": {
          "id": "259b9cc8-f035-410c-8705-b05622e00473",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5582fcb9-77e6-4d81-b504-3a21ec397207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd47270b-20a1-4d00-bb18-87ba17ad7aa4",
        "cursor": {
          "ref": "2db9022c-a35d-435e-95e7-c58a0b19f952",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "aa40aefd-1ed6-4b08-a68e-1d1bd41c478d"
        },
        "item": {
          "id": "bd47270b-20a1-4d00-bb18-87ba17ad7aa4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "980645df-c18d-41dc-a530-1e0e27e11171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22cbded-bfea-418e-848b-ae033d08e8a0",
        "cursor": {
          "ref": "4f951822-9e8c-4295-9885-268064ce2774",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a6e6f993-1514-4dec-9d07-a4bdabe012a3"
        },
        "item": {
          "id": "d22cbded-bfea-418e-848b-ae033d08e8a0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3c8f9166-8e62-4d4e-b42f-fd58d6f7a4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b21e27-1e54-42d5-ae71-3600098a51d3",
        "cursor": {
          "ref": "21bb1e02-797a-4350-8cb7-879b4979ff38",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5542c899-a4ff-4df4-8572-007d16ac282b"
        },
        "item": {
          "id": "56b21e27-1e54-42d5-ae71-3600098a51d3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c1036e54-09e0-49b6-8916-900ce590ef3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef25290-3e70-4c09-be3a-183c28eefb03",
        "cursor": {
          "ref": "be327221-ba57-4017-b168-745c9587693a",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7734cf60-1220-4ef7-bf42-b9a9aabb982a"
        },
        "item": {
          "id": "9ef25290-3e70-4c09-be3a-183c28eefb03",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e15687af-3734-4947-bd55-a31070ce1e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41581686-526c-4e21-8e67-8d16d51f2f43",
        "cursor": {
          "ref": "d635ee96-4c37-4d5e-8888-d750cc31b496",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cafc2183-d774-4fe9-a3b4-04e49a0e9f4f"
        },
        "item": {
          "id": "41581686-526c-4e21-8e67-8d16d51f2f43",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "61837502-5b78-414d-86f5-024310683ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1a6891-e017-4202-b2e0-d7638fed4533",
        "cursor": {
          "ref": "fdbdf1ad-7ca9-4ccf-9440-948964668c0a",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "83962afd-966f-44c9-b48e-8af29bf44077"
        },
        "item": {
          "id": "2c1a6891-e017-4202-b2e0-d7638fed4533",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fa850cf9-f133-4d93-9916-b99c08c4a44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f009c238-b207-4981-a264-753ad6aa0c79",
        "cursor": {
          "ref": "6eb880a2-6927-41f1-ad95-2e7ae9135299",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ef4313c4-04f9-4586-9254-d54d4ca7c98e"
        },
        "item": {
          "id": "f009c238-b207-4981-a264-753ad6aa0c79",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "96f5342f-4388-4ff9-aeb7-99c4e01114c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f034980-3351-43ec-beac-865242473aa8",
        "cursor": {
          "ref": "c21767a3-0ecb-4213-9c46-4dbbc09f6c8b",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a6b8951b-700c-4195-a831-327f4b10e685"
        },
        "item": {
          "id": "9f034980-3351-43ec-beac-865242473aa8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b43cabb5-727c-41ee-8fbb-f9f3421b6049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c074f5c-79a9-4a1c-8e08-ed2cd00bea06",
        "cursor": {
          "ref": "44aa84e9-584c-4df4-b765-a5f375730e72",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2a10f155-d7b4-4639-881f-2fb6374c9bbf"
        },
        "item": {
          "id": "4c074f5c-79a9-4a1c-8e08-ed2cd00bea06",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0b12a27b-3e65-40dc-9e48-2815c4cb6901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd6eb24-2b54-4d60-a3ca-647b7dbce9b9",
        "cursor": {
          "ref": "6b4cd256-188f-4a6e-ad38-da64a8098f03",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "61b70c51-48fa-47c3-ba3b-6ea24bfea820"
        },
        "item": {
          "id": "0cd6eb24-2b54-4d60-a3ca-647b7dbce9b9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1db90f8d-db8e-4c81-8853-0f5ea97dd8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d747896-80e6-4ba9-9877-db4881d5c8bc",
        "cursor": {
          "ref": "de942f56-f89b-4401-8c9a-948a19b8dee2",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ab916a6d-e685-4e42-aece-febb66ddaa54"
        },
        "item": {
          "id": "0d747896-80e6-4ba9-9877-db4881d5c8bc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1c69bf37-ef98-4f71-90bf-1243a5184a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430cc82f-c3c4-496d-82e4-ab8f95e6d16c",
        "cursor": {
          "ref": "e6742bf0-b980-449f-bedc-b1ed6545399c",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "992908d9-68c3-4f35-adae-219e93e73915"
        },
        "item": {
          "id": "430cc82f-c3c4-496d-82e4-ab8f95e6d16c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6d98e658-aa02-49dc-afbb-afe6b99b0591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e01008-d7e3-4625-8ae6-b850918a8564",
        "cursor": {
          "ref": "b69a82f1-fd6e-412d-92cf-5b0db8f54e89",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "161458ba-70de-489b-b027-16f64f37f46c"
        },
        "item": {
          "id": "23e01008-d7e3-4625-8ae6-b850918a8564",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "081ded17-412a-4e97-acd3-399b5ff705f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b24373f-fadc-40cf-93d0-0cc9cdada5ac",
        "cursor": {
          "ref": "e0777ff0-7acb-4bee-8bd4-5a29d8350eab",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7f8e1bfe-f0b1-47d4-82d3-72d07224746a"
        },
        "item": {
          "id": "8b24373f-fadc-40cf-93d0-0cc9cdada5ac",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b4ec15ab-e5b2-4bf9-bf5f-5c0bf1230ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37e2d42-655d-4177-aa5b-918ea825fe8e",
        "cursor": {
          "ref": "29fadfca-0354-4872-a3bd-f366e9d37c68",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "65efd06c-278c-463c-b301-0386be2e6442"
        },
        "item": {
          "id": "e37e2d42-655d-4177-aa5b-918ea825fe8e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8709fe16-61b9-41f4-b558-c2062f17cc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34759800-de46-4441-b123-5cfa0cc36e5a",
        "cursor": {
          "ref": "e8f16e53-d577-466f-b720-26b93e4af74a",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0328198f-84db-4c12-afaa-73d657f0a925"
        },
        "item": {
          "id": "34759800-de46-4441-b123-5cfa0cc36e5a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "268676ef-a52a-419a-aa15-d7cefde2dd05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce142e01-2f2f-4ff5-9669-9348096269ce",
        "cursor": {
          "ref": "07d1cd6f-ef05-40db-9df2-65ba9bf6ba78",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ab3f9d37-9611-419c-a5c2-8cdbc73149e3"
        },
        "item": {
          "id": "ce142e01-2f2f-4ff5-9669-9348096269ce",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c2fe452d-7c99-4d55-a224-6fd30b6bc6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1b8599-643a-4e33-b845-6dea9ec7b3e2",
        "cursor": {
          "ref": "678d429b-45b5-4038-b051-43970f05a18c",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bd8f46e0-509e-4948-823b-080200d31f38"
        },
        "item": {
          "id": "ab1b8599-643a-4e33-b845-6dea9ec7b3e2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7bfb30fc-6ead-4824-b9b4-6ee949170bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128cdf0b-5c07-4fd1-a1d5-e607ecf2d54f",
        "cursor": {
          "ref": "5793ebef-b59c-4546-a349-6d3a2128cfdf",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "53f4f2ec-49c4-4a2d-8846-34ada66c25d6"
        },
        "item": {
          "id": "128cdf0b-5c07-4fd1-a1d5-e607ecf2d54f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "acbeed36-85a1-4645-914f-435facc799ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d5ec0b-f7ca-445a-b204-51a9f828ab21",
        "cursor": {
          "ref": "41fe2513-58e2-4f01-b16c-ace60be61696",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4d4a92e1-8dd0-45fe-ad89-4178aeae6b49"
        },
        "item": {
          "id": "08d5ec0b-f7ca-445a-b204-51a9f828ab21",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "044f4f01-fac6-4113-b00a-e862cf337e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 375,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6507e92-3004-46ae-9ee5-eb00479123a8",
        "cursor": {
          "ref": "de52f430-fcea-4b7d-abad-4f87a6c6b7ed",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "32d48e56-c44b-4c55-a8af-007dbd51c67f"
        },
        "item": {
          "id": "d6507e92-3004-46ae-9ee5-eb00479123a8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "063e4860-4082-4f1f-a5c0-83bb79001a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51929480-f878-4f31-9f8c-cb3dde99778f",
        "cursor": {
          "ref": "eadffa43-1138-4e1a-a808-a478a980bcd0",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ca02af06-4918-436e-9644-26ee97321a14"
        },
        "item": {
          "id": "51929480-f878-4f31-9f8c-cb3dde99778f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9f08942a-c6c6-4d19-ae34-8ab568d5087d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef3d2a9-bac5-4e18-a911-341e2a31c1d4",
        "cursor": {
          "ref": "c94bc6c7-2f73-4157-9662-a30ffefaf35c",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8b5565cb-bd96-4767-aef1-def24b1ba86c"
        },
        "item": {
          "id": "fef3d2a9-bac5-4e18-a911-341e2a31c1d4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e9efdf02-aa27-4372-bca0-c37c3833e1d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01993b23-f9aa-4f87-a130-ca539d62bf66",
        "cursor": {
          "ref": "01dbbdf7-9755-4dcf-8f8b-f86b1fc9767a",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2d45ac1e-6020-416a-b502-8a77edef62e7"
        },
        "item": {
          "id": "01993b23-f9aa-4f87-a130-ca539d62bf66",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "33829c1c-19af-4abd-951f-8317be1d3f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c50ec8f-c4ca-4d70-a52e-a72c295a1c2d",
        "cursor": {
          "ref": "041c7213-01be-41e7-8a72-8bc1dace4ce7",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "537401e8-50ad-41d8-b251-9801ba8d3214"
        },
        "item": {
          "id": "3c50ec8f-c4ca-4d70-a52e-a72c295a1c2d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "eb700d07-5075-4c78-ac54-9fe0ba292fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10964cb8-60d2-431a-bcd6-436ad0789cb6",
        "cursor": {
          "ref": "25075930-03d1-44bd-bcf7-c06d65bcadc5",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3d40192d-eab7-4fe5-b8a3-5ce2cd140bdb"
        },
        "item": {
          "id": "10964cb8-60d2-431a-bcd6-436ad0789cb6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "49bd9c59-1c21-493a-9bc7-ba4abe1364e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186875f3-4f29-475e-a405-5cc0292225e0",
        "cursor": {
          "ref": "fc1eb9ce-8ca4-4a02-bf20-cdcade82dddd",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bf0da791-7d2d-4bd2-96cb-d9c80ab2048a"
        },
        "item": {
          "id": "186875f3-4f29-475e-a405-5cc0292225e0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "33e302d5-b27f-4be3-8ac1-2de2c1e812e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42f611a-12a4-4180-a9ed-781cb36de4e2",
        "cursor": {
          "ref": "706622e9-f4eb-4feb-bb85-05c20da069e0",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4c95a4f2-efc7-4b35-9ad5-c918b9a32ee9"
        },
        "item": {
          "id": "c42f611a-12a4-4180-a9ed-781cb36de4e2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9c7e3fd0-3612-4002-b514-909d46b271c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b548d1-e1e4-4645-961d-507566ed8160",
        "cursor": {
          "ref": "9a1d3216-3607-455d-aa54-98385eed9959",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "886a77f0-5701-4825-899e-eab5a4fea506"
        },
        "item": {
          "id": "06b548d1-e1e4-4645-961d-507566ed8160",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5b60bc97-10f0-486c-b1f2-bd4e9fd30106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45f5015-fa6a-464a-b54f-49ec8b0f9425",
        "cursor": {
          "ref": "076579a6-8fdd-4624-9069-dab8690f4340",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "78eb9ee0-6a5d-480c-a604-cf77c2bfc7ee"
        },
        "item": {
          "id": "a45f5015-fa6a-464a-b54f-49ec8b0f9425",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e52d9703-860c-46b3-b2ab-1fc61091c1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102d2428-40e7-4f36-a435-9fec1a27d077",
        "cursor": {
          "ref": "a06e29e7-687d-4ba9-8834-88d4d6282ec2",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "577d2aa2-e5d1-428d-8d49-fcb95f651065"
        },
        "item": {
          "id": "102d2428-40e7-4f36-a435-9fec1a27d077",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b0a8180d-402d-4c32-aa18-86e23c81112e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddd8bf3-3a3e-429a-b2da-8d5ec12664bd",
        "cursor": {
          "ref": "3c6833c3-72a8-4668-90f8-e232001e0db0",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "734af1c4-0fc0-4344-a8fd-a922296d750b"
        },
        "item": {
          "id": "7ddd8bf3-3a3e-429a-b2da-8d5ec12664bd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "baae74e2-7ab9-48b2-a508-f53ce9857df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce273a5-a321-4ba5-807f-f306ef569a1a",
        "cursor": {
          "ref": "a3a6f6ea-5488-4c37-a5af-a908b70cf3aa",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2abaabd3-2b03-48af-8544-14685f07704f"
        },
        "item": {
          "id": "3ce273a5-a321-4ba5-807f-f306ef569a1a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "925997db-19a3-423f-9cd1-3ce8457f811e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1784552e-48e8-446b-ad36-8921a692cd55",
        "cursor": {
          "ref": "aafb645e-b339-44ce-a986-2e9eb6e5987a",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a07eed56-6f5d-4bbf-bf09-39df594ebaa2"
        },
        "item": {
          "id": "1784552e-48e8-446b-ad36-8921a692cd55",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ae6a4459-6f67-4c8e-b491-449af3d85e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 362,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7097de6e-277b-4cd1-8de7-a65d9a353312",
        "cursor": {
          "ref": "59558907-eebb-41a5-9418-d94b0a30d654",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "92b20b80-d31b-49c5-8103-0d6a9a76f1fe"
        },
        "item": {
          "id": "7097de6e-277b-4cd1-8de7-a65d9a353312",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7de07ceb-c16d-4a27-b594-b2de2772eef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33d495d-947a-4ff5-b7e5-381756010db6",
        "cursor": {
          "ref": "fff378d7-d403-458a-92fa-3fa66149028f",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "db628b25-18f1-4273-b9e4-928f6e8c753c"
        },
        "item": {
          "id": "f33d495d-947a-4ff5-b7e5-381756010db6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "14eb17e5-b58e-4b49-a36c-f41d4d27d76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e6194e7-9514-4e5a-8769-e3d852caaa31",
        "cursor": {
          "ref": "a81d1f8d-8276-4f79-a84b-0714f4ca9dc1",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "859e08b5-a463-41e0-92f8-4c26e04bf983"
        },
        "item": {
          "id": "5e6194e7-9514-4e5a-8769-e3d852caaa31",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "46887b6c-303b-4261-a8c9-09365ea0cba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238bf9e2-1f6d-4922-b40e-71159b54e5d0",
        "cursor": {
          "ref": "284d7877-bb94-4ba4-861f-56001319c8a3",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "30299f0f-b8d7-4ef8-bd7d-f5f59a98e7fb"
        },
        "item": {
          "id": "238bf9e2-1f6d-4922-b40e-71159b54e5d0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bd23084e-8c0d-462d-96c4-bfc50a01cd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9abca30b-05e3-47c9-ac87-53da5ca0c1b0",
        "cursor": {
          "ref": "d57154e0-6902-4f21-816e-5e81e72c2b61",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a8b28389-61f9-4997-83e7-1c979ee50529"
        },
        "item": {
          "id": "9abca30b-05e3-47c9-ac87-53da5ca0c1b0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "01c00e60-1bfd-4a84-81b3-b2b8900f0165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc1f340-6994-497f-94e3-ebc9bf95e402",
        "cursor": {
          "ref": "ba2b6aa8-964b-4d4f-80b2-005190d66026",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dca3d8a2-d322-4c3d-9bc7-6453fa1ff21e"
        },
        "item": {
          "id": "cfc1f340-6994-497f-94e3-ebc9bf95e402",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3f388e37-b4af-4bed-b76a-959b3cf6b9e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2f8b4d-8b05-4bfa-91ce-c0035c47fe7a",
        "cursor": {
          "ref": "ec591650-954b-4bb9-b723-be2f750c7ad7",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e8825c3e-fb74-416e-9fef-80dea653dcbf"
        },
        "item": {
          "id": "4d2f8b4d-8b05-4bfa-91ce-c0035c47fe7a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7c17d2d2-b639-4f46-9318-f463d3143286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542a330b-ae9f-4821-8936-574beccd070e",
        "cursor": {
          "ref": "d36e3432-9140-4c3d-8246-703ef89554d8",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e2577f8e-1793-4274-ba3d-11139cf276aa"
        },
        "item": {
          "id": "542a330b-ae9f-4821-8936-574beccd070e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "77fc4dbc-22a0-4933-b5c7-6fa1e3a8f344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f117d6e4-49e2-47d0-a3e2-eefdb33eccb0",
        "cursor": {
          "ref": "6c7b52a7-95b1-4850-879a-d10745de1622",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5349c3a1-4c07-4ee3-b823-3dc7a8cb5be1"
        },
        "item": {
          "id": "f117d6e4-49e2-47d0-a3e2-eefdb33eccb0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ed9137e1-8c1a-468e-86c1-0b708969249e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c9caa8-b9a5-4bdc-85bb-92146ae7a652",
        "cursor": {
          "ref": "0ecc82c7-c0f9-47c8-a791-882569f6b08d",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "90f1911e-1d97-4570-9570-f4296de89453"
        },
        "item": {
          "id": "72c9caa8-b9a5-4bdc-85bb-92146ae7a652",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5fa5a67f-7b46-4fe9-8472-3db9692ac73d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49550d4e-303d-42b0-b1cb-3f1ca51ce745",
        "cursor": {
          "ref": "8397beea-d485-41bc-b1dd-92c504010668",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6dc46501-bac0-4f13-aa62-04c5453c4629"
        },
        "item": {
          "id": "49550d4e-303d-42b0-b1cb-3f1ca51ce745",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7db12467-401f-4d06-b5cc-f91252be89e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2e052b-5e68-404b-bb1e-3daf6f70ee7c",
        "cursor": {
          "ref": "3218e594-7c45-4a4b-ac31-cb73b278abc2",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b6559709-1a95-4fe2-a4c5-cee99857adb0"
        },
        "item": {
          "id": "6a2e052b-5e68-404b-bb1e-3daf6f70ee7c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1af800ba-d42a-4ff7-873e-e6d7ff08bd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55218853-226d-4a71-ad87-75334192c925",
        "cursor": {
          "ref": "5ad08f76-c176-4b39-b0fa-991f367f461a",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f6588a9e-415f-417e-8f32-a1287c289396"
        },
        "item": {
          "id": "55218853-226d-4a71-ad87-75334192c925",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bf90c480-bd73-43b1-af31-df11618ffae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9160e0d-96df-4038-bc89-f09f344e13c7",
        "cursor": {
          "ref": "d3e682e6-5d1e-4f72-8f02-c8a3acb50cc7",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "aee25010-9917-4866-a66c-265c709799ee"
        },
        "item": {
          "id": "e9160e0d-96df-4038-bc89-f09f344e13c7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1d607ba8-06e9-4242-92a5-acb92607de53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040d6221-717a-43d3-adac-427f2ac87b79",
        "cursor": {
          "ref": "682c56e6-a9a1-4b6d-a5fe-286c140e3c47",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "eaedb2d5-549f-427c-95f2-4c9d2d4984ac"
        },
        "item": {
          "id": "040d6221-717a-43d3-adac-427f2ac87b79",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cd030536-8189-4144-a948-3301a0bed346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5577c88e-1445-4ac8-9633-50b9ad30996c",
        "cursor": {
          "ref": "03ac0f8b-d016-42eb-a965-15ae99d77474",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "da42a80b-227e-43c2-8b98-48497a508beb"
        },
        "item": {
          "id": "5577c88e-1445-4ac8-9633-50b9ad30996c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fc13efcd-af43-45e2-9879-f198508fa99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6205edf3-ee54-47d7-bde8-7c9c3022d104",
        "cursor": {
          "ref": "4db5c5de-f2b9-47fc-9a4a-b8fb0b9ac57f",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4330a89c-52cd-433b-8de2-2e1c711b42dc"
        },
        "item": {
          "id": "6205edf3-ee54-47d7-bde8-7c9c3022d104",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cac10d03-1cd2-427c-b121-2774c9e711f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccfd709-b40d-43d1-8a90-5e390bba8182",
        "cursor": {
          "ref": "6e5a3eb3-d0a4-49b7-a23e-8a63e459c288",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "36035696-962c-4845-825d-a5eb21a5ade3"
        },
        "item": {
          "id": "bccfd709-b40d-43d1-8a90-5e390bba8182",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b56f4a59-0470-4316-bfbf-eb73aeefa666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32f15dc-3bdd-4f53-82d9-272f073b98ec",
        "cursor": {
          "ref": "21481ad0-351b-40d0-82b8-efb87a0db611",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "50b1b6ff-ebd6-46e2-8797-47dcd3dff35a"
        },
        "item": {
          "id": "c32f15dc-3bdd-4f53-82d9-272f073b98ec",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8df3855b-ced6-4031-98be-57c085ab60cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a755d05f-4656-40e9-a329-10c6d7334c33",
        "cursor": {
          "ref": "e40183b0-dab5-4603-8ada-ecc4343361f7",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "62d0fcb6-7390-4b35-ae37-72f13cde719a"
        },
        "item": {
          "id": "a755d05f-4656-40e9-a329-10c6d7334c33",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "14054214-262c-41dc-8326-434f1a240292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e0b671-6fdc-48e1-9e71-df9a40d21c8b",
        "cursor": {
          "ref": "8f06757e-00d5-497a-8658-5e5468320d66",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f1a9d493-5b00-4aa6-b01f-55ba609d8420"
        },
        "item": {
          "id": "54e0b671-6fdc-48e1-9e71-df9a40d21c8b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7a8487d9-d3b7-4c6c-ba0b-9bd9ca56af97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b9eb63-d44b-4698-93d5-f5f8f33cd39c",
        "cursor": {
          "ref": "97b10309-ebd5-4bb2-a66d-5529a7247180",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "baa05118-b1d3-4633-ac69-88253a06631f"
        },
        "item": {
          "id": "73b9eb63-d44b-4698-93d5-f5f8f33cd39c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "088838b9-9596-4ae6-a177-a72055cc6172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce72078-3325-4f45-bdf6-e96f060ce82e",
        "cursor": {
          "ref": "4d0e4485-8e3a-4e61-b845-66980e5f86fa",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "146e8e87-4b24-4a08-b6ab-54c13bca4a30"
        },
        "item": {
          "id": "1ce72078-3325-4f45-bdf6-e96f060ce82e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ccba2f5a-bc18-411a-968b-fa9febdcc72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f45d1d6-ff81-4a51-823e-41fe0c6bc152",
        "cursor": {
          "ref": "02d6be62-d3c8-4977-851d-b929b847e504",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7a193386-6a01-4e81-ad92-f9832036d116"
        },
        "item": {
          "id": "5f45d1d6-ff81-4a51-823e-41fe0c6bc152",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6f98ba36-fc66-435e-81bb-0ed6129e4ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3f321d-afd2-425f-82e2-cb6594c0347b",
        "cursor": {
          "ref": "d08d69cc-773c-4be4-804d-abbbb2637788",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ea110212-ea08-4de0-a8d4-7fb12f7d304d"
        },
        "item": {
          "id": "6b3f321d-afd2-425f-82e2-cb6594c0347b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "751f5ae4-aa0a-41ee-bbc9-176bbdb12adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30adc54-6670-4f53-b2b4-2a56b4b0b80b",
        "cursor": {
          "ref": "5376ee92-40a7-4ad9-a378-f86699294f19",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "c9de5ef5-3141-493a-b4f1-50e7ef70ddf8"
        },
        "item": {
          "id": "e30adc54-6670-4f53-b2b4-2a56b4b0b80b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d98fbe4b-3b5e-4948-985f-9da0955d6f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0232bed4-7626-457e-9074-3beea170365a",
        "cursor": {
          "ref": "80d29f3a-39b8-49c0-ba1e-812c92ca32c3",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d40e1cdc-d4e3-4e58-8a63-3c23d4d6c184"
        },
        "item": {
          "id": "0232bed4-7626-457e-9074-3beea170365a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bbb67851-d243-435a-97ac-8e90ce5b6ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295f82c9-11c8-47a8-be64-cb917c1e4ecc",
        "cursor": {
          "ref": "2098b1b2-df1c-4963-a979-132fad551b2d",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "aa40e03c-1931-493c-b451-044d7b3949ec"
        },
        "item": {
          "id": "295f82c9-11c8-47a8-be64-cb917c1e4ecc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "98e63380-08c5-400e-ba55-207f73067c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfdcac7-2803-4e2b-8544-14975ec899b7",
        "cursor": {
          "ref": "a5dc3ae0-48d4-4a95-ae2c-8f4c8e049f07",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "98921abe-5ebb-4597-80db-d4530fedf0cb"
        },
        "item": {
          "id": "ccfdcac7-2803-4e2b-8544-14975ec899b7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fc8113a8-741e-4b2f-b6fd-95a9fcd7ce58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19644b7a-00aa-45f3-a400-d73585190b11",
        "cursor": {
          "ref": "791cf341-acfd-48dc-b867-e4dd1e8af602",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "cddf161e-7d29-40fa-a776-f93d238a4caa"
        },
        "item": {
          "id": "19644b7a-00aa-45f3-a400-d73585190b11",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e5be1e34-ce13-46f5-88f5-d9eacccc47fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08ad758-9c23-4fed-bed5-5e41c0bd6930",
        "cursor": {
          "ref": "920573e4-159c-436e-abf0-ab8a34f6b0b8",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "a2f7052b-dfcf-4cb9-bdc8-f57d6735cf0b"
        },
        "item": {
          "id": "a08ad758-9c23-4fed-bed5-5e41c0bd6930",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "690ac018-8dd8-4289-b7a0-6336443eb31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b2301d-addd-4dcf-a661-73ded8e61b71",
        "cursor": {
          "ref": "03f846f8-b5cd-4997-a637-7a550af1a800",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "052ee1d0-181e-4df8-9683-17bf425c60c0"
        },
        "item": {
          "id": "66b2301d-addd-4dcf-a661-73ded8e61b71",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1947b496-bc62-43c9-bb8c-2224b7a6cd3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75278ac9-77db-4005-b4a8-c8f9932147ad",
        "cursor": {
          "ref": "7aba923c-e72a-479a-a483-67216829856b",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b448d536-e7b4-41de-a4c9-f9aadc8a8760"
        },
        "item": {
          "id": "75278ac9-77db-4005-b4a8-c8f9932147ad",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ea7c0ed4-798a-4f07-aad8-9f113424c6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26bbec49-1769-42dc-80ee-268aa6025ae8",
        "cursor": {
          "ref": "aeac4368-8091-4618-abb5-d625a0d695d5",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "81ff3be2-04de-46f3-a36f-1a85ebbbe72f"
        },
        "item": {
          "id": "26bbec49-1769-42dc-80ee-268aa6025ae8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "844089e4-765b-4d0f-aa78-d0d297e2e60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab690bed-6833-40b7-9ab6-8e31c944f075",
        "cursor": {
          "ref": "2feeef3e-9c68-49c0-b91e-fc7ea51d9172",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a6b416a0-ee51-4616-8456-5b15fb98e363"
        },
        "item": {
          "id": "ab690bed-6833-40b7-9ab6-8e31c944f075",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1e09e4ea-30fd-43df-b6ee-b89f9ba00cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f9fa87-6f61-4d56-a5eb-b15f5e29eac8",
        "cursor": {
          "ref": "c2d34fb6-3cd6-411d-bfd9-6b85bdc3729f",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "44aca2da-ade5-4492-a4fb-06e3305f4196"
        },
        "item": {
          "id": "40f9fa87-6f61-4d56-a5eb-b15f5e29eac8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "323351c9-9de7-48f4-9307-4951507468e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0866bf3c-813d-4b04-aca8-f2b64d96df9d",
        "cursor": {
          "ref": "b0cf2b67-4785-45e6-943a-f2839ef0e8bd",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1e2b6afd-a34c-4c44-8cfd-bb00c6d48d8d"
        },
        "item": {
          "id": "0866bf3c-813d-4b04-aca8-f2b64d96df9d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "19c7ba5a-49cd-4764-aedc-2623862ad0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f67528c-3723-4fac-80eb-af37b54e7598",
        "cursor": {
          "ref": "499805f2-7599-4861-9225-acda6dcf2b82",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7ecfb612-452e-4796-83cc-f98fca1ec381"
        },
        "item": {
          "id": "8f67528c-3723-4fac-80eb-af37b54e7598",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "90eb4363-d501-42ad-a5d1-b569cd9cede1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6760bab-35d2-4ea9-b753-bd86664773b9",
        "cursor": {
          "ref": "00cc951e-64a9-49c5-b81f-8c3776f7bb60",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6084eac6-fa28-495a-b79b-c4988482befa"
        },
        "item": {
          "id": "e6760bab-35d2-4ea9-b753-bd86664773b9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b6dc4f18-32e7-4ac9-af8a-90aa0a9da0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70f8a2b-da50-48ee-b8ed-f8456818b028",
        "cursor": {
          "ref": "2ced81fe-a96c-4012-9a3d-105c983b3f09",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "95b4d0ac-b275-42a0-912b-643ae9e5a2fb"
        },
        "item": {
          "id": "c70f8a2b-da50-48ee-b8ed-f8456818b028",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0ed1e895-c32d-48f6-a339-9bf1ba49df70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf19400e-0e6a-46f0-9a09-5cef0f6db560",
        "cursor": {
          "ref": "70d92bb7-900f-4b51-924b-55171d130b25",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3d4c5d4c-a70e-4e52-8150-761f0189d015"
        },
        "item": {
          "id": "bf19400e-0e6a-46f0-9a09-5cef0f6db560",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "39bbc3f0-dc4b-4fde-bcfa-53329454e7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b0bca8-c84a-466b-9dac-014016746487",
        "cursor": {
          "ref": "6f26fb83-ffe4-4e41-8407-c4be9420ed38",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "dfff264b-0ecd-4274-bc17-be97ed615455"
        },
        "item": {
          "id": "c3b0bca8-c84a-466b-9dac-014016746487",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3cba5810-9b51-4ed4-a712-c3f297dd0164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db92b3b9-7170-49ad-b869-e6dee9b0d07b",
        "cursor": {
          "ref": "2648b328-d38b-4e21-a69c-629dc4ea2381",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "af642d34-400b-4d95-9f12-ecba63b3b855"
        },
        "item": {
          "id": "db92b3b9-7170-49ad-b869-e6dee9b0d07b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1e896fb5-0593-4cbd-a403-874e103f9a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f731e9-c352-4fab-a32d-a28afdf78c9b",
        "cursor": {
          "ref": "cb15a846-f5c6-442b-aaef-225d029c6204",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "3fa845f9-6e9f-462c-b9e3-55a46cf80bfc"
        },
        "item": {
          "id": "51f731e9-c352-4fab-a32d-a28afdf78c9b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bd5310b5-0bb3-479c-a089-b9068a688d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97dc5f22-69be-41fe-939e-2c7e55f20326",
        "cursor": {
          "ref": "a7df030b-42d2-45d4-b1fb-e24075e6fac0",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6d9b3d98-6927-42b9-97e1-a776507326a2"
        },
        "item": {
          "id": "97dc5f22-69be-41fe-939e-2c7e55f20326",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9cdeeac0-04e2-4e41-8c04-4eaf0b43b640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8e6be1-6798-4595-813a-f9ba6fdc578f",
        "cursor": {
          "ref": "49960091-3063-4255-8216-d85897521667",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "55b9c7aa-b287-4eb2-bfa1-9731ec442d91"
        },
        "item": {
          "id": "3f8e6be1-6798-4595-813a-f9ba6fdc578f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "10e10b13-e9c1-4deb-a877-996ae16de982",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "2df450fe-ee59-4169-be03-2758fc0bd822",
        "cursor": {
          "ref": "794d4cd5-dacb-476a-baee-7648fbeb699b",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0b694d5f-47e9-49a5-a54d-fa72c2157f9f"
        },
        "item": {
          "id": "2df450fe-ee59-4169-be03-2758fc0bd822",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f17a33fc-7f0c-4c6c-a7ca-4a4fe2b5aa99",
          "status": "OK",
          "code": 200,
          "responseTime": 457,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bb3f10-bb06-44f3-b1ff-6523d2b26a58",
        "cursor": {
          "ref": "5173e2ae-5d24-4a4c-9fd2-515412421126",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "92860754-9175-443b-bc2e-e7cd94a38fca"
        },
        "item": {
          "id": "88bb3f10-bb06-44f3-b1ff-6523d2b26a58",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6213faac-e2b3-4cee-97a2-a5d9043a94e5",
          "status": "OK",
          "code": 200,
          "responseTime": 2984,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61c032f-5445-43c4-8893-80b245db1c66",
        "cursor": {
          "ref": "8012c6c9-b684-471f-96ef-4265c3168e74",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7154c5e0-ff81-4199-a5ef-7b55f1dcfc44"
        },
        "item": {
          "id": "a61c032f-5445-43c4-8893-80b245db1c66",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a78c8642-ff4a-4160-a2c7-8de7d52c5cc2",
          "status": "OK",
          "code": 200,
          "responseTime": 2620,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a4649d-4464-4c4f-9504-73beb2b7a569",
        "cursor": {
          "ref": "467cb23d-d266-4e22-9ed0-e935d8f6aa18",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "579ee8fc-0484-4dbb-88d6-d67e55aead9c"
        },
        "item": {
          "id": "62a4649d-4464-4c4f-9504-73beb2b7a569",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "249e3b17-ed50-4561-96fa-73fca674e190",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "62a4649d-4464-4c4f-9504-73beb2b7a569",
        "cursor": {
          "ref": "467cb23d-d266-4e22-9ed0-e935d8f6aa18",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "579ee8fc-0484-4dbb-88d6-d67e55aead9c"
        },
        "item": {
          "id": "62a4649d-4464-4c4f-9504-73beb2b7a569",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "249e3b17-ed50-4561-96fa-73fca674e190",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "c4778e46-cba5-48dc-b53e-35b4975f2d5d",
        "cursor": {
          "ref": "593ef423-dec6-4ea2-b656-bf6ad8aeb643",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "33c05dc1-79de-44df-9f46-884d3ab954aa"
        },
        "item": {
          "id": "c4778e46-cba5-48dc-b53e-35b4975f2d5d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5b2f0a6f-937f-4486-8a29-4679b883e032",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "f280b19d-f0ea-44c3-86ed-919e23d198b5",
        "cursor": {
          "ref": "f9619474-0d51-415e-9618-1091d9d7b712",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "8158a75c-1c84-4b1c-9346-f018d92fb455"
        },
        "item": {
          "id": "f280b19d-f0ea-44c3-86ed-919e23d198b5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ebafbf99-3ae7-414e-9a0f-c5d9ff8d9dd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}